
stm32c0_uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a88  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000234  08003b48  08003b48  00004b48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d7c  08003d7c  00005060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08003d7c  08003d7c  00005060  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08003d7c  08003d7c  00005060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d7c  08003d7c  00004d7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003d80  08003d80  00004d80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08003d84  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000324  20000060  08003de4  00005060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000384  08003de4  00005384  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00005060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019403  00000000  00000000  00005088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003628  00000000  00000000  0001e48b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0000bbd0  00000000  00000000  00021ab3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001010  00000000  00000000  0002d688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d7b  00000000  00000000  0002e698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017f51  00000000  00000000  0002f413  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d1e1  00000000  00000000  00047364  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008f0e5  00000000  00000000  00064545  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000f362a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002e98  00000000  00000000  000f3670  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004a  00000000  00000000  000f6508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000060 	.word	0x20000060
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003b30 	.word	0x08003b30

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000064 	.word	0x20000064
 8000104:	08003b30 	.word	0x08003b30

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	@ 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	@ 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			@ (mov r8, r8)

08000408 <__aeabi_fdiv>:
 8000408:	b5f0      	push	{r4, r5, r6, r7, lr}
 800040a:	4646      	mov	r6, r8
 800040c:	464f      	mov	r7, r9
 800040e:	46d6      	mov	lr, sl
 8000410:	0245      	lsls	r5, r0, #9
 8000412:	b5c0      	push	{r6, r7, lr}
 8000414:	0fc3      	lsrs	r3, r0, #31
 8000416:	0047      	lsls	r7, r0, #1
 8000418:	4698      	mov	r8, r3
 800041a:	1c0e      	adds	r6, r1, #0
 800041c:	0a6d      	lsrs	r5, r5, #9
 800041e:	0e3f      	lsrs	r7, r7, #24
 8000420:	d05b      	beq.n	80004da <__aeabi_fdiv+0xd2>
 8000422:	2fff      	cmp	r7, #255	@ 0xff
 8000424:	d021      	beq.n	800046a <__aeabi_fdiv+0x62>
 8000426:	2380      	movs	r3, #128	@ 0x80
 8000428:	00ed      	lsls	r5, r5, #3
 800042a:	04db      	lsls	r3, r3, #19
 800042c:	431d      	orrs	r5, r3
 800042e:	2300      	movs	r3, #0
 8000430:	4699      	mov	r9, r3
 8000432:	469a      	mov	sl, r3
 8000434:	3f7f      	subs	r7, #127	@ 0x7f
 8000436:	0274      	lsls	r4, r6, #9
 8000438:	0073      	lsls	r3, r6, #1
 800043a:	0a64      	lsrs	r4, r4, #9
 800043c:	0e1b      	lsrs	r3, r3, #24
 800043e:	0ff6      	lsrs	r6, r6, #31
 8000440:	2b00      	cmp	r3, #0
 8000442:	d020      	beq.n	8000486 <__aeabi_fdiv+0x7e>
 8000444:	2bff      	cmp	r3, #255	@ 0xff
 8000446:	d043      	beq.n	80004d0 <__aeabi_fdiv+0xc8>
 8000448:	2280      	movs	r2, #128	@ 0x80
 800044a:	2000      	movs	r0, #0
 800044c:	00e4      	lsls	r4, r4, #3
 800044e:	04d2      	lsls	r2, r2, #19
 8000450:	4314      	orrs	r4, r2
 8000452:	3b7f      	subs	r3, #127	@ 0x7f
 8000454:	4642      	mov	r2, r8
 8000456:	1aff      	subs	r7, r7, r3
 8000458:	464b      	mov	r3, r9
 800045a:	4072      	eors	r2, r6
 800045c:	2b0f      	cmp	r3, #15
 800045e:	d900      	bls.n	8000462 <__aeabi_fdiv+0x5a>
 8000460:	e09d      	b.n	800059e <__aeabi_fdiv+0x196>
 8000462:	4971      	ldr	r1, [pc, #452]	@ (8000628 <__aeabi_fdiv+0x220>)
 8000464:	009b      	lsls	r3, r3, #2
 8000466:	58cb      	ldr	r3, [r1, r3]
 8000468:	469f      	mov	pc, r3
 800046a:	2d00      	cmp	r5, #0
 800046c:	d15a      	bne.n	8000524 <__aeabi_fdiv+0x11c>
 800046e:	2308      	movs	r3, #8
 8000470:	4699      	mov	r9, r3
 8000472:	3b06      	subs	r3, #6
 8000474:	0274      	lsls	r4, r6, #9
 8000476:	469a      	mov	sl, r3
 8000478:	0073      	lsls	r3, r6, #1
 800047a:	27ff      	movs	r7, #255	@ 0xff
 800047c:	0a64      	lsrs	r4, r4, #9
 800047e:	0e1b      	lsrs	r3, r3, #24
 8000480:	0ff6      	lsrs	r6, r6, #31
 8000482:	2b00      	cmp	r3, #0
 8000484:	d1de      	bne.n	8000444 <__aeabi_fdiv+0x3c>
 8000486:	2c00      	cmp	r4, #0
 8000488:	d13b      	bne.n	8000502 <__aeabi_fdiv+0xfa>
 800048a:	2301      	movs	r3, #1
 800048c:	4642      	mov	r2, r8
 800048e:	4649      	mov	r1, r9
 8000490:	4072      	eors	r2, r6
 8000492:	4319      	orrs	r1, r3
 8000494:	290e      	cmp	r1, #14
 8000496:	d818      	bhi.n	80004ca <__aeabi_fdiv+0xc2>
 8000498:	4864      	ldr	r0, [pc, #400]	@ (800062c <__aeabi_fdiv+0x224>)
 800049a:	0089      	lsls	r1, r1, #2
 800049c:	5841      	ldr	r1, [r0, r1]
 800049e:	468f      	mov	pc, r1
 80004a0:	4653      	mov	r3, sl
 80004a2:	2b02      	cmp	r3, #2
 80004a4:	d100      	bne.n	80004a8 <__aeabi_fdiv+0xa0>
 80004a6:	e0b8      	b.n	800061a <__aeabi_fdiv+0x212>
 80004a8:	2b03      	cmp	r3, #3
 80004aa:	d06e      	beq.n	800058a <__aeabi_fdiv+0x182>
 80004ac:	4642      	mov	r2, r8
 80004ae:	002c      	movs	r4, r5
 80004b0:	2b01      	cmp	r3, #1
 80004b2:	d140      	bne.n	8000536 <__aeabi_fdiv+0x12e>
 80004b4:	2000      	movs	r0, #0
 80004b6:	2400      	movs	r4, #0
 80004b8:	05c0      	lsls	r0, r0, #23
 80004ba:	4320      	orrs	r0, r4
 80004bc:	07d2      	lsls	r2, r2, #31
 80004be:	4310      	orrs	r0, r2
 80004c0:	bce0      	pop	{r5, r6, r7}
 80004c2:	46ba      	mov	sl, r7
 80004c4:	46b1      	mov	r9, r6
 80004c6:	46a8      	mov	r8, r5
 80004c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004ca:	20ff      	movs	r0, #255	@ 0xff
 80004cc:	2400      	movs	r4, #0
 80004ce:	e7f3      	b.n	80004b8 <__aeabi_fdiv+0xb0>
 80004d0:	2c00      	cmp	r4, #0
 80004d2:	d120      	bne.n	8000516 <__aeabi_fdiv+0x10e>
 80004d4:	2302      	movs	r3, #2
 80004d6:	3fff      	subs	r7, #255	@ 0xff
 80004d8:	e7d8      	b.n	800048c <__aeabi_fdiv+0x84>
 80004da:	2d00      	cmp	r5, #0
 80004dc:	d105      	bne.n	80004ea <__aeabi_fdiv+0xe2>
 80004de:	2304      	movs	r3, #4
 80004e0:	4699      	mov	r9, r3
 80004e2:	3b03      	subs	r3, #3
 80004e4:	2700      	movs	r7, #0
 80004e6:	469a      	mov	sl, r3
 80004e8:	e7a5      	b.n	8000436 <__aeabi_fdiv+0x2e>
 80004ea:	0028      	movs	r0, r5
 80004ec:	f000 f8e8 	bl	80006c0 <__clzsi2>
 80004f0:	2776      	movs	r7, #118	@ 0x76
 80004f2:	1f43      	subs	r3, r0, #5
 80004f4:	409d      	lsls	r5, r3
 80004f6:	2300      	movs	r3, #0
 80004f8:	427f      	negs	r7, r7
 80004fa:	4699      	mov	r9, r3
 80004fc:	469a      	mov	sl, r3
 80004fe:	1a3f      	subs	r7, r7, r0
 8000500:	e799      	b.n	8000436 <__aeabi_fdiv+0x2e>
 8000502:	0020      	movs	r0, r4
 8000504:	f000 f8dc 	bl	80006c0 <__clzsi2>
 8000508:	1f43      	subs	r3, r0, #5
 800050a:	409c      	lsls	r4, r3
 800050c:	2376      	movs	r3, #118	@ 0x76
 800050e:	425b      	negs	r3, r3
 8000510:	1a1b      	subs	r3, r3, r0
 8000512:	2000      	movs	r0, #0
 8000514:	e79e      	b.n	8000454 <__aeabi_fdiv+0x4c>
 8000516:	2303      	movs	r3, #3
 8000518:	464a      	mov	r2, r9
 800051a:	431a      	orrs	r2, r3
 800051c:	4691      	mov	r9, r2
 800051e:	2003      	movs	r0, #3
 8000520:	33fc      	adds	r3, #252	@ 0xfc
 8000522:	e797      	b.n	8000454 <__aeabi_fdiv+0x4c>
 8000524:	230c      	movs	r3, #12
 8000526:	4699      	mov	r9, r3
 8000528:	3b09      	subs	r3, #9
 800052a:	27ff      	movs	r7, #255	@ 0xff
 800052c:	469a      	mov	sl, r3
 800052e:	e782      	b.n	8000436 <__aeabi_fdiv+0x2e>
 8000530:	2803      	cmp	r0, #3
 8000532:	d02c      	beq.n	800058e <__aeabi_fdiv+0x186>
 8000534:	0032      	movs	r2, r6
 8000536:	0038      	movs	r0, r7
 8000538:	307f      	adds	r0, #127	@ 0x7f
 800053a:	2800      	cmp	r0, #0
 800053c:	dd47      	ble.n	80005ce <__aeabi_fdiv+0x1c6>
 800053e:	0763      	lsls	r3, r4, #29
 8000540:	d004      	beq.n	800054c <__aeabi_fdiv+0x144>
 8000542:	230f      	movs	r3, #15
 8000544:	4023      	ands	r3, r4
 8000546:	2b04      	cmp	r3, #4
 8000548:	d000      	beq.n	800054c <__aeabi_fdiv+0x144>
 800054a:	3404      	adds	r4, #4
 800054c:	0123      	lsls	r3, r4, #4
 800054e:	d503      	bpl.n	8000558 <__aeabi_fdiv+0x150>
 8000550:	0038      	movs	r0, r7
 8000552:	4b37      	ldr	r3, [pc, #220]	@ (8000630 <__aeabi_fdiv+0x228>)
 8000554:	3080      	adds	r0, #128	@ 0x80
 8000556:	401c      	ands	r4, r3
 8000558:	28fe      	cmp	r0, #254	@ 0xfe
 800055a:	dcb6      	bgt.n	80004ca <__aeabi_fdiv+0xc2>
 800055c:	01a4      	lsls	r4, r4, #6
 800055e:	0a64      	lsrs	r4, r4, #9
 8000560:	b2c0      	uxtb	r0, r0
 8000562:	e7a9      	b.n	80004b8 <__aeabi_fdiv+0xb0>
 8000564:	2480      	movs	r4, #128	@ 0x80
 8000566:	2200      	movs	r2, #0
 8000568:	20ff      	movs	r0, #255	@ 0xff
 800056a:	03e4      	lsls	r4, r4, #15
 800056c:	e7a4      	b.n	80004b8 <__aeabi_fdiv+0xb0>
 800056e:	2380      	movs	r3, #128	@ 0x80
 8000570:	03db      	lsls	r3, r3, #15
 8000572:	421d      	tst	r5, r3
 8000574:	d001      	beq.n	800057a <__aeabi_fdiv+0x172>
 8000576:	421c      	tst	r4, r3
 8000578:	d00b      	beq.n	8000592 <__aeabi_fdiv+0x18a>
 800057a:	2480      	movs	r4, #128	@ 0x80
 800057c:	03e4      	lsls	r4, r4, #15
 800057e:	432c      	orrs	r4, r5
 8000580:	0264      	lsls	r4, r4, #9
 8000582:	4642      	mov	r2, r8
 8000584:	20ff      	movs	r0, #255	@ 0xff
 8000586:	0a64      	lsrs	r4, r4, #9
 8000588:	e796      	b.n	80004b8 <__aeabi_fdiv+0xb0>
 800058a:	4646      	mov	r6, r8
 800058c:	002c      	movs	r4, r5
 800058e:	2380      	movs	r3, #128	@ 0x80
 8000590:	03db      	lsls	r3, r3, #15
 8000592:	431c      	orrs	r4, r3
 8000594:	0264      	lsls	r4, r4, #9
 8000596:	0032      	movs	r2, r6
 8000598:	20ff      	movs	r0, #255	@ 0xff
 800059a:	0a64      	lsrs	r4, r4, #9
 800059c:	e78c      	b.n	80004b8 <__aeabi_fdiv+0xb0>
 800059e:	016d      	lsls	r5, r5, #5
 80005a0:	0160      	lsls	r0, r4, #5
 80005a2:	4285      	cmp	r5, r0
 80005a4:	d22d      	bcs.n	8000602 <__aeabi_fdiv+0x1fa>
 80005a6:	231b      	movs	r3, #27
 80005a8:	2400      	movs	r4, #0
 80005aa:	3f01      	subs	r7, #1
 80005ac:	2601      	movs	r6, #1
 80005ae:	0029      	movs	r1, r5
 80005b0:	0064      	lsls	r4, r4, #1
 80005b2:	006d      	lsls	r5, r5, #1
 80005b4:	2900      	cmp	r1, #0
 80005b6:	db01      	blt.n	80005bc <__aeabi_fdiv+0x1b4>
 80005b8:	4285      	cmp	r5, r0
 80005ba:	d301      	bcc.n	80005c0 <__aeabi_fdiv+0x1b8>
 80005bc:	1a2d      	subs	r5, r5, r0
 80005be:	4334      	orrs	r4, r6
 80005c0:	3b01      	subs	r3, #1
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d1f3      	bne.n	80005ae <__aeabi_fdiv+0x1a6>
 80005c6:	1e6b      	subs	r3, r5, #1
 80005c8:	419d      	sbcs	r5, r3
 80005ca:	432c      	orrs	r4, r5
 80005cc:	e7b3      	b.n	8000536 <__aeabi_fdiv+0x12e>
 80005ce:	2301      	movs	r3, #1
 80005d0:	1a1b      	subs	r3, r3, r0
 80005d2:	2b1b      	cmp	r3, #27
 80005d4:	dd00      	ble.n	80005d8 <__aeabi_fdiv+0x1d0>
 80005d6:	e76d      	b.n	80004b4 <__aeabi_fdiv+0xac>
 80005d8:	0021      	movs	r1, r4
 80005da:	379e      	adds	r7, #158	@ 0x9e
 80005dc:	40d9      	lsrs	r1, r3
 80005de:	40bc      	lsls	r4, r7
 80005e0:	000b      	movs	r3, r1
 80005e2:	1e61      	subs	r1, r4, #1
 80005e4:	418c      	sbcs	r4, r1
 80005e6:	4323      	orrs	r3, r4
 80005e8:	0759      	lsls	r1, r3, #29
 80005ea:	d004      	beq.n	80005f6 <__aeabi_fdiv+0x1ee>
 80005ec:	210f      	movs	r1, #15
 80005ee:	4019      	ands	r1, r3
 80005f0:	2904      	cmp	r1, #4
 80005f2:	d000      	beq.n	80005f6 <__aeabi_fdiv+0x1ee>
 80005f4:	3304      	adds	r3, #4
 80005f6:	0159      	lsls	r1, r3, #5
 80005f8:	d413      	bmi.n	8000622 <__aeabi_fdiv+0x21a>
 80005fa:	019b      	lsls	r3, r3, #6
 80005fc:	2000      	movs	r0, #0
 80005fe:	0a5c      	lsrs	r4, r3, #9
 8000600:	e75a      	b.n	80004b8 <__aeabi_fdiv+0xb0>
 8000602:	231a      	movs	r3, #26
 8000604:	2401      	movs	r4, #1
 8000606:	1a2d      	subs	r5, r5, r0
 8000608:	e7d0      	b.n	80005ac <__aeabi_fdiv+0x1a4>
 800060a:	1e98      	subs	r0, r3, #2
 800060c:	4243      	negs	r3, r0
 800060e:	4158      	adcs	r0, r3
 8000610:	4240      	negs	r0, r0
 8000612:	0032      	movs	r2, r6
 8000614:	2400      	movs	r4, #0
 8000616:	b2c0      	uxtb	r0, r0
 8000618:	e74e      	b.n	80004b8 <__aeabi_fdiv+0xb0>
 800061a:	4642      	mov	r2, r8
 800061c:	20ff      	movs	r0, #255	@ 0xff
 800061e:	2400      	movs	r4, #0
 8000620:	e74a      	b.n	80004b8 <__aeabi_fdiv+0xb0>
 8000622:	2001      	movs	r0, #1
 8000624:	2400      	movs	r4, #0
 8000626:	e747      	b.n	80004b8 <__aeabi_fdiv+0xb0>
 8000628:	08003b48 	.word	0x08003b48
 800062c:	08003b88 	.word	0x08003b88
 8000630:	f7ffffff 	.word	0xf7ffffff

08000634 <__aeabi_ui2f>:
 8000634:	b510      	push	{r4, lr}
 8000636:	1e04      	subs	r4, r0, #0
 8000638:	d00d      	beq.n	8000656 <__aeabi_ui2f+0x22>
 800063a:	f000 f841 	bl	80006c0 <__clzsi2>
 800063e:	239e      	movs	r3, #158	@ 0x9e
 8000640:	1a1b      	subs	r3, r3, r0
 8000642:	2b96      	cmp	r3, #150	@ 0x96
 8000644:	dc0c      	bgt.n	8000660 <__aeabi_ui2f+0x2c>
 8000646:	2808      	cmp	r0, #8
 8000648:	d034      	beq.n	80006b4 <__aeabi_ui2f+0x80>
 800064a:	3808      	subs	r0, #8
 800064c:	4084      	lsls	r4, r0
 800064e:	0264      	lsls	r4, r4, #9
 8000650:	0a64      	lsrs	r4, r4, #9
 8000652:	b2d8      	uxtb	r0, r3
 8000654:	e001      	b.n	800065a <__aeabi_ui2f+0x26>
 8000656:	2000      	movs	r0, #0
 8000658:	2400      	movs	r4, #0
 800065a:	05c0      	lsls	r0, r0, #23
 800065c:	4320      	orrs	r0, r4
 800065e:	bd10      	pop	{r4, pc}
 8000660:	2b99      	cmp	r3, #153	@ 0x99
 8000662:	dc13      	bgt.n	800068c <__aeabi_ui2f+0x58>
 8000664:	1f42      	subs	r2, r0, #5
 8000666:	4094      	lsls	r4, r2
 8000668:	4a14      	ldr	r2, [pc, #80]	@ (80006bc <__aeabi_ui2f+0x88>)
 800066a:	4022      	ands	r2, r4
 800066c:	0761      	lsls	r1, r4, #29
 800066e:	d01c      	beq.n	80006aa <__aeabi_ui2f+0x76>
 8000670:	210f      	movs	r1, #15
 8000672:	4021      	ands	r1, r4
 8000674:	2904      	cmp	r1, #4
 8000676:	d018      	beq.n	80006aa <__aeabi_ui2f+0x76>
 8000678:	3204      	adds	r2, #4
 800067a:	08d4      	lsrs	r4, r2, #3
 800067c:	0152      	lsls	r2, r2, #5
 800067e:	d515      	bpl.n	80006ac <__aeabi_ui2f+0x78>
 8000680:	239f      	movs	r3, #159	@ 0x9f
 8000682:	0264      	lsls	r4, r4, #9
 8000684:	1a18      	subs	r0, r3, r0
 8000686:	0a64      	lsrs	r4, r4, #9
 8000688:	b2c0      	uxtb	r0, r0
 800068a:	e7e6      	b.n	800065a <__aeabi_ui2f+0x26>
 800068c:	0002      	movs	r2, r0
 800068e:	0021      	movs	r1, r4
 8000690:	321b      	adds	r2, #27
 8000692:	4091      	lsls	r1, r2
 8000694:	000a      	movs	r2, r1
 8000696:	1e51      	subs	r1, r2, #1
 8000698:	418a      	sbcs	r2, r1
 800069a:	2105      	movs	r1, #5
 800069c:	1a09      	subs	r1, r1, r0
 800069e:	40cc      	lsrs	r4, r1
 80006a0:	4314      	orrs	r4, r2
 80006a2:	4a06      	ldr	r2, [pc, #24]	@ (80006bc <__aeabi_ui2f+0x88>)
 80006a4:	4022      	ands	r2, r4
 80006a6:	0761      	lsls	r1, r4, #29
 80006a8:	d1e2      	bne.n	8000670 <__aeabi_ui2f+0x3c>
 80006aa:	08d4      	lsrs	r4, r2, #3
 80006ac:	0264      	lsls	r4, r4, #9
 80006ae:	0a64      	lsrs	r4, r4, #9
 80006b0:	b2d8      	uxtb	r0, r3
 80006b2:	e7d2      	b.n	800065a <__aeabi_ui2f+0x26>
 80006b4:	0264      	lsls	r4, r4, #9
 80006b6:	0a64      	lsrs	r4, r4, #9
 80006b8:	308e      	adds	r0, #142	@ 0x8e
 80006ba:	e7ce      	b.n	800065a <__aeabi_ui2f+0x26>
 80006bc:	fbffffff 	.word	0xfbffffff

080006c0 <__clzsi2>:
 80006c0:	211c      	movs	r1, #28
 80006c2:	2301      	movs	r3, #1
 80006c4:	041b      	lsls	r3, r3, #16
 80006c6:	4298      	cmp	r0, r3
 80006c8:	d301      	bcc.n	80006ce <__clzsi2+0xe>
 80006ca:	0c00      	lsrs	r0, r0, #16
 80006cc:	3910      	subs	r1, #16
 80006ce:	0a1b      	lsrs	r3, r3, #8
 80006d0:	4298      	cmp	r0, r3
 80006d2:	d301      	bcc.n	80006d8 <__clzsi2+0x18>
 80006d4:	0a00      	lsrs	r0, r0, #8
 80006d6:	3908      	subs	r1, #8
 80006d8:	091b      	lsrs	r3, r3, #4
 80006da:	4298      	cmp	r0, r3
 80006dc:	d301      	bcc.n	80006e2 <__clzsi2+0x22>
 80006de:	0900      	lsrs	r0, r0, #4
 80006e0:	3904      	subs	r1, #4
 80006e2:	a202      	add	r2, pc, #8	@ (adr r2, 80006ec <__clzsi2+0x2c>)
 80006e4:	5c10      	ldrb	r0, [r2, r0]
 80006e6:	1840      	adds	r0, r0, r1
 80006e8:	4770      	bx	lr
 80006ea:	46c0      	nop			@ (mov r8, r8)
 80006ec:	02020304 	.word	0x02020304
 80006f0:	01010101 	.word	0x01010101
	...

080006fc <apInit>:

bool button_data[BUTTON_MAX_CH];


void apInit(void)
{
 80006fc:	b510      	push	{r4, lr}
  ledInit();
 80006fe:	f000 f895 	bl	800082c <ledInit>
  pwmInit();
 8000702:	f000 f8c3 	bl	800088c <pwmInit>
  adcInit();
 8000706:	f000 f853 	bl	80007b0 <adcInit>
  buttonInit();
 800070a:	f000 f871 	bl	80007f0 <buttonInit>
}
 800070e:	bd10      	pop	{r4, pc}

08000710 <apMain>:

void apMain(void)
{
 8000710:	b570      	push	{r4, r5, r6, lr}
  uint32_t pre_time = 0;

  ledSetDuty(_DEF_CH1, 100);
 8000712:	2164      	movs	r1, #100	@ 0x64
 8000714:	2000      	movs	r0, #0
 8000716:	f000 f8b1 	bl	800087c <ledSetDuty>
  uint32_t pre_time = 0;
 800071a:	2500      	movs	r5, #0
 800071c:	e035      	b.n	800078a <apMain+0x7a>
  while(1)
  {
    if(millis()-pre_time >= 500)
    {
      pre_time = millis();
 800071e:	f000 f900 	bl	8000922 <millis>
 8000722:	0005      	movs	r5, r0
      ledToggle(_DEF_CH1);
 8000724:	2000      	movs	r0, #0
 8000726:	f000 f899 	bl	800085c <ledToggle>

      uartPrintf(_DEF_CH1,"test %d\n",millis());
 800072a:	f000 f8fa 	bl	8000922 <millis>
 800072e:	0002      	movs	r2, r0
 8000730:	491a      	ldr	r1, [pc, #104]	@ (800079c <apMain+0x8c>)
 8000732:	2000      	movs	r0, #0
 8000734:	f000 f8dc 	bl	80008f0 <uartPrintf>
    }


    adc_vol = (float)adcReadVoltage(_DEF_CH1)/100.f;
 8000738:	2000      	movs	r0, #0
 800073a:	f000 f84f 	bl	80007dc <adcReadVoltage>
 800073e:	f7ff ff79 	bl	8000634 <__aeabi_ui2f>
 8000742:	4917      	ldr	r1, [pc, #92]	@ (80007a0 <apMain+0x90>)
 8000744:	f7ff fe60 	bl	8000408 <__aeabi_fdiv>
 8000748:	4b16      	ldr	r3, [pc, #88]	@ (80007a4 <apMain+0x94>)
 800074a:	6018      	str	r0, [r3, #0]
    adc_vol_vref = (float)adcReadVoltage(_DEF_CH3)/100.f;
 800074c:	2002      	movs	r0, #2
 800074e:	f000 f845 	bl	80007dc <adcReadVoltage>
 8000752:	f7ff ff6f 	bl	8000634 <__aeabi_ui2f>
 8000756:	4912      	ldr	r1, [pc, #72]	@ (80007a0 <apMain+0x90>)
 8000758:	f7ff fe56 	bl	8000408 <__aeabi_fdiv>
 800075c:	4b12      	ldr	r3, [pc, #72]	@ (80007a8 <apMain+0x98>)
 800075e:	6018      	str	r0, [r3, #0]


    button_data[_BUTTON_CH_SEL] = buttonGetPressed(_BUTTON_CH_SEL);
 8000760:	2000      	movs	r0, #0
 8000762:	f000 f847 	bl	80007f4 <buttonGetPressed>
 8000766:	4c11      	ldr	r4, [pc, #68]	@ (80007ac <apMain+0x9c>)
 8000768:	7020      	strb	r0, [r4, #0]
    button_data[_BUTTON_CH_LEFT] = buttonGetPressed(_BUTTON_CH_LEFT);
 800076a:	2001      	movs	r0, #1
 800076c:	f000 f842 	bl	80007f4 <buttonGetPressed>
 8000770:	7060      	strb	r0, [r4, #1]
    button_data[_BUTTON_CH_DOWN] = buttonGetPressed(_BUTTON_CH_DOWN);
 8000772:	2002      	movs	r0, #2
 8000774:	f000 f83e 	bl	80007f4 <buttonGetPressed>
 8000778:	70a0      	strb	r0, [r4, #2]
    button_data[_BUTTON_CH_UP] = buttonGetPressed(_BUTTON_CH_UP);
 800077a:	2003      	movs	r0, #3
 800077c:	f000 f83a 	bl	80007f4 <buttonGetPressed>
 8000780:	70e0      	strb	r0, [r4, #3]
    button_data[_BUTTON_CH_RIGHT] = buttonGetPressed(_BUTTON_CH_RIGHT);
 8000782:	2004      	movs	r0, #4
 8000784:	f000 f836 	bl	80007f4 <buttonGetPressed>
 8000788:	7120      	strb	r0, [r4, #4]
    if(millis()-pre_time >= 500)
 800078a:	f000 f8ca 	bl	8000922 <millis>
 800078e:	1b40      	subs	r0, r0, r5
 8000790:	23fa      	movs	r3, #250	@ 0xfa
 8000792:	005b      	lsls	r3, r3, #1
 8000794:	4298      	cmp	r0, r3
 8000796:	d2c2      	bcs.n	800071e <apMain+0xe>
 8000798:	e7ce      	b.n	8000738 <apMain+0x28>
 800079a:	46c0      	nop			@ (mov r8, r8)
 800079c:	08003bc4 	.word	0x08003bc4
 80007a0:	42c80000 	.word	0x42c80000
 80007a4:	20000088 	.word	0x20000088
 80007a8:	20000084 	.word	0x20000084
 80007ac:	2000007c 	.word	0x2000007c

080007b0 <adcInit>:

uint16_t adc_data[3];
//uint32_t adc_time;

bool adcInit(void)
{
 80007b0:	b510      	push	{r4, lr}
  HAL_ADCEx_Calibration_Start(&hadc1);
 80007b2:	4c05      	ldr	r4, [pc, #20]	@ (80007c8 <adcInit+0x18>)
 80007b4:	0020      	movs	r0, r4
 80007b6:	f000 ffb1 	bl	800171c <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1,(uint32_t *)&adc_data,3);
 80007ba:	4904      	ldr	r1, [pc, #16]	@ (80007cc <adcInit+0x1c>)
 80007bc:	2203      	movs	r2, #3
 80007be:	0020      	movs	r0, r4
 80007c0:	f000 ff08 	bl	80015d4 <HAL_ADC_Start_DMA>

  return true;
}
 80007c4:	2001      	movs	r0, #1
 80007c6:	bd10      	pop	{r4, pc}
 80007c8:	200001d0 	.word	0x200001d0
 80007cc:	2000008c 	.word	0x2000008c

080007d0 <adcRead>:
uint16_t adcRead(uint8_t ch)
{
  uint16_t ret = 0;


  ret = adc_data[ch];
 80007d0:	4b01      	ldr	r3, [pc, #4]	@ (80007d8 <adcRead+0x8>)
 80007d2:	0040      	lsls	r0, r0, #1
 80007d4:	5ac0      	ldrh	r0, [r0, r3]


  return ret;

}
 80007d6:	4770      	bx	lr
 80007d8:	2000008c 	.word	0x2000008c

080007dc <adcReadVoltage>:
uint32_t adcReadVoltage(uint8_t ch)
{
 80007dc:	b510      	push	{r4, lr}

  uint32_t ret;
  uint32_t adc_data;
  adc_data = adcRead(ch);
 80007de:	f7ff fff7 	bl	80007d0 <adcRead>


  ret = (330 *adc_data)/ 4096;
 80007e2:	0083      	lsls	r3, r0, #2
 80007e4:	1818      	adds	r0, r3, r0
 80007e6:	0143      	lsls	r3, r0, #5
 80007e8:	18c0      	adds	r0, r0, r3
 80007ea:	0040      	lsls	r0, r0, #1
 80007ec:	0b00      	lsrs	r0, r0, #12

  return ret;
}
 80007ee:	bd10      	pop	{r4, pc}

080007f0 <buttonInit>:


bool buttonInit(void)
{
  return true;
}
 80007f0:	2001      	movs	r0, #1
 80007f2:	4770      	bx	lr

080007f4 <buttonGetPressed>:

bool buttonGetPressed(uint8_t ch)
{
 80007f4:	b510      	push	{r4, lr}
 80007f6:	0004      	movs	r4, r0
  bool ret = false;
  uint32_t adc_voltage;

  if(ch>=BUTTON_MAX_CH)
 80007f8:	2804      	cmp	r0, #4
 80007fa:	d901      	bls.n	8000800 <buttonGetPressed+0xc>
    return false;
 80007fc:	2000      	movs	r0, #0
      ret = true;
  }


  return ret;
}
 80007fe:	bd10      	pop	{r4, pc}
  adc_voltage = adcReadVoltage(adc_ch);
 8000800:	2000      	movs	r0, #0
 8000802:	f7ff ffeb 	bl	80007dc <adcReadVoltage>
  if(adc_voltage >= button_adc[ch].adc_min && adc_voltage <= button_adc[ch].adc_max)
 8000806:	4b08      	ldr	r3, [pc, #32]	@ (8000828 <buttonGetPressed+0x34>)
 8000808:	00a2      	lsls	r2, r4, #2
 800080a:	5ad3      	ldrh	r3, [r2, r3]
 800080c:	4283      	cmp	r3, r0
 800080e:	d806      	bhi.n	800081e <buttonGetPressed+0x2a>
 8000810:	4b05      	ldr	r3, [pc, #20]	@ (8000828 <buttonGetPressed+0x34>)
 8000812:	189b      	adds	r3, r3, r2
 8000814:	885b      	ldrh	r3, [r3, #2]
 8000816:	4283      	cmp	r3, r0
 8000818:	d203      	bcs.n	8000822 <buttonGetPressed+0x2e>
  bool ret = false;
 800081a:	2000      	movs	r0, #0
 800081c:	e7ef      	b.n	80007fe <buttonGetPressed+0xa>
 800081e:	2000      	movs	r0, #0
 8000820:	e7ed      	b.n	80007fe <buttonGetPressed+0xa>
      ret = true;
 8000822:	2001      	movs	r0, #1
 8000824:	e7eb      	b.n	80007fe <buttonGetPressed+0xa>
 8000826:	46c0      	nop			@ (mov r8, r8)
 8000828:	08003bd0 	.word	0x08003bd0

0800082c <ledInit>:


bool ledInit(void)
{
  return true;
}
 800082c:	2001      	movs	r0, #1
 800082e:	4770      	bx	lr

08000830 <ledOn>:
void ledOn(uint8_t ch)
{
 8000830:	b510      	push	{r4, lr}
  switch(ch)
 8000832:	2800      	cmp	r0, #0
 8000834:	d000      	beq.n	8000838 <ledOn+0x8>
    case _DEF_CH1:
     pwmWrite(_DEF_CH1,100 - led_duty[_DEF_CH1]);
      break;
  }

}
 8000836:	bd10      	pop	{r4, pc}
     pwmWrite(_DEF_CH1,100 - led_duty[_DEF_CH1]);
 8000838:	4b03      	ldr	r3, [pc, #12]	@ (8000848 <ledOn+0x18>)
 800083a:	881b      	ldrh	r3, [r3, #0]
 800083c:	2164      	movs	r1, #100	@ 0x64
 800083e:	1ac9      	subs	r1, r1, r3
 8000840:	b289      	uxth	r1, r1
 8000842:	f000 f82d 	bl	80008a0 <pwmWrite>
}
 8000846:	e7f6      	b.n	8000836 <ledOn+0x6>
 8000848:	20000000 	.word	0x20000000

0800084c <ledOff>:
void ledOff(uint8_t ch)
{
 800084c:	b510      	push	{r4, lr}
  switch(ch)
 800084e:	2800      	cmp	r0, #0
 8000850:	d000      	beq.n	8000854 <ledOff+0x8>
    case _DEF_CH1:
      pwmWrite(_DEF_CH1,100);
      break;
  }

}
 8000852:	bd10      	pop	{r4, pc}
      pwmWrite(_DEF_CH1,100);
 8000854:	2164      	movs	r1, #100	@ 0x64
 8000856:	f000 f823 	bl	80008a0 <pwmWrite>
}
 800085a:	e7fa      	b.n	8000852 <ledOff+0x6>

0800085c <ledToggle>:
void ledToggle(uint8_t ch)
{
 800085c:	b510      	push	{r4, lr}
  switch(ch)
 800085e:	2800      	cmp	r0, #0
 8000860:	d000      	beq.n	8000864 <ledToggle+0x8>
      else
        ledOff(_DEF_CH1);
      break;
  }

}
 8000862:	bd10      	pop	{r4, pc}
      if(pwmRead(_DEF_CH1) == 100 )
 8000864:	f000 f824 	bl	80008b0 <pwmRead>
 8000868:	2864      	cmp	r0, #100	@ 0x64
 800086a:	d003      	beq.n	8000874 <ledToggle+0x18>
        ledOff(_DEF_CH1);
 800086c:	2000      	movs	r0, #0
 800086e:	f7ff ffed 	bl	800084c <ledOff>
}
 8000872:	e7f6      	b.n	8000862 <ledToggle+0x6>
        ledOn(_DEF_CH1);
 8000874:	2000      	movs	r0, #0
 8000876:	f7ff ffdb 	bl	8000830 <ledOn>
 800087a:	e7f2      	b.n	8000862 <ledToggle+0x6>

0800087c <ledSetDuty>:

void ledSetDuty(uint8_t ch,uint16_t duty_data)
{
  switch(ch)
 800087c:	2800      	cmp	r0, #0
 800087e:	d102      	bne.n	8000886 <ledSetDuty+0xa>
    {
      case _DEF_CH1:
        led_duty[ch] = duty_data;
 8000880:	4b01      	ldr	r3, [pc, #4]	@ (8000888 <ledSetDuty+0xc>)
 8000882:	0040      	lsls	r0, r0, #1
 8000884:	52c1      	strh	r1, [r0, r3]
        break;
    }
}
 8000886:	4770      	bx	lr
 8000888:	20000000 	.word	0x20000000

0800088c <pwmInit>:




bool pwmInit(void)
{
 800088c:	b510      	push	{r4, lr}
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800088e:	4803      	ldr	r0, [pc, #12]	@ (800089c <pwmInit+0x10>)
 8000890:	2100      	movs	r1, #0
 8000892:	f001 fe1f 	bl	80024d4 <HAL_TIM_PWM_Start>

  return true;
}
 8000896:	2001      	movs	r0, #1
 8000898:	bd10      	pop	{r4, pc}
 800089a:	46c0      	nop			@ (mov r8, r8)
 800089c:	20000128 	.word	0x20000128

080008a0 <pwmWrite>:
void pwmWrite(uint8_t ch,uint16_t duty)
{
  switch(ch)
 80008a0:	2800      	cmp	r0, #0
 80008a2:	d102      	bne.n	80008aa <pwmWrite+0xa>
  {
    case _DEF_CH1:
      htim1.Instance->CCR1 = duty;
 80008a4:	4b01      	ldr	r3, [pc, #4]	@ (80008ac <pwmWrite+0xc>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	6359      	str	r1, [r3, #52]	@ 0x34
      break;
  }

}
 80008aa:	4770      	bx	lr
 80008ac:	20000128 	.word	0x20000128

080008b0 <pwmRead>:
uint16_t pwmRead(uint8_t ch)
{
  uint16_t pwm_data = 0;

  switch(ch)
 80008b0:	2800      	cmp	r0, #0
 80008b2:	d104      	bne.n	80008be <pwmRead+0xe>
    {
      case _DEF_CH1:
        pwm_data = htim1.Instance->CCR1;
 80008b4:	4b03      	ldr	r3, [pc, #12]	@ (80008c4 <pwmRead+0x14>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 80008ba:	b280      	uxth	r0, r0
        break;
    }

  return pwm_data;
}
 80008bc:	4770      	bx	lr
  uint16_t pwm_data = 0;
 80008be:	2000      	movs	r0, #0
 80008c0:	e7fc      	b.n	80008bc <pwmRead+0xc>
 80008c2:	46c0      	nop			@ (mov r8, r8)
 80008c4:	20000128 	.word	0x20000128

080008c8 <uartWrite>:
{
  return true;
}

uint32_t uartWrite(uint8_t ch,uint8_t* p_data,uint32_t length)
{
 80008c8:	b510      	push	{r4, lr}
 80008ca:	0014      	movs	r4, r2
  uint32_t ret = 0;
  HAL_StatusTypeDef hal_ret;


  switch(ch)
 80008cc:	2800      	cmp	r0, #0
 80008ce:	d001      	beq.n	80008d4 <uartWrite+0xc>
  uint32_t ret = 0;
 80008d0:	2000      	movs	r0, #0
      }
      break;
  }

  return ret;
}
 80008d2:	bd10      	pop	{r4, pc}
      hal_ret = HAL_UART_Transmit(&huart1, p_data, length, 100);
 80008d4:	b292      	uxth	r2, r2
 80008d6:	4805      	ldr	r0, [pc, #20]	@ (80008ec <uartWrite+0x24>)
 80008d8:	2364      	movs	r3, #100	@ 0x64
 80008da:	f002 fab4 	bl	8002e46 <HAL_UART_Transmit>
      if(hal_ret == HAL_OK)
 80008de:	2800      	cmp	r0, #0
 80008e0:	d001      	beq.n	80008e6 <uartWrite+0x1e>
  uint32_t ret = 0;
 80008e2:	2000      	movs	r0, #0
 80008e4:	e7f5      	b.n	80008d2 <uartWrite+0xa>
        ret = length;
 80008e6:	0020      	movs	r0, r4
  return ret;
 80008e8:	e7f3      	b.n	80008d2 <uartWrite+0xa>
 80008ea:	46c0      	nop			@ (mov r8, r8)
 80008ec:	20000094 	.word	0x20000094

080008f0 <uartPrintf>:
  return 0;
}


uint32_t uartPrintf(uint8_t ch,const char *fmt, ...)
{
 80008f0:	b40e      	push	{r1, r2, r3}
 80008f2:	b510      	push	{r4, lr}
 80008f4:	b0c3      	sub	sp, #268	@ 0x10c
 80008f6:	0004      	movs	r4, r0
 80008f8:	ab45      	add	r3, sp, #276	@ 0x114
 80008fa:	cb04      	ldmia	r3!, {r2}
  uint32_t ret = 0;
  va_list arg;
  char print_buf[256];

  va_start(arg,fmt);
 80008fc:	9341      	str	r3, [sp, #260]	@ 0x104

  int len;
  len = vsnprintf(print_buf,256,fmt,arg);
 80008fe:	2180      	movs	r1, #128	@ 0x80
 8000900:	0049      	lsls	r1, r1, #1
 8000902:	a801      	add	r0, sp, #4
 8000904:	f002 fc8e 	bl	8003224 <vsniprintf>
 8000908:	1e02      	subs	r2, r0, #0

  va_end(arg);

  if(len>0)
 800090a:	dc05      	bgt.n	8000918 <uartPrintf+0x28>
  uint32_t ret = 0;
 800090c:	2000      	movs	r0, #0
  {
    ret = uartWrite(ch,(uint8_t *)print_buf,len);
  }

  return ret;
}
 800090e:	b043      	add	sp, #268	@ 0x10c
 8000910:	bc10      	pop	{r4}
 8000912:	bc08      	pop	{r3}
 8000914:	b003      	add	sp, #12
 8000916:	4718      	bx	r3
    ret = uartWrite(ch,(uint8_t *)print_buf,len);
 8000918:	a901      	add	r1, sp, #4
 800091a:	0020      	movs	r0, r4
 800091c:	f7ff ffd4 	bl	80008c8 <uartWrite>
 8000920:	e7f5      	b.n	800090e <uartPrintf+0x1e>

08000922 <millis>:
{
  HAL_Delay(time_ms);
}

uint32_t millis(void)
{
 8000922:	b510      	push	{r4, lr}
  return HAL_GetTick();
 8000924:	f000 fb36 	bl	8000f94 <HAL_GetTick>
}
 8000928:	bd10      	pop	{r4, pc}
	...

0800092c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800092c:	b082      	sub	sp, #8

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800092e:	4a05      	ldr	r2, [pc, #20]	@ (8000944 <MX_DMA_Init+0x18>)
 8000930:	6b91      	ldr	r1, [r2, #56]	@ 0x38
 8000932:	2301      	movs	r3, #1
 8000934:	4319      	orrs	r1, r3
 8000936:	6391      	str	r1, [r2, #56]	@ 0x38
 8000938:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800093a:	4013      	ands	r3, r2
 800093c:	9301      	str	r3, [sp, #4]
 800093e:	9b01      	ldr	r3, [sp, #4]

}
 8000940:	b002      	add	sp, #8
 8000942:	4770      	bx	lr
 8000944:	40021000 	.word	0x40021000

08000948 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000948:	b082      	sub	sp, #8
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800094a:	4b09      	ldr	r3, [pc, #36]	@ (8000970 <MX_GPIO_Init+0x28>)
 800094c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800094e:	2201      	movs	r2, #1
 8000950:	4311      	orrs	r1, r2
 8000952:	6359      	str	r1, [r3, #52]	@ 0x34
 8000954:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000956:	400a      	ands	r2, r1
 8000958:	9200      	str	r2, [sp, #0]
 800095a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800095c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800095e:	2202      	movs	r2, #2
 8000960:	4311      	orrs	r1, r2
 8000962:	6359      	str	r1, [r3, #52]	@ 0x34
 8000964:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000966:	401a      	ands	r2, r3
 8000968:	9201      	str	r2, [sp, #4]
 800096a:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800096c:	b002      	add	sp, #8
 800096e:	4770      	bx	lr
 8000970:	40021000 	.word	0x40021000

08000974 <Error_Handler>:
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000974:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000976:	e7fe      	b.n	8000976 <Error_Handler+0x2>

08000978 <MX_TIM1_Init>:
{
 8000978:	b500      	push	{lr}
 800097a:	b09d      	sub	sp, #116	@ 0x74
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800097c:	2210      	movs	r2, #16
 800097e:	2100      	movs	r1, #0
 8000980:	a818      	add	r0, sp, #96	@ 0x60
 8000982:	f002 fc5b 	bl	800323c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000986:	220c      	movs	r2, #12
 8000988:	2100      	movs	r1, #0
 800098a:	a815      	add	r0, sp, #84	@ 0x54
 800098c:	f002 fc56 	bl	800323c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000990:	221c      	movs	r2, #28
 8000992:	2100      	movs	r1, #0
 8000994:	a80e      	add	r0, sp, #56	@ 0x38
 8000996:	f002 fc51 	bl	800323c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800099a:	2234      	movs	r2, #52	@ 0x34
 800099c:	2100      	movs	r1, #0
 800099e:	a801      	add	r0, sp, #4
 80009a0:	f002 fc4c 	bl	800323c <memset>
  htim1.Instance = TIM1;
 80009a4:	482f      	ldr	r0, [pc, #188]	@ (8000a64 <MX_TIM1_Init+0xec>)
 80009a6:	4b30      	ldr	r3, [pc, #192]	@ (8000a68 <MX_TIM1_Init+0xf0>)
 80009a8:	6003      	str	r3, [r0, #0]
  htim1.Init.Prescaler = 47;
 80009aa:	232f      	movs	r3, #47	@ 0x2f
 80009ac:	6043      	str	r3, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ae:	2300      	movs	r3, #0
 80009b0:	6083      	str	r3, [r0, #8]
  htim1.Init.Period = 99;
 80009b2:	2263      	movs	r2, #99	@ 0x63
 80009b4:	60c2      	str	r2, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009b6:	6103      	str	r3, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 80009b8:	6143      	str	r3, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009ba:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80009bc:	f001 fc1a 	bl	80021f4 <HAL_TIM_Base_Init>
 80009c0:	2800      	cmp	r0, #0
 80009c2:	d143      	bne.n	8000a4c <MX_TIM1_Init+0xd4>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009c4:	2380      	movs	r3, #128	@ 0x80
 80009c6:	015b      	lsls	r3, r3, #5
 80009c8:	9318      	str	r3, [sp, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80009ca:	4826      	ldr	r0, [pc, #152]	@ (8000a64 <MX_TIM1_Init+0xec>)
 80009cc:	a918      	add	r1, sp, #96	@ 0x60
 80009ce:	f001 fcef 	bl	80023b0 <HAL_TIM_ConfigClockSource>
 80009d2:	2800      	cmp	r0, #0
 80009d4:	d13c      	bne.n	8000a50 <MX_TIM1_Init+0xd8>
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 80009d6:	4823      	ldr	r0, [pc, #140]	@ (8000a64 <MX_TIM1_Init+0xec>)
 80009d8:	f001 fc3c 	bl	8002254 <HAL_TIM_OC_Init>
 80009dc:	2800      	cmp	r0, #0
 80009de:	d139      	bne.n	8000a54 <MX_TIM1_Init+0xdc>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009e0:	2300      	movs	r3, #0
 80009e2:	9315      	str	r3, [sp, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80009e4:	9316      	str	r3, [sp, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009e6:	9317      	str	r3, [sp, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009e8:	481e      	ldr	r0, [pc, #120]	@ (8000a64 <MX_TIM1_Init+0xec>)
 80009ea:	a915      	add	r1, sp, #84	@ 0x54
 80009ec:	f001 fe04 	bl	80025f8 <HAL_TIMEx_MasterConfigSynchronization>
 80009f0:	2800      	cmp	r0, #0
 80009f2:	d131      	bne.n	8000a58 <MX_TIM1_Init+0xe0>
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80009f4:	2300      	movs	r3, #0
 80009f6:	930e      	str	r3, [sp, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80009f8:	930f      	str	r3, [sp, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009fa:	9310      	str	r3, [sp, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80009fc:	9311      	str	r3, [sp, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009fe:	9312      	str	r3, [sp, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a00:	9313      	str	r3, [sp, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a02:	9314      	str	r3, [sp, #80]	@ 0x50
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a04:	4817      	ldr	r0, [pc, #92]	@ (8000a64 <MX_TIM1_Init+0xec>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	a90e      	add	r1, sp, #56	@ 0x38
 8000a0a:	f001 fc8f 	bl	800232c <HAL_TIM_OC_ConfigChannel>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	d124      	bne.n	8000a5c <MX_TIM1_Init+0xe4>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a12:	2300      	movs	r3, #0
 8000a14:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a16:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a18:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a1a:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a1c:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a1e:	2280      	movs	r2, #128	@ 0x80
 8000a20:	0192      	lsls	r2, r2, #6
 8000a22:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000a24:	9307      	str	r3, [sp, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000a26:	9308      	str	r3, [sp, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000a28:	9309      	str	r3, [sp, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000a2a:	2280      	movs	r2, #128	@ 0x80
 8000a2c:	0492      	lsls	r2, r2, #18
 8000a2e:	920a      	str	r2, [sp, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000a30:	930b      	str	r3, [sp, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000a32:	930c      	str	r3, [sp, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a34:	930d      	str	r3, [sp, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a36:	480b      	ldr	r0, [pc, #44]	@ (8000a64 <MX_TIM1_Init+0xec>)
 8000a38:	a901      	add	r1, sp, #4
 8000a3a:	f001 fe15 	bl	8002668 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a3e:	2800      	cmp	r0, #0
 8000a40:	d10e      	bne.n	8000a60 <MX_TIM1_Init+0xe8>
  HAL_TIM_MspPostInit(&htim1);
 8000a42:	4808      	ldr	r0, [pc, #32]	@ (8000a64 <MX_TIM1_Init+0xec>)
 8000a44:	f000 f992 	bl	8000d6c <HAL_TIM_MspPostInit>
}
 8000a48:	b01d      	add	sp, #116	@ 0x74
 8000a4a:	bd00      	pop	{pc}
    Error_Handler();
 8000a4c:	f7ff ff92 	bl	8000974 <Error_Handler>
    Error_Handler();
 8000a50:	f7ff ff90 	bl	8000974 <Error_Handler>
    Error_Handler();
 8000a54:	f7ff ff8e 	bl	8000974 <Error_Handler>
    Error_Handler();
 8000a58:	f7ff ff8c 	bl	8000974 <Error_Handler>
    Error_Handler();
 8000a5c:	f7ff ff8a 	bl	8000974 <Error_Handler>
    Error_Handler();
 8000a60:	f7ff ff88 	bl	8000974 <Error_Handler>
 8000a64:	20000128 	.word	0x20000128
 8000a68:	40012c00 	.word	0x40012c00

08000a6c <MX_ADC1_Init>:
{
 8000a6c:	b500      	push	{lr}
 8000a6e:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a70:	220c      	movs	r2, #12
 8000a72:	2100      	movs	r1, #0
 8000a74:	a801      	add	r0, sp, #4
 8000a76:	f002 fbe1 	bl	800323c <memset>
  hadc1.Instance = ADC1;
 8000a7a:	4828      	ldr	r0, [pc, #160]	@ (8000b1c <MX_ADC1_Init+0xb0>)
 8000a7c:	4b28      	ldr	r3, [pc, #160]	@ (8000b20 <MX_ADC1_Init+0xb4>)
 8000a7e:	6003      	str	r3, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000a80:	2380      	movs	r3, #128	@ 0x80
 8000a82:	05db      	lsls	r3, r3, #23
 8000a84:	6043      	str	r3, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a86:	2300      	movs	r3, #0
 8000a88:	6083      	str	r3, [r0, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a8a:	60c3      	str	r3, [r0, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000a8c:	2280      	movs	r2, #128	@ 0x80
 8000a8e:	0392      	lsls	r2, r2, #14
 8000a90:	6102      	str	r2, [r0, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a92:	2204      	movs	r2, #4
 8000a94:	6142      	str	r2, [r0, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000a96:	7603      	strb	r3, [r0, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000a98:	7643      	strb	r3, [r0, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000a9a:	3a03      	subs	r2, #3
 8000a9c:	7682      	strb	r2, [r0, #26]
  hadc1.Init.NbrOfConversion = 3;
 8000a9e:	2103      	movs	r1, #3
 8000aa0:	61c1      	str	r1, [r0, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000aa2:	6243      	str	r3, [r0, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000aa4:	6283      	str	r3, [r0, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000aa6:	3129      	adds	r1, #41	@ 0x29
 8000aa8:	5442      	strb	r2, [r0, r1]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000aaa:	6303      	str	r3, [r0, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8000aac:	3925      	subs	r1, #37	@ 0x25
 8000aae:	6341      	str	r1, [r0, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000ab0:	6383      	str	r3, [r0, #56]	@ 0x38
  hadc1.Init.OversamplingMode = ENABLE;
 8000ab2:	3135      	adds	r1, #53	@ 0x35
 8000ab4:	5442      	strb	r2, [r0, r1]
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_8;
 8000ab6:	3207      	adds	r2, #7
 8000ab8:	6402      	str	r2, [r0, #64]	@ 0x40
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_3;
 8000aba:	3258      	adds	r2, #88	@ 0x58
 8000abc:	6442      	str	r2, [r0, #68]	@ 0x44
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8000abe:	6483      	str	r3, [r0, #72]	@ 0x48
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000ac0:	64c3      	str	r3, [r0, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ac2:	f000 fa6d 	bl	8000fa0 <HAL_ADC_Init>
 8000ac6:	2800      	cmp	r0, #0
 8000ac8:	d120      	bne.n	8000b0c <MX_ADC1_Init+0xa0>
  sConfig.Channel = ADC_CHANNEL_4;
 8000aca:	4b16      	ldr	r3, [pc, #88]	@ (8000b24 <MX_ADC1_Init+0xb8>)
 8000acc:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000ad2:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ad4:	4811      	ldr	r0, [pc, #68]	@ (8000b1c <MX_ADC1_Init+0xb0>)
 8000ad6:	a901      	add	r1, sp, #4
 8000ad8:	f000 fbd8 	bl	800128c <HAL_ADC_ConfigChannel>
 8000adc:	2800      	cmp	r0, #0
 8000ade:	d117      	bne.n	8000b10 <MX_ADC1_Init+0xa4>
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000ae0:	4b11      	ldr	r3, [pc, #68]	@ (8000b28 <MX_ADC1_Init+0xbc>)
 8000ae2:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000ae4:	2304      	movs	r3, #4
 8000ae6:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ae8:	480c      	ldr	r0, [pc, #48]	@ (8000b1c <MX_ADC1_Init+0xb0>)
 8000aea:	a901      	add	r1, sp, #4
 8000aec:	f000 fbce 	bl	800128c <HAL_ADC_ConfigChannel>
 8000af0:	2800      	cmp	r0, #0
 8000af2:	d10f      	bne.n	8000b14 <MX_ADC1_Init+0xa8>
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000af4:	4b0d      	ldr	r3, [pc, #52]	@ (8000b2c <MX_ADC1_Init+0xc0>)
 8000af6:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000af8:	2308      	movs	r3, #8
 8000afa:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000afc:	4807      	ldr	r0, [pc, #28]	@ (8000b1c <MX_ADC1_Init+0xb0>)
 8000afe:	a901      	add	r1, sp, #4
 8000b00:	f000 fbc4 	bl	800128c <HAL_ADC_ConfigChannel>
 8000b04:	2800      	cmp	r0, #0
 8000b06:	d107      	bne.n	8000b18 <MX_ADC1_Init+0xac>
}
 8000b08:	b005      	add	sp, #20
 8000b0a:	bd00      	pop	{pc}
    Error_Handler();
 8000b0c:	f7ff ff32 	bl	8000974 <Error_Handler>
    Error_Handler();
 8000b10:	f7ff ff30 	bl	8000974 <Error_Handler>
    Error_Handler();
 8000b14:	f7ff ff2e 	bl	8000974 <Error_Handler>
    Error_Handler();
 8000b18:	f7ff ff2c 	bl	8000974 <Error_Handler>
 8000b1c:	200001d0 	.word	0x200001d0
 8000b20:	40012400 	.word	0x40012400
 8000b24:	10000010 	.word	0x10000010
 8000b28:	a4000200 	.word	0xa4000200
 8000b2c:	a8000400 	.word	0xa8000400

08000b30 <MX_USART1_UART_Init>:
{
 8000b30:	b510      	push	{r4, lr}
  huart1.Instance = USART1;
 8000b32:	4817      	ldr	r0, [pc, #92]	@ (8000b90 <MX_USART1_UART_Init+0x60>)
 8000b34:	4b17      	ldr	r3, [pc, #92]	@ (8000b94 <MX_USART1_UART_Init+0x64>)
 8000b36:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8000b38:	23e1      	movs	r3, #225	@ 0xe1
 8000b3a:	025b      	lsls	r3, r3, #9
 8000b3c:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b42:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b44:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b46:	220c      	movs	r2, #12
 8000b48:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b4a:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b4c:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b4e:	6203      	str	r3, [r0, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b50:	6243      	str	r3, [r0, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b52:	6283      	str	r3, [r0, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b54:	f002 fa60 	bl	8003018 <HAL_UART_Init>
 8000b58:	2800      	cmp	r0, #0
 8000b5a:	d111      	bne.n	8000b80 <MX_USART1_UART_Init+0x50>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b5c:	480c      	ldr	r0, [pc, #48]	@ (8000b90 <MX_USART1_UART_Init+0x60>)
 8000b5e:	2100      	movs	r1, #0
 8000b60:	f002 fade 	bl	8003120 <HAL_UARTEx_SetTxFifoThreshold>
 8000b64:	2800      	cmp	r0, #0
 8000b66:	d10d      	bne.n	8000b84 <MX_USART1_UART_Init+0x54>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b68:	4809      	ldr	r0, [pc, #36]	@ (8000b90 <MX_USART1_UART_Init+0x60>)
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	f002 fafe 	bl	800316c <HAL_UARTEx_SetRxFifoThreshold>
 8000b70:	2800      	cmp	r0, #0
 8000b72:	d109      	bne.n	8000b88 <MX_USART1_UART_Init+0x58>
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000b74:	4806      	ldr	r0, [pc, #24]	@ (8000b90 <MX_USART1_UART_Init+0x60>)
 8000b76:	f002 fab3 	bl	80030e0 <HAL_UARTEx_DisableFifoMode>
 8000b7a:	2800      	cmp	r0, #0
 8000b7c:	d106      	bne.n	8000b8c <MX_USART1_UART_Init+0x5c>
}
 8000b7e:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000b80:	f7ff fef8 	bl	8000974 <Error_Handler>
    Error_Handler();
 8000b84:	f7ff fef6 	bl	8000974 <Error_Handler>
    Error_Handler();
 8000b88:	f7ff fef4 	bl	8000974 <Error_Handler>
    Error_Handler();
 8000b8c:	f7ff fef2 	bl	8000974 <Error_Handler>
 8000b90:	20000094 	.word	0x20000094
 8000b94:	40013800 	.word	0x40013800

08000b98 <SystemClock_Config>:
{
 8000b98:	b510      	push	{r4, lr}
  * @rmtoll FLASH_ACR    FLASH_ACR_PRFTEN        LL_FLASH_EnablePrefetch
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_EnablePrefetch(void)
{
  SET_BIT(FLASH->ACR, FLASH_ACR_PRFTEN);
 8000b9a:	4923      	ldr	r1, [pc, #140]	@ (8000c28 <SystemClock_Config+0x90>)
 8000b9c:	680b      	ldr	r3, [r1, #0]
 8000b9e:	2280      	movs	r2, #128	@ 0x80
 8000ba0:	0052      	lsls	r2, r2, #1
 8000ba2:	4313      	orrs	r3, r2
 8000ba4:	600b      	str	r3, [r1, #0]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000ba6:	680b      	ldr	r3, [r1, #0]
 8000ba8:	2007      	movs	r0, #7
 8000baa:	4383      	bics	r3, r0
 8000bac:	3806      	subs	r0, #6
 8000bae:	4303      	orrs	r3, r0
 8000bb0:	600b      	str	r3, [r1, #0]
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000bb2:	4b1e      	ldr	r3, [pc, #120]	@ (8000c2c <SystemClock_Config+0x94>)
 8000bb4:	6819      	ldr	r1, [r3, #0]
 8000bb6:	430a      	orrs	r2, r1
 8000bb8:	601a      	str	r2, [r3, #0]
}
 8000bba:	e001      	b.n	8000bc0 <SystemClock_Config+0x28>
  while(LL_RCC_HSI_IsReady() != 1)
 8000bbc:	2901      	cmp	r1, #1
 8000bbe:	d009      	beq.n	8000bd4 <SystemClock_Config+0x3c>
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8000bc0:	4b1a      	ldr	r3, [pc, #104]	@ (8000c2c <SystemClock_Config+0x94>)
 8000bc2:	681a      	ldr	r2, [r3, #0]
 8000bc4:	2380      	movs	r3, #128	@ 0x80
 8000bc6:	00db      	lsls	r3, r3, #3
 8000bc8:	0011      	movs	r1, r2
 8000bca:	4019      	ands	r1, r3
 8000bcc:	421a      	tst	r2, r3
 8000bce:	d0f5      	beq.n	8000bbc <SystemClock_Config+0x24>
 8000bd0:	2101      	movs	r1, #1
 8000bd2:	e7f3      	b.n	8000bbc <SystemClock_Config+0x24>
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8000bd4:	4b15      	ldr	r3, [pc, #84]	@ (8000c2c <SystemClock_Config+0x94>)
 8000bd6:	6859      	ldr	r1, [r3, #4]
 8000bd8:	4a15      	ldr	r2, [pc, #84]	@ (8000c30 <SystemClock_Config+0x98>)
 8000bda:	4011      	ands	r1, r2
 8000bdc:	2280      	movs	r2, #128	@ 0x80
 8000bde:	01d2      	lsls	r2, r2, #7
 8000be0:	430a      	orrs	r2, r1
 8000be2:	605a      	str	r2, [r3, #4]
  *         @arg @ref LL_RCC_HSI_DIV_128
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetHSIDiv(uint32_t HSIDiv)
{
  MODIFY_REG(RCC->CR, RCC_CR_HSIDIV, HSIDiv);
 8000be4:	681a      	ldr	r2, [r3, #0]
 8000be6:	4913      	ldr	r1, [pc, #76]	@ (8000c34 <SystemClock_Config+0x9c>)
 8000be8:	400a      	ands	r2, r1
 8000bea:	601a      	str	r2, [r3, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000bec:	689a      	ldr	r2, [r3, #8]
 8000bee:	4912      	ldr	r1, [pc, #72]	@ (8000c38 <SystemClock_Config+0xa0>)
 8000bf0:	400a      	ands	r2, r1
 8000bf2:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000bf4:	689a      	ldr	r2, [r3, #8]
 8000bf6:	2107      	movs	r1, #7
 8000bf8:	438a      	bics	r2, r1
 8000bfa:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000bfc:	4b0b      	ldr	r3, [pc, #44]	@ (8000c2c <SystemClock_Config+0x94>)
 8000bfe:	689b      	ldr	r3, [r3, #8]
 8000c00:	2238      	movs	r2, #56	@ 0x38
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8000c02:	421a      	tst	r2, r3
 8000c04:	d1fa      	bne.n	8000bfc <SystemClock_Config+0x64>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, Prescaler);
 8000c06:	4a09      	ldr	r2, [pc, #36]	@ (8000c2c <SystemClock_Config+0x94>)
 8000c08:	6893      	ldr	r3, [r2, #8]
 8000c0a:	490c      	ldr	r1, [pc, #48]	@ (8000c3c <SystemClock_Config+0xa4>)
 8000c0c:	400b      	ands	r3, r1
 8000c0e:	6093      	str	r3, [r2, #8]
  LL_SetSystemCoreClock(48000000);
 8000c10:	480b      	ldr	r0, [pc, #44]	@ (8000c40 <SystemClock_Config+0xa8>)
 8000c12:	f002 fad3 	bl	80031bc <LL_SetSystemCoreClock>
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8000c16:	2000      	movs	r0, #0
 8000c18:	f000 f970 	bl	8000efc <HAL_InitTick>
 8000c1c:	2800      	cmp	r0, #0
 8000c1e:	d100      	bne.n	8000c22 <SystemClock_Config+0x8a>
}
 8000c20:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000c22:	f7ff fea7 	bl	8000974 <Error_Handler>
 8000c26:	46c0      	nop			@ (mov r8, r8)
 8000c28:	40022000 	.word	0x40022000
 8000c2c:	40021000 	.word	0x40021000
 8000c30:	ffff80ff 	.word	0xffff80ff
 8000c34:	ffffc7ff 	.word	0xffffc7ff
 8000c38:	fffff0ff 	.word	0xfffff0ff
 8000c3c:	ffff8fff 	.word	0xffff8fff
 8000c40:	02dc6c00 	.word	0x02dc6c00

08000c44 <main>:
{
 8000c44:	b510      	push	{r4, lr}
  HAL_Init();
 8000c46:	f000 f985 	bl	8000f54 <HAL_Init>
  SystemClock_Config();
 8000c4a:	f7ff ffa5 	bl	8000b98 <SystemClock_Config>
  MX_GPIO_Init();
 8000c4e:	f7ff fe7b 	bl	8000948 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c52:	f7ff fe6b 	bl	800092c <MX_DMA_Init>
  MX_TIM1_Init();
 8000c56:	f7ff fe8f 	bl	8000978 <MX_TIM1_Init>
  MX_ADC1_Init();
 8000c5a:	f7ff ff07 	bl	8000a6c <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000c5e:	f7ff ff67 	bl	8000b30 <MX_USART1_UART_Init>
  apInit();
 8000c62:	f7ff fd4b 	bl	80006fc <apInit>
  apMain();
 8000c66:	f7ff fd53 	bl	8000710 <apMain>
  while (1)
 8000c6a:	e7fe      	b.n	8000c6a <main+0x26>

08000c6c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c6c:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c6e:	4b0a      	ldr	r3, [pc, #40]	@ (8000c98 <HAL_MspInit+0x2c>)
 8000c70:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8000c72:	2201      	movs	r2, #1
 8000c74:	4311      	orrs	r1, r2
 8000c76:	6419      	str	r1, [r3, #64]	@ 0x40
 8000c78:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8000c7a:	400a      	ands	r2, r1
 8000c7c:	9200      	str	r2, [sp, #0]
 8000c7e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c80:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000c82:	2180      	movs	r1, #128	@ 0x80
 8000c84:	0549      	lsls	r1, r1, #21
 8000c86:	430a      	orrs	r2, r1
 8000c88:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000c8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000c8c:	400b      	ands	r3, r1
 8000c8e:	9301      	str	r3, [sp, #4]
 8000c90:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c92:	b002      	add	sp, #8
 8000c94:	4770      	bx	lr
 8000c96:	46c0      	nop			@ (mov r8, r8)
 8000c98:	40021000 	.word	0x40021000

08000c9c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c9c:	b510      	push	{r4, lr}
 8000c9e:	b088      	sub	sp, #32
 8000ca0:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca2:	2214      	movs	r2, #20
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	a803      	add	r0, sp, #12
 8000ca8:	f002 fac8 	bl	800323c <memset>
  if(hadc->Instance==ADC1)
 8000cac:	6822      	ldr	r2, [r4, #0]
 8000cae:	4b20      	ldr	r3, [pc, #128]	@ (8000d30 <HAL_ADC_MspInit+0x94>)
 8000cb0:	429a      	cmp	r2, r3
 8000cb2:	d001      	beq.n	8000cb8 <HAL_ADC_MspInit+0x1c>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000cb4:	b008      	add	sp, #32
 8000cb6:	bd10      	pop	{r4, pc}
  *         @arg @ref LL_RCC_ADC_CLKSOURCE_HSIKER
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetADCClockSource(uint32_t ADCxSource)
{
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8000cb8:	4b1e      	ldr	r3, [pc, #120]	@ (8000d34 <HAL_ADC_MspInit+0x98>)
 8000cba:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8000cbc:	0092      	lsls	r2, r2, #2
 8000cbe:	0892      	lsrs	r2, r2, #2
 8000cc0:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_ADC_CLK_ENABLE();
 8000cc2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000cc4:	2180      	movs	r1, #128	@ 0x80
 8000cc6:	0349      	lsls	r1, r1, #13
 8000cc8:	430a      	orrs	r2, r1
 8000cca:	641a      	str	r2, [r3, #64]	@ 0x40
 8000ccc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000cce:	400a      	ands	r2, r1
 8000cd0:	9201      	str	r2, [sp, #4]
 8000cd2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	4311      	orrs	r1, r2
 8000cda:	6359      	str	r1, [r3, #52]	@ 0x34
 8000cdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000cde:	401a      	ands	r2, r3
 8000ce0:	9202      	str	r2, [sp, #8]
 8000ce2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000ce4:	2310      	movs	r3, #16
 8000ce6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ce8:	3b0d      	subs	r3, #13
 8000cea:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cec:	20a0      	movs	r0, #160	@ 0xa0
 8000cee:	a903      	add	r1, sp, #12
 8000cf0:	05c0      	lsls	r0, r0, #23
 8000cf2:	f000 ffb1 	bl	8001c58 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 8000cf6:	4810      	ldr	r0, [pc, #64]	@ (8000d38 <HAL_ADC_MspInit+0x9c>)
 8000cf8:	4b10      	ldr	r3, [pc, #64]	@ (8000d3c <HAL_ADC_MspInit+0xa0>)
 8000cfa:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000cfc:	2305      	movs	r3, #5
 8000cfe:	6043      	str	r3, [r0, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d00:	2300      	movs	r3, #0
 8000d02:	6083      	str	r3, [r0, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d04:	60c3      	str	r3, [r0, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000d06:	2280      	movs	r2, #128	@ 0x80
 8000d08:	6102      	str	r2, [r0, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d0a:	3280      	adds	r2, #128	@ 0x80
 8000d0c:	6142      	str	r2, [r0, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d0e:	2280      	movs	r2, #128	@ 0x80
 8000d10:	00d2      	lsls	r2, r2, #3
 8000d12:	6182      	str	r2, [r0, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000d14:	2220      	movs	r2, #32
 8000d16:	61c2      	str	r2, [r0, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000d18:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000d1a:	f000 fe71 	bl	8001a00 <HAL_DMA_Init>
 8000d1e:	2800      	cmp	r0, #0
 8000d20:	d103      	bne.n	8000d2a <HAL_ADC_MspInit+0x8e>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000d22:	4b05      	ldr	r3, [pc, #20]	@ (8000d38 <HAL_ADC_MspInit+0x9c>)
 8000d24:	6523      	str	r3, [r4, #80]	@ 0x50
 8000d26:	629c      	str	r4, [r3, #40]	@ 0x28
}
 8000d28:	e7c4      	b.n	8000cb4 <HAL_ADC_MspInit+0x18>
      Error_Handler();
 8000d2a:	f7ff fe23 	bl	8000974 <Error_Handler>
 8000d2e:	e7f8      	b.n	8000d22 <HAL_ADC_MspInit+0x86>
 8000d30:	40012400 	.word	0x40012400
 8000d34:	40021000 	.word	0x40021000
 8000d38:	20000174 	.word	0x20000174
 8000d3c:	40020008 	.word	0x40020008

08000d40 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d40:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM1)
 8000d42:	6802      	ldr	r2, [r0, #0]
 8000d44:	4b07      	ldr	r3, [pc, #28]	@ (8000d64 <HAL_TIM_Base_MspInit+0x24>)
 8000d46:	429a      	cmp	r2, r3
 8000d48:	d001      	beq.n	8000d4e <HAL_TIM_Base_MspInit+0xe>

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000d4a:	b002      	add	sp, #8
 8000d4c:	4770      	bx	lr
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d4e:	4b06      	ldr	r3, [pc, #24]	@ (8000d68 <HAL_TIM_Base_MspInit+0x28>)
 8000d50:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000d52:	2180      	movs	r1, #128	@ 0x80
 8000d54:	0109      	lsls	r1, r1, #4
 8000d56:	430a      	orrs	r2, r1
 8000d58:	641a      	str	r2, [r3, #64]	@ 0x40
 8000d5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d5c:	400b      	ands	r3, r1
 8000d5e:	9301      	str	r3, [sp, #4]
 8000d60:	9b01      	ldr	r3, [sp, #4]
}
 8000d62:	e7f2      	b.n	8000d4a <HAL_TIM_Base_MspInit+0xa>
 8000d64:	40012c00 	.word	0x40012c00
 8000d68:	40021000 	.word	0x40021000

08000d6c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d6c:	b510      	push	{r4, lr}
 8000d6e:	b086      	sub	sp, #24
 8000d70:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d72:	2214      	movs	r2, #20
 8000d74:	2100      	movs	r1, #0
 8000d76:	a801      	add	r0, sp, #4
 8000d78:	f002 fa60 	bl	800323c <memset>
  if(htim->Instance==TIM1)
 8000d7c:	6822      	ldr	r2, [r4, #0]
 8000d7e:	4b0d      	ldr	r3, [pc, #52]	@ (8000db4 <HAL_TIM_MspPostInit+0x48>)
 8000d80:	429a      	cmp	r2, r3
 8000d82:	d001      	beq.n	8000d88 <HAL_TIM_MspPostInit+0x1c>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000d84:	b006      	add	sp, #24
 8000d86:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d88:	4a0b      	ldr	r2, [pc, #44]	@ (8000db8 <HAL_TIM_MspPostInit+0x4c>)
 8000d8a:	6b51      	ldr	r1, [r2, #52]	@ 0x34
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	4319      	orrs	r1, r3
 8000d90:	6351      	str	r1, [r2, #52]	@ 0x34
 8000d92:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8000d94:	4013      	ands	r3, r2
 8000d96:	9300      	str	r3, [sp, #0]
 8000d98:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000d9a:	2320      	movs	r3, #32
 8000d9c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9e:	3b1e      	subs	r3, #30
 8000da0:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM1;
 8000da2:	3303      	adds	r3, #3
 8000da4:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da6:	20a0      	movs	r0, #160	@ 0xa0
 8000da8:	a901      	add	r1, sp, #4
 8000daa:	05c0      	lsls	r0, r0, #23
 8000dac:	f000 ff54 	bl	8001c58 <HAL_GPIO_Init>
}
 8000db0:	e7e8      	b.n	8000d84 <HAL_TIM_MspPostInit+0x18>
 8000db2:	46c0      	nop			@ (mov r8, r8)
 8000db4:	40012c00 	.word	0x40012c00
 8000db8:	40021000 	.word	0x40021000

08000dbc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dbc:	b510      	push	{r4, lr}
 8000dbe:	b088      	sub	sp, #32
 8000dc0:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc2:	2214      	movs	r2, #20
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	a803      	add	r0, sp, #12
 8000dc8:	f002 fa38 	bl	800323c <memset>
  if(huart->Instance==USART1)
 8000dcc:	6822      	ldr	r2, [r4, #0]
 8000dce:	4b15      	ldr	r3, [pc, #84]	@ (8000e24 <HAL_UART_MspInit+0x68>)
 8000dd0:	429a      	cmp	r2, r3
 8000dd2:	d001      	beq.n	8000dd8 <HAL_UART_MspInit+0x1c>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000dd4:	b008      	add	sp, #32
 8000dd6:	bd10      	pop	{r4, pc}
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 8000dd8:	4b13      	ldr	r3, [pc, #76]	@ (8000e28 <HAL_UART_MspInit+0x6c>)
 8000dda:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8000ddc:	2103      	movs	r1, #3
 8000dde:	438a      	bics	r2, r1
 8000de0:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_USART1_CLK_ENABLE();
 8000de2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000de4:	2180      	movs	r1, #128	@ 0x80
 8000de6:	01c9      	lsls	r1, r1, #7
 8000de8:	430a      	orrs	r2, r1
 8000dea:	641a      	str	r2, [r3, #64]	@ 0x40
 8000dec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000dee:	400a      	ands	r2, r1
 8000df0:	9201      	str	r2, [sp, #4]
 8000df2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000df4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000df6:	2202      	movs	r2, #2
 8000df8:	4311      	orrs	r1, r2
 8000dfa:	6359      	str	r1, [r3, #52]	@ 0x34
 8000dfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000dfe:	4013      	ands	r3, r2
 8000e00:	9302      	str	r3, [sp, #8]
 8000e02:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e04:	23c0      	movs	r3, #192	@ 0xc0
 8000e06:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e08:	9204      	str	r2, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e0a:	a903      	add	r1, sp, #12
 8000e0c:	4807      	ldr	r0, [pc, #28]	@ (8000e2c <HAL_UART_MspInit+0x70>)
 8000e0e:	f000 ff23 	bl	8001c58 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000e12:	2200      	movs	r2, #0
 8000e14:	2100      	movs	r1, #0
 8000e16:	201b      	movs	r0, #27
 8000e18:	f000 fd8a 	bl	8001930 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000e1c:	201b      	movs	r0, #27
 8000e1e:	f000 fd8b 	bl	8001938 <HAL_NVIC_EnableIRQ>
}
 8000e22:	e7d7      	b.n	8000dd4 <HAL_UART_MspInit+0x18>
 8000e24:	40013800 	.word	0x40013800
 8000e28:	40021000 	.word	0x40021000
 8000e2c:	50000400 	.word	0x50000400

08000e30 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e30:	e7fe      	b.n	8000e30 <NMI_Handler>

08000e32 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e32:	e7fe      	b.n	8000e32 <HardFault_Handler>

08000e34 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000e34:	4770      	bx	lr

08000e36 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e36:	4770      	bx	lr

08000e38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e38:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e3a:	f000 f89f 	bl	8000f7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e3e:	bd10      	pop	{r4, pc}

08000e40 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 interrupt.
  */
void USART1_IRQHandler(void)
{
 8000e40:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000e42:	4802      	ldr	r0, [pc, #8]	@ (8000e4c <USART1_IRQHandler+0xc>)
 8000e44:	f001 fcc4 	bl	80027d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000e48:	bd10      	pop	{r4, pc}
 8000e4a:	46c0      	nop			@ (mov r8, r8)
 8000e4c:	20000094 	.word	0x20000094

08000e50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e50:	b510      	push	{r4, lr}
 8000e52:	0003      	movs	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e54:	4a0c      	ldr	r2, [pc, #48]	@ (8000e88 <_sbrk+0x38>)
 8000e56:	490d      	ldr	r1, [pc, #52]	@ (8000e8c <_sbrk+0x3c>)
 8000e58:	1a52      	subs	r2, r2, r1
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e5a:	490d      	ldr	r1, [pc, #52]	@ (8000e90 <_sbrk+0x40>)
 8000e5c:	6809      	ldr	r1, [r1, #0]
 8000e5e:	2900      	cmp	r1, #0
 8000e60:	d007      	beq.n	8000e72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e62:	490b      	ldr	r1, [pc, #44]	@ (8000e90 <_sbrk+0x40>)
 8000e64:	6808      	ldr	r0, [r1, #0]
 8000e66:	18c3      	adds	r3, r0, r3
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	d806      	bhi.n	8000e7a <_sbrk+0x2a>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8000e6c:	4a08      	ldr	r2, [pc, #32]	@ (8000e90 <_sbrk+0x40>)
 8000e6e:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8000e70:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8000e72:	4907      	ldr	r1, [pc, #28]	@ (8000e90 <_sbrk+0x40>)
 8000e74:	4807      	ldr	r0, [pc, #28]	@ (8000e94 <_sbrk+0x44>)
 8000e76:	6008      	str	r0, [r1, #0]
 8000e78:	e7f3      	b.n	8000e62 <_sbrk+0x12>
    errno = ENOMEM;
 8000e7a:	f002 f9e7 	bl	800324c <__errno>
 8000e7e:	230c      	movs	r3, #12
 8000e80:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8000e82:	2001      	movs	r0, #1
 8000e84:	4240      	negs	r0, r0
 8000e86:	e7f3      	b.n	8000e70 <_sbrk+0x20>
 8000e88:	20003000 	.word	0x20003000
 8000e8c:	00000400 	.word	0x00000400
 8000e90:	20000234 	.word	0x20000234
 8000e94:	20000388 	.word	0x20000388

08000e98 <SystemInit>:
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e98:	4b02      	ldr	r3, [pc, #8]	@ (8000ea4 <SystemInit+0xc>)
 8000e9a:	2280      	movs	r2, #128	@ 0x80
 8000e9c:	0512      	lsls	r2, r2, #20
 8000e9e:	609a      	str	r2, [r3, #8]
#endif
}
 8000ea0:	4770      	bx	lr
 8000ea2:	46c0      	nop			@ (mov r8, r8)
 8000ea4:	e000ed00 	.word	0xe000ed00

08000ea8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ea8:	480d      	ldr	r0, [pc, #52]	@ (8000ee0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000eaa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000eac:	f7ff fff4 	bl	8000e98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000eb0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000eb2:	e003      	b.n	8000ebc <LoopCopyDataInit>

08000eb4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000eb4:	4b0b      	ldr	r3, [pc, #44]	@ (8000ee4 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8000eb6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000eb8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000eba:	3104      	adds	r1, #4

08000ebc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000ebc:	480a      	ldr	r0, [pc, #40]	@ (8000ee8 <LoopForever+0xa>)
  ldr r3, =_edata
 8000ebe:	4b0b      	ldr	r3, [pc, #44]	@ (8000eec <LoopForever+0xe>)
  adds r2, r0, r1
 8000ec0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000ec2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000ec4:	d3f6      	bcc.n	8000eb4 <CopyDataInit>
  ldr r2, =_sbss
 8000ec6:	4a0a      	ldr	r2, [pc, #40]	@ (8000ef0 <LoopForever+0x12>)
  b LoopFillZerobss
 8000ec8:	e002      	b.n	8000ed0 <LoopFillZerobss>

08000eca <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000eca:	2300      	movs	r3, #0
  str  r3, [r2]
 8000ecc:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ece:	3204      	adds	r2, #4

08000ed0 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000ed0:	4b08      	ldr	r3, [pc, #32]	@ (8000ef4 <LoopForever+0x16>)
  cmp r2, r3
 8000ed2:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000ed4:	d3f9      	bcc.n	8000eca <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000ed6:	f002 f9bf 	bl	8003258 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000eda:	f7ff feb3 	bl	8000c44 <main>

08000ede <LoopForever>:

LoopForever:
    b LoopForever
 8000ede:	e7fe      	b.n	8000ede <LoopForever>
  ldr   r0, =_estack
 8000ee0:	20003000 	.word	0x20003000
  ldr r3, =_sidata
 8000ee4:	08003d84 	.word	0x08003d84
  ldr r0, =_sdata
 8000ee8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000eec:	20000060 	.word	0x20000060
  ldr r2, =_sbss
 8000ef0:	20000060 	.word	0x20000060
  ldr r3, = _ebss
 8000ef4:	20000384 	.word	0x20000384

08000ef8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ef8:	e7fe      	b.n	8000ef8 <ADC1_IRQHandler>
	...

08000efc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000efc:	b510      	push	{r4, lr}
 8000efe:	0004      	movs	r4, r0
  HAL_StatusTypeDef  status = HAL_OK;

  if ((uint32_t)uwTickFreq != 0UL)
 8000f00:	4b11      	ldr	r3, [pc, #68]	@ (8000f48 <HAL_InitTick+0x4c>)
 8000f02:	7819      	ldrb	r1, [r3, #0]
 8000f04:	2900      	cmp	r1, #0
 8000f06:	d101      	bne.n	8000f0c <HAL_InitTick+0x10>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f08:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8000f0a:	bd10      	pop	{r4, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8000f0c:	20fa      	movs	r0, #250	@ 0xfa
 8000f0e:	0080      	lsls	r0, r0, #2
 8000f10:	f7ff f904 	bl	800011c <__udivsi3>
 8000f14:	0001      	movs	r1, r0
 8000f16:	4b0d      	ldr	r3, [pc, #52]	@ (8000f4c <HAL_InitTick+0x50>)
 8000f18:	6818      	ldr	r0, [r3, #0]
 8000f1a:	f7ff f8ff 	bl	800011c <__udivsi3>
 8000f1e:	f000 fd17 	bl	8001950 <HAL_SYSTICK_Config>
 8000f22:	2800      	cmp	r0, #0
 8000f24:	d10d      	bne.n	8000f42 <HAL_InitTick+0x46>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f26:	2c03      	cmp	r4, #3
 8000f28:	d901      	bls.n	8000f2e <HAL_InitTick+0x32>
        status = HAL_ERROR;
 8000f2a:	2001      	movs	r0, #1
 8000f2c:	e7ed      	b.n	8000f0a <HAL_InitTick+0xe>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f2e:	3001      	adds	r0, #1
 8000f30:	2200      	movs	r2, #0
 8000f32:	0021      	movs	r1, r4
 8000f34:	4240      	negs	r0, r0
 8000f36:	f000 fcfb 	bl	8001930 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f3a:	4b05      	ldr	r3, [pc, #20]	@ (8000f50 <HAL_InitTick+0x54>)
 8000f3c:	601c      	str	r4, [r3, #0]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f3e:	2000      	movs	r0, #0
 8000f40:	e7e3      	b.n	8000f0a <HAL_InitTick+0xe>
      status = HAL_ERROR;
 8000f42:	2001      	movs	r0, #1
 8000f44:	e7e1      	b.n	8000f0a <HAL_InitTick+0xe>
 8000f46:	46c0      	nop			@ (mov r8, r8)
 8000f48:	20000008 	.word	0x20000008
 8000f4c:	20000004 	.word	0x20000004
 8000f50:	2000000c 	.word	0x2000000c

08000f54 <HAL_Init>:
{
 8000f54:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f56:	4a08      	ldr	r2, [pc, #32]	@ (8000f78 <HAL_Init+0x24>)
 8000f58:	6811      	ldr	r1, [r2, #0]
 8000f5a:	2380      	movs	r3, #128	@ 0x80
 8000f5c:	005b      	lsls	r3, r3, #1
 8000f5e:	430b      	orrs	r3, r1
 8000f60:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f62:	2000      	movs	r0, #0
 8000f64:	f7ff ffca 	bl	8000efc <HAL_InitTick>
 8000f68:	1e04      	subs	r4, r0, #0
 8000f6a:	d002      	beq.n	8000f72 <HAL_Init+0x1e>
    status = HAL_ERROR;
 8000f6c:	2401      	movs	r4, #1
}
 8000f6e:	0020      	movs	r0, r4
 8000f70:	bd10      	pop	{r4, pc}
    HAL_MspInit();
 8000f72:	f7ff fe7b 	bl	8000c6c <HAL_MspInit>
 8000f76:	e7fa      	b.n	8000f6e <HAL_Init+0x1a>
 8000f78:	40022000 	.word	0x40022000

08000f7c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8000f7c:	4b03      	ldr	r3, [pc, #12]	@ (8000f8c <HAL_IncTick+0x10>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	4a03      	ldr	r2, [pc, #12]	@ (8000f90 <HAL_IncTick+0x14>)
 8000f82:	6811      	ldr	r1, [r2, #0]
 8000f84:	185b      	adds	r3, r3, r1
 8000f86:	6013      	str	r3, [r2, #0]
}
 8000f88:	4770      	bx	lr
 8000f8a:	46c0      	nop			@ (mov r8, r8)
 8000f8c:	20000008 	.word	0x20000008
 8000f90:	20000238 	.word	0x20000238

08000f94 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000f94:	4b01      	ldr	r3, [pc, #4]	@ (8000f9c <HAL_GetTick+0x8>)
 8000f96:	6818      	ldr	r0, [r3, #0]
}
 8000f98:	4770      	bx	lr
 8000f9a:	46c0      	nop			@ (mov r8, r8)
 8000f9c:	20000238 	.word	0x20000238

08000fa0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000fa0:	b530      	push	{r4, r5, lr}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	0004      	movs	r4, r0
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR1 = 0UL;
  uint32_t tmpCFGR2 = 0UL;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8000faa:	2800      	cmp	r0, #0
 8000fac:	d100      	bne.n	8000fb0 <HAL_ADC_Init+0x10>
 8000fae:	e105      	b.n	80011bc <HAL_ADC_Init+0x21c>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000fb0:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d012      	beq.n	8000fdc <HAL_ADC_Init+0x3c>

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000fb6:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000fb8:	689a      	ldr	r2, [r3, #8]
 8000fba:	00d2      	lsls	r2, r2, #3
 8000fbc:	d41b      	bmi.n	8000ff6 <HAL_ADC_Init+0x56>
  MODIFY_REG(ADCx->CR,
 8000fbe:	6899      	ldr	r1, [r3, #8]
 8000fc0:	4a7f      	ldr	r2, [pc, #508]	@ (80011c0 <HAL_ADC_Init+0x220>)
 8000fc2:	4011      	ands	r1, r2
 8000fc4:	2280      	movs	r2, #128	@ 0x80
 8000fc6:	0552      	lsls	r2, r2, #21
 8000fc8:	430a      	orrs	r2, r1
 8000fca:	609a      	str	r2, [r3, #8]
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8000fcc:	4b7d      	ldr	r3, [pc, #500]	@ (80011c4 <HAL_ADC_Init+0x224>)
 8000fce:	6818      	ldr	r0, [r3, #0]
 8000fd0:	497d      	ldr	r1, [pc, #500]	@ (80011c8 <HAL_ADC_Init+0x228>)
 8000fd2:	f7ff f8a3 	bl	800011c <__udivsi3>
 8000fd6:	0040      	lsls	r0, r0, #1
 8000fd8:	9001      	str	r0, [sp, #4]
    while (wait_loop_index != 0UL)
 8000fda:	e009      	b.n	8000ff0 <HAL_ADC_Init+0x50>
    HAL_ADC_MspInit(hadc);
 8000fdc:	f7ff fe5e 	bl	8000c9c <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	65e3      	str	r3, [r4, #92]	@ 0x5c
    hadc->Lock = HAL_UNLOCKED;
 8000fe4:	2254      	movs	r2, #84	@ 0x54
 8000fe6:	54a3      	strb	r3, [r4, r2]
 8000fe8:	e7e5      	b.n	8000fb6 <HAL_ADC_Init+0x16>
    {
      wait_loop_index--;
 8000fea:	9b01      	ldr	r3, [sp, #4]
 8000fec:	3b01      	subs	r3, #1
 8000fee:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8000ff0:	9b01      	ldr	r3, [sp, #4]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d1f9      	bne.n	8000fea <HAL_ADC_Init+0x4a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000ff6:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000ff8:	689a      	ldr	r2, [r3, #8]
 8000ffa:	00d2      	lsls	r2, r2, #3
 8000ffc:	d500      	bpl.n	8001000 <HAL_ADC_Init+0x60>
 8000ffe:	e09d      	b.n	800113c <HAL_ADC_Init+0x19c>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001000:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8001002:	2110      	movs	r1, #16
 8001004:	430a      	orrs	r2, r1
 8001006:	65a2      	str	r2, [r4, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001008:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800100a:	390f      	subs	r1, #15
 800100c:	430a      	orrs	r2, r1
 800100e:	65e2      	str	r2, [r4, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001010:	2001      	movs	r0, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001012:	689a      	ldr	r2, [r3, #8]
 8001014:	2104      	movs	r1, #4
 8001016:	000d      	movs	r5, r1
 8001018:	4015      	ands	r5, r2
 800101a:	4211      	tst	r1, r2
 800101c:	d000      	beq.n	8001020 <HAL_ADC_Init+0x80>
 800101e:	2501      	movs	r5, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001020:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8001022:	06d2      	lsls	r2, r2, #27
 8001024:	d500      	bpl.n	8001028 <HAL_ADC_Init+0x88>
 8001026:	e0c2      	b.n	80011ae <HAL_ADC_Init+0x20e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001028:	2d00      	cmp	r5, #0
 800102a:	d000      	beq.n	800102e <HAL_ADC_Init+0x8e>
 800102c:	e0bf      	b.n	80011ae <HAL_ADC_Init+0x20e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800102e:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8001030:	4966      	ldr	r1, [pc, #408]	@ (80011cc <HAL_ADC_Init+0x22c>)
 8001032:	400a      	ands	r2, r1
 8001034:	3106      	adds	r1, #6
 8001036:	31ff      	adds	r1, #255	@ 0xff
 8001038:	430a      	orrs	r2, r1
 800103a:	65a2      	str	r2, [r4, #88]	@ 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800103c:	689a      	ldr	r2, [r3, #8]
 800103e:	07d2      	lsls	r2, r2, #31
 8001040:	d452      	bmi.n	80010e8 <HAL_ADC_Init+0x148>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths: temperature sensor, Vref             */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001042:	68a2      	ldr	r2, [r4, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001044:	7e21      	ldrb	r1, [r4, #24]
 8001046:	0389      	lsls	r1, r1, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001048:	430a      	orrs	r2, r1
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800104a:	7e61      	ldrb	r1, [r4, #25]
 800104c:	03c9      	lsls	r1, r1, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800104e:	430a      	orrs	r2, r1
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001050:	7ea5      	ldrb	r5, [r4, #26]
 8001052:	0369      	lsls	r1, r5, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001054:	430a      	orrs	r2, r1
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001056:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8001058:	2900      	cmp	r1, #0
 800105a:	d001      	beq.n	8001060 <HAL_ADC_Init+0xc0>
 800105c:	2180      	movs	r1, #128	@ 0x80
 800105e:	0149      	lsls	r1, r1, #5
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001060:	430a      	orrs	r2, r1
                   hadc->Init.DataAlign                                           |
 8001062:	68e1      	ldr	r1, [r4, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001064:	430a      	orrs	r2, r1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001066:	6921      	ldr	r1, [r4, #16]
 8001068:	2900      	cmp	r1, #0
 800106a:	db69      	blt.n	8001140 <HAL_ADC_Init+0x1a0>
 800106c:	2180      	movs	r1, #128	@ 0x80
 800106e:	0389      	lsls	r1, r1, #14
                   hadc->Init.DataAlign                                           |
 8001070:	430a      	orrs	r2, r1
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001072:	212c      	movs	r1, #44	@ 0x2c
 8001074:	5c61      	ldrb	r1, [r4, r1]
 8001076:	0049      	lsls	r1, r1, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001078:	430a      	orrs	r2, r1

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800107a:	2120      	movs	r1, #32
 800107c:	5c61      	ldrb	r1, [r4, r1]
 800107e:	2901      	cmp	r1, #1
 8001080:	d061      	beq.n	8001146 <HAL_ADC_Init+0x1a6>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001082:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8001084:	2900      	cmp	r1, #0
 8001086:	d005      	beq.n	8001094 <HAL_ADC_Init+0xf4>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001088:	25e0      	movs	r5, #224	@ 0xe0
 800108a:	006d      	lsls	r5, r5, #1
 800108c:	4029      	ands	r1, r5
                     hadc->Init.ExternalTrigConvEdge);
 800108e:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001090:	4329      	orrs	r1, r5
 8001092:	430a      	orrs	r2, r1
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001094:	68d9      	ldr	r1, [r3, #12]
 8001096:	4d4e      	ldr	r5, [pc, #312]	@ (80011d0 <HAL_ADC_Init+0x230>)
 8001098:	4029      	ands	r1, r5
 800109a:	430a      	orrs	r2, r1
 800109c:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800109e:	6863      	ldr	r3, [r4, #4]
 80010a0:	0f9b      	lsrs	r3, r3, #30
 80010a2:	079b      	lsls	r3, r3, #30
                   hadc->Init.TriggerFrequencyMode
 80010a4:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80010a6:	431a      	orrs	r2, r3
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 80010a8:	213c      	movs	r1, #60	@ 0x3c
 80010aa:	5c61      	ldrb	r1, [r4, r1]
 80010ac:	2901      	cmp	r1, #1
 80010ae:	d059      	beq.n	8001164 <HAL_ADC_Init+0x1c4>
                     hadc->Init.Oversampling.RightBitShift |
                     hadc->Init.Oversampling.TriggeredMode
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80010b0:	6821      	ldr	r1, [r4, #0]
 80010b2:	690b      	ldr	r3, [r1, #16]
 80010b4:	4d47      	ldr	r5, [pc, #284]	@ (80011d4 <HAL_ADC_Init+0x234>)
 80010b6:	402b      	ands	r3, r5
 80010b8:	4313      	orrs	r3, r2
 80010ba:	610b      	str	r3, [r1, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80010bc:	6863      	ldr	r3, [r4, #4]
 80010be:	22c0      	movs	r2, #192	@ 0xc0
 80010c0:	0612      	lsls	r2, r2, #24
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d010      	beq.n	80010e8 <HAL_ADC_Init+0x148>
 80010c6:	2280      	movs	r2, #128	@ 0x80
 80010c8:	05d2      	lsls	r2, r2, #23
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d00c      	beq.n	80010e8 <HAL_ADC_Init+0x148>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80010ce:	2280      	movs	r2, #128	@ 0x80
 80010d0:	0612      	lsls	r2, r2, #24
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d008      	beq.n	80010e8 <HAL_ADC_Init+0x148>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80010d6:	4940      	ldr	r1, [pc, #256]	@ (80011d8 <HAL_ADC_Init+0x238>)
 80010d8:	680a      	ldr	r2, [r1, #0]
 80010da:	4d40      	ldr	r5, [pc, #256]	@ (80011dc <HAL_ADC_Init+0x23c>)
 80010dc:	402a      	ands	r2, r5
 80010de:	25f0      	movs	r5, #240	@ 0xf0
 80010e0:	03ad      	lsls	r5, r5, #14
 80010e2:	402b      	ands	r3, r5
 80010e4:	4313      	orrs	r3, r2
 80010e6:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80010e8:	6821      	ldr	r1, [r4, #0]
 80010ea:	6b63      	ldr	r3, [r4, #52]	@ 0x34
  MODIFY_REG(ADCx->SMPR,
 80010ec:	694a      	ldr	r2, [r1, #20]
 80010ee:	2507      	movs	r5, #7
 80010f0:	43aa      	bics	r2, r5
 80010f2:	4313      	orrs	r3, r2
 80010f4:	614b      	str	r3, [r1, #20]
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80010f6:	6821      	ldr	r1, [r4, #0]
 80010f8:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80010fa:	694b      	ldr	r3, [r1, #20]
 80010fc:	3569      	adds	r5, #105	@ 0x69
 80010fe:	43ab      	bics	r3, r5
 8001100:	0112      	lsls	r2, r2, #4
 8001102:	4313      	orrs	r3, r2
 8001104:	614b      	str	r3, [r1, #20]
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001106:	6923      	ldr	r3, [r4, #16]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d135      	bne.n	8001178 <HAL_ADC_Init+0x1d8>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800110c:	6822      	ldr	r2, [r4, #0]
 800110e:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8001110:	3b10      	subs	r3, #16
 8001112:	430b      	orrs	r3, r1
 8001114:	6293      	str	r3, [r2, #40]	@ 0x28
    {
      /* Nothing to do */
    }
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001116:	6823      	ldr	r3, [r4, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001118:	695a      	ldr	r2, [r3, #20]
 800111a:	2307      	movs	r3, #7
 800111c:	4013      	ands	r3, r2
        == hadc->Init.SamplingTimeCommon1)
 800111e:	6b62      	ldr	r2, [r4, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001120:	429a      	cmp	r2, r3
 8001122:	d03b      	beq.n	800119c <HAL_ADC_Init+0x1fc>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001124:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001126:	2212      	movs	r2, #18
 8001128:	4393      	bics	r3, r2
 800112a:	3a02      	subs	r2, #2
 800112c:	4313      	orrs	r3, r2
 800112e:	65a3      	str	r3, [r4, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001130:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8001132:	3a0f      	subs	r2, #15
 8001134:	4313      	orrs	r3, r2
 8001136:	65e3      	str	r3, [r4, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8001138:	2001      	movs	r0, #1
 800113a:	e03d      	b.n	80011b8 <HAL_ADC_Init+0x218>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800113c:	2000      	movs	r0, #0
 800113e:	e768      	b.n	8001012 <HAL_ADC_Init+0x72>
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001140:	0049      	lsls	r1, r1, #1
 8001142:	0849      	lsrs	r1, r1, #1
 8001144:	e794      	b.n	8001070 <HAL_ADC_Init+0xd0>
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001146:	2d00      	cmp	r5, #0
 8001148:	d103      	bne.n	8001152 <HAL_ADC_Init+0x1b2>
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800114a:	2180      	movs	r1, #128	@ 0x80
 800114c:	0249      	lsls	r1, r1, #9
 800114e:	430a      	orrs	r2, r1
 8001150:	e797      	b.n	8001082 <HAL_ADC_Init+0xe2>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001152:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8001154:	2520      	movs	r5, #32
 8001156:	4329      	orrs	r1, r5
 8001158:	65a1      	str	r1, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800115a:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 800115c:	3d1f      	subs	r5, #31
 800115e:	4329      	orrs	r1, r5
 8001160:	65e1      	str	r1, [r4, #92]	@ 0x5c
 8001162:	e78e      	b.n	8001082 <HAL_ADC_Init+0xe2>
                     hadc->Init.Oversampling.Ratio         |
 8001164:	6c21      	ldr	r1, [r4, #64]	@ 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001166:	430b      	orrs	r3, r1
                     hadc->Init.Oversampling.RightBitShift |
 8001168:	6c61      	ldr	r1, [r4, #68]	@ 0x44
                     hadc->Init.Oversampling.Ratio         |
 800116a:	430b      	orrs	r3, r1
                     hadc->Init.Oversampling.TriggeredMode
 800116c:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
                     hadc->Init.Oversampling.RightBitShift |
 800116e:	430b      	orrs	r3, r1
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8001170:	4313      	orrs	r3, r2
 8001172:	2201      	movs	r2, #1
 8001174:	431a      	orrs	r2, r3
 8001176:	e79b      	b.n	80010b0 <HAL_ADC_Init+0x110>
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001178:	2280      	movs	r2, #128	@ 0x80
 800117a:	0392      	lsls	r2, r2, #14
 800117c:	4293      	cmp	r3, r2
 800117e:	d1ca      	bne.n	8001116 <HAL_ADC_Init+0x176>
      MODIFY_REG(hadc->Instance->CHSELR,
 8001180:	6821      	ldr	r1, [r4, #0]
 8001182:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 8001184:	69e3      	ldr	r3, [r4, #28]
 8001186:	3b01      	subs	r3, #1
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	221c      	movs	r2, #28
 800118c:	401a      	ands	r2, r3
 800118e:	2310      	movs	r3, #16
 8001190:	425b      	negs	r3, r3
 8001192:	4093      	lsls	r3, r2
 8001194:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8001196:	4313      	orrs	r3, r2
 8001198:	628b      	str	r3, [r1, #40]	@ 0x28
 800119a:	e7bc      	b.n	8001116 <HAL_ADC_Init+0x176>
      ADC_CLEAR_ERRORCODE(hadc);
 800119c:	2300      	movs	r3, #0
 800119e:	65e3      	str	r3, [r4, #92]	@ 0x5c
      ADC_STATE_CLR_SET(hadc->State,
 80011a0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80011a2:	2203      	movs	r2, #3
 80011a4:	4393      	bics	r3, r2
 80011a6:	3a02      	subs	r2, #2
 80011a8:	4313      	orrs	r3, r2
 80011aa:	65a3      	str	r3, [r4, #88]	@ 0x58
 80011ac:	e004      	b.n	80011b8 <HAL_ADC_Init+0x218>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011ae:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80011b0:	2210      	movs	r2, #16
 80011b2:	4313      	orrs	r3, r2
 80011b4:	65a3      	str	r3, [r4, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80011b6:	2001      	movs	r0, #1
  }

  /* Return function status */
  return tmp_hal_status;
}
 80011b8:	b003      	add	sp, #12
 80011ba:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 80011bc:	2001      	movs	r0, #1
 80011be:	e7fb      	b.n	80011b8 <HAL_ADC_Init+0x218>
 80011c0:	6fffffe8 	.word	0x6fffffe8
 80011c4:	20000004 	.word	0x20000004
 80011c8:	00030d40 	.word	0x00030d40
 80011cc:	fffffefd 	.word	0xfffffefd
 80011d0:	ffde0201 	.word	0xffde0201
 80011d4:	1ffffc02 	.word	0x1ffffc02
 80011d8:	40012708 	.word	0x40012708
 80011dc:	ffc3ffff 	.word	0xffc3ffff

080011e0 <HAL_ADC_ConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80011e0:	4770      	bx	lr

080011e2 <HAL_ADC_ConvHalfCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80011e2:	4770      	bx	lr

080011e4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80011e4:	b510      	push	{r4, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80011e6:	6a80      	ldr	r0, [r0, #40]	@ 0x28

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80011e8:	f7ff fffb 	bl	80011e2 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80011ec:	bd10      	pop	{r4, pc}

080011ee <HAL_ADC_ErrorCallback>:
}
 80011ee:	4770      	bx	lr

080011f0 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80011f0:	b510      	push	{r4, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80011f2:	6a80      	ldr	r0, [r0, #40]	@ 0x28

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80011f4:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 80011f6:	2240      	movs	r2, #64	@ 0x40
 80011f8:	4313      	orrs	r3, r2
 80011fa:	6583      	str	r3, [r0, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80011fc:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 80011fe:	3a3c      	subs	r2, #60	@ 0x3c
 8001200:	4313      	orrs	r3, r2
 8001202:	65c3      	str	r3, [r0, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001204:	f7ff fff3 	bl	80011ee <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001208:	bd10      	pop	{r4, pc}
	...

0800120c <ADC_DMAConvCplt>:
{
 800120c:	b510      	push	{r4, lr}
 800120e:	0003      	movs	r3, r0
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001210:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001212:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 8001214:	2150      	movs	r1, #80	@ 0x50
 8001216:	4211      	tst	r1, r2
 8001218:	d12a      	bne.n	8001270 <ADC_DMAConvCplt+0x64>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800121a:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 800121c:	2380      	movs	r3, #128	@ 0x80
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	4313      	orrs	r3, r2
 8001222:	6583      	str	r3, [r0, #88]	@ 0x58
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001224:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8001226:	68d9      	ldr	r1, [r3, #12]
 8001228:	22c0      	movs	r2, #192	@ 0xc0
 800122a:	0112      	lsls	r2, r2, #4
 800122c:	4211      	tst	r1, r2
 800122e:	d113      	bne.n	8001258 <ADC_DMAConvCplt+0x4c>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8001230:	7e82      	ldrb	r2, [r0, #26]
 8001232:	2a00      	cmp	r2, #0
 8001234:	d110      	bne.n	8001258 <ADC_DMAConvCplt+0x4c>
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	0712      	lsls	r2, r2, #28
 800123a:	d50d      	bpl.n	8001258 <ADC_DMAConvCplt+0x4c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800123c:	689a      	ldr	r2, [r3, #8]
 800123e:	0752      	lsls	r2, r2, #29
 8001240:	d40d      	bmi.n	800125e <ADC_DMAConvCplt+0x52>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001242:	685a      	ldr	r2, [r3, #4]
 8001244:	210c      	movs	r1, #12
 8001246:	438a      	bics	r2, r1
 8001248:	605a      	str	r2, [r3, #4]
          ADC_STATE_CLR_SET(hadc->State,
 800124a:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 800124c:	4a0e      	ldr	r2, [pc, #56]	@ (8001288 <ADC_DMAConvCplt+0x7c>)
 800124e:	4013      	ands	r3, r2
 8001250:	3204      	adds	r2, #4
 8001252:	32ff      	adds	r2, #255	@ 0xff
 8001254:	4313      	orrs	r3, r2
 8001256:	6583      	str	r3, [r0, #88]	@ 0x58
    HAL_ADC_ConvCpltCallback(hadc);
 8001258:	f7ff ffc2 	bl	80011e0 <HAL_ADC_ConvCpltCallback>
}
 800125c:	bd10      	pop	{r4, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800125e:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8001260:	2220      	movs	r2, #32
 8001262:	4313      	orrs	r3, r2
 8001264:	6583      	str	r3, [r0, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001266:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 8001268:	3a1f      	subs	r2, #31
 800126a:	4313      	orrs	r3, r2
 800126c:	65c3      	str	r3, [r0, #92]	@ 0x5c
 800126e:	e7f3      	b.n	8001258 <ADC_DMAConvCplt+0x4c>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001270:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 8001272:	06d2      	lsls	r2, r2, #27
 8001274:	d404      	bmi.n	8001280 <ADC_DMAConvCplt+0x74>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001276:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8001278:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800127a:	0018      	movs	r0, r3
 800127c:	4790      	blx	r2
}
 800127e:	e7ed      	b.n	800125c <ADC_DMAConvCplt+0x50>
      HAL_ADC_ErrorCallback(hadc);
 8001280:	f7ff ffb5 	bl	80011ee <HAL_ADC_ErrorCallback>
 8001284:	e7ea      	b.n	800125c <ADC_DMAConvCplt+0x50>
 8001286:	46c0      	nop			@ (mov r8, r8)
 8001288:	fffffefe 	.word	0xfffffefe

0800128c <HAL_ADC_ConfigChannel>:
{
 800128c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800128e:	b083      	sub	sp, #12
 8001290:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0UL;
 8001292:	2300      	movs	r3, #0
 8001294:	9301      	str	r3, [sp, #4]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001296:	6905      	ldr	r5, [r0, #16]
  __HAL_LOCK(hadc);
 8001298:	3354      	adds	r3, #84	@ 0x54
 800129a:	5cc3      	ldrb	r3, [r0, r3]
 800129c:	2b01      	cmp	r3, #1
 800129e:	d100      	bne.n	80012a2 <HAL_ADC_ConfigChannel+0x16>
 80012a0:	e121      	b.n	80014e6 <HAL_ADC_ConfigChannel+0x25a>
 80012a2:	2354      	movs	r3, #84	@ 0x54
 80012a4:	2201      	movs	r2, #1
 80012a6:	54c2      	strb	r2, [r0, r3]
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80012a8:	6800      	ldr	r0, [r0, #0]
 80012aa:	6883      	ldr	r3, [r0, #8]
 80012ac:	3203      	adds	r2, #3
 80012ae:	0016      	movs	r6, r2
 80012b0:	401e      	ands	r6, r3
 80012b2:	421a      	tst	r2, r3
 80012b4:	d009      	beq.n	80012ca <HAL_ADC_ConfigChannel+0x3e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012b6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80012b8:	321c      	adds	r2, #28
 80012ba:	4313      	orrs	r3, r2
 80012bc:	65a3      	str	r3, [r4, #88]	@ 0x58
    tmp_hal_status = HAL_ERROR;
 80012be:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 80012c0:	2354      	movs	r3, #84	@ 0x54
 80012c2:	2200      	movs	r2, #0
 80012c4:	54e2      	strb	r2, [r4, r3]
}
 80012c6:	b003      	add	sp, #12
 80012c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (sConfig->Rank != ADC_RANK_NONE)
 80012ca:	684b      	ldr	r3, [r1, #4]
 80012cc:	2b02      	cmp	r3, #2
 80012ce:	d100      	bne.n	80012d2 <HAL_ADC_ConfigChannel+0x46>
 80012d0:	e0d5      	b.n	800147e <HAL_ADC_ConfigChannel+0x1f2>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80012d2:	2280      	movs	r2, #128	@ 0x80
 80012d4:	0612      	lsls	r2, r2, #24
 80012d6:	4295      	cmp	r5, r2
 80012d8:	d025      	beq.n	8001326 <HAL_ADC_ConfigChannel+0x9a>
 80012da:	4a84      	ldr	r2, [pc, #528]	@ (80014ec <HAL_ADC_ConfigChannel+0x260>)
 80012dc:	4295      	cmp	r5, r2
 80012de:	d022      	beq.n	8001326 <HAL_ADC_ConfigChannel+0x9a>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80012e0:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 80012e2:	271f      	movs	r7, #31
 80012e4:	401f      	ands	r7, r3
 80012e6:	250f      	movs	r5, #15
 80012e8:	40bd      	lsls	r5, r7
 80012ea:	43aa      	bics	r2, r5
 80012ec:	680b      	ldr	r3, [r1, #0]
 80012ee:	025d      	lsls	r5, r3, #9
 80012f0:	d12f      	bne.n	8001352 <HAL_ADC_ConfigChannel+0xc6>
 80012f2:	0e9b      	lsrs	r3, r3, #26
 80012f4:	261f      	movs	r6, #31
 80012f6:	401e      	ands	r6, r3
 80012f8:	40be      	lsls	r6, r7
 80012fa:	4332      	orrs	r2, r6
 80012fc:	6622      	str	r2, [r4, #96]	@ 0x60
        if (((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80012fe:	684d      	ldr	r5, [r1, #4]
 8001300:	08ab      	lsrs	r3, r5, #2
 8001302:	3301      	adds	r3, #1
 8001304:	69e2      	ldr	r2, [r4, #28]
 8001306:	4293      	cmp	r3, r2
 8001308:	d813      	bhi.n	8001332 <HAL_ADC_ConfigChannel+0xa6>
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800130a:	680e      	ldr	r6, [r1, #0]
  MODIFY_REG(ADCx->CHSELR,
 800130c:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 800130e:	231f      	movs	r3, #31
 8001310:	401d      	ands	r5, r3
 8001312:	3b10      	subs	r3, #16
 8001314:	001f      	movs	r7, r3
 8001316:	40af      	lsls	r7, r5
 8001318:	43ba      	bics	r2, r7
 800131a:	0eb6      	lsrs	r6, r6, #26
 800131c:	4033      	ands	r3, r6
 800131e:	40ab      	lsls	r3, r5
 8001320:	4313      	orrs	r3, r2
 8001322:	6283      	str	r3, [r0, #40]	@ 0x28
}
 8001324:	e005      	b.n	8001332 <HAL_ADC_ConfigChannel+0xa6>
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 8001326:	680b      	ldr	r3, [r1, #0]
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001328:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 800132a:	025b      	lsls	r3, r3, #9
 800132c:	0a5b      	lsrs	r3, r3, #9
 800132e:	4313      	orrs	r3, r2
 8001330:	6283      	str	r3, [r0, #40]	@ 0x28
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001332:	6820      	ldr	r0, [r4, #0]
 8001334:	680b      	ldr	r3, [r1, #0]
 8001336:	688d      	ldr	r5, [r1, #8]
  MODIFY_REG(ADCx->SMPR,
 8001338:	6942      	ldr	r2, [r0, #20]
 800133a:	021b      	lsls	r3, r3, #8
 800133c:	439a      	bics	r2, r3
 800133e:	402b      	ands	r3, r5
 8001340:	4d6b      	ldr	r5, [pc, #428]	@ (80014f0 <HAL_ADC_ConfigChannel+0x264>)
 8001342:	402b      	ands	r3, r5
 8001344:	4313      	orrs	r3, r2
 8001346:	6143      	str	r3, [r0, #20]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001348:	680b      	ldr	r3, [r1, #0]
 800134a:	2b00      	cmp	r3, #0
 800134c:	db5f      	blt.n	800140e <HAL_ADC_ConfigChannel+0x182>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800134e:	2000      	movs	r0, #0
 8001350:	e7b6      	b.n	80012c0 <HAL_ADC_ConfigChannel+0x34>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001352:	07dd      	lsls	r5, r3, #31
 8001354:	d4d0      	bmi.n	80012f8 <HAL_ADC_ConfigChannel+0x6c>
 8001356:	079d      	lsls	r5, r3, #30
 8001358:	d42f      	bmi.n	80013ba <HAL_ADC_ConfigChannel+0x12e>
 800135a:	075d      	lsls	r5, r3, #29
 800135c:	d42f      	bmi.n	80013be <HAL_ADC_ConfigChannel+0x132>
 800135e:	071d      	lsls	r5, r3, #28
 8001360:	d42f      	bmi.n	80013c2 <HAL_ADC_ConfigChannel+0x136>
 8001362:	06dd      	lsls	r5, r3, #27
 8001364:	d42f      	bmi.n	80013c6 <HAL_ADC_ConfigChannel+0x13a>
 8001366:	069d      	lsls	r5, r3, #26
 8001368:	d42f      	bmi.n	80013ca <HAL_ADC_ConfigChannel+0x13e>
 800136a:	065d      	lsls	r5, r3, #25
 800136c:	d42f      	bmi.n	80013ce <HAL_ADC_ConfigChannel+0x142>
 800136e:	061d      	lsls	r5, r3, #24
 8001370:	d42f      	bmi.n	80013d2 <HAL_ADC_ConfigChannel+0x146>
 8001372:	05dd      	lsls	r5, r3, #23
 8001374:	d42f      	bmi.n	80013d6 <HAL_ADC_ConfigChannel+0x14a>
 8001376:	059d      	lsls	r5, r3, #22
 8001378:	d42f      	bmi.n	80013da <HAL_ADC_ConfigChannel+0x14e>
 800137a:	055d      	lsls	r5, r3, #21
 800137c:	d42f      	bmi.n	80013de <HAL_ADC_ConfigChannel+0x152>
 800137e:	051d      	lsls	r5, r3, #20
 8001380:	d42f      	bmi.n	80013e2 <HAL_ADC_ConfigChannel+0x156>
 8001382:	04dd      	lsls	r5, r3, #19
 8001384:	d42f      	bmi.n	80013e6 <HAL_ADC_ConfigChannel+0x15a>
 8001386:	049d      	lsls	r5, r3, #18
 8001388:	d42f      	bmi.n	80013ea <HAL_ADC_ConfigChannel+0x15e>
 800138a:	045d      	lsls	r5, r3, #17
 800138c:	d42f      	bmi.n	80013ee <HAL_ADC_ConfigChannel+0x162>
 800138e:	041d      	lsls	r5, r3, #16
 8001390:	d42f      	bmi.n	80013f2 <HAL_ADC_ConfigChannel+0x166>
 8001392:	03dd      	lsls	r5, r3, #15
 8001394:	d42f      	bmi.n	80013f6 <HAL_ADC_ConfigChannel+0x16a>
 8001396:	039d      	lsls	r5, r3, #14
 8001398:	d42f      	bmi.n	80013fa <HAL_ADC_ConfigChannel+0x16e>
 800139a:	035d      	lsls	r5, r3, #13
 800139c:	d42f      	bmi.n	80013fe <HAL_ADC_ConfigChannel+0x172>
 800139e:	031d      	lsls	r5, r3, #12
 80013a0:	d42f      	bmi.n	8001402 <HAL_ADC_ConfigChannel+0x176>
 80013a2:	02dd      	lsls	r5, r3, #11
 80013a4:	d42f      	bmi.n	8001406 <HAL_ADC_ConfigChannel+0x17a>
 80013a6:	029d      	lsls	r5, r3, #10
 80013a8:	d42f      	bmi.n	800140a <HAL_ADC_ConfigChannel+0x17e>
 80013aa:	2580      	movs	r5, #128	@ 0x80
 80013ac:	03ed      	lsls	r5, r5, #15
 80013ae:	001e      	movs	r6, r3
 80013b0:	402e      	ands	r6, r5
 80013b2:	422b      	tst	r3, r5
 80013b4:	d0a0      	beq.n	80012f8 <HAL_ADC_ConfigChannel+0x6c>
 80013b6:	2616      	movs	r6, #22
 80013b8:	e79e      	b.n	80012f8 <HAL_ADC_ConfigChannel+0x6c>
 80013ba:	2601      	movs	r6, #1
 80013bc:	e79c      	b.n	80012f8 <HAL_ADC_ConfigChannel+0x6c>
 80013be:	2602      	movs	r6, #2
 80013c0:	e79a      	b.n	80012f8 <HAL_ADC_ConfigChannel+0x6c>
 80013c2:	2603      	movs	r6, #3
 80013c4:	e798      	b.n	80012f8 <HAL_ADC_ConfigChannel+0x6c>
 80013c6:	2604      	movs	r6, #4
 80013c8:	e796      	b.n	80012f8 <HAL_ADC_ConfigChannel+0x6c>
 80013ca:	2605      	movs	r6, #5
 80013cc:	e794      	b.n	80012f8 <HAL_ADC_ConfigChannel+0x6c>
 80013ce:	2606      	movs	r6, #6
 80013d0:	e792      	b.n	80012f8 <HAL_ADC_ConfigChannel+0x6c>
 80013d2:	2607      	movs	r6, #7
 80013d4:	e790      	b.n	80012f8 <HAL_ADC_ConfigChannel+0x6c>
 80013d6:	2608      	movs	r6, #8
 80013d8:	e78e      	b.n	80012f8 <HAL_ADC_ConfigChannel+0x6c>
 80013da:	2609      	movs	r6, #9
 80013dc:	e78c      	b.n	80012f8 <HAL_ADC_ConfigChannel+0x6c>
 80013de:	260a      	movs	r6, #10
 80013e0:	e78a      	b.n	80012f8 <HAL_ADC_ConfigChannel+0x6c>
 80013e2:	260b      	movs	r6, #11
 80013e4:	e788      	b.n	80012f8 <HAL_ADC_ConfigChannel+0x6c>
 80013e6:	260c      	movs	r6, #12
 80013e8:	e786      	b.n	80012f8 <HAL_ADC_ConfigChannel+0x6c>
 80013ea:	260d      	movs	r6, #13
 80013ec:	e784      	b.n	80012f8 <HAL_ADC_ConfigChannel+0x6c>
 80013ee:	260e      	movs	r6, #14
 80013f0:	e782      	b.n	80012f8 <HAL_ADC_ConfigChannel+0x6c>
 80013f2:	260f      	movs	r6, #15
 80013f4:	e780      	b.n	80012f8 <HAL_ADC_ConfigChannel+0x6c>
 80013f6:	2610      	movs	r6, #16
 80013f8:	e77e      	b.n	80012f8 <HAL_ADC_ConfigChannel+0x6c>
 80013fa:	2611      	movs	r6, #17
 80013fc:	e77c      	b.n	80012f8 <HAL_ADC_ConfigChannel+0x6c>
 80013fe:	2612      	movs	r6, #18
 8001400:	e77a      	b.n	80012f8 <HAL_ADC_ConfigChannel+0x6c>
 8001402:	2613      	movs	r6, #19
 8001404:	e778      	b.n	80012f8 <HAL_ADC_ConfigChannel+0x6c>
 8001406:	2614      	movs	r6, #20
 8001408:	e776      	b.n	80012f8 <HAL_ADC_ConfigChannel+0x6c>
 800140a:	2615      	movs	r6, #21
 800140c:	e774      	b.n	80012f8 <HAL_ADC_ConfigChannel+0x6c>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN));
 800140e:	4a39      	ldr	r2, [pc, #228]	@ (80014f4 <HAL_ADC_ConfigChannel+0x268>)
 8001410:	6811      	ldr	r1, [r2, #0]
 8001412:	22c0      	movs	r2, #192	@ 0xc0
 8001414:	0412      	lsls	r2, r2, #16
 8001416:	400a      	ands	r2, r1
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001418:	4837      	ldr	r0, [pc, #220]	@ (80014f8 <HAL_ADC_ConfigChannel+0x26c>)
 800141a:	4283      	cmp	r3, r0
 800141c:	d004      	beq.n	8001428 <HAL_ADC_ConfigChannel+0x19c>
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800141e:	4837      	ldr	r0, [pc, #220]	@ (80014fc <HAL_ADC_ConfigChannel+0x270>)
 8001420:	4283      	cmp	r3, r0
 8001422:	d01f      	beq.n	8001464 <HAL_ADC_ConfigChannel+0x1d8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001424:	2000      	movs	r0, #0
 8001426:	e74b      	b.n	80012c0 <HAL_ADC_ConfigChannel+0x34>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001428:	0208      	lsls	r0, r1, #8
 800142a:	d4f8      	bmi.n	800141e <HAL_ADC_ConfigChannel+0x192>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800142c:	2380      	movs	r3, #128	@ 0x80
 800142e:	041b      	lsls	r3, r3, #16
 8001430:	4313      	orrs	r3, r2
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 8001432:	4930      	ldr	r1, [pc, #192]	@ (80014f4 <HAL_ADC_ConfigChannel+0x268>)
 8001434:	680a      	ldr	r2, [r1, #0]
 8001436:	4832      	ldr	r0, [pc, #200]	@ (8001500 <HAL_ADC_ConfigChannel+0x274>)
 8001438:	4002      	ands	r2, r0
 800143a:	4313      	orrs	r3, r2
 800143c:	600b      	str	r3, [r1, #0]
          wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 800143e:	4b31      	ldr	r3, [pc, #196]	@ (8001504 <HAL_ADC_ConfigChannel+0x278>)
 8001440:	6818      	ldr	r0, [r3, #0]
 8001442:	4931      	ldr	r1, [pc, #196]	@ (8001508 <HAL_ADC_ConfigChannel+0x27c>)
 8001444:	f7fe fe6a 	bl	800011c <__udivsi3>
 8001448:	0043      	lsls	r3, r0, #1
 800144a:	181b      	adds	r3, r3, r0
 800144c:	009b      	lsls	r3, r3, #2
 800144e:	3301      	adds	r3, #1
 8001450:	9301      	str	r3, [sp, #4]
          while (wait_loop_index != 0UL)
 8001452:	e002      	b.n	800145a <HAL_ADC_ConfigChannel+0x1ce>
            wait_loop_index--;
 8001454:	9b01      	ldr	r3, [sp, #4]
 8001456:	3b01      	subs	r3, #1
 8001458:	9301      	str	r3, [sp, #4]
          while (wait_loop_index != 0UL)
 800145a:	9b01      	ldr	r3, [sp, #4]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d1f9      	bne.n	8001454 <HAL_ADC_ConfigChannel+0x1c8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001460:	2000      	movs	r0, #0
 8001462:	e72d      	b.n	80012c0 <HAL_ADC_ConfigChannel+0x34>
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001464:	0249      	lsls	r1, r1, #9
 8001466:	d43c      	bmi.n	80014e2 <HAL_ADC_ConfigChannel+0x256>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001468:	2380      	movs	r3, #128	@ 0x80
 800146a:	03db      	lsls	r3, r3, #15
 800146c:	4313      	orrs	r3, r2
 800146e:	4921      	ldr	r1, [pc, #132]	@ (80014f4 <HAL_ADC_ConfigChannel+0x268>)
 8001470:	680a      	ldr	r2, [r1, #0]
 8001472:	4823      	ldr	r0, [pc, #140]	@ (8001500 <HAL_ADC_ConfigChannel+0x274>)
 8001474:	4002      	ands	r2, r0
 8001476:	4313      	orrs	r3, r2
 8001478:	600b      	str	r3, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800147a:	2000      	movs	r0, #0
}
 800147c:	e720      	b.n	80012c0 <HAL_ADC_ConfigChannel+0x34>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800147e:	2380      	movs	r3, #128	@ 0x80
 8001480:	061b      	lsls	r3, r3, #24
 8001482:	429d      	cmp	r5, r3
 8001484:	d002      	beq.n	800148c <HAL_ADC_ConfigChannel+0x200>
 8001486:	4b19      	ldr	r3, [pc, #100]	@ (80014ec <HAL_ADC_ConfigChannel+0x260>)
 8001488:	429d      	cmp	r5, r3
 800148a:	d105      	bne.n	8001498 <HAL_ADC_ConfigChannel+0x20c>
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 800148c:	680b      	ldr	r3, [r1, #0]
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800148e:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 8001490:	025b      	lsls	r3, r3, #9
 8001492:	0a5b      	lsrs	r3, r3, #9
 8001494:	439a      	bics	r2, r3
 8001496:	6282      	str	r2, [r0, #40]	@ 0x28
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001498:	680b      	ldr	r3, [r1, #0]
 800149a:	2b00      	cmp	r3, #0
 800149c:	db01      	blt.n	80014a2 <HAL_ADC_ConfigChannel+0x216>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800149e:	2000      	movs	r0, #0
 80014a0:	e70e      	b.n	80012c0 <HAL_ADC_ConfigChannel+0x34>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN));
 80014a2:	4a14      	ldr	r2, [pc, #80]	@ (80014f4 <HAL_ADC_ConfigChannel+0x268>)
 80014a4:	6812      	ldr	r2, [r2, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80014a6:	4914      	ldr	r1, [pc, #80]	@ (80014f8 <HAL_ADC_ConfigChannel+0x26c>)
 80014a8:	428b      	cmp	r3, r1
 80014aa:	d004      	beq.n	80014b6 <HAL_ADC_ConfigChannel+0x22a>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80014ac:	4913      	ldr	r1, [pc, #76]	@ (80014fc <HAL_ADC_ConfigChannel+0x270>)
 80014ae:	428b      	cmp	r3, r1
 80014b0:	d00c      	beq.n	80014cc <HAL_ADC_ConfigChannel+0x240>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014b2:	2000      	movs	r0, #0
 80014b4:	e704      	b.n	80012c0 <HAL_ADC_ConfigChannel+0x34>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80014b6:	2380      	movs	r3, #128	@ 0x80
 80014b8:	03db      	lsls	r3, r3, #15
 80014ba:	401a      	ands	r2, r3
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 80014bc:	490d      	ldr	r1, [pc, #52]	@ (80014f4 <HAL_ADC_ConfigChannel+0x268>)
 80014be:	680b      	ldr	r3, [r1, #0]
 80014c0:	480f      	ldr	r0, [pc, #60]	@ (8001500 <HAL_ADC_ConfigChannel+0x274>)
 80014c2:	4003      	ands	r3, r0
 80014c4:	431a      	orrs	r2, r3
 80014c6:	600a      	str	r2, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014c8:	2000      	movs	r0, #0
}
 80014ca:	e6f9      	b.n	80012c0 <HAL_ADC_ConfigChannel+0x34>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80014cc:	2380      	movs	r3, #128	@ 0x80
 80014ce:	041b      	lsls	r3, r3, #16
 80014d0:	401a      	ands	r2, r3
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 80014d2:	4908      	ldr	r1, [pc, #32]	@ (80014f4 <HAL_ADC_ConfigChannel+0x268>)
 80014d4:	680b      	ldr	r3, [r1, #0]
 80014d6:	480a      	ldr	r0, [pc, #40]	@ (8001500 <HAL_ADC_ConfigChannel+0x274>)
 80014d8:	4003      	ands	r3, r0
 80014da:	431a      	orrs	r2, r3
 80014dc:	600a      	str	r2, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014de:	2000      	movs	r0, #0
}
 80014e0:	e6ee      	b.n	80012c0 <HAL_ADC_ConfigChannel+0x34>
 80014e2:	2000      	movs	r0, #0
 80014e4:	e6ec      	b.n	80012c0 <HAL_ADC_ConfigChannel+0x34>
  __HAL_LOCK(hadc);
 80014e6:	2002      	movs	r0, #2
 80014e8:	e6ed      	b.n	80012c6 <HAL_ADC_ConfigChannel+0x3a>
 80014ea:	46c0      	nop			@ (mov r8, r8)
 80014ec:	80000004 	.word	0x80000004
 80014f0:	7fffff00 	.word	0x7fffff00
 80014f4:	40012708 	.word	0x40012708
 80014f8:	a4000200 	.word	0xa4000200
 80014fc:	a8000400 	.word	0xa8000400
 8001500:	ff3fffff 	.word	0xff3fffff
 8001504:	20000004 	.word	0x20000004
 8001508:	00030d40 	.word	0x00030d40

0800150c <ADC_Enable>:
{
 800150c:	b530      	push	{r4, r5, lr}
 800150e:	b083      	sub	sp, #12
 8001510:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0UL;
 8001512:	2300      	movs	r3, #0
 8001514:	9301      	str	r3, [sp, #4]
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001516:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001518:	689a      	ldr	r2, [r3, #8]
 800151a:	07d2      	lsls	r2, r2, #31
 800151c:	d44d      	bmi.n	80015ba <ADC_Enable+0xae>
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800151e:	6899      	ldr	r1, [r3, #8]
 8001520:	4a27      	ldr	r2, [pc, #156]	@ (80015c0 <ADC_Enable+0xb4>)
 8001522:	4211      	tst	r1, r2
 8001524:	d111      	bne.n	800154a <ADC_Enable+0x3e>
  MODIFY_REG(ADCx->CR,
 8001526:	689a      	ldr	r2, [r3, #8]
 8001528:	4926      	ldr	r1, [pc, #152]	@ (80015c4 <ADC_Enable+0xb8>)
 800152a:	400a      	ands	r2, r1
 800152c:	2101      	movs	r1, #1
 800152e:	430a      	orrs	r2, r1
 8001530:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN));
 8001532:	4b25      	ldr	r3, [pc, #148]	@ (80015c8 <ADC_Enable+0xbc>)
 8001534:	681b      	ldr	r3, [r3, #0]
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8001536:	021b      	lsls	r3, r3, #8
 8001538:	d517      	bpl.n	800156a <ADC_Enable+0x5e>
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800153a:	4b24      	ldr	r3, [pc, #144]	@ (80015cc <ADC_Enable+0xc0>)
 800153c:	6818      	ldr	r0, [r3, #0]
 800153e:	4924      	ldr	r1, [pc, #144]	@ (80015d0 <ADC_Enable+0xc4>)
 8001540:	f7fe fdec 	bl	800011c <__udivsi3>
 8001544:	3001      	adds	r0, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8001546:	9001      	str	r0, [sp, #4]
      while (wait_loop_index != 0UL)
 8001548:	e00c      	b.n	8001564 <ADC_Enable+0x58>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800154a:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 800154c:	2210      	movs	r2, #16
 800154e:	4313      	orrs	r3, r2
 8001550:	6583      	str	r3, [r0, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001552:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 8001554:	3a0f      	subs	r2, #15
 8001556:	4313      	orrs	r3, r2
 8001558:	65c3      	str	r3, [r0, #92]	@ 0x5c
      return HAL_ERROR;
 800155a:	2001      	movs	r0, #1
 800155c:	e02e      	b.n	80015bc <ADC_Enable+0xb0>
        wait_loop_index--;
 800155e:	9b01      	ldr	r3, [sp, #4]
 8001560:	3b01      	subs	r3, #1
 8001562:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 8001564:	9b01      	ldr	r3, [sp, #4]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d1f9      	bne.n	800155e <ADC_Enable+0x52>
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800156a:	7e63      	ldrb	r3, [r4, #25]
 800156c:	2b01      	cmp	r3, #1
 800156e:	d101      	bne.n	8001574 <ADC_Enable+0x68>
  return HAL_OK;
 8001570:	2000      	movs	r0, #0
 8001572:	e023      	b.n	80015bc <ADC_Enable+0xb0>
      tickstart = HAL_GetTick();
 8001574:	f7ff fd0e 	bl	8000f94 <HAL_GetTick>
 8001578:	0005      	movs	r5, r0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800157a:	e004      	b.n	8001586 <ADC_Enable+0x7a>
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800157c:	f7ff fd0a 	bl	8000f94 <HAL_GetTick>
 8001580:	1b40      	subs	r0, r0, r5
 8001582:	2802      	cmp	r0, #2
 8001584:	d80d      	bhi.n	80015a2 <ADC_Enable+0x96>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001586:	6823      	ldr	r3, [r4, #0]
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	07d2      	lsls	r2, r2, #31
 800158c:	d413      	bmi.n	80015b6 <ADC_Enable+0xaa>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800158e:	689a      	ldr	r2, [r3, #8]
 8001590:	07d2      	lsls	r2, r2, #31
 8001592:	d4f3      	bmi.n	800157c <ADC_Enable+0x70>
  MODIFY_REG(ADCx->CR,
 8001594:	689a      	ldr	r2, [r3, #8]
 8001596:	490b      	ldr	r1, [pc, #44]	@ (80015c4 <ADC_Enable+0xb8>)
 8001598:	400a      	ands	r2, r1
 800159a:	2101      	movs	r1, #1
 800159c:	430a      	orrs	r2, r1
 800159e:	609a      	str	r2, [r3, #8]
}
 80015a0:	e7ec      	b.n	800157c <ADC_Enable+0x70>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015a2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80015a4:	2210      	movs	r2, #16
 80015a6:	4313      	orrs	r3, r2
 80015a8:	65a3      	str	r3, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015aa:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80015ac:	3a0f      	subs	r2, #15
 80015ae:	4313      	orrs	r3, r2
 80015b0:	65e3      	str	r3, [r4, #92]	@ 0x5c
          return HAL_ERROR;
 80015b2:	2001      	movs	r0, #1
 80015b4:	e002      	b.n	80015bc <ADC_Enable+0xb0>
  return HAL_OK;
 80015b6:	2000      	movs	r0, #0
 80015b8:	e000      	b.n	80015bc <ADC_Enable+0xb0>
 80015ba:	2000      	movs	r0, #0
}
 80015bc:	b003      	add	sp, #12
 80015be:	bd30      	pop	{r4, r5, pc}
 80015c0:	80000017 	.word	0x80000017
 80015c4:	7fffffe8 	.word	0x7fffffe8
 80015c8:	40012708 	.word	0x40012708
 80015cc:	20000004 	.word	0x20000004
 80015d0:	00030d40 	.word	0x00030d40

080015d4 <HAL_ADC_Start_DMA>:
{
 80015d4:	b570      	push	{r4, r5, r6, lr}
 80015d6:	0004      	movs	r4, r0
 80015d8:	000d      	movs	r5, r1
 80015da:	0016      	movs	r6, r2
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80015dc:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80015de:	6893      	ldr	r3, [r2, #8]
 80015e0:	075b      	lsls	r3, r3, #29
 80015e2:	d447      	bmi.n	8001674 <HAL_ADC_Start_DMA+0xa0>
    __HAL_LOCK(hadc);
 80015e4:	2354      	movs	r3, #84	@ 0x54
 80015e6:	5cc3      	ldrb	r3, [r0, r3]
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d045      	beq.n	8001678 <HAL_ADC_Start_DMA+0xa4>
 80015ec:	2301      	movs	r3, #1
 80015ee:	2154      	movs	r1, #84	@ 0x54
 80015f0:	5443      	strb	r3, [r0, r1]
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 80015f2:	68d1      	ldr	r1, [r2, #12]
 80015f4:	420b      	tst	r3, r1
 80015f6:	d10d      	bne.n	8001614 <HAL_ADC_Start_DMA+0x40>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80015f8:	6893      	ldr	r3, [r2, #8]
 80015fa:	07db      	lsls	r3, r3, #31
 80015fc:	d505      	bpl.n	800160a <HAL_ADC_Start_DMA+0x36>
  MODIFY_REG(ADCx->CR,
 80015fe:	6893      	ldr	r3, [r2, #8]
 8001600:	491e      	ldr	r1, [pc, #120]	@ (800167c <HAL_ADC_Start_DMA+0xa8>)
 8001602:	400b      	ands	r3, r1
 8001604:	2102      	movs	r1, #2
 8001606:	430b      	orrs	r3, r1
 8001608:	6093      	str	r3, [r2, #8]
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 800160a:	6822      	ldr	r2, [r4, #0]
 800160c:	68d3      	ldr	r3, [r2, #12]
 800160e:	2101      	movs	r1, #1
 8001610:	430b      	orrs	r3, r1
 8001612:	60d3      	str	r3, [r2, #12]
    tmp_hal_status = ADC_Enable(hadc);
 8001614:	0020      	movs	r0, r4
 8001616:	f7ff ff79 	bl	800150c <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 800161a:	2800      	cmp	r0, #0
 800161c:	d12b      	bne.n	8001676 <HAL_ADC_Start_DMA+0xa2>
      ADC_STATE_CLR_SET(hadc->State,
 800161e:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8001620:	4b17      	ldr	r3, [pc, #92]	@ (8001680 <HAL_ADC_Start_DMA+0xac>)
 8001622:	401a      	ands	r2, r3
 8001624:	2380      	movs	r3, #128	@ 0x80
 8001626:	005b      	lsls	r3, r3, #1
 8001628:	4313      	orrs	r3, r2
 800162a:	65a3      	str	r3, [r4, #88]	@ 0x58
      ADC_CLEAR_ERRORCODE(hadc);
 800162c:	2300      	movs	r3, #0
 800162e:	65e3      	str	r3, [r4, #92]	@ 0x5c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001630:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8001632:	4914      	ldr	r1, [pc, #80]	@ (8001684 <HAL_ADC_Start_DMA+0xb0>)
 8001634:	62d1      	str	r1, [r2, #44]	@ 0x2c
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001636:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8001638:	4913      	ldr	r1, [pc, #76]	@ (8001688 <HAL_ADC_Start_DMA+0xb4>)
 800163a:	6311      	str	r1, [r2, #48]	@ 0x30
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800163c:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 800163e:	4913      	ldr	r1, [pc, #76]	@ (800168c <HAL_ADC_Start_DMA+0xb8>)
 8001640:	6351      	str	r1, [r2, #52]	@ 0x34
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001642:	6822      	ldr	r2, [r4, #0]
 8001644:	211c      	movs	r1, #28
 8001646:	6011      	str	r1, [r2, #0]
      __HAL_UNLOCK(hadc);
 8001648:	2254      	movs	r2, #84	@ 0x54
 800164a:	54a3      	strb	r3, [r4, r2]
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800164c:	6822      	ldr	r2, [r4, #0]
 800164e:	6853      	ldr	r3, [r2, #4]
 8001650:	390c      	subs	r1, #12
 8001652:	430b      	orrs	r3, r1
 8001654:	6053      	str	r3, [r2, #4]
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001656:	6821      	ldr	r1, [r4, #0]
 8001658:	3140      	adds	r1, #64	@ 0x40
 800165a:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 800165c:	0033      	movs	r3, r6
 800165e:	002a      	movs	r2, r5
 8001660:	f000 fa26 	bl	8001ab0 <HAL_DMA_Start_IT>
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001664:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8001666:	6893      	ldr	r3, [r2, #8]
 8001668:	4904      	ldr	r1, [pc, #16]	@ (800167c <HAL_ADC_Start_DMA+0xa8>)
 800166a:	400b      	ands	r3, r1
 800166c:	2104      	movs	r1, #4
 800166e:	430b      	orrs	r3, r1
 8001670:	6093      	str	r3, [r2, #8]
}
 8001672:	e000      	b.n	8001676 <HAL_ADC_Start_DMA+0xa2>
    tmp_hal_status = HAL_BUSY;
 8001674:	2002      	movs	r0, #2
}
 8001676:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LOCK(hadc);
 8001678:	2002      	movs	r0, #2
 800167a:	e7fc      	b.n	8001676 <HAL_ADC_Start_DMA+0xa2>
 800167c:	7fffffe8 	.word	0x7fffffe8
 8001680:	fffff0fe 	.word	0xfffff0fe
 8001684:	0800120d 	.word	0x0800120d
 8001688:	080011e5 	.word	0x080011e5
 800168c:	080011f1 	.word	0x080011f1

08001690 <ADC_Disable>:
{
 8001690:	b570      	push	{r4, r5, r6, lr}
 8001692:	0004      	movs	r4, r0
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8001694:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001696:	689a      	ldr	r2, [r3, #8]
 8001698:	2102      	movs	r1, #2
 800169a:	0008      	movs	r0, r1
 800169c:	4010      	ands	r0, r2
 800169e:	4211      	tst	r1, r2
 80016a0:	d000      	beq.n	80016a4 <ADC_Disable+0x14>
 80016a2:	2001      	movs	r0, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80016a4:	689a      	ldr	r2, [r3, #8]
 80016a6:	07d2      	lsls	r2, r2, #31
 80016a8:	d531      	bpl.n	800170e <ADC_Disable+0x7e>
      && (tmp_adc_is_disable_on_going == 0UL)
 80016aa:	2800      	cmp	r0, #0
 80016ac:	d131      	bne.n	8001712 <ADC_Disable+0x82>
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80016ae:	6899      	ldr	r1, [r3, #8]
 80016b0:	2205      	movs	r2, #5
 80016b2:	400a      	ands	r2, r1
 80016b4:	2a01      	cmp	r2, #1
 80016b6:	d009      	beq.n	80016cc <ADC_Disable+0x3c>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016b8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80016ba:	2210      	movs	r2, #16
 80016bc:	4313      	orrs	r3, r2
 80016be:	65a3      	str	r3, [r4, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016c0:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80016c2:	3a0f      	subs	r2, #15
 80016c4:	4313      	orrs	r3, r2
 80016c6:	65e3      	str	r3, [r4, #92]	@ 0x5c
      return HAL_ERROR;
 80016c8:	2001      	movs	r0, #1
 80016ca:	e021      	b.n	8001710 <ADC_Disable+0x80>
  MODIFY_REG(ADCx->CR,
 80016cc:	689a      	ldr	r2, [r3, #8]
 80016ce:	4912      	ldr	r1, [pc, #72]	@ (8001718 <ADC_Disable+0x88>)
 80016d0:	400a      	ands	r2, r1
 80016d2:	2102      	movs	r1, #2
 80016d4:	430a      	orrs	r2, r1
 80016d6:	609a      	str	r2, [r3, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80016d8:	6823      	ldr	r3, [r4, #0]
 80016da:	2203      	movs	r2, #3
 80016dc:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80016de:	f7ff fc59 	bl	8000f94 <HAL_GetTick>
 80016e2:	0005      	movs	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80016e4:	6823      	ldr	r3, [r4, #0]
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	07db      	lsls	r3, r3, #31
 80016ea:	d50e      	bpl.n	800170a <ADC_Disable+0x7a>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80016ec:	f7ff fc52 	bl	8000f94 <HAL_GetTick>
 80016f0:	1b40      	subs	r0, r0, r5
 80016f2:	2802      	cmp	r0, #2
 80016f4:	d9f6      	bls.n	80016e4 <ADC_Disable+0x54>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016f6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80016f8:	2210      	movs	r2, #16
 80016fa:	4313      	orrs	r3, r2
 80016fc:	65a3      	str	r3, [r4, #88]	@ 0x58
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016fe:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8001700:	3a0f      	subs	r2, #15
 8001702:	4313      	orrs	r3, r2
 8001704:	65e3      	str	r3, [r4, #92]	@ 0x5c
        return HAL_ERROR;
 8001706:	2001      	movs	r0, #1
 8001708:	e002      	b.n	8001710 <ADC_Disable+0x80>
  return HAL_OK;
 800170a:	2000      	movs	r0, #0
 800170c:	e000      	b.n	8001710 <ADC_Disable+0x80>
 800170e:	2000      	movs	r0, #0
}
 8001710:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8001712:	2000      	movs	r0, #0
 8001714:	e7fc      	b.n	8001710 <ADC_Disable+0x80>
 8001716:	46c0      	nop			@ (mov r8, r8)
 8001718:	7fffffe8 	.word	0x7fffffe8

0800171c <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 800171c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800171e:	b083      	sub	sp, #12
 8001720:	0004      	movs	r4, r0
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8001722:	2300      	movs	r3, #0
 8001724:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001726:	3354      	adds	r3, #84	@ 0x54
 8001728:	5cc3      	ldrb	r3, [r0, r3]
 800172a:	2b01      	cmp	r3, #1
 800172c:	d100      	bne.n	8001730 <HAL_ADCEx_Calibration_Start+0x14>
 800172e:	e0a6      	b.n	800187e <HAL_ADCEx_Calibration_Start+0x162>
 8001730:	2601      	movs	r6, #1
 8001732:	2354      	movs	r3, #84	@ 0x54
 8001734:	54c6      	strb	r6, [r0, r3]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8001736:	f7ff ffab 	bl	8001690 <ADC_Disable>
 800173a:	0005      	movs	r5, r0

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800173c:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800173e:	689a      	ldr	r2, [r3, #8]
 8001740:	0031      	movs	r1, r6
 8001742:	4011      	ands	r1, r2
 8001744:	4216      	tst	r6, r2
 8001746:	d009      	beq.n	800175c <HAL_ADCEx_Calibration_Start+0x40>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001748:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800174a:	2210      	movs	r2, #16
 800174c:	4313      	orrs	r3, r2
 800174e:	65a3      	str	r3, [r4, #88]	@ 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001750:	2354      	movs	r3, #84	@ 0x54
 8001752:	2200      	movs	r2, #0
 8001754:	54e2      	strb	r2, [r4, r3]

  /* Return function status */
  return tmp_hal_status;
}
 8001756:	0028      	movs	r0, r5
 8001758:	b003      	add	sp, #12
 800175a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ADC_STATE_CLR_SET(hadc->State,
 800175c:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800175e:	4849      	ldr	r0, [pc, #292]	@ (8001884 <HAL_ADCEx_Calibration_Start+0x168>)
 8001760:	4002      	ands	r2, r0
 8001762:	3006      	adds	r0, #6
 8001764:	30ff      	adds	r0, #255	@ 0xff
 8001766:	4302      	orrs	r2, r0
 8001768:	65a2      	str	r2, [r4, #88]	@ 0x58
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800176a:	68de      	ldr	r6, [r3, #12]
 800176c:	4a46      	ldr	r2, [pc, #280]	@ (8001888 <HAL_ADCEx_Calibration_Start+0x16c>)
 800176e:	4016      	ands	r6, r2
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8001770:	68da      	ldr	r2, [r3, #12]
 8001772:	4846      	ldr	r0, [pc, #280]	@ (800188c <HAL_ADCEx_Calibration_Start+0x170>)
 8001774:	4002      	ands	r2, r0
 8001776:	60da      	str	r2, [r3, #12]
  uint32_t calibration_factor_accumulated = 0;
 8001778:	0008      	movs	r0, r1
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 800177a:	e006      	b.n	800178a <HAL_ADCEx_Calibration_Start+0x6e>
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 800177c:	22b4      	movs	r2, #180	@ 0xb4
 800177e:	589a      	ldr	r2, [r3, r2]
 8001780:	237f      	movs	r3, #127	@ 0x7f
 8001782:	4013      	ands	r3, r2
      calibration_factor_accumulated += (LL_ADC_GetCalibrationFactor(hadc->Instance) + 1UL);
 8001784:	3301      	adds	r3, #1
 8001786:	18c0      	adds	r0, r0, r3
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8001788:	3101      	adds	r1, #1
 800178a:	2907      	cmp	r1, #7
 800178c:	d81d      	bhi.n	80017ca <HAL_ADCEx_Calibration_Start+0xae>
      LL_ADC_StartCalibration(hadc->Instance);
 800178e:	6827      	ldr	r7, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8001790:	68ba      	ldr	r2, [r7, #8]
 8001792:	4b3f      	ldr	r3, [pc, #252]	@ (8001890 <HAL_ADCEx_Calibration_Start+0x174>)
 8001794:	401a      	ands	r2, r3
 8001796:	3318      	adds	r3, #24
 8001798:	4313      	orrs	r3, r2
 800179a:	60bb      	str	r3, [r7, #8]
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800179c:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800179e:	689a      	ldr	r2, [r3, #8]
 80017a0:	2a00      	cmp	r2, #0
 80017a2:	daeb      	bge.n	800177c <HAL_ADCEx_Calibration_Start+0x60>
        wait_loop_index++;
 80017a4:	9b01      	ldr	r3, [sp, #4]
 80017a6:	3301      	adds	r3, #1
 80017a8:	9301      	str	r3, [sp, #4]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80017aa:	9a01      	ldr	r2, [sp, #4]
 80017ac:	23ae      	movs	r3, #174	@ 0xae
 80017ae:	029b      	lsls	r3, r3, #10
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d3f3      	bcc.n	800179c <HAL_ADCEx_Calibration_Start+0x80>
          ADC_STATE_CLR_SET(hadc->State,
 80017b4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80017b6:	2212      	movs	r2, #18
 80017b8:	4393      	bics	r3, r2
 80017ba:	3a02      	subs	r2, #2
 80017bc:	4313      	orrs	r3, r2
 80017be:	65a3      	str	r3, [r4, #88]	@ 0x58
          __HAL_UNLOCK(hadc);
 80017c0:	2354      	movs	r3, #84	@ 0x54
 80017c2:	2200      	movs	r2, #0
 80017c4:	54e2      	strb	r2, [r4, r3]
          return HAL_ERROR;
 80017c6:	2501      	movs	r5, #1
 80017c8:	e7c5      	b.n	8001756 <HAL_ADCEx_Calibration_Start+0x3a>
    calibration_factor_accumulated += (calibration_index / 2UL);
 80017ca:	084b      	lsrs	r3, r1, #1
 80017cc:	1818      	adds	r0, r3, r0
    calibration_factor_accumulated /= calibration_index;
 80017ce:	f7fe fca5 	bl	800011c <__udivsi3>
    LL_ADC_Enable(hadc->Instance);
 80017d2:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 80017d4:	6893      	ldr	r3, [r2, #8]
 80017d6:	492e      	ldr	r1, [pc, #184]	@ (8001890 <HAL_ADCEx_Calibration_Start+0x174>)
 80017d8:	400b      	ands	r3, r1
 80017da:	2101      	movs	r1, #1
 80017dc:	430b      	orrs	r3, r1
 80017de:	6093      	str	r3, [r2, #8]
    if (LL_ADC_GetClock(hadc->Instance) == LL_ADC_CLOCK_ASYNC)
 80017e0:	6822      	ldr	r2, [r4, #0]
  return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_CKMODE));
 80017e2:	6911      	ldr	r1, [r2, #16]
 80017e4:	2380      	movs	r3, #128	@ 0x80
 80017e6:	05db      	lsls	r3, r3, #23
 80017e8:	4299      	cmp	r1, r3
 80017ea:	d217      	bcs.n	800181c <HAL_ADCEx_Calibration_Start+0x100>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_PRESC));
 80017ec:	4b29      	ldr	r3, [pc, #164]	@ (8001894 <HAL_ADCEx_Calibration_Start+0x178>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	21f0      	movs	r1, #240	@ 0xf0
 80017f2:	0389      	lsls	r1, r1, #14
 80017f4:	400b      	ands	r3, r1
      if (adc_clk_async_presc >= LL_ADC_CLOCK_ASYNC_DIV16)
 80017f6:	21e0      	movs	r1, #224	@ 0xe0
 80017f8:	0349      	lsls	r1, r1, #13
 80017fa:	428b      	cmp	r3, r1
 80017fc:	d30e      	bcc.n	800181c <HAL_ADCEx_Calibration_Start+0x100>
        delay_cpu_cycles = (1UL << ((adc_clk_async_presc >> ADC_CCR_PRESC_Pos) - 3UL));
 80017fe:	0c9b      	lsrs	r3, r3, #18
 8001800:	3b03      	subs	r3, #3
 8001802:	2101      	movs	r1, #1
 8001804:	4099      	lsls	r1, r3
 8001806:	9100      	str	r1, [sp, #0]
        delay_cpu_cycles >>= 1UL;
 8001808:	9b00      	ldr	r3, [sp, #0]
 800180a:	085b      	lsrs	r3, r3, #1
 800180c:	9300      	str	r3, [sp, #0]
        while (delay_cpu_cycles != 0UL)
 800180e:	e002      	b.n	8001816 <HAL_ADCEx_Calibration_Start+0xfa>
          delay_cpu_cycles--;
 8001810:	9b00      	ldr	r3, [sp, #0]
 8001812:	3b01      	subs	r3, #1
 8001814:	9300      	str	r3, [sp, #0]
        while (delay_cpu_cycles != 0UL)
 8001816:	9b00      	ldr	r3, [sp, #0]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d1f9      	bne.n	8001810 <HAL_ADCEx_Calibration_Start+0xf4>
  MODIFY_REG(ADCx->CALFACT,
 800181c:	21b4      	movs	r1, #180	@ 0xb4
 800181e:	5853      	ldr	r3, [r2, r1]
 8001820:	277f      	movs	r7, #127	@ 0x7f
 8001822:	43bb      	bics	r3, r7
 8001824:	4318      	orrs	r0, r3
 8001826:	5050      	str	r0, [r2, r1]
    LL_ADC_Disable(hadc->Instance);
 8001828:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 800182a:	6893      	ldr	r3, [r2, #8]
 800182c:	4918      	ldr	r1, [pc, #96]	@ (8001890 <HAL_ADCEx_Calibration_Start+0x174>)
 800182e:	400b      	ands	r3, r1
 8001830:	2102      	movs	r1, #2
 8001832:	430b      	orrs	r3, r1
 8001834:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8001836:	f7ff fbad 	bl	8000f94 <HAL_GetTick>
 800183a:	0007      	movs	r7, r0
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800183c:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800183e:	689a      	ldr	r2, [r3, #8]
 8001840:	07d2      	lsls	r2, r2, #31
 8001842:	d409      	bmi.n	8001858 <HAL_ADCEx_Calibration_Start+0x13c>
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8001844:	68da      	ldr	r2, [r3, #12]
 8001846:	4332      	orrs	r2, r6
 8001848:	60da      	str	r2, [r3, #12]
    ADC_STATE_CLR_SET(hadc->State,
 800184a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800184c:	2203      	movs	r2, #3
 800184e:	4393      	bics	r3, r2
 8001850:	3a02      	subs	r2, #2
 8001852:	4313      	orrs	r3, r2
 8001854:	65a3      	str	r3, [r4, #88]	@ 0x58
 8001856:	e77b      	b.n	8001750 <HAL_ADCEx_Calibration_Start+0x34>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001858:	f7ff fb9c 	bl	8000f94 <HAL_GetTick>
 800185c:	1bc0      	subs	r0, r0, r7
 800185e:	2802      	cmp	r0, #2
 8001860:	d9ec      	bls.n	800183c <HAL_ADCEx_Calibration_Start+0x120>
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001862:	6823      	ldr	r3, [r4, #0]
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	07db      	lsls	r3, r3, #31
 8001868:	d5e8      	bpl.n	800183c <HAL_ADCEx_Calibration_Start+0x120>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800186a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800186c:	2210      	movs	r2, #16
 800186e:	4313      	orrs	r3, r2
 8001870:	65a3      	str	r3, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001872:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8001874:	3a0f      	subs	r2, #15
 8001876:	4313      	orrs	r3, r2
 8001878:	65e3      	str	r3, [r4, #92]	@ 0x5c
          return HAL_ERROR;
 800187a:	2501      	movs	r5, #1
 800187c:	e76b      	b.n	8001756 <HAL_ADCEx_Calibration_Start+0x3a>
  __HAL_LOCK(hadc);
 800187e:	2502      	movs	r5, #2
 8001880:	e769      	b.n	8001756 <HAL_ADCEx_Calibration_Start+0x3a>
 8001882:	46c0      	nop			@ (mov r8, r8)
 8001884:	fffffefd 	.word	0xfffffefd
 8001888:	00008003 	.word	0x00008003
 800188c:	ffff7ffc 	.word	0xffff7ffc
 8001890:	7fffffe8 	.word	0x7fffffe8
 8001894:	40012708 	.word	0x40012708

08001898 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001898:	b570      	push	{r4, r5, r6, lr}
  if ((int32_t)(IRQn) >= 0)
 800189a:	2800      	cmp	r0, #0
 800189c:	db11      	blt.n	80018c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800189e:	0883      	lsrs	r3, r0, #2
 80018a0:	4d13      	ldr	r5, [pc, #76]	@ (80018f0 <__NVIC_SetPriority+0x58>)
 80018a2:	33c0      	adds	r3, #192	@ 0xc0
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	595c      	ldr	r4, [r3, r5]
 80018a8:	2203      	movs	r2, #3
 80018aa:	4010      	ands	r0, r2
 80018ac:	00c0      	lsls	r0, r0, #3
 80018ae:	32fc      	adds	r2, #252	@ 0xfc
 80018b0:	0016      	movs	r6, r2
 80018b2:	4086      	lsls	r6, r0
 80018b4:	43b4      	bics	r4, r6
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80018b6:	0189      	lsls	r1, r1, #6
 80018b8:	400a      	ands	r2, r1
 80018ba:	4082      	lsls	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80018bc:	4322      	orrs	r2, r4
 80018be:	515a      	str	r2, [r3, r5]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80018c0:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80018c2:	230f      	movs	r3, #15
 80018c4:	4003      	ands	r3, r0
 80018c6:	3b08      	subs	r3, #8
 80018c8:	089b      	lsrs	r3, r3, #2
 80018ca:	3306      	adds	r3, #6
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	4a09      	ldr	r2, [pc, #36]	@ (80018f4 <__NVIC_SetPriority+0x5c>)
 80018d0:	4694      	mov	ip, r2
 80018d2:	4463      	add	r3, ip
 80018d4:	685c      	ldr	r4, [r3, #4]
 80018d6:	2203      	movs	r2, #3
 80018d8:	4010      	ands	r0, r2
 80018da:	00c0      	lsls	r0, r0, #3
 80018dc:	32fc      	adds	r2, #252	@ 0xfc
 80018de:	0015      	movs	r5, r2
 80018e0:	4085      	lsls	r5, r0
 80018e2:	43ac      	bics	r4, r5
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80018e4:	0189      	lsls	r1, r1, #6
 80018e6:	400a      	ands	r2, r1
 80018e8:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80018ea:	4322      	orrs	r2, r4
 80018ec:	605a      	str	r2, [r3, #4]
}
 80018ee:	e7e7      	b.n	80018c0 <__NVIC_SetPriority+0x28>
 80018f0:	e000e100 	.word	0xe000e100
 80018f4:	e000ed00 	.word	0xe000ed00

080018f8 <SysTick_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018f8:	3801      	subs	r0, #1
 80018fa:	2380      	movs	r3, #128	@ 0x80
 80018fc:	045b      	lsls	r3, r3, #17
 80018fe:	4298      	cmp	r0, r3
 8001900:	d20f      	bcs.n	8001922 <SysTick_Config+0x2a>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001902:	4a09      	ldr	r2, [pc, #36]	@ (8001928 <SysTick_Config+0x30>)
 8001904:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001906:	4809      	ldr	r0, [pc, #36]	@ (800192c <SysTick_Config+0x34>)
 8001908:	6a03      	ldr	r3, [r0, #32]
 800190a:	021b      	lsls	r3, r3, #8
 800190c:	0a1b      	lsrs	r3, r3, #8
 800190e:	21c0      	movs	r1, #192	@ 0xc0
 8001910:	0609      	lsls	r1, r1, #24
 8001912:	430b      	orrs	r3, r1
 8001914:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001916:	2300      	movs	r3, #0
 8001918:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800191a:	3307      	adds	r3, #7
 800191c:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800191e:	2000      	movs	r0, #0
}
 8001920:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001922:	2001      	movs	r0, #1
 8001924:	e7fc      	b.n	8001920 <SysTick_Config+0x28>
 8001926:	46c0      	nop			@ (mov r8, r8)
 8001928:	e000e010 	.word	0xe000e010
 800192c:	e000ed00 	.word	0xe000ed00

08001930 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001930:	b510      	push	{r4, lr}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001932:	f7ff ffb1 	bl	8001898 <__NVIC_SetPriority>
}
 8001936:	bd10      	pop	{r4, pc}

08001938 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001938:	2800      	cmp	r0, #0
 800193a:	db05      	blt.n	8001948 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800193c:	221f      	movs	r2, #31
 800193e:	4002      	ands	r2, r0
 8001940:	2301      	movs	r3, #1
 8001942:	4093      	lsls	r3, r2
 8001944:	4a01      	ldr	r2, [pc, #4]	@ (800194c <HAL_NVIC_EnableIRQ+0x14>)
 8001946:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001948:	4770      	bx	lr
 800194a:	46c0      	nop			@ (mov r8, r8)
 800194c:	e000e100 	.word	0xe000e100

08001950 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001950:	b510      	push	{r4, lr}
  return SysTick_Config(TicksNumb);
 8001952:	f7ff ffd1 	bl	80018f8 <SysTick_Config>
}
 8001956:	bd10      	pop	{r4, pc}

08001958 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001958:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800195a:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 800195c:	6cc5      	ldr	r5, [r0, #76]	@ 0x4c
 800195e:	6065      	str	r5, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001960:	6d04      	ldr	r4, [r0, #80]	@ 0x50
 8001962:	2c00      	cmp	r4, #0
 8001964:	d002      	beq.n	800196c <DMA_SetConfig+0x14>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001966:	6d44      	ldr	r4, [r0, #84]	@ 0x54
 8001968:	6d85      	ldr	r5, [r0, #88]	@ 0x58
 800196a:	6065      	str	r5, [r4, #4]
  }

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 800196c:	4f0b      	ldr	r7, [pc, #44]	@ (800199c <DMA_SetConfig+0x44>)
 800196e:	687c      	ldr	r4, [r7, #4]
 8001970:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 8001972:	261c      	movs	r6, #28
 8001974:	402e      	ands	r6, r5
 8001976:	2501      	movs	r5, #1
 8001978:	40b5      	lsls	r5, r6
 800197a:	432c      	orrs	r4, r5
 800197c:	607c      	str	r4, [r7, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800197e:	6804      	ldr	r4, [r0, #0]
 8001980:	6063      	str	r3, [r4, #4]

  /* Peripheral to Memory */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001982:	6883      	ldr	r3, [r0, #8]
 8001984:	2b10      	cmp	r3, #16
 8001986:	d004      	beq.n	8001992 <DMA_SetConfig+0x3a>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8001988:	6803      	ldr	r3, [r0, #0]
 800198a:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 800198c:	6803      	ldr	r3, [r0, #0]
 800198e:	60da      	str	r2, [r3, #12]
  }
}
 8001990:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->Instance->CPAR = DstAddress;
 8001992:	6803      	ldr	r3, [r0, #0]
 8001994:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8001996:	6803      	ldr	r3, [r0, #0]
 8001998:	60d9      	str	r1, [r3, #12]
 800199a:	e7f9      	b.n	8001990 <DMA_SetConfig+0x38>
 800199c:	40020000 	.word	0x40020000

080019a0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80019a0:	b510      	push	{r4, lr}
 80019a2:	0004      	movs	r4, r0
  uint32_t channel_number;

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80019a4:	6803      	ldr	r3, [r0, #0]
 80019a6:	20ff      	movs	r0, #255	@ 0xff
 80019a8:	4018      	ands	r0, r3
 80019aa:	3808      	subs	r0, #8
 80019ac:	2114      	movs	r1, #20
 80019ae:	f7fe fbb5 	bl	800011c <__udivsi3>
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
                                                             ((hdma->ChannelIndex >> 2U) * \
 80019b2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80019b4:	089b      	lsrs	r3, r3, #2
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
 80019b6:	4a06      	ldr	r2, [pc, #24]	@ (80019d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x30>)
 80019b8:	4694      	mov	ip, r2
 80019ba:	4463      	add	r3, ip
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	6463      	str	r3, [r4, #68]	@ 0x44
                                                              ((uint32_t)DMAMUX1_Channel1 - \
                                                               (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80019c0:	4b04      	ldr	r3, [pc, #16]	@ (80019d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x34>)
 80019c2:	64a3      	str	r3, [r4, #72]	@ 0x48
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 80019c4:	231c      	movs	r3, #28
 80019c6:	4018      	ands	r0, r3
 80019c8:	3b1b      	subs	r3, #27
 80019ca:	4083      	lsls	r3, r0
 80019cc:	64e3      	str	r3, [r4, #76]	@ 0x4c
}
 80019ce:	bd10      	pop	{r4, pc}
 80019d0:	10008200 	.word	0x10008200
 80019d4:	40020880 	.word	0x40020880

080019d8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80019d8:	6842      	ldr	r2, [r0, #4]
 80019da:	23ff      	movs	r3, #255	@ 0xff
 80019dc:	4013      	ands	r3, r2

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + \
 80019de:	4a06      	ldr	r2, [pc, #24]	@ (80019f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x20>)
 80019e0:	189a      	adds	r2, r3, r2
 80019e2:	0092      	lsls	r2, r2, #2
 80019e4:	6502      	str	r2, [r0, #80]	@ 0x50
                                                                    ((request - 1U) * 4U)));

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80019e6:	4a05      	ldr	r2, [pc, #20]	@ (80019fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x24>)
 80019e8:	6542      	str	r2, [r0, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to 4, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80019ea:	3b01      	subs	r3, #1
 80019ec:	2203      	movs	r2, #3
 80019ee:	401a      	ands	r2, r3
 80019f0:	2301      	movs	r3, #1
 80019f2:	4093      	lsls	r3, r2
 80019f4:	6583      	str	r3, [r0, #88]	@ 0x58
}
 80019f6:	4770      	bx	lr
 80019f8:	1000823f 	.word	0x1000823f
 80019fc:	40020940 	.word	0x40020940

08001a00 <HAL_DMA_Init>:
{
 8001a00:	b570      	push	{r4, r5, r6, lr}
 8001a02:	1e04      	subs	r4, r0, #0
  if (hdma == NULL)
 8001a04:	d04d      	beq.n	8001aa2 <HAL_DMA_Init+0xa2>
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8001a06:	6805      	ldr	r5, [r0, #0]
 8001a08:	4b27      	ldr	r3, [pc, #156]	@ (8001aa8 <HAL_DMA_Init+0xa8>)
 8001a0a:	18e8      	adds	r0, r5, r3
 8001a0c:	2114      	movs	r1, #20
 8001a0e:	f7fe fb85 	bl	800011c <__udivsi3>
                                                                                (uint32_t)DMA1_Channel1)) << 2U;
 8001a12:	0080      	lsls	r0, r0, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8001a14:	6420      	str	r0, [r4, #64]	@ 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a16:	2325      	movs	r3, #37	@ 0x25
 8001a18:	2202      	movs	r2, #2
 8001a1a:	54e2      	strb	r2, [r4, r3]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001a1c:	682b      	ldr	r3, [r5, #0]
 8001a1e:	4a23      	ldr	r2, [pc, #140]	@ (8001aac <HAL_DMA_Init+0xac>)
 8001a20:	4013      	ands	r3, r2
 8001a22:	602b      	str	r3, [r5, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8001a24:	6821      	ldr	r1, [r4, #0]
 8001a26:	680a      	ldr	r2, [r1, #0]
 8001a28:	68a3      	ldr	r3, [r4, #8]
 8001a2a:	68e0      	ldr	r0, [r4, #12]
 8001a2c:	4303      	orrs	r3, r0
 8001a2e:	6920      	ldr	r0, [r4, #16]
 8001a30:	4303      	orrs	r3, r0
 8001a32:	6960      	ldr	r0, [r4, #20]
 8001a34:	4303      	orrs	r3, r0
 8001a36:	69a0      	ldr	r0, [r4, #24]
 8001a38:	4303      	orrs	r3, r0
 8001a3a:	69e0      	ldr	r0, [r4, #28]
 8001a3c:	4303      	orrs	r3, r0
 8001a3e:	6a20      	ldr	r0, [r4, #32]
 8001a40:	4303      	orrs	r3, r0
 8001a42:	4313      	orrs	r3, r2
 8001a44:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001a46:	0020      	movs	r0, r4
 8001a48:	f7ff ffaa 	bl	80019a0 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001a4c:	68a2      	ldr	r2, [r4, #8]
 8001a4e:	2380      	movs	r3, #128	@ 0x80
 8001a50:	01db      	lsls	r3, r3, #7
 8001a52:	429a      	cmp	r2, r3
 8001a54:	d018      	beq.n	8001a88 <HAL_DMA_Init+0x88>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001a56:	6861      	ldr	r1, [r4, #4]
 8001a58:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8001a5a:	23ff      	movs	r3, #255	@ 0xff
 8001a5c:	400b      	ands	r3, r1
 8001a5e:	6013      	str	r3, [r2, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001a60:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8001a62:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
 8001a64:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request > 0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001a66:	6863      	ldr	r3, [r4, #4]
 8001a68:	3b01      	subs	r3, #1
 8001a6a:	2b03      	cmp	r3, #3
 8001a6c:	d90f      	bls.n	8001a8e <HAL_DMA_Init+0x8e>
    hdma->DMAmuxRequestGen = 0U;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	6523      	str	r3, [r4, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8001a72:	6563      	str	r3, [r4, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001a74:	65a3      	str	r3, [r4, #88]	@ 0x58
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a76:	2300      	movs	r3, #0
 8001a78:	63e3      	str	r3, [r4, #60]	@ 0x3c
  hdma->State  = HAL_DMA_STATE_READY;
 8001a7a:	2225      	movs	r2, #37	@ 0x25
 8001a7c:	2101      	movs	r1, #1
 8001a7e:	54a1      	strb	r1, [r4, r2]
  __HAL_UNLOCK(hdma);
 8001a80:	3a01      	subs	r2, #1
 8001a82:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 8001a84:	2000      	movs	r0, #0
}
 8001a86:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	6063      	str	r3, [r4, #4]
 8001a8c:	e7e3      	b.n	8001a56 <HAL_DMA_Init+0x56>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001a8e:	0020      	movs	r0, r4
 8001a90:	f7ff ffa2 	bl	80019d8 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001a94:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8001a96:	2200      	movs	r2, #0
 8001a98:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001a9a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001a9c:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8001a9e:	605a      	str	r2, [r3, #4]
 8001aa0:	e7e9      	b.n	8001a76 <HAL_DMA_Init+0x76>
    return HAL_ERROR;
 8001aa2:	2001      	movs	r0, #1
 8001aa4:	e7ef      	b.n	8001a86 <HAL_DMA_Init+0x86>
 8001aa6:	46c0      	nop			@ (mov r8, r8)
 8001aa8:	bffdfff8 	.word	0xbffdfff8
 8001aac:	ffff800f 	.word	0xffff800f

08001ab0 <HAL_DMA_Start_IT>:
{
 8001ab0:	b570      	push	{r4, r5, r6, lr}
 8001ab2:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 8001ab4:	2024      	movs	r0, #36	@ 0x24
 8001ab6:	5c20      	ldrb	r0, [r4, r0]
 8001ab8:	2801      	cmp	r0, #1
 8001aba:	d046      	beq.n	8001b4a <HAL_DMA_Start_IT+0x9a>
 8001abc:	2024      	movs	r0, #36	@ 0x24
 8001abe:	2501      	movs	r5, #1
 8001ac0:	5425      	strb	r5, [r4, r0]
  if (HAL_DMA_STATE_READY == hdma->State)
 8001ac2:	3001      	adds	r0, #1
 8001ac4:	5c20      	ldrb	r0, [r4, r0]
 8001ac6:	2801      	cmp	r0, #1
 8001ac8:	d007      	beq.n	8001ada <HAL_DMA_Start_IT+0x2a>
    __HAL_UNLOCK(hdma);
 8001aca:	2324      	movs	r3, #36	@ 0x24
 8001acc:	2200      	movs	r2, #0
 8001ace:	54e2      	strb	r2, [r4, r3]
    status = HAL_BUSY;
 8001ad0:	2002      	movs	r0, #2
  __HAL_UNLOCK(hdma);
 8001ad2:	2324      	movs	r3, #36	@ 0x24
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	54e2      	strb	r2, [r4, r3]
}
 8001ad8:	bd70      	pop	{r4, r5, r6, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ada:	3024      	adds	r0, #36	@ 0x24
 8001adc:	3501      	adds	r5, #1
 8001ade:	5425      	strb	r5, [r4, r0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ae0:	2000      	movs	r0, #0
 8001ae2:	63e0      	str	r0, [r4, #60]	@ 0x3c
    __HAL_DMA_DISABLE(hdma);
 8001ae4:	6825      	ldr	r5, [r4, #0]
 8001ae6:	6828      	ldr	r0, [r5, #0]
 8001ae8:	2601      	movs	r6, #1
 8001aea:	43b0      	bics	r0, r6
 8001aec:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001aee:	0020      	movs	r0, r4
 8001af0:	f7ff ff32 	bl	8001958 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 8001af4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d01c      	beq.n	8001b34 <HAL_DMA_Start_IT+0x84>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001afa:	6822      	ldr	r2, [r4, #0]
 8001afc:	6813      	ldr	r3, [r2, #0]
 8001afe:	210e      	movs	r1, #14
 8001b00:	430b      	orrs	r3, r1
 8001b02:	6013      	str	r3, [r2, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001b04:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8001b06:	6813      	ldr	r3, [r2, #0]
 8001b08:	03db      	lsls	r3, r3, #15
 8001b0a:	d504      	bpl.n	8001b16 <HAL_DMA_Start_IT+0x66>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001b0c:	6811      	ldr	r1, [r2, #0]
 8001b0e:	2380      	movs	r3, #128	@ 0x80
 8001b10:	005b      	lsls	r3, r3, #1
 8001b12:	430b      	orrs	r3, r1
 8001b14:	6013      	str	r3, [r2, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 8001b16:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d004      	beq.n	8001b26 <HAL_DMA_Start_IT+0x76>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001b1c:	6819      	ldr	r1, [r3, #0]
 8001b1e:	2280      	movs	r2, #128	@ 0x80
 8001b20:	0052      	lsls	r2, r2, #1
 8001b22:	430a      	orrs	r2, r1
 8001b24:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 8001b26:	6822      	ldr	r2, [r4, #0]
 8001b28:	6813      	ldr	r3, [r2, #0]
 8001b2a:	2101      	movs	r1, #1
 8001b2c:	430b      	orrs	r3, r1
 8001b2e:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b30:	2000      	movs	r0, #0
 8001b32:	e7ce      	b.n	8001ad2 <HAL_DMA_Start_IT+0x22>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001b34:	6822      	ldr	r2, [r4, #0]
 8001b36:	6813      	ldr	r3, [r2, #0]
 8001b38:	2104      	movs	r1, #4
 8001b3a:	438b      	bics	r3, r1
 8001b3c:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001b3e:	6822      	ldr	r2, [r4, #0]
 8001b40:	6813      	ldr	r3, [r2, #0]
 8001b42:	3106      	adds	r1, #6
 8001b44:	430b      	orrs	r3, r1
 8001b46:	6013      	str	r3, [r2, #0]
 8001b48:	e7dc      	b.n	8001b04 <HAL_DMA_Start_IT+0x54>
  __HAL_LOCK(hdma);
 8001b4a:	2002      	movs	r0, #2
 8001b4c:	e7c4      	b.n	8001ad8 <HAL_DMA_Start_IT+0x28>
	...

08001b50 <HAL_DMA_Abort>:
{
 8001b50:	b530      	push	{r4, r5, lr}
  if (NULL == hdma)
 8001b52:	2800      	cmp	r0, #0
 8001b54:	d036      	beq.n	8001bc4 <HAL_DMA_Abort+0x74>
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001b56:	2325      	movs	r3, #37	@ 0x25
 8001b58:	5cc3      	ldrb	r3, [r0, r3]
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d006      	beq.n	8001b6c <HAL_DMA_Abort+0x1c>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b5e:	2304      	movs	r3, #4
 8001b60:	63c3      	str	r3, [r0, #60]	@ 0x3c
    __HAL_UNLOCK(hdma);
 8001b62:	3320      	adds	r3, #32
 8001b64:	2200      	movs	r2, #0
 8001b66:	54c2      	strb	r2, [r0, r3]
    return HAL_ERROR;
 8001b68:	2001      	movs	r0, #1
}
 8001b6a:	bd30      	pop	{r4, r5, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b6c:	6802      	ldr	r2, [r0, #0]
 8001b6e:	6813      	ldr	r3, [r2, #0]
 8001b70:	210e      	movs	r1, #14
 8001b72:	438b      	bics	r3, r1
 8001b74:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001b76:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8001b78:	6813      	ldr	r3, [r2, #0]
 8001b7a:	4913      	ldr	r1, [pc, #76]	@ (8001bc8 <HAL_DMA_Abort+0x78>)
 8001b7c:	400b      	ands	r3, r1
 8001b7e:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8001b80:	6801      	ldr	r1, [r0, #0]
 8001b82:	680a      	ldr	r2, [r1, #0]
 8001b84:	2301      	movs	r3, #1
 8001b86:	439a      	bics	r2, r3
 8001b88:	600a      	str	r2, [r1, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1cU)));
 8001b8a:	4c10      	ldr	r4, [pc, #64]	@ (8001bcc <HAL_DMA_Abort+0x7c>)
 8001b8c:	6862      	ldr	r2, [r4, #4]
 8001b8e:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 8001b90:	211c      	movs	r1, #28
 8001b92:	4029      	ands	r1, r5
 8001b94:	408b      	lsls	r3, r1
 8001b96:	4313      	orrs	r3, r2
 8001b98:	6063      	str	r3, [r4, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001b9a:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 8001b9c:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 8001b9e:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8001ba0:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d006      	beq.n	8001bb4 <HAL_DMA_Abort+0x64>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	4907      	ldr	r1, [pc, #28]	@ (8001bc8 <HAL_DMA_Abort+0x78>)
 8001baa:	400a      	ands	r2, r1
 8001bac:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001bae:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8001bb0:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 8001bb2:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8001bb4:	2325      	movs	r3, #37	@ 0x25
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma);
 8001bba:	3b01      	subs	r3, #1
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	54c2      	strb	r2, [r0, r3]
  return HAL_OK;
 8001bc0:	2000      	movs	r0, #0
 8001bc2:	e7d2      	b.n	8001b6a <HAL_DMA_Abort+0x1a>
    return HAL_ERROR;
 8001bc4:	2001      	movs	r0, #1
 8001bc6:	e7d0      	b.n	8001b6a <HAL_DMA_Abort+0x1a>
 8001bc8:	fffffeff 	.word	0xfffffeff
 8001bcc:	40020000 	.word	0x40020000

08001bd0 <HAL_DMA_Abort_IT>:
{
 8001bd0:	b570      	push	{r4, r5, r6, lr}
  __HAL_UNLOCK(hdma);
 8001bd2:	2324      	movs	r3, #36	@ 0x24
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	54c2      	strb	r2, [r0, r3]
  __HAL_LOCK(hdma);
 8001bd8:	3201      	adds	r2, #1
 8001bda:	54c2      	strb	r2, [r0, r3]
  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001bdc:	3301      	adds	r3, #1
 8001bde:	5cc3      	ldrb	r3, [r0, r3]
 8001be0:	2b02      	cmp	r3, #2
 8001be2:	d003      	beq.n	8001bec <HAL_DMA_Abort_IT+0x1c>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001be4:	2304      	movs	r3, #4
 8001be6:	63c3      	str	r3, [r0, #60]	@ 0x3c
    status = HAL_ERROR;
 8001be8:	2001      	movs	r0, #1
}
 8001bea:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001bec:	6802      	ldr	r2, [r0, #0]
 8001bee:	6813      	ldr	r3, [r2, #0]
 8001bf0:	210e      	movs	r1, #14
 8001bf2:	438b      	bics	r3, r1
 8001bf4:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8001bf6:	6801      	ldr	r1, [r0, #0]
 8001bf8:	680a      	ldr	r2, [r1, #0]
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	439a      	bics	r2, r3
 8001bfe:	600a      	str	r2, [r1, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001c00:	6c41      	ldr	r1, [r0, #68]	@ 0x44
 8001c02:	680a      	ldr	r2, [r1, #0]
 8001c04:	4c12      	ldr	r4, [pc, #72]	@ (8001c50 <HAL_DMA_Abort_IT+0x80>)
 8001c06:	4022      	ands	r2, r4
 8001c08:	600a      	str	r2, [r1, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1cU)));
 8001c0a:	4c12      	ldr	r4, [pc, #72]	@ (8001c54 <HAL_DMA_Abort_IT+0x84>)
 8001c0c:	6862      	ldr	r2, [r4, #4]
 8001c0e:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 8001c10:	211c      	movs	r1, #28
 8001c12:	4029      	ands	r1, r5
 8001c14:	408b      	lsls	r3, r1
 8001c16:	4313      	orrs	r3, r2
 8001c18:	6063      	str	r3, [r4, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001c1a:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 8001c1c:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 8001c1e:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8001c20:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d006      	beq.n	8001c34 <HAL_DMA_Abort_IT+0x64>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	4909      	ldr	r1, [pc, #36]	@ (8001c50 <HAL_DMA_Abort_IT+0x80>)
 8001c2a:	400a      	ands	r2, r1
 8001c2c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001c2e:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8001c30:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 8001c32:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8001c34:	2325      	movs	r3, #37	@ 0x25
 8001c36:	2201      	movs	r2, #1
 8001c38:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma);
 8001c3a:	3b01      	subs	r3, #1
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferAbortCallback != NULL)
 8001c40:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d002      	beq.n	8001c4c <HAL_DMA_Abort_IT+0x7c>
      hdma->XferAbortCallback(hdma);
 8001c46:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8001c48:	2000      	movs	r0, #0
 8001c4a:	e7ce      	b.n	8001bea <HAL_DMA_Abort_IT+0x1a>
 8001c4c:	2000      	movs	r0, #0
 8001c4e:	e7cc      	b.n	8001bea <HAL_DMA_Abort_IT+0x1a>
 8001c50:	fffffeff 	.word	0xfffffeff
 8001c54:	40020000 	.word	0x40020000

08001c58 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001c58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c5a:	46d6      	mov	lr, sl
 8001c5c:	464f      	mov	r7, r9
 8001c5e:	4646      	mov	r6, r8
 8001c60:	b5c0      	push	{r6, r7, lr}
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8001c62:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001c64:	e03b      	b.n	8001cde <HAL_GPIO_Init+0x86>
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        tmp = EXTI->EXTICR[position >> 2U];
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001c66:	2505      	movs	r5, #5
 8001c68:	e000      	b.n	8001c6c <HAL_GPIO_Init+0x14>
 8001c6a:	2500      	movs	r5, #0
 8001c6c:	40a5      	lsls	r5, r4
 8001c6e:	002c      	movs	r4, r5
 8001c70:	433c      	orrs	r4, r7
        EXTI->EXTICR[position >> 2U] = tmp;
 8001c72:	4d63      	ldr	r5, [pc, #396]	@ (8001e00 <HAL_GPIO_Init+0x1a8>)
 8001c74:	3218      	adds	r2, #24
 8001c76:	0092      	lsls	r2, r2, #2
 8001c78:	5154      	str	r4, [r2, r5]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8001c7a:	2280      	movs	r2, #128	@ 0x80
 8001c7c:	58af      	ldr	r7, [r5, r2]
        tmp &= ~((uint32_t)iocurrent);
 8001c7e:	464a      	mov	r2, r9
 8001c80:	43d2      	mvns	r2, r2
 8001c82:	003d      	movs	r5, r7
 8001c84:	464c      	mov	r4, r9
 8001c86:	43a5      	bics	r5, r4
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c88:	684c      	ldr	r4, [r1, #4]
 8001c8a:	03e4      	lsls	r4, r4, #15
 8001c8c:	d502      	bpl.n	8001c94 <HAL_GPIO_Init+0x3c>
        {
          tmp |= iocurrent;
 8001c8e:	003d      	movs	r5, r7
 8001c90:	464c      	mov	r4, r9
 8001c92:	4325      	orrs	r5, r4
        }
        EXTI->IMR1 = tmp;
 8001c94:	4c5a      	ldr	r4, [pc, #360]	@ (8001e00 <HAL_GPIO_Init+0x1a8>)
 8001c96:	2780      	movs	r7, #128	@ 0x80
 8001c98:	51e5      	str	r5, [r4, r7]

        tmp = EXTI->EMR1;
 8001c9a:	2584      	movs	r5, #132	@ 0x84
 8001c9c:	5967      	ldr	r7, [r4, r5]
        tmp &= ~((uint32_t)iocurrent);
 8001c9e:	003d      	movs	r5, r7
 8001ca0:	4015      	ands	r5, r2
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ca2:	684c      	ldr	r4, [r1, #4]
 8001ca4:	03a4      	lsls	r4, r4, #14
 8001ca6:	d502      	bpl.n	8001cae <HAL_GPIO_Init+0x56>
        {
          tmp |= iocurrent;
 8001ca8:	003d      	movs	r5, r7
 8001caa:	464c      	mov	r4, r9
 8001cac:	4325      	orrs	r5, r4
        }
        EXTI->EMR1 = tmp;
 8001cae:	4c54      	ldr	r4, [pc, #336]	@ (8001e00 <HAL_GPIO_Init+0x1a8>)
 8001cb0:	2784      	movs	r7, #132	@ 0x84
 8001cb2:	51e5      	str	r5, [r4, r7]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001cb4:	6827      	ldr	r7, [r4, #0]
        tmp &= ~((uint32_t)iocurrent);
 8001cb6:	003d      	movs	r5, r7
 8001cb8:	4015      	ands	r5, r2
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001cba:	684c      	ldr	r4, [r1, #4]
 8001cbc:	02e4      	lsls	r4, r4, #11
 8001cbe:	d502      	bpl.n	8001cc6 <HAL_GPIO_Init+0x6e>
        {
          tmp |= iocurrent;
 8001cc0:	003d      	movs	r5, r7
 8001cc2:	464c      	mov	r4, r9
 8001cc4:	4325      	orrs	r5, r4
        }
        EXTI->RTSR1 = tmp;
 8001cc6:	4c4e      	ldr	r4, [pc, #312]	@ (8001e00 <HAL_GPIO_Init+0x1a8>)
 8001cc8:	6025      	str	r5, [r4, #0]

        tmp = EXTI->FTSR1;
 8001cca:	6865      	ldr	r5, [r4, #4]
        tmp &= ~((uint32_t)iocurrent);
 8001ccc:	402a      	ands	r2, r5
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001cce:	684c      	ldr	r4, [r1, #4]
 8001cd0:	02a4      	lsls	r4, r4, #10
 8001cd2:	d501      	bpl.n	8001cd8 <HAL_GPIO_Init+0x80>
        {
          tmp |= iocurrent;
 8001cd4:	464a      	mov	r2, r9
 8001cd6:	432a      	orrs	r2, r5
        }
        EXTI->FTSR1 = tmp;
 8001cd8:	4c49      	ldr	r4, [pc, #292]	@ (8001e00 <HAL_GPIO_Init+0x1a8>)
 8001cda:	6062      	str	r2, [r4, #4]
      }
    }

    position++;
 8001cdc:	3301      	adds	r3, #1
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001cde:	680c      	ldr	r4, [r1, #0]
 8001ce0:	0022      	movs	r2, r4
 8001ce2:	40da      	lsrs	r2, r3
 8001ce4:	d100      	bne.n	8001ce8 <HAL_GPIO_Init+0x90>
 8001ce6:	e086      	b.n	8001df6 <HAL_GPIO_Init+0x19e>
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001ce8:	2201      	movs	r2, #1
 8001cea:	409a      	lsls	r2, r3
 8001cec:	0026      	movs	r6, r4
 8001cee:	4016      	ands	r6, r2
 8001cf0:	46b1      	mov	r9, r6
    if (iocurrent != 0U)
 8001cf2:	4214      	tst	r4, r2
 8001cf4:	d0f2      	beq.n	8001cdc <HAL_GPIO_Init+0x84>
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cf6:	684c      	ldr	r4, [r1, #4]
 8001cf8:	2c02      	cmp	r4, #2
 8001cfa:	d001      	beq.n	8001d00 <HAL_GPIO_Init+0xa8>
 8001cfc:	2c12      	cmp	r4, #18
 8001cfe:	d118      	bne.n	8001d32 <HAL_GPIO_Init+0xda>
        tmp = GPIOx->AFR[position >> 3U];
 8001d00:	08dd      	lsrs	r5, r3, #3
 8001d02:	3508      	adds	r5, #8
 8001d04:	00ad      	lsls	r5, r5, #2
 8001d06:	582c      	ldr	r4, [r5, r0]
 8001d08:	46a4      	mov	ip, r4
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 8001d0a:	2707      	movs	r7, #7
 8001d0c:	401f      	ands	r7, r3
 8001d0e:	00bf      	lsls	r7, r7, #2
 8001d10:	240f      	movs	r4, #15
 8001d12:	46a2      	mov	sl, r4
 8001d14:	0026      	movs	r6, r4
 8001d16:	40be      	lsls	r6, r7
 8001d18:	46b0      	mov	r8, r6
 8001d1a:	4666      	mov	r6, ip
 8001d1c:	4644      	mov	r4, r8
 8001d1e:	43a6      	bics	r6, r4
 8001d20:	46b4      	mov	ip, r6
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001d22:	690c      	ldr	r4, [r1, #16]
 8001d24:	4656      	mov	r6, sl
 8001d26:	4026      	ands	r6, r4
 8001d28:	0034      	movs	r4, r6
 8001d2a:	40bc      	lsls	r4, r7
 8001d2c:	4666      	mov	r6, ip
 8001d2e:	4334      	orrs	r4, r6
        GPIOx->AFR[position >> 3U] = tmp;
 8001d30:	502c      	str	r4, [r5, r0]
      tmp = GPIOx->MODER;
 8001d32:	6804      	ldr	r4, [r0, #0]
 8001d34:	46a4      	mov	ip, r4
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8001d36:	005d      	lsls	r5, r3, #1
 8001d38:	2403      	movs	r4, #3
 8001d3a:	46a2      	mov	sl, r4
 8001d3c:	0027      	movs	r7, r4
 8001d3e:	40af      	lsls	r7, r5
 8001d40:	46b8      	mov	r8, r7
 8001d42:	43ff      	mvns	r7, r7
 8001d44:	4666      	mov	r6, ip
 8001d46:	4644      	mov	r4, r8
 8001d48:	43a6      	bics	r6, r4
 8001d4a:	46b4      	mov	ip, r6
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8001d4c:	684c      	ldr	r4, [r1, #4]
 8001d4e:	4656      	mov	r6, sl
 8001d50:	4026      	ands	r6, r4
 8001d52:	0034      	movs	r4, r6
 8001d54:	40ac      	lsls	r4, r5
 8001d56:	4666      	mov	r6, ip
 8001d58:	4334      	orrs	r4, r6
      GPIOx->MODER = tmp;
 8001d5a:	6004      	str	r4, [r0, #0]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d5c:	684c      	ldr	r4, [r1, #4]
 8001d5e:	1e66      	subs	r6, r4, #1
 8001d60:	2e01      	cmp	r6, #1
 8001d62:	d903      	bls.n	8001d6c <HAL_GPIO_Init+0x114>
 8001d64:	2c11      	cmp	r4, #17
 8001d66:	d001      	beq.n	8001d6c <HAL_GPIO_Init+0x114>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d68:	2c12      	cmp	r4, #18
 8001d6a:	d112      	bne.n	8001d92 <HAL_GPIO_Init+0x13a>
        tmp = GPIOx->OSPEEDR;
 8001d6c:	6884      	ldr	r4, [r0, #8]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001d6e:	403c      	ands	r4, r7
 8001d70:	46a4      	mov	ip, r4
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001d72:	68cc      	ldr	r4, [r1, #12]
 8001d74:	40ac      	lsls	r4, r5
 8001d76:	4666      	mov	r6, ip
 8001d78:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = tmp;
 8001d7a:	6084      	str	r4, [r0, #8]
        tmp = GPIOx->OTYPER;
 8001d7c:	6844      	ldr	r4, [r0, #4]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d7e:	4394      	bics	r4, r2
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001d80:	684a      	ldr	r2, [r1, #4]
 8001d82:	0912      	lsrs	r2, r2, #4
 8001d84:	4694      	mov	ip, r2
 8001d86:	2201      	movs	r2, #1
 8001d88:	4666      	mov	r6, ip
 8001d8a:	4032      	ands	r2, r6
 8001d8c:	409a      	lsls	r2, r3
 8001d8e:	4322      	orrs	r2, r4
        GPIOx->OTYPER = tmp;
 8001d90:	6042      	str	r2, [r0, #4]
      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8001d92:	684a      	ldr	r2, [r1, #4]
 8001d94:	2a03      	cmp	r2, #3
 8001d96:	d005      	beq.n	8001da4 <HAL_GPIO_Init+0x14c>
        tmp = GPIOx->PUPDR;
 8001d98:	68c4      	ldr	r4, [r0, #12]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8001d9a:	403c      	ands	r4, r7
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8001d9c:	688a      	ldr	r2, [r1, #8]
 8001d9e:	40aa      	lsls	r2, r5
 8001da0:	4322      	orrs	r2, r4
        GPIOx->PUPDR = tmp;
 8001da2:	60c2      	str	r2, [r0, #12]
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001da4:	684a      	ldr	r2, [r1, #4]
 8001da6:	00d2      	lsls	r2, r2, #3
 8001da8:	d598      	bpl.n	8001cdc <HAL_GPIO_Init+0x84>
        tmp = EXTI->EXTICR[position >> 2U];
 8001daa:	089a      	lsrs	r2, r3, #2
 8001dac:	0014      	movs	r4, r2
 8001dae:	3418      	adds	r4, #24
 8001db0:	00a4      	lsls	r4, r4, #2
 8001db2:	4d13      	ldr	r5, [pc, #76]	@ (8001e00 <HAL_GPIO_Init+0x1a8>)
 8001db4:	5967      	ldr	r7, [r4, r5]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001db6:	2403      	movs	r4, #3
 8001db8:	401c      	ands	r4, r3
 8001dba:	00e4      	lsls	r4, r4, #3
 8001dbc:	250f      	movs	r5, #15
 8001dbe:	40a5      	lsls	r5, r4
 8001dc0:	43af      	bics	r7, r5
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001dc2:	25a0      	movs	r5, #160	@ 0xa0
 8001dc4:	05ed      	lsls	r5, r5, #23
 8001dc6:	42a8      	cmp	r0, r5
 8001dc8:	d100      	bne.n	8001dcc <HAL_GPIO_Init+0x174>
 8001dca:	e74e      	b.n	8001c6a <HAL_GPIO_Init+0x12>
 8001dcc:	4d0d      	ldr	r5, [pc, #52]	@ (8001e04 <HAL_GPIO_Init+0x1ac>)
 8001dce:	42a8      	cmp	r0, r5
 8001dd0:	d00b      	beq.n	8001dea <HAL_GPIO_Init+0x192>
 8001dd2:	4d0d      	ldr	r5, [pc, #52]	@ (8001e08 <HAL_GPIO_Init+0x1b0>)
 8001dd4:	42a8      	cmp	r0, r5
 8001dd6:	d00a      	beq.n	8001dee <HAL_GPIO_Init+0x196>
 8001dd8:	4d0c      	ldr	r5, [pc, #48]	@ (8001e0c <HAL_GPIO_Init+0x1b4>)
 8001dda:	42a8      	cmp	r0, r5
 8001ddc:	d009      	beq.n	8001df2 <HAL_GPIO_Init+0x19a>
 8001dde:	4d0c      	ldr	r5, [pc, #48]	@ (8001e10 <HAL_GPIO_Init+0x1b8>)
 8001de0:	42a8      	cmp	r0, r5
 8001de2:	d100      	bne.n	8001de6 <HAL_GPIO_Init+0x18e>
 8001de4:	e73f      	b.n	8001c66 <HAL_GPIO_Init+0xe>
 8001de6:	2506      	movs	r5, #6
 8001de8:	e740      	b.n	8001c6c <HAL_GPIO_Init+0x14>
 8001dea:	2501      	movs	r5, #1
 8001dec:	e73e      	b.n	8001c6c <HAL_GPIO_Init+0x14>
 8001dee:	2502      	movs	r5, #2
 8001df0:	e73c      	b.n	8001c6c <HAL_GPIO_Init+0x14>
 8001df2:	2503      	movs	r5, #3
 8001df4:	e73a      	b.n	8001c6c <HAL_GPIO_Init+0x14>
  }
}
 8001df6:	bce0      	pop	{r5, r6, r7}
 8001df8:	46ba      	mov	sl, r7
 8001dfa:	46b1      	mov	r9, r6
 8001dfc:	46a8      	mov	r8, r5
 8001dfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e00:	40021800 	.word	0x40021800
 8001e04:	50000400 	.word	0x50000400
 8001e08:	50000800 	.word	0x50000800
 8001e0c:	50000c00 	.word	0x50000c00
 8001e10:	50001400 	.word	0x50001400

08001e14 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001e14:	4b14      	ldr	r3, [pc, #80]	@ (8001e68 <HAL_RCC_GetSysClockFreq+0x54>)
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	2238      	movs	r2, #56	@ 0x38
 8001e1a:	421a      	tst	r2, r3
 8001e1c:	d107      	bne.n	8001e2e <HAL_RCC_GetSysClockFreq+0x1a>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001e1e:	4b12      	ldr	r3, [pc, #72]	@ (8001e68 <HAL_RCC_GetSysClockFreq+0x54>)
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	0ad2      	lsrs	r2, r2, #11
 8001e24:	2307      	movs	r3, #7
 8001e26:	4013      	ands	r3, r2

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001e28:	4810      	ldr	r0, [pc, #64]	@ (8001e6c <HAL_RCC_GetSysClockFreq+0x58>)
 8001e2a:	40d8      	lsrs	r0, r3
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
}
 8001e2c:	4770      	bx	lr
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001e2e:	4b0e      	ldr	r3, [pc, #56]	@ (8001e68 <HAL_RCC_GetSysClockFreq+0x54>)
 8001e30:	689a      	ldr	r2, [r3, #8]
 8001e32:	2338      	movs	r3, #56	@ 0x38
 8001e34:	4013      	ands	r3, r2
 8001e36:	2b08      	cmp	r3, #8
 8001e38:	d010      	beq.n	8001e5c <HAL_RCC_GetSysClockFreq+0x48>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001e3a:	4b0b      	ldr	r3, [pc, #44]	@ (8001e68 <HAL_RCC_GetSysClockFreq+0x54>)
 8001e3c:	689a      	ldr	r2, [r3, #8]
 8001e3e:	2338      	movs	r3, #56	@ 0x38
 8001e40:	4013      	ands	r3, r2
 8001e42:	2b20      	cmp	r3, #32
 8001e44:	d00c      	beq.n	8001e60 <HAL_RCC_GetSysClockFreq+0x4c>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001e46:	4b08      	ldr	r3, [pc, #32]	@ (8001e68 <HAL_RCC_GetSysClockFreq+0x54>)
 8001e48:	689a      	ldr	r2, [r3, #8]
 8001e4a:	2338      	movs	r3, #56	@ 0x38
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	2b18      	cmp	r3, #24
 8001e50:	d001      	beq.n	8001e56 <HAL_RCC_GetSysClockFreq+0x42>
    sysclockfreq = 0U;
 8001e52:	2000      	movs	r0, #0
  return sysclockfreq;
 8001e54:	e7ea      	b.n	8001e2c <HAL_RCC_GetSysClockFreq+0x18>
    sysclockfreq = LSI_VALUE;
 8001e56:	20fa      	movs	r0, #250	@ 0xfa
 8001e58:	01c0      	lsls	r0, r0, #7
 8001e5a:	e7e7      	b.n	8001e2c <HAL_RCC_GetSysClockFreq+0x18>
    sysclockfreq = HSE_VALUE;
 8001e5c:	4804      	ldr	r0, [pc, #16]	@ (8001e70 <HAL_RCC_GetSysClockFreq+0x5c>)
 8001e5e:	e7e5      	b.n	8001e2c <HAL_RCC_GetSysClockFreq+0x18>
    sysclockfreq = LSE_VALUE;
 8001e60:	2080      	movs	r0, #128	@ 0x80
 8001e62:	0200      	lsls	r0, r0, #8
 8001e64:	e7e2      	b.n	8001e2c <HAL_RCC_GetSysClockFreq+0x18>
 8001e66:	46c0      	nop			@ (mov r8, r8)
 8001e68:	40021000 	.word	0x40021000
 8001e6c:	02dc6c00 	.word	0x02dc6c00
 8001e70:	007a1200 	.word	0x007a1200

08001e74 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e74:	b510      	push	{r4, lr}
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001e76:	f7ff ffcd 	bl	8001e14 <HAL_RCC_GetSysClockFreq>
 8001e7a:	4b07      	ldr	r3, [pc, #28]	@ (8001e98 <HAL_RCC_GetHCLKFreq+0x24>)
 8001e7c:	689a      	ldr	r2, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001e7e:	0a12      	lsrs	r2, r2, #8
 8001e80:	230f      	movs	r3, #15
 8001e82:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001e84:	4a05      	ldr	r2, [pc, #20]	@ (8001e9c <HAL_RCC_GetHCLKFreq+0x28>)
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	589a      	ldr	r2, [r3, r2]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001e8a:	231f      	movs	r3, #31
 8001e8c:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001e8e:	40d8      	lsrs	r0, r3
 8001e90:	4b03      	ldr	r3, [pc, #12]	@ (8001ea0 <HAL_RCC_GetHCLKFreq+0x2c>)
 8001e92:	6018      	str	r0, [r3, #0]
  return SystemCoreClock;
}
 8001e94:	bd10      	pop	{r4, pc}
 8001e96:	46c0      	nop			@ (mov r8, r8)
 8001e98:	40021000 	.word	0x40021000
 8001e9c:	08003c04 	.word	0x08003c04
 8001ea0:	20000004 	.word	0x20000004

08001ea4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ea4:	b510      	push	{r4, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 8001ea6:	f7ff ffe5 	bl	8001e74 <HAL_RCC_GetHCLKFreq>
 8001eaa:	4b06      	ldr	r3, [pc, #24]	@ (8001ec4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001eac:	689a      	ldr	r2, [r3, #8]
 8001eae:	0b12      	lsrs	r2, r2, #12
 8001eb0:	2307      	movs	r3, #7
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	4a04      	ldr	r2, [pc, #16]	@ (8001ec8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	589a      	ldr	r2, [r3, r2]
 8001eba:	231f      	movs	r3, #31
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	40d8      	lsrs	r0, r3
}
 8001ec0:	bd10      	pop	{r4, pc}
 8001ec2:	46c0      	nop			@ (mov r8, r8)
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	08003be4 	.word	0x08003be4

08001ecc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001ecc:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001ece:	6a05      	ldr	r5, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001ed0:	6a03      	ldr	r3, [r0, #32]
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	4393      	bics	r3, r2
 8001ed6:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001ed8:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001eda:	6983      	ldr	r3, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001edc:	4c16      	ldr	r4, [pc, #88]	@ (8001f38 <TIM_OC1_SetConfig+0x6c>)
 8001ede:	4023      	ands	r3, r4
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001ee0:	680c      	ldr	r4, [r1, #0]
 8001ee2:	431c      	orrs	r4, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001ee4:	2302      	movs	r3, #2
 8001ee6:	439d      	bics	r5, r3
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001ee8:	688b      	ldr	r3, [r1, #8]
 8001eea:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001eec:	4d13      	ldr	r5, [pc, #76]	@ (8001f3c <TIM_OC1_SetConfig+0x70>)
 8001eee:	42a8      	cmp	r0, r5
 8001ef0:	d005      	beq.n	8001efe <TIM_OC1_SetConfig+0x32>
 8001ef2:	4d13      	ldr	r5, [pc, #76]	@ (8001f40 <TIM_OC1_SetConfig+0x74>)
 8001ef4:	42a8      	cmp	r0, r5
 8001ef6:	d002      	beq.n	8001efe <TIM_OC1_SetConfig+0x32>
 8001ef8:	4d12      	ldr	r5, [pc, #72]	@ (8001f44 <TIM_OC1_SetConfig+0x78>)
 8001efa:	42a8      	cmp	r0, r5
 8001efc:	d106      	bne.n	8001f0c <TIM_OC1_SetConfig+0x40>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001efe:	2508      	movs	r5, #8
 8001f00:	43ab      	bics	r3, r5
 8001f02:	001d      	movs	r5, r3
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001f04:	68cb      	ldr	r3, [r1, #12]
 8001f06:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001f08:	2504      	movs	r5, #4
 8001f0a:	43ab      	bics	r3, r5
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001f0c:	4d0b      	ldr	r5, [pc, #44]	@ (8001f3c <TIM_OC1_SetConfig+0x70>)
 8001f0e:	42a8      	cmp	r0, r5
 8001f10:	d005      	beq.n	8001f1e <TIM_OC1_SetConfig+0x52>
 8001f12:	4d0b      	ldr	r5, [pc, #44]	@ (8001f40 <TIM_OC1_SetConfig+0x74>)
 8001f14:	42a8      	cmp	r0, r5
 8001f16:	d002      	beq.n	8001f1e <TIM_OC1_SetConfig+0x52>
 8001f18:	4d0a      	ldr	r5, [pc, #40]	@ (8001f44 <TIM_OC1_SetConfig+0x78>)
 8001f1a:	42a8      	cmp	r0, r5
 8001f1c:	d105      	bne.n	8001f2a <TIM_OC1_SetConfig+0x5e>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001f1e:	4d0a      	ldr	r5, [pc, #40]	@ (8001f48 <TIM_OC1_SetConfig+0x7c>)
 8001f20:	402a      	ands	r2, r5
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001f22:	694d      	ldr	r5, [r1, #20]
 8001f24:	4315      	orrs	r5, r2
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001f26:	698a      	ldr	r2, [r1, #24]
 8001f28:	432a      	orrs	r2, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001f2a:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001f2c:	6184      	str	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001f2e:	684a      	ldr	r2, [r1, #4]
 8001f30:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001f32:	6203      	str	r3, [r0, #32]
}
 8001f34:	bd30      	pop	{r4, r5, pc}
 8001f36:	46c0      	nop			@ (mov r8, r8)
 8001f38:	fffeff8c 	.word	0xfffeff8c
 8001f3c:	40012c00 	.word	0x40012c00
 8001f40:	40014400 	.word	0x40014400
 8001f44:	40014800 	.word	0x40014800
 8001f48:	fffffcff 	.word	0xfffffcff

08001f4c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001f4c:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001f4e:	6a04      	ldr	r4, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001f50:	6a03      	ldr	r3, [r0, #32]
 8001f52:	4a16      	ldr	r2, [pc, #88]	@ (8001fac <TIM_OC3_SetConfig+0x60>)
 8001f54:	4013      	ands	r3, r2
 8001f56:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001f58:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001f5a:	69c3      	ldr	r3, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001f5c:	4d14      	ldr	r5, [pc, #80]	@ (8001fb0 <TIM_OC3_SetConfig+0x64>)
 8001f5e:	402b      	ands	r3, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001f60:	680d      	ldr	r5, [r1, #0]
 8001f62:	431d      	orrs	r5, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001f64:	4b13      	ldr	r3, [pc, #76]	@ (8001fb4 <TIM_OC3_SetConfig+0x68>)
 8001f66:	401c      	ands	r4, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001f68:	688b      	ldr	r3, [r1, #8]
 8001f6a:	021b      	lsls	r3, r3, #8
 8001f6c:	4323      	orrs	r3, r4

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001f6e:	4c12      	ldr	r4, [pc, #72]	@ (8001fb8 <TIM_OC3_SetConfig+0x6c>)
 8001f70:	42a0      	cmp	r0, r4
 8001f72:	d006      	beq.n	8001f82 <TIM_OC3_SetConfig+0x36>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001f74:	4c11      	ldr	r4, [pc, #68]	@ (8001fbc <TIM_OC3_SetConfig+0x70>)
 8001f76:	42a0      	cmp	r0, r4
 8001f78:	d00a      	beq.n	8001f90 <TIM_OC3_SetConfig+0x44>
 8001f7a:	4c11      	ldr	r4, [pc, #68]	@ (8001fc0 <TIM_OC3_SetConfig+0x74>)
 8001f7c:	42a0      	cmp	r0, r4
 8001f7e:	d10f      	bne.n	8001fa0 <TIM_OC3_SetConfig+0x54>
 8001f80:	e006      	b.n	8001f90 <TIM_OC3_SetConfig+0x44>
    tmpccer &= ~TIM_CCER_CC3NP;
 8001f82:	4c10      	ldr	r4, [pc, #64]	@ (8001fc4 <TIM_OC3_SetConfig+0x78>)
 8001f84:	401c      	ands	r4, r3
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001f86:	68cb      	ldr	r3, [r1, #12]
 8001f88:	021b      	lsls	r3, r3, #8
 8001f8a:	4323      	orrs	r3, r4
    tmpccer &= ~TIM_CCER_CC3NE;
 8001f8c:	4c0e      	ldr	r4, [pc, #56]	@ (8001fc8 <TIM_OC3_SetConfig+0x7c>)
 8001f8e:	4023      	ands	r3, r4
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001f90:	4c0e      	ldr	r4, [pc, #56]	@ (8001fcc <TIM_OC3_SetConfig+0x80>)
 8001f92:	4022      	ands	r2, r4
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001f94:	694c      	ldr	r4, [r1, #20]
 8001f96:	0124      	lsls	r4, r4, #4
 8001f98:	4314      	orrs	r4, r2
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001f9a:	698a      	ldr	r2, [r1, #24]
 8001f9c:	0112      	lsls	r2, r2, #4
 8001f9e:	4322      	orrs	r2, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001fa0:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001fa2:	61c5      	str	r5, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001fa4:	684a      	ldr	r2, [r1, #4]
 8001fa6:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001fa8:	6203      	str	r3, [r0, #32]
}
 8001faa:	bd30      	pop	{r4, r5, pc}
 8001fac:	fffffeff 	.word	0xfffffeff
 8001fb0:	fffeff8c 	.word	0xfffeff8c
 8001fb4:	fffffdff 	.word	0xfffffdff
 8001fb8:	40012c00 	.word	0x40012c00
 8001fbc:	40014400 	.word	0x40014400
 8001fc0:	40014800 	.word	0x40014800
 8001fc4:	fffff7ff 	.word	0xfffff7ff
 8001fc8:	fffffbff 	.word	0xfffffbff
 8001fcc:	ffffcfff 	.word	0xffffcfff

08001fd0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001fd0:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001fd2:	6a04      	ldr	r4, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001fd4:	6a03      	ldr	r3, [r0, #32]
 8001fd6:	4a11      	ldr	r2, [pc, #68]	@ (800201c <TIM_OC4_SetConfig+0x4c>)
 8001fd8:	4013      	ands	r3, r2
 8001fda:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001fdc:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001fde:	69c3      	ldr	r3, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001fe0:	4a0f      	ldr	r2, [pc, #60]	@ (8002020 <TIM_OC4_SetConfig+0x50>)
 8001fe2:	4013      	ands	r3, r2

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001fe4:	680a      	ldr	r2, [r1, #0]
 8001fe6:	0212      	lsls	r2, r2, #8
 8001fe8:	431a      	orrs	r2, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8001fea:	4b0e      	ldr	r3, [pc, #56]	@ (8002024 <TIM_OC4_SetConfig+0x54>)
 8001fec:	401c      	ands	r4, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001fee:	688b      	ldr	r3, [r1, #8]
 8001ff0:	031b      	lsls	r3, r3, #12
 8001ff2:	4323      	orrs	r3, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001ff4:	4c0c      	ldr	r4, [pc, #48]	@ (8002028 <TIM_OC4_SetConfig+0x58>)
 8001ff6:	42a0      	cmp	r0, r4
 8001ff8:	d005      	beq.n	8002006 <TIM_OC4_SetConfig+0x36>
 8001ffa:	4c0c      	ldr	r4, [pc, #48]	@ (800202c <TIM_OC4_SetConfig+0x5c>)
 8001ffc:	42a0      	cmp	r0, r4
 8001ffe:	d002      	beq.n	8002006 <TIM_OC4_SetConfig+0x36>
 8002000:	4c0b      	ldr	r4, [pc, #44]	@ (8002030 <TIM_OC4_SetConfig+0x60>)
 8002002:	42a0      	cmp	r0, r4
 8002004:	d104      	bne.n	8002010 <TIM_OC4_SetConfig+0x40>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002006:	4c0b      	ldr	r4, [pc, #44]	@ (8002034 <TIM_OC4_SetConfig+0x64>)
 8002008:	402c      	ands	r4, r5

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800200a:	694d      	ldr	r5, [r1, #20]
 800200c:	01ad      	lsls	r5, r5, #6
 800200e:	4325      	orrs	r5, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002010:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002012:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002014:	684a      	ldr	r2, [r1, #4]
 8002016:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002018:	6203      	str	r3, [r0, #32]
}
 800201a:	bd30      	pop	{r4, r5, pc}
 800201c:	ffffefff 	.word	0xffffefff
 8002020:	feff8cff 	.word	0xfeff8cff
 8002024:	ffffdfff 	.word	0xffffdfff
 8002028:	40012c00 	.word	0x40012c00
 800202c:	40014400 	.word	0x40014400
 8002030:	40014800 	.word	0x40014800
 8002034:	ffffbfff 	.word	0xffffbfff

08002038 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002038:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800203a:	6a04      	ldr	r4, [r0, #32]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800203c:	6a03      	ldr	r3, [r0, #32]
 800203e:	4a11      	ldr	r2, [pc, #68]	@ (8002084 <TIM_OC5_SetConfig+0x4c>)
 8002040:	4013      	ands	r3, r2
 8002042:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002044:	6842      	ldr	r2, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002046:	6d43      	ldr	r3, [r0, #84]	@ 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002048:	4d0f      	ldr	r5, [pc, #60]	@ (8002088 <TIM_OC5_SetConfig+0x50>)
 800204a:	402b      	ands	r3, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800204c:	680d      	ldr	r5, [r1, #0]
 800204e:	431d      	orrs	r5, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002050:	4b0e      	ldr	r3, [pc, #56]	@ (800208c <TIM_OC5_SetConfig+0x54>)
 8002052:	401c      	ands	r4, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002054:	688b      	ldr	r3, [r1, #8]
 8002056:	041b      	lsls	r3, r3, #16
 8002058:	4323      	orrs	r3, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800205a:	4c0d      	ldr	r4, [pc, #52]	@ (8002090 <TIM_OC5_SetConfig+0x58>)
 800205c:	42a0      	cmp	r0, r4
 800205e:	d005      	beq.n	800206c <TIM_OC5_SetConfig+0x34>
 8002060:	4c0c      	ldr	r4, [pc, #48]	@ (8002094 <TIM_OC5_SetConfig+0x5c>)
 8002062:	42a0      	cmp	r0, r4
 8002064:	d002      	beq.n	800206c <TIM_OC5_SetConfig+0x34>
 8002066:	4c0c      	ldr	r4, [pc, #48]	@ (8002098 <TIM_OC5_SetConfig+0x60>)
 8002068:	42a0      	cmp	r0, r4
 800206a:	d104      	bne.n	8002076 <TIM_OC5_SetConfig+0x3e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800206c:	4c05      	ldr	r4, [pc, #20]	@ (8002084 <TIM_OC5_SetConfig+0x4c>)
 800206e:	4014      	ands	r4, r2
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002070:	694a      	ldr	r2, [r1, #20]
 8002072:	0212      	lsls	r2, r2, #8
 8002074:	4322      	orrs	r2, r4
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002076:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002078:	6545      	str	r5, [r0, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800207a:	684a      	ldr	r2, [r1, #4]
 800207c:	6582      	str	r2, [r0, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800207e:	6203      	str	r3, [r0, #32]
}
 8002080:	bd30      	pop	{r4, r5, pc}
 8002082:	46c0      	nop			@ (mov r8, r8)
 8002084:	fffeffff 	.word	0xfffeffff
 8002088:	fffeff8f 	.word	0xfffeff8f
 800208c:	fffdffff 	.word	0xfffdffff
 8002090:	40012c00 	.word	0x40012c00
 8002094:	40014400 	.word	0x40014400
 8002098:	40014800 	.word	0x40014800

0800209c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800209c:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800209e:	6a04      	ldr	r4, [r0, #32]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80020a0:	6a03      	ldr	r3, [r0, #32]
 80020a2:	4a11      	ldr	r2, [pc, #68]	@ (80020e8 <TIM_OC6_SetConfig+0x4c>)
 80020a4:	4013      	ands	r3, r2
 80020a6:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80020a8:	6845      	ldr	r5, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80020aa:	6d43      	ldr	r3, [r0, #84]	@ 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80020ac:	4a0f      	ldr	r2, [pc, #60]	@ (80020ec <TIM_OC6_SetConfig+0x50>)
 80020ae:	4013      	ands	r3, r2
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80020b0:	680a      	ldr	r2, [r1, #0]
 80020b2:	0212      	lsls	r2, r2, #8
 80020b4:	431a      	orrs	r2, r3

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80020b6:	4b0e      	ldr	r3, [pc, #56]	@ (80020f0 <TIM_OC6_SetConfig+0x54>)
 80020b8:	401c      	ands	r4, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80020ba:	688b      	ldr	r3, [r1, #8]
 80020bc:	051b      	lsls	r3, r3, #20
 80020be:	4323      	orrs	r3, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80020c0:	4c0c      	ldr	r4, [pc, #48]	@ (80020f4 <TIM_OC6_SetConfig+0x58>)
 80020c2:	42a0      	cmp	r0, r4
 80020c4:	d005      	beq.n	80020d2 <TIM_OC6_SetConfig+0x36>
 80020c6:	4c0c      	ldr	r4, [pc, #48]	@ (80020f8 <TIM_OC6_SetConfig+0x5c>)
 80020c8:	42a0      	cmp	r0, r4
 80020ca:	d002      	beq.n	80020d2 <TIM_OC6_SetConfig+0x36>
 80020cc:	4c0b      	ldr	r4, [pc, #44]	@ (80020fc <TIM_OC6_SetConfig+0x60>)
 80020ce:	42a0      	cmp	r0, r4
 80020d0:	d104      	bne.n	80020dc <TIM_OC6_SetConfig+0x40>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80020d2:	4c0b      	ldr	r4, [pc, #44]	@ (8002100 <TIM_OC6_SetConfig+0x64>)
 80020d4:	402c      	ands	r4, r5
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80020d6:	694d      	ldr	r5, [r1, #20]
 80020d8:	02ad      	lsls	r5, r5, #10
 80020da:	4325      	orrs	r5, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80020dc:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80020de:	6542      	str	r2, [r0, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80020e0:	684a      	ldr	r2, [r1, #4]
 80020e2:	65c2      	str	r2, [r0, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80020e4:	6203      	str	r3, [r0, #32]
}
 80020e6:	bd30      	pop	{r4, r5, pc}
 80020e8:	ffefffff 	.word	0xffefffff
 80020ec:	feff8fff 	.word	0xfeff8fff
 80020f0:	ffdfffff 	.word	0xffdfffff
 80020f4:	40012c00 	.word	0x40012c00
 80020f8:	40014400 	.word	0x40014400
 80020fc:	40014800 	.word	0x40014800
 8002100:	fffbffff 	.word	0xfffbffff

08002104 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002104:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002106:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002108:	6a04      	ldr	r4, [r0, #32]
 800210a:	2501      	movs	r5, #1
 800210c:	43ac      	bics	r4, r5
 800210e:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002110:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002112:	35ef      	adds	r5, #239	@ 0xef
 8002114:	43ac      	bics	r4, r5
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002116:	0112      	lsls	r2, r2, #4
 8002118:	4322      	orrs	r2, r4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800211a:	240a      	movs	r4, #10
 800211c:	43a3      	bics	r3, r4
  tmpccer |= TIM_ICPolarity;
 800211e:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002120:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002122:	6203      	str	r3, [r0, #32]
}
 8002124:	bd30      	pop	{r4, r5, pc}
	...

08002128 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002128:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800212a:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800212c:	6a04      	ldr	r4, [r0, #32]
 800212e:	2510      	movs	r5, #16
 8002130:	43ac      	bics	r4, r5
 8002132:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002134:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002136:	4d05      	ldr	r5, [pc, #20]	@ (800214c <TIM_TI2_ConfigInputStage+0x24>)
 8002138:	402c      	ands	r4, r5
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800213a:	0312      	lsls	r2, r2, #12
 800213c:	4322      	orrs	r2, r4

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800213e:	24a0      	movs	r4, #160	@ 0xa0
 8002140:	43a3      	bics	r3, r4
  tmpccer |= (TIM_ICPolarity << 4U);
 8002142:	0109      	lsls	r1, r1, #4
 8002144:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002146:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002148:	6201      	str	r1, [r0, #32]
}
 800214a:	bd30      	pop	{r4, r5, pc}
 800214c:	ffff0fff 	.word	0xffff0fff

08002150 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002150:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002152:	4a03      	ldr	r2, [pc, #12]	@ (8002160 <TIM_ITRx_SetConfig+0x10>)
 8002154:	4013      	ands	r3, r2
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002156:	430b      	orrs	r3, r1
 8002158:	2207      	movs	r2, #7
 800215a:	4313      	orrs	r3, r2
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800215c:	6083      	str	r3, [r0, #8]
}
 800215e:	4770      	bx	lr
 8002160:	ffcfff8f 	.word	0xffcfff8f

08002164 <HAL_TIM_OC_MspInit>:
}
 8002164:	4770      	bx	lr
	...

08002168 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8002168:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800216a:	4a1c      	ldr	r2, [pc, #112]	@ (80021dc <TIM_Base_SetConfig+0x74>)
 800216c:	4290      	cmp	r0, r2
 800216e:	d002      	beq.n	8002176 <TIM_Base_SetConfig+0xe>
 8002170:	4a1b      	ldr	r2, [pc, #108]	@ (80021e0 <TIM_Base_SetConfig+0x78>)
 8002172:	4290      	cmp	r0, r2
 8002174:	d103      	bne.n	800217e <TIM_Base_SetConfig+0x16>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002176:	2270      	movs	r2, #112	@ 0x70
 8002178:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 800217a:	684a      	ldr	r2, [r1, #4]
 800217c:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800217e:	4a17      	ldr	r2, [pc, #92]	@ (80021dc <TIM_Base_SetConfig+0x74>)
 8002180:	4290      	cmp	r0, r2
 8002182:	d00b      	beq.n	800219c <TIM_Base_SetConfig+0x34>
 8002184:	4a16      	ldr	r2, [pc, #88]	@ (80021e0 <TIM_Base_SetConfig+0x78>)
 8002186:	4290      	cmp	r0, r2
 8002188:	d008      	beq.n	800219c <TIM_Base_SetConfig+0x34>
 800218a:	4a16      	ldr	r2, [pc, #88]	@ (80021e4 <TIM_Base_SetConfig+0x7c>)
 800218c:	4290      	cmp	r0, r2
 800218e:	d005      	beq.n	800219c <TIM_Base_SetConfig+0x34>
 8002190:	4a15      	ldr	r2, [pc, #84]	@ (80021e8 <TIM_Base_SetConfig+0x80>)
 8002192:	4290      	cmp	r0, r2
 8002194:	d002      	beq.n	800219c <TIM_Base_SetConfig+0x34>
 8002196:	4a15      	ldr	r2, [pc, #84]	@ (80021ec <TIM_Base_SetConfig+0x84>)
 8002198:	4290      	cmp	r0, r2
 800219a:	d103      	bne.n	80021a4 <TIM_Base_SetConfig+0x3c>
    tmpcr1 &= ~TIM_CR1_CKD;
 800219c:	4a14      	ldr	r2, [pc, #80]	@ (80021f0 <TIM_Base_SetConfig+0x88>)
 800219e:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021a0:	68ca      	ldr	r2, [r1, #12]
 80021a2:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021a4:	2280      	movs	r2, #128	@ 0x80
 80021a6:	4393      	bics	r3, r2
 80021a8:	694a      	ldr	r2, [r1, #20]
 80021aa:	4313      	orrs	r3, r2
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021ac:	688a      	ldr	r2, [r1, #8]
 80021ae:	62c2      	str	r2, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80021b0:	680a      	ldr	r2, [r1, #0]
 80021b2:	6282      	str	r2, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021b4:	4a09      	ldr	r2, [pc, #36]	@ (80021dc <TIM_Base_SetConfig+0x74>)
 80021b6:	4290      	cmp	r0, r2
 80021b8:	d005      	beq.n	80021c6 <TIM_Base_SetConfig+0x5e>
 80021ba:	4a0b      	ldr	r2, [pc, #44]	@ (80021e8 <TIM_Base_SetConfig+0x80>)
 80021bc:	4290      	cmp	r0, r2
 80021be:	d002      	beq.n	80021c6 <TIM_Base_SetConfig+0x5e>
 80021c0:	4a0a      	ldr	r2, [pc, #40]	@ (80021ec <TIM_Base_SetConfig+0x84>)
 80021c2:	4290      	cmp	r0, r2
 80021c4:	d101      	bne.n	80021ca <TIM_Base_SetConfig+0x62>
    TIMx->RCR = Structure->RepetitionCounter;
 80021c6:	690a      	ldr	r2, [r1, #16]
 80021c8:	6302      	str	r2, [r0, #48]	@ 0x30
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80021ca:	6802      	ldr	r2, [r0, #0]
 80021cc:	2104      	movs	r1, #4
 80021ce:	430a      	orrs	r2, r1
 80021d0:	6002      	str	r2, [r0, #0]
  TIMx->EGR = TIM_EGR_UG;
 80021d2:	2201      	movs	r2, #1
 80021d4:	6142      	str	r2, [r0, #20]
  TIMx->CR1 = tmpcr1;
 80021d6:	6003      	str	r3, [r0, #0]
}
 80021d8:	4770      	bx	lr
 80021da:	46c0      	nop			@ (mov r8, r8)
 80021dc:	40012c00 	.word	0x40012c00
 80021e0:	40000400 	.word	0x40000400
 80021e4:	40002000 	.word	0x40002000
 80021e8:	40014400 	.word	0x40014400
 80021ec:	40014800 	.word	0x40014800
 80021f0:	fffffcff 	.word	0xfffffcff

080021f4 <HAL_TIM_Base_Init>:
{
 80021f4:	b570      	push	{r4, r5, r6, lr}
 80021f6:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 80021f8:	d02a      	beq.n	8002250 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 80021fa:	233d      	movs	r3, #61	@ 0x3d
 80021fc:	5cc3      	ldrb	r3, [r0, r3]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d020      	beq.n	8002244 <HAL_TIM_Base_Init+0x50>
  htim->State = HAL_TIM_STATE_BUSY;
 8002202:	253d      	movs	r5, #61	@ 0x3d
 8002204:	2302      	movs	r3, #2
 8002206:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002208:	0021      	movs	r1, r4
 800220a:	c901      	ldmia	r1!, {r0}
 800220c:	f7ff ffac 	bl	8002168 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002210:	2301      	movs	r3, #1
 8002212:	2248      	movs	r2, #72	@ 0x48
 8002214:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002216:	3a0a      	subs	r2, #10
 8002218:	54a3      	strb	r3, [r4, r2]
 800221a:	3201      	adds	r2, #1
 800221c:	54a3      	strb	r3, [r4, r2]
 800221e:	3201      	adds	r2, #1
 8002220:	54a3      	strb	r3, [r4, r2]
 8002222:	3201      	adds	r2, #1
 8002224:	54a3      	strb	r3, [r4, r2]
 8002226:	3201      	adds	r2, #1
 8002228:	54a3      	strb	r3, [r4, r2]
 800222a:	3201      	adds	r2, #1
 800222c:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800222e:	3201      	adds	r2, #1
 8002230:	54a3      	strb	r3, [r4, r2]
 8002232:	3201      	adds	r2, #1
 8002234:	54a3      	strb	r3, [r4, r2]
 8002236:	3201      	adds	r2, #1
 8002238:	54a3      	strb	r3, [r4, r2]
 800223a:	3201      	adds	r2, #1
 800223c:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 800223e:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8002240:	2000      	movs	r0, #0
}
 8002242:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8002244:	333c      	adds	r3, #60	@ 0x3c
 8002246:	2200      	movs	r2, #0
 8002248:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 800224a:	f7fe fd79 	bl	8000d40 <HAL_TIM_Base_MspInit>
 800224e:	e7d8      	b.n	8002202 <HAL_TIM_Base_Init+0xe>
    return HAL_ERROR;
 8002250:	2001      	movs	r0, #1
 8002252:	e7f6      	b.n	8002242 <HAL_TIM_Base_Init+0x4e>

08002254 <HAL_TIM_OC_Init>:
{
 8002254:	b570      	push	{r4, r5, r6, lr}
 8002256:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 8002258:	d02a      	beq.n	80022b0 <HAL_TIM_OC_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 800225a:	233d      	movs	r3, #61	@ 0x3d
 800225c:	5cc3      	ldrb	r3, [r0, r3]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d020      	beq.n	80022a4 <HAL_TIM_OC_Init+0x50>
  htim->State = HAL_TIM_STATE_BUSY;
 8002262:	253d      	movs	r5, #61	@ 0x3d
 8002264:	2302      	movs	r3, #2
 8002266:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002268:	0021      	movs	r1, r4
 800226a:	c901      	ldmia	r1!, {r0}
 800226c:	f7ff ff7c 	bl	8002168 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002270:	2301      	movs	r3, #1
 8002272:	2248      	movs	r2, #72	@ 0x48
 8002274:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002276:	3a0a      	subs	r2, #10
 8002278:	54a3      	strb	r3, [r4, r2]
 800227a:	3201      	adds	r2, #1
 800227c:	54a3      	strb	r3, [r4, r2]
 800227e:	3201      	adds	r2, #1
 8002280:	54a3      	strb	r3, [r4, r2]
 8002282:	3201      	adds	r2, #1
 8002284:	54a3      	strb	r3, [r4, r2]
 8002286:	3201      	adds	r2, #1
 8002288:	54a3      	strb	r3, [r4, r2]
 800228a:	3201      	adds	r2, #1
 800228c:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800228e:	3201      	adds	r2, #1
 8002290:	54a3      	strb	r3, [r4, r2]
 8002292:	3201      	adds	r2, #1
 8002294:	54a3      	strb	r3, [r4, r2]
 8002296:	3201      	adds	r2, #1
 8002298:	54a3      	strb	r3, [r4, r2]
 800229a:	3201      	adds	r2, #1
 800229c:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 800229e:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 80022a0:	2000      	movs	r0, #0
}
 80022a2:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 80022a4:	333c      	adds	r3, #60	@ 0x3c
 80022a6:	2200      	movs	r2, #0
 80022a8:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_OC_MspInit(htim);
 80022aa:	f7ff ff5b 	bl	8002164 <HAL_TIM_OC_MspInit>
 80022ae:	e7d8      	b.n	8002262 <HAL_TIM_OC_Init+0xe>
    return HAL_ERROR;
 80022b0:	2001      	movs	r0, #1
 80022b2:	e7f6      	b.n	80022a2 <HAL_TIM_OC_Init+0x4e>

080022b4 <TIM_OC2_SetConfig>:
{
 80022b4:	b570      	push	{r4, r5, r6, lr}
  tmpccer = TIMx->CCER;
 80022b6:	6a02      	ldr	r2, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80022b8:	6a03      	ldr	r3, [r0, #32]
 80022ba:	2410      	movs	r4, #16
 80022bc:	43a3      	bics	r3, r4
 80022be:	6203      	str	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80022c0:	6845      	ldr	r5, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80022c2:	6983      	ldr	r3, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80022c4:	4c14      	ldr	r4, [pc, #80]	@ (8002318 <TIM_OC2_SetConfig+0x64>)
 80022c6:	4023      	ands	r3, r4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80022c8:	680c      	ldr	r4, [r1, #0]
 80022ca:	0224      	lsls	r4, r4, #8
 80022cc:	431c      	orrs	r4, r3
  tmpccer &= ~TIM_CCER_CC2P;
 80022ce:	2320      	movs	r3, #32
 80022d0:	439a      	bics	r2, r3
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80022d2:	688b      	ldr	r3, [r1, #8]
 80022d4:	011b      	lsls	r3, r3, #4
 80022d6:	4313      	orrs	r3, r2
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80022d8:	4a10      	ldr	r2, [pc, #64]	@ (800231c <TIM_OC2_SetConfig+0x68>)
 80022da:	4290      	cmp	r0, r2
 80022dc:	d006      	beq.n	80022ec <TIM_OC2_SetConfig+0x38>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80022de:	4a10      	ldr	r2, [pc, #64]	@ (8002320 <TIM_OC2_SetConfig+0x6c>)
 80022e0:	4290      	cmp	r0, r2
 80022e2:	d00b      	beq.n	80022fc <TIM_OC2_SetConfig+0x48>
 80022e4:	4a0f      	ldr	r2, [pc, #60]	@ (8002324 <TIM_OC2_SetConfig+0x70>)
 80022e6:	4290      	cmp	r0, r2
 80022e8:	d110      	bne.n	800230c <TIM_OC2_SetConfig+0x58>
 80022ea:	e007      	b.n	80022fc <TIM_OC2_SetConfig+0x48>
    tmpccer &= ~TIM_CCER_CC2NP;
 80022ec:	2280      	movs	r2, #128	@ 0x80
 80022ee:	4393      	bics	r3, r2
 80022f0:	001e      	movs	r6, r3
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80022f2:	68cb      	ldr	r3, [r1, #12]
 80022f4:	011b      	lsls	r3, r3, #4
 80022f6:	4333      	orrs	r3, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 80022f8:	3a40      	subs	r2, #64	@ 0x40
 80022fa:	4393      	bics	r3, r2
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80022fc:	4a0a      	ldr	r2, [pc, #40]	@ (8002328 <TIM_OC2_SetConfig+0x74>)
 80022fe:	4015      	ands	r5, r2
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002300:	694a      	ldr	r2, [r1, #20]
 8002302:	0092      	lsls	r2, r2, #2
 8002304:	432a      	orrs	r2, r5
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002306:	698d      	ldr	r5, [r1, #24]
 8002308:	00ad      	lsls	r5, r5, #2
 800230a:	4315      	orrs	r5, r2
  TIMx->CR2 = tmpcr2;
 800230c:	6045      	str	r5, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800230e:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8002310:	684a      	ldr	r2, [r1, #4]
 8002312:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 8002314:	6203      	str	r3, [r0, #32]
}
 8002316:	bd70      	pop	{r4, r5, r6, pc}
 8002318:	feff8cff 	.word	0xfeff8cff
 800231c:	40012c00 	.word	0x40012c00
 8002320:	40014400 	.word	0x40014400
 8002324:	40014800 	.word	0x40014800
 8002328:	fffff3ff 	.word	0xfffff3ff

0800232c <HAL_TIM_OC_ConfigChannel>:
{
 800232c:	b510      	push	{r4, lr}
 800232e:	0004      	movs	r4, r0
  __HAL_LOCK(htim);
 8002330:	233c      	movs	r3, #60	@ 0x3c
 8002332:	5cc3      	ldrb	r3, [r0, r3]
 8002334:	2b01      	cmp	r3, #1
 8002336:	d02b      	beq.n	8002390 <HAL_TIM_OC_ConfigChannel+0x64>
 8002338:	233c      	movs	r3, #60	@ 0x3c
 800233a:	2001      	movs	r0, #1
 800233c:	54e0      	strb	r0, [r4, r3]
  switch (Channel)
 800233e:	2a14      	cmp	r2, #20
 8002340:	d821      	bhi.n	8002386 <HAL_TIM_OC_ConfigChannel+0x5a>
 8002342:	0092      	lsls	r2, r2, #2
 8002344:	4b13      	ldr	r3, [pc, #76]	@ (8002394 <HAL_TIM_OC_ConfigChannel+0x68>)
 8002346:	589b      	ldr	r3, [r3, r2]
 8002348:	469f      	mov	pc, r3
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800234a:	6820      	ldr	r0, [r4, #0]
 800234c:	f7ff fdbe 	bl	8001ecc <TIM_OC1_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8002350:	2000      	movs	r0, #0
      break;
 8002352:	e019      	b.n	8002388 <HAL_TIM_OC_ConfigChannel+0x5c>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002354:	6820      	ldr	r0, [r4, #0]
 8002356:	f7ff ffad 	bl	80022b4 <TIM_OC2_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800235a:	2000      	movs	r0, #0
      break;
 800235c:	e014      	b.n	8002388 <HAL_TIM_OC_ConfigChannel+0x5c>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800235e:	6820      	ldr	r0, [r4, #0]
 8002360:	f7ff fdf4 	bl	8001f4c <TIM_OC3_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8002364:	2000      	movs	r0, #0
      break;
 8002366:	e00f      	b.n	8002388 <HAL_TIM_OC_ConfigChannel+0x5c>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002368:	6820      	ldr	r0, [r4, #0]
 800236a:	f7ff fe31 	bl	8001fd0 <TIM_OC4_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800236e:	2000      	movs	r0, #0
      break;
 8002370:	e00a      	b.n	8002388 <HAL_TIM_OC_ConfigChannel+0x5c>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002372:	6820      	ldr	r0, [r4, #0]
 8002374:	f7ff fe60 	bl	8002038 <TIM_OC5_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8002378:	2000      	movs	r0, #0
      break;
 800237a:	e005      	b.n	8002388 <HAL_TIM_OC_ConfigChannel+0x5c>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800237c:	6820      	ldr	r0, [r4, #0]
 800237e:	f7ff fe8d 	bl	800209c <TIM_OC6_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8002382:	2000      	movs	r0, #0
      break;
 8002384:	e000      	b.n	8002388 <HAL_TIM_OC_ConfigChannel+0x5c>
  switch (Channel)
 8002386:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8002388:	233c      	movs	r3, #60	@ 0x3c
 800238a:	2200      	movs	r2, #0
 800238c:	54e2      	strb	r2, [r4, r3]
}
 800238e:	bd10      	pop	{r4, pc}
  __HAL_LOCK(htim);
 8002390:	2002      	movs	r0, #2
 8002392:	e7fc      	b.n	800238e <HAL_TIM_OC_ConfigChannel+0x62>
 8002394:	08003c44 	.word	0x08003c44

08002398 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002398:	b530      	push	{r4, r5, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800239a:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800239c:	4d03      	ldr	r5, [pc, #12]	@ (80023ac <TIM_ETR_SetConfig+0x14>)
 800239e:	402c      	ands	r4, r5

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80023a0:	021b      	lsls	r3, r3, #8
 80023a2:	4313      	orrs	r3, r2
 80023a4:	430b      	orrs	r3, r1
 80023a6:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80023a8:	6083      	str	r3, [r0, #8]
}
 80023aa:	bd30      	pop	{r4, r5, pc}
 80023ac:	ffff00ff 	.word	0xffff00ff

080023b0 <HAL_TIM_ConfigClockSource>:
{
 80023b0:	b510      	push	{r4, lr}
 80023b2:	0004      	movs	r4, r0
 80023b4:	000b      	movs	r3, r1
  __HAL_LOCK(htim);
 80023b6:	223c      	movs	r2, #60	@ 0x3c
 80023b8:	5c82      	ldrb	r2, [r0, r2]
 80023ba:	2a01      	cmp	r2, #1
 80023bc:	d100      	bne.n	80023c0 <HAL_TIM_ConfigClockSource+0x10>
 80023be:	e077      	b.n	80024b0 <HAL_TIM_ConfigClockSource+0x100>
 80023c0:	223c      	movs	r2, #60	@ 0x3c
 80023c2:	2101      	movs	r1, #1
 80023c4:	5481      	strb	r1, [r0, r2]
  htim->State = HAL_TIM_STATE_BUSY;
 80023c6:	3201      	adds	r2, #1
 80023c8:	3101      	adds	r1, #1
 80023ca:	5481      	strb	r1, [r0, r2]
  tmpsmcr = htim->Instance->SMCR;
 80023cc:	6801      	ldr	r1, [r0, #0]
 80023ce:	688a      	ldr	r2, [r1, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80023d0:	4838      	ldr	r0, [pc, #224]	@ (80024b4 <HAL_TIM_ConfigClockSource+0x104>)
 80023d2:	4002      	ands	r2, r0
  htim->Instance->SMCR = tmpsmcr;
 80023d4:	608a      	str	r2, [r1, #8]
  switch (sClockSourceConfig->ClockSource)
 80023d6:	6819      	ldr	r1, [r3, #0]
 80023d8:	2960      	cmp	r1, #96	@ 0x60
 80023da:	d04f      	beq.n	800247c <HAL_TIM_ConfigClockSource+0xcc>
 80023dc:	d823      	bhi.n	8002426 <HAL_TIM_ConfigClockSource+0x76>
 80023de:	2940      	cmp	r1, #64	@ 0x40
 80023e0:	d057      	beq.n	8002492 <HAL_TIM_ConfigClockSource+0xe2>
 80023e2:	d811      	bhi.n	8002408 <HAL_TIM_ConfigClockSource+0x58>
 80023e4:	2920      	cmp	r1, #32
 80023e6:	d004      	beq.n	80023f2 <HAL_TIM_ConfigClockSource+0x42>
 80023e8:	d80a      	bhi.n	8002400 <HAL_TIM_ConfigClockSource+0x50>
 80023ea:	2900      	cmp	r1, #0
 80023ec:	d001      	beq.n	80023f2 <HAL_TIM_ConfigClockSource+0x42>
 80023ee:	2910      	cmp	r1, #16
 80023f0:	d104      	bne.n	80023fc <HAL_TIM_ConfigClockSource+0x4c>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80023f2:	6820      	ldr	r0, [r4, #0]
 80023f4:	f7ff feac 	bl	8002150 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80023f8:	2000      	movs	r0, #0
      break;
 80023fa:	e02a      	b.n	8002452 <HAL_TIM_ConfigClockSource+0xa2>
      status = HAL_ERROR;
 80023fc:	2001      	movs	r0, #1
 80023fe:	e028      	b.n	8002452 <HAL_TIM_ConfigClockSource+0xa2>
  switch (sClockSourceConfig->ClockSource)
 8002400:	2930      	cmp	r1, #48	@ 0x30
 8002402:	d0f6      	beq.n	80023f2 <HAL_TIM_ConfigClockSource+0x42>
      status = HAL_ERROR;
 8002404:	2001      	movs	r0, #1
 8002406:	e024      	b.n	8002452 <HAL_TIM_ConfigClockSource+0xa2>
  switch (sClockSourceConfig->ClockSource)
 8002408:	2950      	cmp	r1, #80	@ 0x50
 800240a:	d10a      	bne.n	8002422 <HAL_TIM_ConfigClockSource+0x72>
                               sClockSourceConfig->ClockPolarity,
 800240c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800240e:	68da      	ldr	r2, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002410:	6820      	ldr	r0, [r4, #0]
 8002412:	f7ff fe77 	bl	8002104 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002416:	6820      	ldr	r0, [r4, #0]
 8002418:	2150      	movs	r1, #80	@ 0x50
 800241a:	f7ff fe99 	bl	8002150 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800241e:	2000      	movs	r0, #0
      break;
 8002420:	e017      	b.n	8002452 <HAL_TIM_ConfigClockSource+0xa2>
      status = HAL_ERROR;
 8002422:	2001      	movs	r0, #1
 8002424:	e015      	b.n	8002452 <HAL_TIM_ConfigClockSource+0xa2>
  switch (sClockSourceConfig->ClockSource)
 8002426:	2280      	movs	r2, #128	@ 0x80
 8002428:	0152      	lsls	r2, r2, #5
 800242a:	4291      	cmp	r1, r2
 800242c:	d03c      	beq.n	80024a8 <HAL_TIM_ConfigClockSource+0xf8>
 800242e:	2280      	movs	r2, #128	@ 0x80
 8002430:	0192      	lsls	r2, r2, #6
 8002432:	4291      	cmp	r1, r2
 8002434:	d014      	beq.n	8002460 <HAL_TIM_ConfigClockSource+0xb0>
 8002436:	2970      	cmp	r1, #112	@ 0x70
 8002438:	d138      	bne.n	80024ac <HAL_TIM_ConfigClockSource+0xfc>
                        sClockSourceConfig->ClockPrescaler,
 800243a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800243c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800243e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002440:	6820      	ldr	r0, [r4, #0]
 8002442:	f7ff ffa9 	bl	8002398 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002446:	6822      	ldr	r2, [r4, #0]
 8002448:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800244a:	2177      	movs	r1, #119	@ 0x77
 800244c:	430b      	orrs	r3, r1
      htim->Instance->SMCR = tmpsmcr;
 800244e:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002450:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002452:	233d      	movs	r3, #61	@ 0x3d
 8002454:	2201      	movs	r2, #1
 8002456:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(htim);
 8002458:	3b01      	subs	r3, #1
 800245a:	2200      	movs	r2, #0
 800245c:	54e2      	strb	r2, [r4, r3]
}
 800245e:	bd10      	pop	{r4, pc}
                        sClockSourceConfig->ClockPrescaler,
 8002460:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002462:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002464:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002466:	6820      	ldr	r0, [r4, #0]
 8002468:	f7ff ff96 	bl	8002398 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800246c:	6822      	ldr	r2, [r4, #0]
 800246e:	6891      	ldr	r1, [r2, #8]
 8002470:	2380      	movs	r3, #128	@ 0x80
 8002472:	01db      	lsls	r3, r3, #7
 8002474:	430b      	orrs	r3, r1
 8002476:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002478:	2000      	movs	r0, #0
      break;
 800247a:	e7ea      	b.n	8002452 <HAL_TIM_ConfigClockSource+0xa2>
                               sClockSourceConfig->ClockPolarity,
 800247c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800247e:	68da      	ldr	r2, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002480:	6820      	ldr	r0, [r4, #0]
 8002482:	f7ff fe51 	bl	8002128 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002486:	6820      	ldr	r0, [r4, #0]
 8002488:	2160      	movs	r1, #96	@ 0x60
 800248a:	f7ff fe61 	bl	8002150 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800248e:	2000      	movs	r0, #0
      break;
 8002490:	e7df      	b.n	8002452 <HAL_TIM_ConfigClockSource+0xa2>
                               sClockSourceConfig->ClockPolarity,
 8002492:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002494:	68da      	ldr	r2, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002496:	6820      	ldr	r0, [r4, #0]
 8002498:	f7ff fe34 	bl	8002104 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800249c:	6820      	ldr	r0, [r4, #0]
 800249e:	2140      	movs	r1, #64	@ 0x40
 80024a0:	f7ff fe56 	bl	8002150 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80024a4:	2000      	movs	r0, #0
      break;
 80024a6:	e7d4      	b.n	8002452 <HAL_TIM_ConfigClockSource+0xa2>
  switch (sClockSourceConfig->ClockSource)
 80024a8:	2000      	movs	r0, #0
 80024aa:	e7d2      	b.n	8002452 <HAL_TIM_ConfigClockSource+0xa2>
      status = HAL_ERROR;
 80024ac:	2001      	movs	r0, #1
 80024ae:	e7d0      	b.n	8002452 <HAL_TIM_ConfigClockSource+0xa2>
  __HAL_LOCK(htim);
 80024b0:	2002      	movs	r0, #2
 80024b2:	e7d4      	b.n	800245e <HAL_TIM_ConfigClockSource+0xae>
 80024b4:	ffce0088 	.word	0xffce0088

080024b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80024b8:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80024ba:	231f      	movs	r3, #31
 80024bc:	4019      	ands	r1, r3
 80024be:	2401      	movs	r4, #1
 80024c0:	408c      	lsls	r4, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80024c2:	6a03      	ldr	r3, [r0, #32]
 80024c4:	43a3      	bics	r3, r4
 80024c6:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80024c8:	6a03      	ldr	r3, [r0, #32]
 80024ca:	408a      	lsls	r2, r1
 80024cc:	4313      	orrs	r3, r2
 80024ce:	6203      	str	r3, [r0, #32]
}
 80024d0:	bd10      	pop	{r4, pc}
	...

080024d4 <HAL_TIM_PWM_Start>:
{
 80024d4:	b510      	push	{r4, lr}
 80024d6:	0004      	movs	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80024d8:	2910      	cmp	r1, #16
 80024da:	d82d      	bhi.n	8002538 <HAL_TIM_PWM_Start+0x64>
 80024dc:	008b      	lsls	r3, r1, #2
 80024de:	4a3f      	ldr	r2, [pc, #252]	@ (80025dc <HAL_TIM_PWM_Start+0x108>)
 80024e0:	58d3      	ldr	r3, [r2, r3]
 80024e2:	469f      	mov	pc, r3
 80024e4:	233e      	movs	r3, #62	@ 0x3e
 80024e6:	5cc3      	ldrb	r3, [r0, r3]
 80024e8:	3b01      	subs	r3, #1
 80024ea:	1e5a      	subs	r2, r3, #1
 80024ec:	4193      	sbcs	r3, r2
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d16d      	bne.n	80025d0 <HAL_TIM_PWM_Start+0xfc>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80024f4:	2910      	cmp	r1, #16
 80024f6:	d859      	bhi.n	80025ac <HAL_TIM_PWM_Start+0xd8>
 80024f8:	008b      	lsls	r3, r1, #2
 80024fa:	4a39      	ldr	r2, [pc, #228]	@ (80025e0 <HAL_TIM_PWM_Start+0x10c>)
 80024fc:	58d3      	ldr	r3, [r2, r3]
 80024fe:	469f      	mov	pc, r3
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002500:	233f      	movs	r3, #63	@ 0x3f
 8002502:	5cc3      	ldrb	r3, [r0, r3]
 8002504:	3b01      	subs	r3, #1
 8002506:	1e5a      	subs	r2, r3, #1
 8002508:	4193      	sbcs	r3, r2
 800250a:	b2db      	uxtb	r3, r3
 800250c:	e7f0      	b.n	80024f0 <HAL_TIM_PWM_Start+0x1c>
 800250e:	2340      	movs	r3, #64	@ 0x40
 8002510:	5cc3      	ldrb	r3, [r0, r3]
 8002512:	3b01      	subs	r3, #1
 8002514:	1e5a      	subs	r2, r3, #1
 8002516:	4193      	sbcs	r3, r2
 8002518:	b2db      	uxtb	r3, r3
 800251a:	e7e9      	b.n	80024f0 <HAL_TIM_PWM_Start+0x1c>
 800251c:	2341      	movs	r3, #65	@ 0x41
 800251e:	5cc3      	ldrb	r3, [r0, r3]
 8002520:	3b01      	subs	r3, #1
 8002522:	1e5a      	subs	r2, r3, #1
 8002524:	4193      	sbcs	r3, r2
 8002526:	b2db      	uxtb	r3, r3
 8002528:	e7e2      	b.n	80024f0 <HAL_TIM_PWM_Start+0x1c>
 800252a:	2342      	movs	r3, #66	@ 0x42
 800252c:	5cc3      	ldrb	r3, [r0, r3]
 800252e:	3b01      	subs	r3, #1
 8002530:	1e5a      	subs	r2, r3, #1
 8002532:	4193      	sbcs	r3, r2
 8002534:	b2db      	uxtb	r3, r3
 8002536:	e7db      	b.n	80024f0 <HAL_TIM_PWM_Start+0x1c>
 8002538:	2343      	movs	r3, #67	@ 0x43
 800253a:	5ce3      	ldrb	r3, [r4, r3]
 800253c:	3b01      	subs	r3, #1
 800253e:	1e5a      	subs	r2, r3, #1
 8002540:	4193      	sbcs	r3, r2
 8002542:	b2db      	uxtb	r3, r3
 8002544:	e7d4      	b.n	80024f0 <HAL_TIM_PWM_Start+0x1c>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002546:	233e      	movs	r3, #62	@ 0x3e
 8002548:	2202      	movs	r2, #2
 800254a:	54e2      	strb	r2, [r4, r3]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800254c:	6820      	ldr	r0, [r4, #0]
 800254e:	2201      	movs	r2, #1
 8002550:	f7ff ffb2 	bl	80024b8 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002554:	6823      	ldr	r3, [r4, #0]
 8002556:	4a23      	ldr	r2, [pc, #140]	@ (80025e4 <HAL_TIM_PWM_Start+0x110>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d005      	beq.n	8002568 <HAL_TIM_PWM_Start+0x94>
 800255c:	4a22      	ldr	r2, [pc, #136]	@ (80025e8 <HAL_TIM_PWM_Start+0x114>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d002      	beq.n	8002568 <HAL_TIM_PWM_Start+0x94>
 8002562:	4a22      	ldr	r2, [pc, #136]	@ (80025ec <HAL_TIM_PWM_Start+0x118>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d104      	bne.n	8002572 <HAL_TIM_PWM_Start+0x9e>
    __HAL_TIM_MOE_ENABLE(htim);
 8002568:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800256a:	2280      	movs	r2, #128	@ 0x80
 800256c:	0212      	lsls	r2, r2, #8
 800256e:	430a      	orrs	r2, r1
 8002570:	645a      	str	r2, [r3, #68]	@ 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002572:	6823      	ldr	r3, [r4, #0]
 8002574:	4a1b      	ldr	r2, [pc, #108]	@ (80025e4 <HAL_TIM_PWM_Start+0x110>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d01c      	beq.n	80025b4 <HAL_TIM_PWM_Start+0xe0>
 800257a:	4a1d      	ldr	r2, [pc, #116]	@ (80025f0 <HAL_TIM_PWM_Start+0x11c>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d019      	beq.n	80025b4 <HAL_TIM_PWM_Start+0xe0>
    __HAL_TIM_ENABLE(htim);
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	2101      	movs	r1, #1
 8002584:	430a      	orrs	r2, r1
 8002586:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002588:	2000      	movs	r0, #0
 800258a:	e022      	b.n	80025d2 <HAL_TIM_PWM_Start+0xfe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800258c:	233f      	movs	r3, #63	@ 0x3f
 800258e:	2202      	movs	r2, #2
 8002590:	54e2      	strb	r2, [r4, r3]
 8002592:	e7db      	b.n	800254c <HAL_TIM_PWM_Start+0x78>
 8002594:	2340      	movs	r3, #64	@ 0x40
 8002596:	2202      	movs	r2, #2
 8002598:	54e2      	strb	r2, [r4, r3]
 800259a:	e7d7      	b.n	800254c <HAL_TIM_PWM_Start+0x78>
 800259c:	2341      	movs	r3, #65	@ 0x41
 800259e:	2202      	movs	r2, #2
 80025a0:	54e2      	strb	r2, [r4, r3]
 80025a2:	e7d3      	b.n	800254c <HAL_TIM_PWM_Start+0x78>
 80025a4:	2342      	movs	r3, #66	@ 0x42
 80025a6:	2202      	movs	r2, #2
 80025a8:	54e2      	strb	r2, [r4, r3]
 80025aa:	e7cf      	b.n	800254c <HAL_TIM_PWM_Start+0x78>
 80025ac:	2343      	movs	r3, #67	@ 0x43
 80025ae:	2202      	movs	r2, #2
 80025b0:	54e2      	strb	r2, [r4, r3]
 80025b2:	e7cb      	b.n	800254c <HAL_TIM_PWM_Start+0x78>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025b4:	689a      	ldr	r2, [r3, #8]
 80025b6:	490f      	ldr	r1, [pc, #60]	@ (80025f4 <HAL_TIM_PWM_Start+0x120>)
 80025b8:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025ba:	2a06      	cmp	r2, #6
 80025bc:	d00a      	beq.n	80025d4 <HAL_TIM_PWM_Start+0x100>
 80025be:	3907      	subs	r1, #7
 80025c0:	428a      	cmp	r2, r1
 80025c2:	d009      	beq.n	80025d8 <HAL_TIM_PWM_Start+0x104>
      __HAL_TIM_ENABLE(htim);
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	2101      	movs	r1, #1
 80025c8:	430a      	orrs	r2, r1
 80025ca:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80025cc:	2000      	movs	r0, #0
 80025ce:	e000      	b.n	80025d2 <HAL_TIM_PWM_Start+0xfe>
    return HAL_ERROR;
 80025d0:	2001      	movs	r0, #1
}
 80025d2:	bd10      	pop	{r4, pc}
  return HAL_OK;
 80025d4:	2000      	movs	r0, #0
 80025d6:	e7fc      	b.n	80025d2 <HAL_TIM_PWM_Start+0xfe>
 80025d8:	2000      	movs	r0, #0
 80025da:	e7fa      	b.n	80025d2 <HAL_TIM_PWM_Start+0xfe>
 80025dc:	08003c98 	.word	0x08003c98
 80025e0:	08003cdc 	.word	0x08003cdc
 80025e4:	40012c00 	.word	0x40012c00
 80025e8:	40014400 	.word	0x40014400
 80025ec:	40014800 	.word	0x40014800
 80025f0:	40000400 	.word	0x40000400
 80025f4:	00010007 	.word	0x00010007

080025f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80025f8:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80025fa:	233c      	movs	r3, #60	@ 0x3c
 80025fc:	5cc3      	ldrb	r3, [r0, r3]
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d029      	beq.n	8002656 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8002602:	233c      	movs	r3, #60	@ 0x3c
 8002604:	2201      	movs	r2, #1
 8002606:	54c2      	strb	r2, [r0, r3]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002608:	3301      	adds	r3, #1
 800260a:	3201      	adds	r2, #1
 800260c:	54c2      	strb	r2, [r0, r3]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800260e:	6802      	ldr	r2, [r0, #0]
 8002610:	6853      	ldr	r3, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002612:	6895      	ldr	r5, [r2, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002614:	4c11      	ldr	r4, [pc, #68]	@ (800265c <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 8002616:	42a2      	cmp	r2, r4
 8002618:	d018      	beq.n	800264c <HAL_TIMEx_MasterConfigSynchronization+0x54>
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800261a:	2470      	movs	r4, #112	@ 0x70
 800261c:	43a3      	bics	r3, r4
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800261e:	680c      	ldr	r4, [r1, #0]
 8002620:	4323      	orrs	r3, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002622:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002624:	6803      	ldr	r3, [r0, #0]
 8002626:	4a0d      	ldr	r2, [pc, #52]	@ (800265c <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d002      	beq.n	8002632 <HAL_TIMEx_MasterConfigSynchronization+0x3a>
 800262c:	4a0c      	ldr	r2, [pc, #48]	@ (8002660 <HAL_TIMEx_MasterConfigSynchronization+0x68>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d104      	bne.n	800263c <HAL_TIMEx_MasterConfigSynchronization+0x44>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002632:	2280      	movs	r2, #128	@ 0x80
 8002634:	4395      	bics	r5, r2
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002636:	688a      	ldr	r2, [r1, #8]
 8002638:	432a      	orrs	r2, r5

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800263a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800263c:	233d      	movs	r3, #61	@ 0x3d
 800263e:	2201      	movs	r2, #1
 8002640:	54c2      	strb	r2, [r0, r3]

  __HAL_UNLOCK(htim);
 8002642:	3b01      	subs	r3, #1
 8002644:	2200      	movs	r2, #0
 8002646:	54c2      	strb	r2, [r0, r3]

  return HAL_OK;
 8002648:	2000      	movs	r0, #0
}
 800264a:	bd30      	pop	{r4, r5, pc}
    tmpcr2 &= ~TIM_CR2_MMS2;
 800264c:	4c05      	ldr	r4, [pc, #20]	@ (8002664 <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
 800264e:	4023      	ands	r3, r4
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002650:	684c      	ldr	r4, [r1, #4]
 8002652:	4323      	orrs	r3, r4
 8002654:	e7e1      	b.n	800261a <HAL_TIMEx_MasterConfigSynchronization+0x22>
  __HAL_LOCK(htim);
 8002656:	2002      	movs	r0, #2
 8002658:	e7f7      	b.n	800264a <HAL_TIMEx_MasterConfigSynchronization+0x52>
 800265a:	46c0      	nop			@ (mov r8, r8)
 800265c:	40012c00 	.word	0x40012c00
 8002660:	40000400 	.word	0x40000400
 8002664:	ff0fffff 	.word	0xff0fffff

08002668 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002668:	b510      	push	{r4, lr}
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800266a:	233c      	movs	r3, #60	@ 0x3c
 800266c:	5cc3      	ldrb	r3, [r0, r3]
 800266e:	2b01      	cmp	r3, #1
 8002670:	d040      	beq.n	80026f4 <HAL_TIMEx_ConfigBreakDeadTime+0x8c>
 8002672:	233c      	movs	r3, #60	@ 0x3c
 8002674:	2201      	movs	r2, #1
 8002676:	54c2      	strb	r2, [r0, r3]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002678:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800267a:	4a1f      	ldr	r2, [pc, #124]	@ (80026f8 <HAL_TIMEx_ConfigBreakDeadTime+0x90>)
 800267c:	4013      	ands	r3, r2
 800267e:	688a      	ldr	r2, [r1, #8]
 8002680:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002682:	4a1e      	ldr	r2, [pc, #120]	@ (80026fc <HAL_TIMEx_ConfigBreakDeadTime+0x94>)
 8002684:	4013      	ands	r3, r2
 8002686:	684a      	ldr	r2, [r1, #4]
 8002688:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800268a:	4a1d      	ldr	r2, [pc, #116]	@ (8002700 <HAL_TIMEx_ConfigBreakDeadTime+0x98>)
 800268c:	4013      	ands	r3, r2
 800268e:	680a      	ldr	r2, [r1, #0]
 8002690:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002692:	4a1c      	ldr	r2, [pc, #112]	@ (8002704 <HAL_TIMEx_ConfigBreakDeadTime+0x9c>)
 8002694:	4013      	ands	r3, r2
 8002696:	690a      	ldr	r2, [r1, #16]
 8002698:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800269a:	4a1b      	ldr	r2, [pc, #108]	@ (8002708 <HAL_TIMEx_ConfigBreakDeadTime+0xa0>)
 800269c:	4013      	ands	r3, r2
 800269e:	694a      	ldr	r2, [r1, #20]
 80026a0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80026a2:	4a1a      	ldr	r2, [pc, #104]	@ (800270c <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 80026a4:	4013      	ands	r3, r2
 80026a6:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 80026a8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80026aa:	4a19      	ldr	r2, [pc, #100]	@ (8002710 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 80026ac:	4013      	ands	r3, r2
 80026ae:	698a      	ldr	r2, [r1, #24]
 80026b0:	0412      	lsls	r2, r2, #16
 80026b2:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80026b4:	4a17      	ldr	r2, [pc, #92]	@ (8002714 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 80026b6:	4013      	ands	r3, r2
 80026b8:	69ca      	ldr	r2, [r1, #28]
 80026ba:	4313      	orrs	r3, r2

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80026bc:	6802      	ldr	r2, [r0, #0]
 80026be:	4c16      	ldr	r4, [pc, #88]	@ (8002718 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 80026c0:	42a2      	cmp	r2, r4
 80026c2:	d005      	beq.n	80026d0 <HAL_TIMEx_ConfigBreakDeadTime+0x68>
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80026c4:	6453      	str	r3, [r2, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80026c6:	233c      	movs	r3, #60	@ 0x3c
 80026c8:	2200      	movs	r2, #0
 80026ca:	54c2      	strb	r2, [r0, r3]

  return HAL_OK;
 80026cc:	2000      	movs	r0, #0
}
 80026ce:	bd10      	pop	{r4, pc}
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80026d0:	4c12      	ldr	r4, [pc, #72]	@ (800271c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 80026d2:	4023      	ands	r3, r4
 80026d4:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 80026d6:	0524      	lsls	r4, r4, #20
 80026d8:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80026da:	4c11      	ldr	r4, [pc, #68]	@ (8002720 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 80026dc:	4023      	ands	r3, r4
 80026de:	6a0c      	ldr	r4, [r1, #32]
 80026e0:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80026e2:	4c10      	ldr	r4, [pc, #64]	@ (8002724 <HAL_TIMEx_ConfigBreakDeadTime+0xbc>)
 80026e4:	4023      	ands	r3, r4
 80026e6:	6a4c      	ldr	r4, [r1, #36]	@ 0x24
 80026e8:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80026ea:	4c0f      	ldr	r4, [pc, #60]	@ (8002728 <HAL_TIMEx_ConfigBreakDeadTime+0xc0>)
 80026ec:	4023      	ands	r3, r4
 80026ee:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
 80026f0:	430b      	orrs	r3, r1
 80026f2:	e7e7      	b.n	80026c4 <HAL_TIMEx_ConfigBreakDeadTime+0x5c>
  __HAL_LOCK(htim);
 80026f4:	2002      	movs	r0, #2
 80026f6:	e7ea      	b.n	80026ce <HAL_TIMEx_ConfigBreakDeadTime+0x66>
 80026f8:	fffffcff 	.word	0xfffffcff
 80026fc:	fffffbff 	.word	0xfffffbff
 8002700:	fffff7ff 	.word	0xfffff7ff
 8002704:	ffffefff 	.word	0xffffefff
 8002708:	ffffdfff 	.word	0xffffdfff
 800270c:	ffffbfff 	.word	0xffffbfff
 8002710:	fff0ffff 	.word	0xfff0ffff
 8002714:	efffffff 	.word	0xefffffff
 8002718:	40012c00 	.word	0x40012c00
 800271c:	ff0fffff 	.word	0xff0fffff
 8002720:	feffffff 	.word	0xfeffffff
 8002724:	fdffffff 	.word	0xfdffffff
 8002728:	dfffffff 	.word	0xdfffffff

0800272c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800272c:	b530      	push	{r4, r5, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800272e:	f3ef 8410 	mrs	r4, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002732:	2201      	movs	r2, #1
 8002734:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002738:	6801      	ldr	r1, [r0, #0]
 800273a:	680b      	ldr	r3, [r1, #0]
 800273c:	4d12      	ldr	r5, [pc, #72]	@ (8002788 <UART_EndRxTransfer+0x5c>)
 800273e:	402b      	ands	r3, r5
 8002740:	600b      	str	r3, [r1, #0]
 8002742:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002746:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800274a:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800274e:	6802      	ldr	r2, [r0, #0]
 8002750:	6893      	ldr	r3, [r2, #8]
 8002752:	4c0e      	ldr	r4, [pc, #56]	@ (800278c <UART_EndRxTransfer+0x60>)
 8002754:	4023      	ands	r3, r4
 8002756:	6093      	str	r3, [r2, #8]
 8002758:	f381 8810 	msr	PRIMASK, r1

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800275c:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 800275e:	2b01      	cmp	r3, #1
 8002760:	d006      	beq.n	8002770 <UART_EndRxTransfer+0x44>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002762:	238c      	movs	r3, #140	@ 0x8c
 8002764:	2220      	movs	r2, #32
 8002766:	50c2      	str	r2, [r0, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002768:	2300      	movs	r3, #0
 800276a:	66c3      	str	r3, [r0, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800276c:	6743      	str	r3, [r0, #116]	@ 0x74
}
 800276e:	bd30      	pop	{r4, r5, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002770:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002774:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002778:	6802      	ldr	r2, [r0, #0]
 800277a:	6813      	ldr	r3, [r2, #0]
 800277c:	2410      	movs	r4, #16
 800277e:	43a3      	bics	r3, r4
 8002780:	6013      	str	r3, [r2, #0]
 8002782:	f381 8810 	msr	PRIMASK, r1
}
 8002786:	e7ec      	b.n	8002762 <UART_EndRxTransfer+0x36>
 8002788:	fffffedf 	.word	0xfffffedf
 800278c:	effffffe 	.word	0xeffffffe

08002790 <HAL_UART_TxCpltCallback>:
}
 8002790:	4770      	bx	lr

08002792 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002792:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002794:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002798:	2301      	movs	r3, #1
 800279a:	f383 8810 	msr	PRIMASK, r3
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800279e:	6802      	ldr	r2, [r0, #0]
 80027a0:	6813      	ldr	r3, [r2, #0]
 80027a2:	2440      	movs	r4, #64	@ 0x40
 80027a4:	43a3      	bics	r3, r4
 80027a6:	6013      	str	r3, [r2, #0]
 80027a8:	f381 8810 	msr	PRIMASK, r1

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80027ac:	2388      	movs	r3, #136	@ 0x88
 80027ae:	2220      	movs	r2, #32
 80027b0:	50c2      	str	r2, [r0, r3]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80027b2:	2300      	movs	r3, #0
 80027b4:	6783      	str	r3, [r0, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80027b6:	f7ff ffeb 	bl	8002790 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80027ba:	bd10      	pop	{r4, pc}

080027bc <HAL_UART_ErrorCallback>:
}
 80027bc:	4770      	bx	lr

080027be <UART_DMAAbortOnError>:
{
 80027be:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80027c0:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  huart->RxXferCount = 0U;
 80027c2:	235e      	movs	r3, #94	@ 0x5e
 80027c4:	2200      	movs	r2, #0
 80027c6:	52c2      	strh	r2, [r0, r3]
  HAL_UART_ErrorCallback(huart);
 80027c8:	f7ff fff8 	bl	80027bc <HAL_UART_ErrorCallback>
}
 80027cc:	bd10      	pop	{r4, pc}

080027ce <HAL_UARTEx_RxEventCallback>:
}
 80027ce:	4770      	bx	lr

080027d0 <HAL_UART_IRQHandler>:
{
 80027d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027d2:	0004      	movs	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80027d4:	6802      	ldr	r2, [r0, #0]
 80027d6:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80027d8:	6810      	ldr	r0, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80027da:	6891      	ldr	r1, [r2, #8]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80027dc:	4dbe      	ldr	r5, [pc, #760]	@ (8002ad8 <HAL_UART_IRQHandler+0x308>)
  if (errorflags == 0U)
 80027de:	422b      	tst	r3, r5
 80027e0:	d10b      	bne.n	80027fa <HAL_UART_IRQHandler+0x2a>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80027e2:	069d      	lsls	r5, r3, #26
 80027e4:	d511      	bpl.n	800280a <HAL_UART_IRQHandler+0x3a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80027e6:	0685      	lsls	r5, r0, #26
 80027e8:	d401      	bmi.n	80027ee <HAL_UART_IRQHandler+0x1e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80027ea:	00cd      	lsls	r5, r1, #3
 80027ec:	d50d      	bpl.n	800280a <HAL_UART_IRQHandler+0x3a>
      if (huart->RxISR != NULL)
 80027ee:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d02a      	beq.n	800284a <HAL_UART_IRQHandler+0x7a>
        huart->RxISR(huart);
 80027f4:	0020      	movs	r0, r4
 80027f6:	4798      	blx	r3
      return;
 80027f8:	e027      	b.n	800284a <HAL_UART_IRQHandler+0x7a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80027fa:	4db8      	ldr	r5, [pc, #736]	@ (8002adc <HAL_UART_IRQHandler+0x30c>)
 80027fc:	000e      	movs	r6, r1
 80027fe:	402e      	ands	r6, r5
 8002800:	4229      	tst	r1, r5
 8002802:	d123      	bne.n	800284c <HAL_UART_IRQHandler+0x7c>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002804:	4db6      	ldr	r5, [pc, #728]	@ (8002ae0 <HAL_UART_IRQHandler+0x310>)
 8002806:	4228      	tst	r0, r5
 8002808:	d120      	bne.n	800284c <HAL_UART_IRQHandler+0x7c>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800280a:	6ee5      	ldr	r5, [r4, #108]	@ 0x6c
 800280c:	2d01      	cmp	r5, #1
 800280e:	d100      	bne.n	8002812 <HAL_UART_IRQHandler+0x42>
 8002810:	e0a4      	b.n	800295c <HAL_UART_IRQHandler+0x18c>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002812:	02dd      	lsls	r5, r3, #11
 8002814:	d502      	bpl.n	800281c <HAL_UART_IRQHandler+0x4c>
 8002816:	024d      	lsls	r5, r1, #9
 8002818:	d500      	bpl.n	800281c <HAL_UART_IRQHandler+0x4c>
 800281a:	e14a      	b.n	8002ab2 <HAL_UART_IRQHandler+0x2e2>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800281c:	061a      	lsls	r2, r3, #24
 800281e:	d505      	bpl.n	800282c <HAL_UART_IRQHandler+0x5c>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002820:	0602      	lsls	r2, r0, #24
 8002822:	d500      	bpl.n	8002826 <HAL_UART_IRQHandler+0x56>
 8002824:	e14c      	b.n	8002ac0 <HAL_UART_IRQHandler+0x2f0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002826:	0209      	lsls	r1, r1, #8
 8002828:	d500      	bpl.n	800282c <HAL_UART_IRQHandler+0x5c>
 800282a:	e149      	b.n	8002ac0 <HAL_UART_IRQHandler+0x2f0>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800282c:	065a      	lsls	r2, r3, #25
 800282e:	d502      	bpl.n	8002836 <HAL_UART_IRQHandler+0x66>
 8002830:	0642      	lsls	r2, r0, #25
 8002832:	d500      	bpl.n	8002836 <HAL_UART_IRQHandler+0x66>
 8002834:	e14b      	b.n	8002ace <HAL_UART_IRQHandler+0x2fe>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002836:	021a      	lsls	r2, r3, #8
 8002838:	d502      	bpl.n	8002840 <HAL_UART_IRQHandler+0x70>
 800283a:	0042      	lsls	r2, r0, #1
 800283c:	d500      	bpl.n	8002840 <HAL_UART_IRQHandler+0x70>
 800283e:	e159      	b.n	8002af4 <HAL_UART_IRQHandler+0x324>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8002840:	01db      	lsls	r3, r3, #7
 8002842:	d502      	bpl.n	800284a <HAL_UART_IRQHandler+0x7a>
 8002844:	2800      	cmp	r0, #0
 8002846:	da00      	bge.n	800284a <HAL_UART_IRQHandler+0x7a>
 8002848:	e158      	b.n	8002afc <HAL_UART_IRQHandler+0x32c>
}
 800284a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800284c:	07dd      	lsls	r5, r3, #31
 800284e:	d507      	bpl.n	8002860 <HAL_UART_IRQHandler+0x90>
 8002850:	05c5      	lsls	r5, r0, #23
 8002852:	d505      	bpl.n	8002860 <HAL_UART_IRQHandler+0x90>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002854:	2701      	movs	r7, #1
 8002856:	6217      	str	r7, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002858:	2590      	movs	r5, #144	@ 0x90
 800285a:	5962      	ldr	r2, [r4, r5]
 800285c:	433a      	orrs	r2, r7
 800285e:	5162      	str	r2, [r4, r5]
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002860:	079a      	lsls	r2, r3, #30
 8002862:	d509      	bpl.n	8002878 <HAL_UART_IRQHandler+0xa8>
 8002864:	07ca      	lsls	r2, r1, #31
 8002866:	d507      	bpl.n	8002878 <HAL_UART_IRQHandler+0xa8>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002868:	6822      	ldr	r2, [r4, #0]
 800286a:	2502      	movs	r5, #2
 800286c:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800286e:	358e      	adds	r5, #142	@ 0x8e
 8002870:	5962      	ldr	r2, [r4, r5]
 8002872:	2704      	movs	r7, #4
 8002874:	433a      	orrs	r2, r7
 8002876:	5162      	str	r2, [r4, r5]
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002878:	075a      	lsls	r2, r3, #29
 800287a:	d509      	bpl.n	8002890 <HAL_UART_IRQHandler+0xc0>
 800287c:	07ca      	lsls	r2, r1, #31
 800287e:	d507      	bpl.n	8002890 <HAL_UART_IRQHandler+0xc0>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002880:	6822      	ldr	r2, [r4, #0]
 8002882:	2504      	movs	r5, #4
 8002884:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002886:	358c      	adds	r5, #140	@ 0x8c
 8002888:	5962      	ldr	r2, [r4, r5]
 800288a:	2702      	movs	r7, #2
 800288c:	433a      	orrs	r2, r7
 800288e:	5162      	str	r2, [r4, r5]
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002890:	071a      	lsls	r2, r3, #28
 8002892:	d50a      	bpl.n	80028aa <HAL_UART_IRQHandler+0xda>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002894:	0682      	lsls	r2, r0, #26
 8002896:	d401      	bmi.n	800289c <HAL_UART_IRQHandler+0xcc>
 8002898:	2e00      	cmp	r6, #0
 800289a:	d006      	beq.n	80028aa <HAL_UART_IRQHandler+0xda>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800289c:	6822      	ldr	r2, [r4, #0]
 800289e:	2608      	movs	r6, #8
 80028a0:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80028a2:	2590      	movs	r5, #144	@ 0x90
 80028a4:	5962      	ldr	r2, [r4, r5]
 80028a6:	4332      	orrs	r2, r6
 80028a8:	5162      	str	r2, [r4, r5]
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80028aa:	051a      	lsls	r2, r3, #20
 80028ac:	d50a      	bpl.n	80028c4 <HAL_UART_IRQHandler+0xf4>
 80028ae:	0142      	lsls	r2, r0, #5
 80028b0:	d508      	bpl.n	80028c4 <HAL_UART_IRQHandler+0xf4>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80028b2:	6822      	ldr	r2, [r4, #0]
 80028b4:	2580      	movs	r5, #128	@ 0x80
 80028b6:	012d      	lsls	r5, r5, #4
 80028b8:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80028ba:	2590      	movs	r5, #144	@ 0x90
 80028bc:	5962      	ldr	r2, [r4, r5]
 80028be:	2620      	movs	r6, #32
 80028c0:	4332      	orrs	r2, r6
 80028c2:	5162      	str	r2, [r4, r5]
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80028c4:	2290      	movs	r2, #144	@ 0x90
 80028c6:	58a2      	ldr	r2, [r4, r2]
 80028c8:	2a00      	cmp	r2, #0
 80028ca:	d0be      	beq.n	800284a <HAL_UART_IRQHandler+0x7a>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80028cc:	069b      	lsls	r3, r3, #26
 80028ce:	d508      	bpl.n	80028e2 <HAL_UART_IRQHandler+0x112>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80028d0:	0680      	lsls	r0, r0, #26
 80028d2:	d401      	bmi.n	80028d8 <HAL_UART_IRQHandler+0x108>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80028d4:	00c9      	lsls	r1, r1, #3
 80028d6:	d504      	bpl.n	80028e2 <HAL_UART_IRQHandler+0x112>
        if (huart->RxISR != NULL)
 80028d8:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d001      	beq.n	80028e2 <HAL_UART_IRQHandler+0x112>
          huart->RxISR(huart);
 80028de:	0020      	movs	r0, r4
 80028e0:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 80028e2:	2390      	movs	r3, #144	@ 0x90
 80028e4:	58e2      	ldr	r2, [r4, r3]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80028e6:	6823      	ldr	r3, [r4, #0]
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	065b      	lsls	r3, r3, #25
 80028ec:	d402      	bmi.n	80028f4 <HAL_UART_IRQHandler+0x124>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80028ee:	2328      	movs	r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80028f0:	4213      	tst	r3, r2
 80028f2:	d02c      	beq.n	800294e <HAL_UART_IRQHandler+0x17e>
        UART_EndRxTransfer(huart);
 80028f4:	0020      	movs	r0, r4
 80028f6:	f7ff ff19 	bl	800272c <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028fa:	6823      	ldr	r3, [r4, #0]
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	065b      	lsls	r3, r3, #25
 8002900:	d521      	bpl.n	8002946 <HAL_UART_IRQHandler+0x176>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002902:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002906:	2301      	movs	r3, #1
 8002908:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800290c:	6822      	ldr	r2, [r4, #0]
 800290e:	6893      	ldr	r3, [r2, #8]
 8002910:	2040      	movs	r0, #64	@ 0x40
 8002912:	4383      	bics	r3, r0
 8002914:	6093      	str	r3, [r2, #8]
 8002916:	f381 8810 	msr	PRIMASK, r1
          if (huart->hdmarx != NULL)
 800291a:	2380      	movs	r3, #128	@ 0x80
 800291c:	58e3      	ldr	r3, [r4, r3]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d00d      	beq.n	800293e <HAL_UART_IRQHandler+0x16e>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002922:	4a70      	ldr	r2, [pc, #448]	@ (8002ae4 <HAL_UART_IRQHandler+0x314>)
 8002924:	639a      	str	r2, [r3, #56]	@ 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002926:	2380      	movs	r3, #128	@ 0x80
 8002928:	58e0      	ldr	r0, [r4, r3]
 800292a:	f7ff f951 	bl	8001bd0 <HAL_DMA_Abort_IT>
 800292e:	2800      	cmp	r0, #0
 8002930:	d100      	bne.n	8002934 <HAL_UART_IRQHandler+0x164>
 8002932:	e78a      	b.n	800284a <HAL_UART_IRQHandler+0x7a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002934:	2380      	movs	r3, #128	@ 0x80
 8002936:	58e0      	ldr	r0, [r4, r3]
 8002938:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800293a:	4798      	blx	r3
 800293c:	e785      	b.n	800284a <HAL_UART_IRQHandler+0x7a>
            HAL_UART_ErrorCallback(huart);
 800293e:	0020      	movs	r0, r4
 8002940:	f7ff ff3c 	bl	80027bc <HAL_UART_ErrorCallback>
 8002944:	e781      	b.n	800284a <HAL_UART_IRQHandler+0x7a>
          HAL_UART_ErrorCallback(huart);
 8002946:	0020      	movs	r0, r4
 8002948:	f7ff ff38 	bl	80027bc <HAL_UART_ErrorCallback>
 800294c:	e77d      	b.n	800284a <HAL_UART_IRQHandler+0x7a>
        HAL_UART_ErrorCallback(huart);
 800294e:	0020      	movs	r0, r4
 8002950:	f7ff ff34 	bl	80027bc <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002954:	2390      	movs	r3, #144	@ 0x90
 8002956:	2200      	movs	r2, #0
 8002958:	50e2      	str	r2, [r4, r3]
    return;
 800295a:	e776      	b.n	800284a <HAL_UART_IRQHandler+0x7a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800295c:	06dd      	lsls	r5, r3, #27
 800295e:	d400      	bmi.n	8002962 <HAL_UART_IRQHandler+0x192>
 8002960:	e757      	b.n	8002812 <HAL_UART_IRQHandler+0x42>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002962:	06c5      	lsls	r5, r0, #27
 8002964:	d400      	bmi.n	8002968 <HAL_UART_IRQHandler+0x198>
 8002966:	e754      	b.n	8002812 <HAL_UART_IRQHandler+0x42>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002968:	2310      	movs	r3, #16
 800296a:	6213      	str	r3, [r2, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800296c:	6823      	ldr	r3, [r4, #0]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	065b      	lsls	r3, r3, #25
 8002972:	d562      	bpl.n	8002a3a <HAL_UART_IRQHandler+0x26a>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002974:	2380      	movs	r3, #128	@ 0x80
 8002976:	58e1      	ldr	r1, [r4, r3]
 8002978:	680a      	ldr	r2, [r1, #0]
 800297a:	6853      	ldr	r3, [r2, #4]
 800297c:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 800297e:	2b00      	cmp	r3, #0
 8002980:	d04c      	beq.n	8002a1c <HAL_UART_IRQHandler+0x24c>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002982:	205c      	movs	r0, #92	@ 0x5c
 8002984:	5a20      	ldrh	r0, [r4, r0]
 8002986:	4298      	cmp	r0, r3
 8002988:	d948      	bls.n	8002a1c <HAL_UART_IRQHandler+0x24c>
        huart->RxXferCount = nb_remaining_rx_data;
 800298a:	225e      	movs	r2, #94	@ 0x5e
 800298c:	52a3      	strh	r3, [r4, r2]
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800298e:	680b      	ldr	r3, [r1, #0]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	069b      	lsls	r3, r3, #26
 8002994:	d50b      	bpl.n	80029ae <HAL_UART_IRQHandler+0x1de>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002996:	2302      	movs	r3, #2
 8002998:	6723      	str	r3, [r4, #112]	@ 0x70
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800299a:	335a      	adds	r3, #90	@ 0x5a
 800299c:	5ae1      	ldrh	r1, [r4, r3]
 800299e:	3302      	adds	r3, #2
 80029a0:	5ae3      	ldrh	r3, [r4, r3]
 80029a2:	1ac9      	subs	r1, r1, r3
 80029a4:	b289      	uxth	r1, r1
 80029a6:	0020      	movs	r0, r4
 80029a8:	f7ff ff11 	bl	80027ce <HAL_UARTEx_RxEventCallback>
 80029ac:	e74d      	b.n	800284a <HAL_UART_IRQHandler+0x7a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80029ae:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029b2:	2301      	movs	r3, #1
 80029b4:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80029b8:	6821      	ldr	r1, [r4, #0]
 80029ba:	680a      	ldr	r2, [r1, #0]
 80029bc:	4d4a      	ldr	r5, [pc, #296]	@ (8002ae8 <HAL_UART_IRQHandler+0x318>)
 80029be:	402a      	ands	r2, r5
 80029c0:	600a      	str	r2, [r1, #0]
 80029c2:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80029c6:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029ca:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029ce:	6821      	ldr	r1, [r4, #0]
 80029d0:	688a      	ldr	r2, [r1, #8]
 80029d2:	439a      	bics	r2, r3
 80029d4:	608a      	str	r2, [r1, #8]
 80029d6:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80029da:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029de:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80029e2:	6821      	ldr	r1, [r4, #0]
 80029e4:	688a      	ldr	r2, [r1, #8]
 80029e6:	3542      	adds	r5, #66	@ 0x42
 80029e8:	35ff      	adds	r5, #255	@ 0xff
 80029ea:	43aa      	bics	r2, r5
 80029ec:	608a      	str	r2, [r1, #8]
 80029ee:	f380 8810 	msr	PRIMASK, r0
          huart->RxState = HAL_UART_STATE_READY;
 80029f2:	228c      	movs	r2, #140	@ 0x8c
 80029f4:	2120      	movs	r1, #32
 80029f6:	50a1      	str	r1, [r4, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029f8:	2200      	movs	r2, #0
 80029fa:	66e2      	str	r2, [r4, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80029fc:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a00:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a04:	6822      	ldr	r2, [r4, #0]
 8002a06:	6813      	ldr	r3, [r2, #0]
 8002a08:	2010      	movs	r0, #16
 8002a0a:	4383      	bics	r3, r0
 8002a0c:	6013      	str	r3, [r2, #0]
 8002a0e:	f381 8810 	msr	PRIMASK, r1
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002a12:	2380      	movs	r3, #128	@ 0x80
 8002a14:	58e0      	ldr	r0, [r4, r3]
 8002a16:	f7ff f89b 	bl	8001b50 <HAL_DMA_Abort>
 8002a1a:	e7bc      	b.n	8002996 <HAL_UART_IRQHandler+0x1c6>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8002a1c:	215c      	movs	r1, #92	@ 0x5c
 8002a1e:	5a61      	ldrh	r1, [r4, r1]
 8002a20:	4299      	cmp	r1, r3
 8002a22:	d000      	beq.n	8002a26 <HAL_UART_IRQHandler+0x256>
 8002a24:	e711      	b.n	800284a <HAL_UART_IRQHandler+0x7a>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002a26:	6813      	ldr	r3, [r2, #0]
 8002a28:	069b      	lsls	r3, r3, #26
 8002a2a:	d400      	bmi.n	8002a2e <HAL_UART_IRQHandler+0x25e>
 8002a2c:	e70d      	b.n	800284a <HAL_UART_IRQHandler+0x7a>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002a2e:	2302      	movs	r3, #2
 8002a30:	6723      	str	r3, [r4, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002a32:	0020      	movs	r0, r4
 8002a34:	f7ff fecb 	bl	80027ce <HAL_UARTEx_RxEventCallback>
      return;
 8002a38:	e707      	b.n	800284a <HAL_UART_IRQHandler+0x7a>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002a3a:	235c      	movs	r3, #92	@ 0x5c
 8002a3c:	5ae3      	ldrh	r3, [r4, r3]
 8002a3e:	225e      	movs	r2, #94	@ 0x5e
 8002a40:	5aa1      	ldrh	r1, [r4, r2]
 8002a42:	1a59      	subs	r1, r3, r1
 8002a44:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 8002a46:	5aa3      	ldrh	r3, [r4, r2]
 8002a48:	b29b      	uxth	r3, r3
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d100      	bne.n	8002a50 <HAL_UART_IRQHandler+0x280>
 8002a4e:	e6fc      	b.n	800284a <HAL_UART_IRQHandler+0x7a>
          && (nb_rx_data > 0U))
 8002a50:	2900      	cmp	r1, #0
 8002a52:	d100      	bne.n	8002a56 <HAL_UART_IRQHandler+0x286>
 8002a54:	e6f9      	b.n	800284a <HAL_UART_IRQHandler+0x7a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002a56:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002a60:	6820      	ldr	r0, [r4, #0]
 8002a62:	6802      	ldr	r2, [r0, #0]
 8002a64:	4e21      	ldr	r6, [pc, #132]	@ (8002aec <HAL_UART_IRQHandler+0x31c>)
 8002a66:	4032      	ands	r2, r6
 8002a68:	6002      	str	r2, [r0, #0]
 8002a6a:	f385 8810 	msr	PRIMASK, r5
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002a6e:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a72:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002a76:	6820      	ldr	r0, [r4, #0]
 8002a78:	6882      	ldr	r2, [r0, #8]
 8002a7a:	4e1d      	ldr	r6, [pc, #116]	@ (8002af0 <HAL_UART_IRQHandler+0x320>)
 8002a7c:	4032      	ands	r2, r6
 8002a7e:	6082      	str	r2, [r0, #8]
 8002a80:	f385 8810 	msr	PRIMASK, r5
        huart->RxState = HAL_UART_STATE_READY;
 8002a84:	228c      	movs	r2, #140	@ 0x8c
 8002a86:	2020      	movs	r0, #32
 8002a88:	50a0      	str	r0, [r4, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	66e2      	str	r2, [r4, #108]	@ 0x6c
        huart->RxISR = NULL;
 8002a8e:	6762      	str	r2, [r4, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002a90:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a94:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a98:	6822      	ldr	r2, [r4, #0]
 8002a9a:	6813      	ldr	r3, [r2, #0]
 8002a9c:	2510      	movs	r5, #16
 8002a9e:	43ab      	bics	r3, r5
 8002aa0:	6013      	str	r3, [r2, #0]
 8002aa2:	f380 8810 	msr	PRIMASK, r0
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002aa6:	2302      	movs	r3, #2
 8002aa8:	6723      	str	r3, [r4, #112]	@ 0x70
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002aaa:	0020      	movs	r0, r4
 8002aac:	f7ff fe8f 	bl	80027ce <HAL_UARTEx_RxEventCallback>
      return;
 8002ab0:	e6cb      	b.n	800284a <HAL_UART_IRQHandler+0x7a>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002ab2:	2380      	movs	r3, #128	@ 0x80
 8002ab4:	035b      	lsls	r3, r3, #13
 8002ab6:	6213      	str	r3, [r2, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8002ab8:	0020      	movs	r0, r4
 8002aba:	f000 fb0d 	bl	80030d8 <HAL_UARTEx_WakeupCallback>
    return;
 8002abe:	e6c4      	b.n	800284a <HAL_UART_IRQHandler+0x7a>
    if (huart->TxISR != NULL)
 8002ac0:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d100      	bne.n	8002ac8 <HAL_UART_IRQHandler+0x2f8>
 8002ac6:	e6c0      	b.n	800284a <HAL_UART_IRQHandler+0x7a>
      huart->TxISR(huart);
 8002ac8:	0020      	movs	r0, r4
 8002aca:	4798      	blx	r3
    return;
 8002acc:	e6bd      	b.n	800284a <HAL_UART_IRQHandler+0x7a>
    UART_EndTransmit_IT(huart);
 8002ace:	0020      	movs	r0, r4
 8002ad0:	f7ff fe5f 	bl	8002792 <UART_EndTransmit_IT>
    return;
 8002ad4:	e6b9      	b.n	800284a <HAL_UART_IRQHandler+0x7a>
 8002ad6:	46c0      	nop			@ (mov r8, r8)
 8002ad8:	0000080f 	.word	0x0000080f
 8002adc:	10000001 	.word	0x10000001
 8002ae0:	04000120 	.word	0x04000120
 8002ae4:	080027bf 	.word	0x080027bf
 8002ae8:	fffffeff 	.word	0xfffffeff
 8002aec:	fffffedf 	.word	0xfffffedf
 8002af0:	effffffe 	.word	0xeffffffe
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002af4:	0020      	movs	r0, r4
 8002af6:	f000 faf1 	bl	80030dc <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 8002afa:	e6a6      	b.n	800284a <HAL_UART_IRQHandler+0x7a>
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002afc:	0020      	movs	r0, r4
 8002afe:	f000 faec 	bl	80030da <HAL_UARTEx_RxFifoFullCallback>
    return;
 8002b02:	e6a2      	b.n	800284a <HAL_UART_IRQHandler+0x7a>

08002b04 <UART_SetConfig>:
{
 8002b04:	b510      	push	{r4, lr}
 8002b06:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002b08:	6883      	ldr	r3, [r0, #8]
 8002b0a:	6902      	ldr	r2, [r0, #16]
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	6942      	ldr	r2, [r0, #20]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	69c2      	ldr	r2, [r0, #28]
 8002b14:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002b16:	6801      	ldr	r1, [r0, #0]
 8002b18:	680a      	ldr	r2, [r1, #0]
 8002b1a:	4862      	ldr	r0, [pc, #392]	@ (8002ca4 <UART_SetConfig+0x1a0>)
 8002b1c:	4002      	ands	r2, r0
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b22:	6822      	ldr	r2, [r4, #0]
 8002b24:	6853      	ldr	r3, [r2, #4]
 8002b26:	4960      	ldr	r1, [pc, #384]	@ (8002ca8 <UART_SetConfig+0x1a4>)
 8002b28:	400b      	ands	r3, r1
 8002b2a:	68e1      	ldr	r1, [r4, #12]
 8002b2c:	430b      	orrs	r3, r1
 8002b2e:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002b30:	69a3      	ldr	r3, [r4, #24]
  tmpreg |= huart->Init.OneBitSampling;
 8002b32:	6a22      	ldr	r2, [r4, #32]
 8002b34:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002b36:	6821      	ldr	r1, [r4, #0]
 8002b38:	688b      	ldr	r3, [r1, #8]
 8002b3a:	485c      	ldr	r0, [pc, #368]	@ (8002cac <UART_SetConfig+0x1a8>)
 8002b3c:	4003      	ands	r3, r0
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	608b      	str	r3, [r1, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002b42:	6822      	ldr	r2, [r4, #0]
 8002b44:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8002b46:	210f      	movs	r1, #15
 8002b48:	438b      	bics	r3, r1
 8002b4a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8002b4c:	430b      	orrs	r3, r1
 8002b4e:	62d3      	str	r3, [r2, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002b50:	6823      	ldr	r3, [r4, #0]
 8002b52:	4a57      	ldr	r2, [pc, #348]	@ (8002cb0 <UART_SetConfig+0x1ac>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d030      	beq.n	8002bba <UART_SetConfig+0xb6>
 8002b58:	4a56      	ldr	r2, [pc, #344]	@ (8002cb4 <UART_SetConfig+0x1b0>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d03e      	beq.n	8002bdc <UART_SetConfig+0xd8>
 8002b5e:	2310      	movs	r3, #16
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b60:	69e0      	ldr	r0, [r4, #28]
 8002b62:	2280      	movs	r2, #128	@ 0x80
 8002b64:	0212      	lsls	r2, r2, #8
 8002b66:	4290      	cmp	r0, r2
 8002b68:	d042      	beq.n	8002bf0 <UART_SetConfig+0xec>
    switch (clocksource)
 8002b6a:	2b04      	cmp	r3, #4
 8002b6c:	d100      	bne.n	8002b70 <UART_SetConfig+0x6c>
 8002b6e:	e089      	b.n	8002c84 <UART_SetConfig+0x180>
 8002b70:	d87b      	bhi.n	8002c6a <UART_SetConfig+0x166>
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d100      	bne.n	8002b78 <UART_SetConfig+0x74>
 8002b76:	e07f      	b.n	8002c78 <UART_SetConfig+0x174>
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	d174      	bne.n	8002c66 <UART_SetConfig+0x162>
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8002b7c:	4b4e      	ldr	r3, [pc, #312]	@ (8002cb8 <UART_SetConfig+0x1b4>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	095b      	lsrs	r3, r3, #5
 8002b82:	2107      	movs	r1, #7
 8002b84:	4019      	ands	r1, r3
 8002b86:	3101      	adds	r1, #1
 8002b88:	484c      	ldr	r0, [pc, #304]	@ (8002cbc <UART_SetConfig+0x1b8>)
 8002b8a:	f7fd fac7 	bl	800011c <__udivsi3>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002b8e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8002b90:	4b4b      	ldr	r3, [pc, #300]	@ (8002cc0 <UART_SetConfig+0x1bc>)
 8002b92:	0052      	lsls	r2, r2, #1
 8002b94:	5ad1      	ldrh	r1, [r2, r3]
 8002b96:	f7fd fac1 	bl	800011c <__udivsi3>
 8002b9a:	6861      	ldr	r1, [r4, #4]
 8002b9c:	084b      	lsrs	r3, r1, #1
 8002b9e:	18c0      	adds	r0, r0, r3
 8002ba0:	f7fd fabc 	bl	800011c <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ba4:	0002      	movs	r2, r0
 8002ba6:	3a10      	subs	r2, #16
 8002ba8:	4b46      	ldr	r3, [pc, #280]	@ (8002cc4 <UART_SetConfig+0x1c0>)
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d86f      	bhi.n	8002c8e <UART_SetConfig+0x18a>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002bae:	6823      	ldr	r3, [r4, #0]
 8002bb0:	0400      	lsls	r0, r0, #16
 8002bb2:	0c00      	lsrs	r0, r0, #16
 8002bb4:	60d8      	str	r0, [r3, #12]
 8002bb6:	2000      	movs	r0, #0
 8002bb8:	e06a      	b.n	8002c90 <UART_SetConfig+0x18c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002bba:	4b3f      	ldr	r3, [pc, #252]	@ (8002cb8 <UART_SetConfig+0x1b4>)
 8002bbc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d00c      	beq.n	8002be0 <UART_SetConfig+0xdc>
 8002bc6:	d805      	bhi.n	8002bd4 <UART_SetConfig+0xd0>
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d00b      	beq.n	8002be4 <UART_SetConfig+0xe0>
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d10b      	bne.n	8002be8 <UART_SetConfig+0xe4>
 8002bd0:	3303      	adds	r3, #3
 8002bd2:	e7c5      	b.n	8002b60 <UART_SetConfig+0x5c>
 8002bd4:	2b03      	cmp	r3, #3
 8002bd6:	d109      	bne.n	8002bec <UART_SetConfig+0xe8>
 8002bd8:	3305      	adds	r3, #5
 8002bda:	e7c1      	b.n	8002b60 <UART_SetConfig+0x5c>
 8002bdc:	2300      	movs	r3, #0
 8002bde:	e7bf      	b.n	8002b60 <UART_SetConfig+0x5c>
 8002be0:	2302      	movs	r3, #2
 8002be2:	e7bd      	b.n	8002b60 <UART_SetConfig+0x5c>
 8002be4:	2300      	movs	r3, #0
 8002be6:	e7bb      	b.n	8002b60 <UART_SetConfig+0x5c>
 8002be8:	2310      	movs	r3, #16
 8002bea:	e7b9      	b.n	8002b60 <UART_SetConfig+0x5c>
 8002bec:	2310      	movs	r3, #16
 8002bee:	e7b7      	b.n	8002b60 <UART_SetConfig+0x5c>
    switch (clocksource)
 8002bf0:	2b04      	cmp	r3, #4
 8002bf2:	d035      	beq.n	8002c60 <UART_SetConfig+0x15c>
 8002bf4:	d82a      	bhi.n	8002c4c <UART_SetConfig+0x148>
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d02c      	beq.n	8002c54 <UART_SetConfig+0x150>
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d124      	bne.n	8002c48 <UART_SetConfig+0x144>
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8002bfe:	4b2e      	ldr	r3, [pc, #184]	@ (8002cb8 <UART_SetConfig+0x1b4>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	095b      	lsrs	r3, r3, #5
 8002c04:	2107      	movs	r1, #7
 8002c06:	4019      	ands	r1, r3
 8002c08:	3101      	adds	r1, #1
 8002c0a:	482c      	ldr	r0, [pc, #176]	@ (8002cbc <UART_SetConfig+0x1b8>)
 8002c0c:	f7fd fa86 	bl	800011c <__udivsi3>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002c10:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8002c12:	4b2b      	ldr	r3, [pc, #172]	@ (8002cc0 <UART_SetConfig+0x1bc>)
 8002c14:	0052      	lsls	r2, r2, #1
 8002c16:	5ad1      	ldrh	r1, [r2, r3]
 8002c18:	f7fd fa80 	bl	800011c <__udivsi3>
 8002c1c:	0040      	lsls	r0, r0, #1
 8002c1e:	6861      	ldr	r1, [r4, #4]
 8002c20:	084b      	lsrs	r3, r1, #1
 8002c22:	18c0      	adds	r0, r0, r3
 8002c24:	f7fd fa7a 	bl	800011c <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c28:	0002      	movs	r2, r0
 8002c2a:	3a10      	subs	r2, #16
 8002c2c:	4b25      	ldr	r3, [pc, #148]	@ (8002cc4 <UART_SetConfig+0x1c0>)
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d82b      	bhi.n	8002c8a <UART_SetConfig+0x186>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002c32:	b282      	uxth	r2, r0
 8002c34:	230f      	movs	r3, #15
 8002c36:	439a      	bics	r2, r3
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002c38:	0840      	lsrs	r0, r0, #1
 8002c3a:	3b08      	subs	r3, #8
 8002c3c:	4003      	ands	r3, r0
 8002c3e:	4313      	orrs	r3, r2
        huart->Instance->BRR = brrtemp;
 8002c40:	6822      	ldr	r2, [r4, #0]
 8002c42:	60d3      	str	r3, [r2, #12]
 8002c44:	2000      	movs	r0, #0
 8002c46:	e023      	b.n	8002c90 <UART_SetConfig+0x18c>
    switch (clocksource)
 8002c48:	2001      	movs	r0, #1
 8002c4a:	e021      	b.n	8002c90 <UART_SetConfig+0x18c>
 8002c4c:	2b08      	cmp	r3, #8
 8002c4e:	d0df      	beq.n	8002c10 <UART_SetConfig+0x10c>
 8002c50:	2001      	movs	r0, #1
 8002c52:	e01d      	b.n	8002c90 <UART_SetConfig+0x18c>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c54:	f7ff f926 	bl	8001ea4 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8002c58:	2800      	cmp	r0, #0
 8002c5a:	d1d9      	bne.n	8002c10 <UART_SetConfig+0x10c>
 8002c5c:	2000      	movs	r0, #0
 8002c5e:	e017      	b.n	8002c90 <UART_SetConfig+0x18c>
        pclk = HAL_RCC_GetSysClockFreq();
 8002c60:	f7ff f8d8 	bl	8001e14 <HAL_RCC_GetSysClockFreq>
        break;
 8002c64:	e7f8      	b.n	8002c58 <UART_SetConfig+0x154>
    switch (clocksource)
 8002c66:	2001      	movs	r0, #1
 8002c68:	e012      	b.n	8002c90 <UART_SetConfig+0x18c>
 8002c6a:	2b08      	cmp	r3, #8
 8002c6c:	d102      	bne.n	8002c74 <UART_SetConfig+0x170>
 8002c6e:	2080      	movs	r0, #128	@ 0x80
 8002c70:	0200      	lsls	r0, r0, #8
 8002c72:	e78c      	b.n	8002b8e <UART_SetConfig+0x8a>
 8002c74:	2001      	movs	r0, #1
 8002c76:	e00b      	b.n	8002c90 <UART_SetConfig+0x18c>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c78:	f7ff f914 	bl	8001ea4 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8002c7c:	2800      	cmp	r0, #0
 8002c7e:	d186      	bne.n	8002b8e <UART_SetConfig+0x8a>
 8002c80:	2000      	movs	r0, #0
 8002c82:	e005      	b.n	8002c90 <UART_SetConfig+0x18c>
        pclk = HAL_RCC_GetSysClockFreq();
 8002c84:	f7ff f8c6 	bl	8001e14 <HAL_RCC_GetSysClockFreq>
        break;
 8002c88:	e7f8      	b.n	8002c7c <UART_SetConfig+0x178>
        ret = HAL_ERROR;
 8002c8a:	2001      	movs	r0, #1
 8002c8c:	e000      	b.n	8002c90 <UART_SetConfig+0x18c>
        ret = HAL_ERROR;
 8002c8e:	2001      	movs	r0, #1
  huart->NbTxDataToProcess = 1;
 8002c90:	2301      	movs	r3, #1
 8002c92:	226a      	movs	r2, #106	@ 0x6a
 8002c94:	52a3      	strh	r3, [r4, r2]
  huart->NbRxDataToProcess = 1;
 8002c96:	3a02      	subs	r2, #2
 8002c98:	52a3      	strh	r3, [r4, r2]
  huart->RxISR = NULL;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	6763      	str	r3, [r4, #116]	@ 0x74
  huart->TxISR = NULL;
 8002c9e:	67a3      	str	r3, [r4, #120]	@ 0x78
}
 8002ca0:	bd10      	pop	{r4, pc}
 8002ca2:	46c0      	nop			@ (mov r8, r8)
 8002ca4:	cfff69f3 	.word	0xcfff69f3
 8002ca8:	ffffcfff 	.word	0xffffcfff
 8002cac:	11fff4ff 	.word	0x11fff4ff
 8002cb0:	40013800 	.word	0x40013800
 8002cb4:	40004400 	.word	0x40004400
 8002cb8:	40021000 	.word	0x40021000
 8002cbc:	02dc6c00 	.word	0x02dc6c00
 8002cc0:	08003d20 	.word	0x08003d20
 8002cc4:	0000ffef 	.word	0x0000ffef

08002cc8 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002cc8:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8002cca:	071b      	lsls	r3, r3, #28
 8002ccc:	d506      	bpl.n	8002cdc <UART_AdvFeatureConfig+0x14>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002cce:	6802      	ldr	r2, [r0, #0]
 8002cd0:	6853      	ldr	r3, [r2, #4]
 8002cd2:	492c      	ldr	r1, [pc, #176]	@ (8002d84 <UART_AdvFeatureConfig+0xbc>)
 8002cd4:	400b      	ands	r3, r1
 8002cd6:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 8002cd8:	430b      	orrs	r3, r1
 8002cda:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002cdc:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8002cde:	07db      	lsls	r3, r3, #31
 8002ce0:	d506      	bpl.n	8002cf0 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002ce2:	6802      	ldr	r2, [r0, #0]
 8002ce4:	6853      	ldr	r3, [r2, #4]
 8002ce6:	4928      	ldr	r1, [pc, #160]	@ (8002d88 <UART_AdvFeatureConfig+0xc0>)
 8002ce8:	400b      	ands	r3, r1
 8002cea:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8002cec:	430b      	orrs	r3, r1
 8002cee:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002cf0:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8002cf2:	079b      	lsls	r3, r3, #30
 8002cf4:	d506      	bpl.n	8002d04 <UART_AdvFeatureConfig+0x3c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002cf6:	6802      	ldr	r2, [r0, #0]
 8002cf8:	6853      	ldr	r3, [r2, #4]
 8002cfa:	4924      	ldr	r1, [pc, #144]	@ (8002d8c <UART_AdvFeatureConfig+0xc4>)
 8002cfc:	400b      	ands	r3, r1
 8002cfe:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 8002d00:	430b      	orrs	r3, r1
 8002d02:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002d04:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8002d06:	075b      	lsls	r3, r3, #29
 8002d08:	d506      	bpl.n	8002d18 <UART_AdvFeatureConfig+0x50>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002d0a:	6802      	ldr	r2, [r0, #0]
 8002d0c:	6853      	ldr	r3, [r2, #4]
 8002d0e:	4920      	ldr	r1, [pc, #128]	@ (8002d90 <UART_AdvFeatureConfig+0xc8>)
 8002d10:	400b      	ands	r3, r1
 8002d12:	6b41      	ldr	r1, [r0, #52]	@ 0x34
 8002d14:	430b      	orrs	r3, r1
 8002d16:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002d18:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8002d1a:	06db      	lsls	r3, r3, #27
 8002d1c:	d506      	bpl.n	8002d2c <UART_AdvFeatureConfig+0x64>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002d1e:	6802      	ldr	r2, [r0, #0]
 8002d20:	6893      	ldr	r3, [r2, #8]
 8002d22:	491c      	ldr	r1, [pc, #112]	@ (8002d94 <UART_AdvFeatureConfig+0xcc>)
 8002d24:	400b      	ands	r3, r1
 8002d26:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 8002d28:	430b      	orrs	r3, r1
 8002d2a:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002d2c:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8002d2e:	069b      	lsls	r3, r3, #26
 8002d30:	d506      	bpl.n	8002d40 <UART_AdvFeatureConfig+0x78>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002d32:	6802      	ldr	r2, [r0, #0]
 8002d34:	6893      	ldr	r3, [r2, #8]
 8002d36:	4918      	ldr	r1, [pc, #96]	@ (8002d98 <UART_AdvFeatureConfig+0xd0>)
 8002d38:	400b      	ands	r3, r1
 8002d3a:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8002d3c:	430b      	orrs	r3, r1
 8002d3e:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002d40:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8002d42:	065b      	lsls	r3, r3, #25
 8002d44:	d50b      	bpl.n	8002d5e <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002d46:	6802      	ldr	r2, [r0, #0]
 8002d48:	6853      	ldr	r3, [r2, #4]
 8002d4a:	4914      	ldr	r1, [pc, #80]	@ (8002d9c <UART_AdvFeatureConfig+0xd4>)
 8002d4c:	400b      	ands	r3, r1
 8002d4e:	6c41      	ldr	r1, [r0, #68]	@ 0x44
 8002d50:	430b      	orrs	r3, r1
 8002d52:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002d54:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8002d56:	2380      	movs	r3, #128	@ 0x80
 8002d58:	035b      	lsls	r3, r3, #13
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d00a      	beq.n	8002d74 <UART_AdvFeatureConfig+0xac>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002d5e:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8002d60:	061b      	lsls	r3, r3, #24
 8002d62:	d506      	bpl.n	8002d72 <UART_AdvFeatureConfig+0xaa>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002d64:	6802      	ldr	r2, [r0, #0]
 8002d66:	6853      	ldr	r3, [r2, #4]
 8002d68:	490d      	ldr	r1, [pc, #52]	@ (8002da0 <UART_AdvFeatureConfig+0xd8>)
 8002d6a:	400b      	ands	r3, r1
 8002d6c:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8002d6e:	430b      	orrs	r3, r1
 8002d70:	6053      	str	r3, [r2, #4]
}
 8002d72:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002d74:	6802      	ldr	r2, [r0, #0]
 8002d76:	6853      	ldr	r3, [r2, #4]
 8002d78:	490a      	ldr	r1, [pc, #40]	@ (8002da4 <UART_AdvFeatureConfig+0xdc>)
 8002d7a:	400b      	ands	r3, r1
 8002d7c:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8002d7e:	430b      	orrs	r3, r1
 8002d80:	6053      	str	r3, [r2, #4]
 8002d82:	e7ec      	b.n	8002d5e <UART_AdvFeatureConfig+0x96>
 8002d84:	ffff7fff 	.word	0xffff7fff
 8002d88:	fffdffff 	.word	0xfffdffff
 8002d8c:	fffeffff 	.word	0xfffeffff
 8002d90:	fffbffff 	.word	0xfffbffff
 8002d94:	ffffefff 	.word	0xffffefff
 8002d98:	ffffdfff 	.word	0xffffdfff
 8002d9c:	ffefffff 	.word	0xffefffff
 8002da0:	fff7ffff 	.word	0xfff7ffff
 8002da4:	ff9fffff 	.word	0xff9fffff

08002da8 <UART_WaitOnFlagUntilTimeout>:
{
 8002da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002daa:	46ce      	mov	lr, r9
 8002dac:	4647      	mov	r7, r8
 8002dae:	b580      	push	{r7, lr}
 8002db0:	0006      	movs	r6, r0
 8002db2:	000d      	movs	r5, r1
 8002db4:	0017      	movs	r7, r2
 8002db6:	4699      	mov	r9, r3
 8002db8:	9b08      	ldr	r3, [sp, #32]
 8002dba:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002dbc:	6833      	ldr	r3, [r6, #0]
 8002dbe:	69dc      	ldr	r4, [r3, #28]
 8002dc0:	402c      	ands	r4, r5
 8002dc2:	1b64      	subs	r4, r4, r5
 8002dc4:	4263      	negs	r3, r4
 8002dc6:	415c      	adcs	r4, r3
 8002dc8:	42bc      	cmp	r4, r7
 8002dca:	d133      	bne.n	8002e34 <UART_WaitOnFlagUntilTimeout+0x8c>
    if (Timeout != HAL_MAX_DELAY)
 8002dcc:	4643      	mov	r3, r8
 8002dce:	3301      	adds	r3, #1
 8002dd0:	d0f4      	beq.n	8002dbc <UART_WaitOnFlagUntilTimeout+0x14>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dd2:	f7fe f8df 	bl	8000f94 <HAL_GetTick>
 8002dd6:	464b      	mov	r3, r9
 8002dd8:	1ac0      	subs	r0, r0, r3
 8002dda:	4540      	cmp	r0, r8
 8002ddc:	d82f      	bhi.n	8002e3e <UART_WaitOnFlagUntilTimeout+0x96>
 8002dde:	4643      	mov	r3, r8
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d02e      	beq.n	8002e42 <UART_WaitOnFlagUntilTimeout+0x9a>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002de4:	6832      	ldr	r2, [r6, #0]
 8002de6:	6813      	ldr	r3, [r2, #0]
 8002de8:	075b      	lsls	r3, r3, #29
 8002dea:	d5e7      	bpl.n	8002dbc <UART_WaitOnFlagUntilTimeout+0x14>
 8002dec:	2d80      	cmp	r5, #128	@ 0x80
 8002dee:	d0e5      	beq.n	8002dbc <UART_WaitOnFlagUntilTimeout+0x14>
 8002df0:	2d40      	cmp	r5, #64	@ 0x40
 8002df2:	d0e3      	beq.n	8002dbc <UART_WaitOnFlagUntilTimeout+0x14>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002df4:	69d3      	ldr	r3, [r2, #28]
 8002df6:	071b      	lsls	r3, r3, #28
 8002df8:	d410      	bmi.n	8002e1c <UART_WaitOnFlagUntilTimeout+0x74>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002dfa:	69d3      	ldr	r3, [r2, #28]
 8002dfc:	051b      	lsls	r3, r3, #20
 8002dfe:	d5dd      	bpl.n	8002dbc <UART_WaitOnFlagUntilTimeout+0x14>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002e00:	2380      	movs	r3, #128	@ 0x80
 8002e02:	011b      	lsls	r3, r3, #4
 8002e04:	6213      	str	r3, [r2, #32]
          UART_EndRxTransfer(huart);
 8002e06:	0030      	movs	r0, r6
 8002e08:	f7ff fc90 	bl	800272c <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002e0c:	2390      	movs	r3, #144	@ 0x90
 8002e0e:	2220      	movs	r2, #32
 8002e10:	50f2      	str	r2, [r6, r3]
          __HAL_UNLOCK(huart);
 8002e12:	3b0c      	subs	r3, #12
 8002e14:	2200      	movs	r2, #0
 8002e16:	54f2      	strb	r2, [r6, r3]
          return HAL_TIMEOUT;
 8002e18:	2003      	movs	r0, #3
 8002e1a:	e00c      	b.n	8002e36 <UART_WaitOnFlagUntilTimeout+0x8e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002e1c:	2408      	movs	r4, #8
 8002e1e:	6214      	str	r4, [r2, #32]
          UART_EndRxTransfer(huart);
 8002e20:	0030      	movs	r0, r6
 8002e22:	f7ff fc83 	bl	800272c <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002e26:	2390      	movs	r3, #144	@ 0x90
 8002e28:	50f4      	str	r4, [r6, r3]
          __HAL_UNLOCK(huart);
 8002e2a:	3b0c      	subs	r3, #12
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	54f2      	strb	r2, [r6, r3]
          return HAL_ERROR;
 8002e30:	2001      	movs	r0, #1
 8002e32:	e000      	b.n	8002e36 <UART_WaitOnFlagUntilTimeout+0x8e>
  return HAL_OK;
 8002e34:	2000      	movs	r0, #0
}
 8002e36:	bcc0      	pop	{r6, r7}
 8002e38:	46b9      	mov	r9, r7
 8002e3a:	46b0      	mov	r8, r6
 8002e3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8002e3e:	2003      	movs	r0, #3
 8002e40:	e7f9      	b.n	8002e36 <UART_WaitOnFlagUntilTimeout+0x8e>
 8002e42:	2003      	movs	r0, #3
 8002e44:	e7f7      	b.n	8002e36 <UART_WaitOnFlagUntilTimeout+0x8e>

08002e46 <HAL_UART_Transmit>:
{
 8002e46:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e48:	46c6      	mov	lr, r8
 8002e4a:	b500      	push	{lr}
 8002e4c:	b082      	sub	sp, #8
 8002e4e:	0004      	movs	r4, r0
 8002e50:	000d      	movs	r5, r1
 8002e52:	4690      	mov	r8, r2
 8002e54:	001e      	movs	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8002e56:	2388      	movs	r3, #136	@ 0x88
 8002e58:	58c3      	ldr	r3, [r0, r3]
 8002e5a:	2b20      	cmp	r3, #32
 8002e5c:	d166      	bne.n	8002f2c <HAL_UART_Transmit+0xe6>
    if ((pData == NULL) || (Size == 0U))
 8002e5e:	2900      	cmp	r1, #0
 8002e60:	d069      	beq.n	8002f36 <HAL_UART_Transmit+0xf0>
 8002e62:	2a00      	cmp	r2, #0
 8002e64:	d069      	beq.n	8002f3a <HAL_UART_Transmit+0xf4>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e66:	6882      	ldr	r2, [r0, #8]
 8002e68:	2380      	movs	r3, #128	@ 0x80
 8002e6a:	015b      	lsls	r3, r3, #5
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d104      	bne.n	8002e7a <HAL_UART_Transmit+0x34>
 8002e70:	6903      	ldr	r3, [r0, #16]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d101      	bne.n	8002e7a <HAL_UART_Transmit+0x34>
      if ((((uint32_t)pData) & 1U) != 0U)
 8002e76:	07cb      	lsls	r3, r1, #31
 8002e78:	d461      	bmi.n	8002f3e <HAL_UART_Transmit+0xf8>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e7a:	2390      	movs	r3, #144	@ 0x90
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	50e2      	str	r2, [r4, r3]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e80:	3b08      	subs	r3, #8
 8002e82:	3221      	adds	r2, #33	@ 0x21
 8002e84:	50e2      	str	r2, [r4, r3]
    tickstart = HAL_GetTick();
 8002e86:	f7fe f885 	bl	8000f94 <HAL_GetTick>
 8002e8a:	0007      	movs	r7, r0
    huart->TxXferSize  = Size;
 8002e8c:	2354      	movs	r3, #84	@ 0x54
 8002e8e:	4642      	mov	r2, r8
 8002e90:	52e2      	strh	r2, [r4, r3]
    huart->TxXferCount = Size;
 8002e92:	3302      	adds	r3, #2
 8002e94:	52e2      	strh	r2, [r4, r3]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e96:	68a2      	ldr	r2, [r4, #8]
 8002e98:	2380      	movs	r3, #128	@ 0x80
 8002e9a:	015b      	lsls	r3, r3, #5
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d002      	beq.n	8002ea6 <HAL_UART_Transmit+0x60>
      pdata16bits = NULL;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	4698      	mov	r8, r3
 8002ea4:	e018      	b.n	8002ed8 <HAL_UART_Transmit+0x92>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ea6:	6923      	ldr	r3, [r4, #16]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d02a      	beq.n	8002f02 <HAL_UART_Transmit+0xbc>
      pdata16bits = NULL;
 8002eac:	2300      	movs	r3, #0
 8002eae:	4698      	mov	r8, r3
 8002eb0:	e012      	b.n	8002ed8 <HAL_UART_Transmit+0x92>
        huart->gState = HAL_UART_STATE_READY;
 8002eb2:	2388      	movs	r3, #136	@ 0x88
 8002eb4:	2220      	movs	r2, #32
 8002eb6:	50e2      	str	r2, [r4, r3]
        return HAL_TIMEOUT;
 8002eb8:	2003      	movs	r0, #3
 8002eba:	e038      	b.n	8002f2e <HAL_UART_Transmit+0xe8>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ebc:	4643      	mov	r3, r8
 8002ebe:	881b      	ldrh	r3, [r3, #0]
 8002ec0:	6822      	ldr	r2, [r4, #0]
 8002ec2:	05db      	lsls	r3, r3, #23
 8002ec4:	0ddb      	lsrs	r3, r3, #23
 8002ec6:	6293      	str	r3, [r2, #40]	@ 0x28
        pdata16bits++;
 8002ec8:	2302      	movs	r3, #2
 8002eca:	469c      	mov	ip, r3
 8002ecc:	44e0      	add	r8, ip
      huart->TxXferCount--;
 8002ece:	2356      	movs	r3, #86	@ 0x56
 8002ed0:	5ae2      	ldrh	r2, [r4, r3]
 8002ed2:	3a01      	subs	r2, #1
 8002ed4:	b292      	uxth	r2, r2
 8002ed6:	52e2      	strh	r2, [r4, r3]
    while (huart->TxXferCount > 0U)
 8002ed8:	2356      	movs	r3, #86	@ 0x56
 8002eda:	5ae3      	ldrh	r3, [r4, r3]
 8002edc:	b29b      	uxth	r3, r3
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d012      	beq.n	8002f08 <HAL_UART_Transmit+0xc2>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ee2:	9600      	str	r6, [sp, #0]
 8002ee4:	003b      	movs	r3, r7
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	2180      	movs	r1, #128	@ 0x80
 8002eea:	0020      	movs	r0, r4
 8002eec:	f7ff ff5c 	bl	8002da8 <UART_WaitOnFlagUntilTimeout>
 8002ef0:	2800      	cmp	r0, #0
 8002ef2:	d1de      	bne.n	8002eb2 <HAL_UART_Transmit+0x6c>
      if (pdata8bits == NULL)
 8002ef4:	2d00      	cmp	r5, #0
 8002ef6:	d0e1      	beq.n	8002ebc <HAL_UART_Transmit+0x76>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ef8:	782a      	ldrb	r2, [r5, #0]
 8002efa:	6823      	ldr	r3, [r4, #0]
 8002efc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002efe:	3501      	adds	r5, #1
 8002f00:	e7e5      	b.n	8002ece <HAL_UART_Transmit+0x88>
      pdata16bits = (const uint16_t *) pData;
 8002f02:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8002f04:	2500      	movs	r5, #0
 8002f06:	e7e7      	b.n	8002ed8 <HAL_UART_Transmit+0x92>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f08:	9600      	str	r6, [sp, #0]
 8002f0a:	003b      	movs	r3, r7
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	2140      	movs	r1, #64	@ 0x40
 8002f10:	0020      	movs	r0, r4
 8002f12:	f7ff ff49 	bl	8002da8 <UART_WaitOnFlagUntilTimeout>
 8002f16:	2800      	cmp	r0, #0
 8002f18:	d103      	bne.n	8002f22 <HAL_UART_Transmit+0xdc>
    huart->gState = HAL_UART_STATE_READY;
 8002f1a:	2388      	movs	r3, #136	@ 0x88
 8002f1c:	2220      	movs	r2, #32
 8002f1e:	50e2      	str	r2, [r4, r3]
    return HAL_OK;
 8002f20:	e005      	b.n	8002f2e <HAL_UART_Transmit+0xe8>
      huart->gState = HAL_UART_STATE_READY;
 8002f22:	2388      	movs	r3, #136	@ 0x88
 8002f24:	2220      	movs	r2, #32
 8002f26:	50e2      	str	r2, [r4, r3]
      return HAL_TIMEOUT;
 8002f28:	2003      	movs	r0, #3
 8002f2a:	e000      	b.n	8002f2e <HAL_UART_Transmit+0xe8>
    return HAL_BUSY;
 8002f2c:	2002      	movs	r0, #2
}
 8002f2e:	b002      	add	sp, #8
 8002f30:	bc80      	pop	{r7}
 8002f32:	46b8      	mov	r8, r7
 8002f34:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return  HAL_ERROR;
 8002f36:	2001      	movs	r0, #1
 8002f38:	e7f9      	b.n	8002f2e <HAL_UART_Transmit+0xe8>
 8002f3a:	2001      	movs	r0, #1
 8002f3c:	e7f7      	b.n	8002f2e <HAL_UART_Transmit+0xe8>
        return  HAL_ERROR;
 8002f3e:	2001      	movs	r0, #1
 8002f40:	e7f5      	b.n	8002f2e <HAL_UART_Transmit+0xe8>
	...

08002f44 <UART_CheckIdleState>:
{
 8002f44:	b530      	push	{r4, r5, lr}
 8002f46:	b083      	sub	sp, #12
 8002f48:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f4a:	2390      	movs	r3, #144	@ 0x90
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	50c2      	str	r2, [r0, r3]
  tickstart = HAL_GetTick();
 8002f50:	f7fe f820 	bl	8000f94 <HAL_GetTick>
 8002f54:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002f56:	6823      	ldr	r3, [r4, #0]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	071b      	lsls	r3, r3, #28
 8002f5c:	d410      	bmi.n	8002f80 <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002f5e:	6823      	ldr	r3, [r4, #0]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	075b      	lsls	r3, r3, #29
 8002f64:	d42b      	bmi.n	8002fbe <UART_CheckIdleState+0x7a>
  huart->gState = HAL_UART_STATE_READY;
 8002f66:	2320      	movs	r3, #32
 8002f68:	2288      	movs	r2, #136	@ 0x88
 8002f6a:	50a3      	str	r3, [r4, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8002f6c:	3204      	adds	r2, #4
 8002f6e:	50a3      	str	r3, [r4, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f70:	2300      	movs	r3, #0
 8002f72:	66e3      	str	r3, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f74:	6723      	str	r3, [r4, #112]	@ 0x70
  __HAL_UNLOCK(huart);
 8002f76:	3a08      	subs	r2, #8
 8002f78:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 8002f7a:	2000      	movs	r0, #0
}
 8002f7c:	b003      	add	sp, #12
 8002f7e:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f80:	2180      	movs	r1, #128	@ 0x80
 8002f82:	4b23      	ldr	r3, [pc, #140]	@ (8003010 <UART_CheckIdleState+0xcc>)
 8002f84:	9300      	str	r3, [sp, #0]
 8002f86:	0003      	movs	r3, r0
 8002f88:	2200      	movs	r2, #0
 8002f8a:	0389      	lsls	r1, r1, #14
 8002f8c:	0020      	movs	r0, r4
 8002f8e:	f7ff ff0b 	bl	8002da8 <UART_WaitOnFlagUntilTimeout>
 8002f92:	2800      	cmp	r0, #0
 8002f94:	d0e3      	beq.n	8002f5e <UART_CheckIdleState+0x1a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002f96:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8002fa0:	6822      	ldr	r2, [r4, #0]
 8002fa2:	6813      	ldr	r3, [r2, #0]
 8002fa4:	2080      	movs	r0, #128	@ 0x80
 8002fa6:	4383      	bics	r3, r0
 8002fa8:	6013      	str	r3, [r2, #0]
 8002faa:	f381 8810 	msr	PRIMASK, r1
      huart->gState = HAL_UART_STATE_READY;
 8002fae:	2388      	movs	r3, #136	@ 0x88
 8002fb0:	2220      	movs	r2, #32
 8002fb2:	50e2      	str	r2, [r4, r3]
      __HAL_UNLOCK(huart);
 8002fb4:	3b04      	subs	r3, #4
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	54e2      	strb	r2, [r4, r3]
      return HAL_TIMEOUT;
 8002fba:	387d      	subs	r0, #125	@ 0x7d
 8002fbc:	e7de      	b.n	8002f7c <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002fbe:	2180      	movs	r1, #128	@ 0x80
 8002fc0:	4b13      	ldr	r3, [pc, #76]	@ (8003010 <UART_CheckIdleState+0xcc>)
 8002fc2:	9300      	str	r3, [sp, #0]
 8002fc4:	002b      	movs	r3, r5
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	03c9      	lsls	r1, r1, #15
 8002fca:	0020      	movs	r0, r4
 8002fcc:	f7ff feec 	bl	8002da8 <UART_WaitOnFlagUntilTimeout>
 8002fd0:	2800      	cmp	r0, #0
 8002fd2:	d0c8      	beq.n	8002f66 <UART_CheckIdleState+0x22>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002fd4:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fd8:	2201      	movs	r2, #1
 8002fda:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002fde:	6821      	ldr	r1, [r4, #0]
 8002fe0:	680b      	ldr	r3, [r1, #0]
 8002fe2:	4d0c      	ldr	r5, [pc, #48]	@ (8003014 <UART_CheckIdleState+0xd0>)
 8002fe4:	402b      	ands	r3, r5
 8002fe6:	600b      	str	r3, [r1, #0]
 8002fe8:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002fec:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ff0:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ff4:	6821      	ldr	r1, [r4, #0]
 8002ff6:	688b      	ldr	r3, [r1, #8]
 8002ff8:	4393      	bics	r3, r2
 8002ffa:	608b      	str	r3, [r1, #8]
 8002ffc:	f380 8810 	msr	PRIMASK, r0
      huart->RxState = HAL_UART_STATE_READY;
 8003000:	238c      	movs	r3, #140	@ 0x8c
 8003002:	321f      	adds	r2, #31
 8003004:	50e2      	str	r2, [r4, r3]
      __HAL_UNLOCK(huart);
 8003006:	3b08      	subs	r3, #8
 8003008:	2200      	movs	r2, #0
 800300a:	54e2      	strb	r2, [r4, r3]
      return HAL_TIMEOUT;
 800300c:	2003      	movs	r0, #3
 800300e:	e7b5      	b.n	8002f7c <UART_CheckIdleState+0x38>
 8003010:	01ffffff 	.word	0x01ffffff
 8003014:	fffffedf 	.word	0xfffffedf

08003018 <HAL_UART_Init>:
{
 8003018:	b510      	push	{r4, lr}
 800301a:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 800301c:	d030      	beq.n	8003080 <HAL_UART_Init+0x68>
  if (huart->gState == HAL_UART_STATE_RESET)
 800301e:	2388      	movs	r3, #136	@ 0x88
 8003020:	58c3      	ldr	r3, [r0, r3]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d022      	beq.n	800306c <HAL_UART_Init+0x54>
  huart->gState = HAL_UART_STATE_BUSY;
 8003026:	2388      	movs	r3, #136	@ 0x88
 8003028:	2224      	movs	r2, #36	@ 0x24
 800302a:	50e2      	str	r2, [r4, r3]
  __HAL_UART_DISABLE(huart);
 800302c:	6822      	ldr	r2, [r4, #0]
 800302e:	6813      	ldr	r3, [r2, #0]
 8003030:	2101      	movs	r1, #1
 8003032:	438b      	bics	r3, r1
 8003034:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003036:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8003038:	2b00      	cmp	r3, #0
 800303a:	d11d      	bne.n	8003078 <HAL_UART_Init+0x60>
  if (UART_SetConfig(huart) == HAL_ERROR)
 800303c:	0020      	movs	r0, r4
 800303e:	f7ff fd61 	bl	8002b04 <UART_SetConfig>
 8003042:	2801      	cmp	r0, #1
 8003044:	d011      	beq.n	800306a <HAL_UART_Init+0x52>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003046:	6822      	ldr	r2, [r4, #0]
 8003048:	6853      	ldr	r3, [r2, #4]
 800304a:	490e      	ldr	r1, [pc, #56]	@ (8003084 <HAL_UART_Init+0x6c>)
 800304c:	400b      	ands	r3, r1
 800304e:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003050:	6822      	ldr	r2, [r4, #0]
 8003052:	6893      	ldr	r3, [r2, #8]
 8003054:	212a      	movs	r1, #42	@ 0x2a
 8003056:	438b      	bics	r3, r1
 8003058:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 800305a:	6822      	ldr	r2, [r4, #0]
 800305c:	6813      	ldr	r3, [r2, #0]
 800305e:	3929      	subs	r1, #41	@ 0x29
 8003060:	430b      	orrs	r3, r1
 8003062:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8003064:	0020      	movs	r0, r4
 8003066:	f7ff ff6d 	bl	8002f44 <UART_CheckIdleState>
}
 800306a:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800306c:	3384      	adds	r3, #132	@ 0x84
 800306e:	2200      	movs	r2, #0
 8003070:	54c2      	strb	r2, [r0, r3]
    HAL_UART_MspInit(huart);
 8003072:	f7fd fea3 	bl	8000dbc <HAL_UART_MspInit>
 8003076:	e7d6      	b.n	8003026 <HAL_UART_Init+0xe>
    UART_AdvFeatureConfig(huart);
 8003078:	0020      	movs	r0, r4
 800307a:	f7ff fe25 	bl	8002cc8 <UART_AdvFeatureConfig>
 800307e:	e7dd      	b.n	800303c <HAL_UART_Init+0x24>
    return HAL_ERROR;
 8003080:	2001      	movs	r0, #1
 8003082:	e7f2      	b.n	800306a <HAL_UART_Init+0x52>
 8003084:	ffffb7ff 	.word	0xffffb7ff

08003088 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800308a:	0004      	movs	r4, r0
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800308c:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 800308e:	2b00      	cmp	r3, #0
 8003090:	d105      	bne.n	800309e <UARTEx_SetNbDataToProcess+0x16>
  {
    huart->NbTxDataToProcess = 1U;
 8003092:	3301      	adds	r3, #1
 8003094:	226a      	movs	r2, #106	@ 0x6a
 8003096:	5283      	strh	r3, [r0, r2]
    huart->NbRxDataToProcess = 1U;
 8003098:	3a02      	subs	r2, #2
 800309a:	5283      	strh	r3, [r0, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800309c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800309e:	6802      	ldr	r2, [r0, #0]
 80030a0:	6895      	ldr	r5, [r2, #8]
 80030a2:	0e6d      	lsrs	r5, r5, #25
 80030a4:	2307      	movs	r3, #7
 80030a6:	401d      	ands	r5, r3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80030a8:	6892      	ldr	r2, [r2, #8]
 80030aa:	0f52      	lsrs	r2, r2, #29
 80030ac:	4013      	ands	r3, r2
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80030ae:	4f08      	ldr	r7, [pc, #32]	@ (80030d0 <UARTEx_SetNbDataToProcess+0x48>)
 80030b0:	5cf8      	ldrb	r0, [r7, r3]
 80030b2:	00c0      	lsls	r0, r0, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 80030b4:	4e07      	ldr	r6, [pc, #28]	@ (80030d4 <UARTEx_SetNbDataToProcess+0x4c>)
 80030b6:	5cf1      	ldrb	r1, [r6, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80030b8:	f7fd f8ba 	bl	8000230 <__divsi3>
 80030bc:	236a      	movs	r3, #106	@ 0x6a
 80030be:	52e0      	strh	r0, [r4, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80030c0:	5d78      	ldrb	r0, [r7, r5]
 80030c2:	00c0      	lsls	r0, r0, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 80030c4:	5d71      	ldrb	r1, [r6, r5]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80030c6:	f7fd f8b3 	bl	8000230 <__divsi3>
 80030ca:	2368      	movs	r3, #104	@ 0x68
 80030cc:	52e0      	strh	r0, [r4, r3]
}
 80030ce:	e7e5      	b.n	800309c <UARTEx_SetNbDataToProcess+0x14>
 80030d0:	08003d40 	.word	0x08003d40
 80030d4:	08003d38 	.word	0x08003d38

080030d8 <HAL_UARTEx_WakeupCallback>:
}
 80030d8:	4770      	bx	lr

080030da <HAL_UARTEx_RxFifoFullCallback>:
}
 80030da:	4770      	bx	lr

080030dc <HAL_UARTEx_TxFifoEmptyCallback>:
}
 80030dc:	4770      	bx	lr
	...

080030e0 <HAL_UARTEx_DisableFifoMode>:
{
 80030e0:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 80030e2:	2384      	movs	r3, #132	@ 0x84
 80030e4:	5cc3      	ldrb	r3, [r0, r3]
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d015      	beq.n	8003116 <HAL_UARTEx_DisableFifoMode+0x36>
 80030ea:	2484      	movs	r4, #132	@ 0x84
 80030ec:	2601      	movs	r6, #1
 80030ee:	5506      	strb	r6, [r0, r4]
  huart->gState = HAL_UART_STATE_BUSY;
 80030f0:	2588      	movs	r5, #136	@ 0x88
 80030f2:	2324      	movs	r3, #36	@ 0x24
 80030f4:	5143      	str	r3, [r0, r5]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80030f6:	6802      	ldr	r2, [r0, #0]
 80030f8:	6813      	ldr	r3, [r2, #0]
  __HAL_UART_DISABLE(huart);
 80030fa:	6811      	ldr	r1, [r2, #0]
 80030fc:	43b1      	bics	r1, r6
 80030fe:	6011      	str	r1, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003100:	4a06      	ldr	r2, [pc, #24]	@ (800311c <HAL_UARTEx_DisableFifoMode+0x3c>)
 8003102:	4013      	ands	r3, r2
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003104:	2200      	movs	r2, #0
 8003106:	6642      	str	r2, [r0, #100]	@ 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003108:	6801      	ldr	r1, [r0, #0]
 800310a:	600b      	str	r3, [r1, #0]
  huart->gState = HAL_UART_STATE_READY;
 800310c:	2320      	movs	r3, #32
 800310e:	5143      	str	r3, [r0, r5]
  __HAL_UNLOCK(huart);
 8003110:	5502      	strb	r2, [r0, r4]
  return HAL_OK;
 8003112:	2000      	movs	r0, #0
}
 8003114:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(huart);
 8003116:	2002      	movs	r0, #2
 8003118:	e7fc      	b.n	8003114 <HAL_UARTEx_DisableFifoMode+0x34>
 800311a:	46c0      	nop			@ (mov r8, r8)
 800311c:	dfffffff 	.word	0xdfffffff

08003120 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8003120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003122:	0004      	movs	r4, r0
 8003124:	000a      	movs	r2, r1
  __HAL_LOCK(huart);
 8003126:	2384      	movs	r3, #132	@ 0x84
 8003128:	5cc3      	ldrb	r3, [r0, r3]
 800312a:	2b01      	cmp	r3, #1
 800312c:	d01b      	beq.n	8003166 <HAL_UARTEx_SetTxFifoThreshold+0x46>
 800312e:	2584      	movs	r5, #132	@ 0x84
 8003130:	2001      	movs	r0, #1
 8003132:	5560      	strb	r0, [r4, r5]
  huart->gState = HAL_UART_STATE_BUSY;
 8003134:	2688      	movs	r6, #136	@ 0x88
 8003136:	2324      	movs	r3, #36	@ 0x24
 8003138:	51a3      	str	r3, [r4, r6]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800313a:	6823      	ldr	r3, [r4, #0]
 800313c:	681f      	ldr	r7, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800313e:	6819      	ldr	r1, [r3, #0]
 8003140:	4381      	bics	r1, r0
 8003142:	6019      	str	r1, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003144:	6820      	ldr	r0, [r4, #0]
 8003146:	6883      	ldr	r3, [r0, #8]
 8003148:	00db      	lsls	r3, r3, #3
 800314a:	08d9      	lsrs	r1, r3, #3
 800314c:	4311      	orrs	r1, r2
 800314e:	6081      	str	r1, [r0, #8]
  UARTEx_SetNbDataToProcess(huart);
 8003150:	0020      	movs	r0, r4
 8003152:	f7ff ff99 	bl	8003088 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003156:	6823      	ldr	r3, [r4, #0]
 8003158:	601f      	str	r7, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800315a:	2320      	movs	r3, #32
 800315c:	51a3      	str	r3, [r4, r6]
  __HAL_UNLOCK(huart);
 800315e:	2300      	movs	r3, #0
 8003160:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8003162:	2000      	movs	r0, #0
}
 8003164:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(huart);
 8003166:	2002      	movs	r0, #2
 8003168:	e7fc      	b.n	8003164 <HAL_UARTEx_SetTxFifoThreshold+0x44>
	...

0800316c <HAL_UARTEx_SetRxFifoThreshold>:
{
 800316c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800316e:	0004      	movs	r4, r0
 8003170:	000b      	movs	r3, r1
  __HAL_LOCK(huart);
 8003172:	2284      	movs	r2, #132	@ 0x84
 8003174:	5c82      	ldrb	r2, [r0, r2]
 8003176:	2a01      	cmp	r2, #1
 8003178:	d01b      	beq.n	80031b2 <HAL_UARTEx_SetRxFifoThreshold+0x46>
 800317a:	2584      	movs	r5, #132	@ 0x84
 800317c:	2001      	movs	r0, #1
 800317e:	5560      	strb	r0, [r4, r5]
  huart->gState = HAL_UART_STATE_BUSY;
 8003180:	2688      	movs	r6, #136	@ 0x88
 8003182:	2224      	movs	r2, #36	@ 0x24
 8003184:	51a2      	str	r2, [r4, r6]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003186:	6822      	ldr	r2, [r4, #0]
 8003188:	6817      	ldr	r7, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800318a:	6811      	ldr	r1, [r2, #0]
 800318c:	4381      	bics	r1, r0
 800318e:	6011      	str	r1, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003190:	6822      	ldr	r2, [r4, #0]
 8003192:	6891      	ldr	r1, [r2, #8]
 8003194:	4808      	ldr	r0, [pc, #32]	@ (80031b8 <HAL_UARTEx_SetRxFifoThreshold+0x4c>)
 8003196:	4001      	ands	r1, r0
 8003198:	4319      	orrs	r1, r3
 800319a:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 800319c:	0020      	movs	r0, r4
 800319e:	f7ff ff73 	bl	8003088 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80031a2:	6823      	ldr	r3, [r4, #0]
 80031a4:	601f      	str	r7, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80031a6:	2320      	movs	r3, #32
 80031a8:	51a3      	str	r3, [r4, r6]
  __HAL_UNLOCK(huart);
 80031aa:	2300      	movs	r3, #0
 80031ac:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 80031ae:	2000      	movs	r0, #0
}
 80031b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(huart);
 80031b2:	2002      	movs	r0, #2
 80031b4:	e7fc      	b.n	80031b0 <HAL_UARTEx_SetRxFifoThreshold+0x44>
 80031b6:	46c0      	nop			@ (mov r8, r8)
 80031b8:	f1ffffff 	.word	0xf1ffffff

080031bc <LL_SetSystemCoreClock>:
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80031bc:	4b01      	ldr	r3, [pc, #4]	@ (80031c4 <LL_SetSystemCoreClock+0x8>)
 80031be:	6018      	str	r0, [r3, #0]
}
 80031c0:	4770      	bx	lr
 80031c2:	46c0      	nop			@ (mov r8, r8)
 80031c4:	20000004 	.word	0x20000004

080031c8 <_vsniprintf_r>:
 80031c8:	b530      	push	{r4, r5, lr}
 80031ca:	0005      	movs	r5, r0
 80031cc:	0014      	movs	r4, r2
 80031ce:	0008      	movs	r0, r1
 80031d0:	001a      	movs	r2, r3
 80031d2:	b09b      	sub	sp, #108	@ 0x6c
 80031d4:	2c00      	cmp	r4, #0
 80031d6:	da05      	bge.n	80031e4 <_vsniprintf_r+0x1c>
 80031d8:	238b      	movs	r3, #139	@ 0x8b
 80031da:	2001      	movs	r0, #1
 80031dc:	602b      	str	r3, [r5, #0]
 80031de:	4240      	negs	r0, r0
 80031e0:	b01b      	add	sp, #108	@ 0x6c
 80031e2:	bd30      	pop	{r4, r5, pc}
 80031e4:	2382      	movs	r3, #130	@ 0x82
 80031e6:	4669      	mov	r1, sp
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	818b      	strh	r3, [r1, #12]
 80031ec:	2100      	movs	r1, #0
 80031ee:	9000      	str	r0, [sp, #0]
 80031f0:	9119      	str	r1, [sp, #100]	@ 0x64
 80031f2:	9004      	str	r0, [sp, #16]
 80031f4:	428c      	cmp	r4, r1
 80031f6:	d000      	beq.n	80031fa <_vsniprintf_r+0x32>
 80031f8:	1e61      	subs	r1, r4, #1
 80031fa:	2301      	movs	r3, #1
 80031fc:	9102      	str	r1, [sp, #8]
 80031fe:	9105      	str	r1, [sp, #20]
 8003200:	4669      	mov	r1, sp
 8003202:	425b      	negs	r3, r3
 8003204:	81cb      	strh	r3, [r1, #14]
 8003206:	0028      	movs	r0, r5
 8003208:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800320a:	f000 f9a7 	bl	800355c <_svfiprintf_r>
 800320e:	1c43      	adds	r3, r0, #1
 8003210:	da01      	bge.n	8003216 <_vsniprintf_r+0x4e>
 8003212:	238b      	movs	r3, #139	@ 0x8b
 8003214:	602b      	str	r3, [r5, #0]
 8003216:	2c00      	cmp	r4, #0
 8003218:	d0e2      	beq.n	80031e0 <_vsniprintf_r+0x18>
 800321a:	2200      	movs	r2, #0
 800321c:	9b00      	ldr	r3, [sp, #0]
 800321e:	701a      	strb	r2, [r3, #0]
 8003220:	e7de      	b.n	80031e0 <_vsniprintf_r+0x18>
	...

08003224 <vsniprintf>:
 8003224:	b513      	push	{r0, r1, r4, lr}
 8003226:	4c04      	ldr	r4, [pc, #16]	@ (8003238 <vsniprintf+0x14>)
 8003228:	9300      	str	r3, [sp, #0]
 800322a:	0013      	movs	r3, r2
 800322c:	000a      	movs	r2, r1
 800322e:	0001      	movs	r1, r0
 8003230:	6820      	ldr	r0, [r4, #0]
 8003232:	f7ff ffc9 	bl	80031c8 <_vsniprintf_r>
 8003236:	bd16      	pop	{r1, r2, r4, pc}
 8003238:	20000010 	.word	0x20000010

0800323c <memset>:
 800323c:	0003      	movs	r3, r0
 800323e:	1882      	adds	r2, r0, r2
 8003240:	4293      	cmp	r3, r2
 8003242:	d100      	bne.n	8003246 <memset+0xa>
 8003244:	4770      	bx	lr
 8003246:	7019      	strb	r1, [r3, #0]
 8003248:	3301      	adds	r3, #1
 800324a:	e7f9      	b.n	8003240 <memset+0x4>

0800324c <__errno>:
 800324c:	4b01      	ldr	r3, [pc, #4]	@ (8003254 <__errno+0x8>)
 800324e:	6818      	ldr	r0, [r3, #0]
 8003250:	4770      	bx	lr
 8003252:	46c0      	nop			@ (mov r8, r8)
 8003254:	20000010 	.word	0x20000010

08003258 <__libc_init_array>:
 8003258:	b570      	push	{r4, r5, r6, lr}
 800325a:	2600      	movs	r6, #0
 800325c:	4c0c      	ldr	r4, [pc, #48]	@ (8003290 <__libc_init_array+0x38>)
 800325e:	4d0d      	ldr	r5, [pc, #52]	@ (8003294 <__libc_init_array+0x3c>)
 8003260:	1b64      	subs	r4, r4, r5
 8003262:	10a4      	asrs	r4, r4, #2
 8003264:	42a6      	cmp	r6, r4
 8003266:	d109      	bne.n	800327c <__libc_init_array+0x24>
 8003268:	2600      	movs	r6, #0
 800326a:	f000 fc61 	bl	8003b30 <_init>
 800326e:	4c0a      	ldr	r4, [pc, #40]	@ (8003298 <__libc_init_array+0x40>)
 8003270:	4d0a      	ldr	r5, [pc, #40]	@ (800329c <__libc_init_array+0x44>)
 8003272:	1b64      	subs	r4, r4, r5
 8003274:	10a4      	asrs	r4, r4, #2
 8003276:	42a6      	cmp	r6, r4
 8003278:	d105      	bne.n	8003286 <__libc_init_array+0x2e>
 800327a:	bd70      	pop	{r4, r5, r6, pc}
 800327c:	00b3      	lsls	r3, r6, #2
 800327e:	58eb      	ldr	r3, [r5, r3]
 8003280:	4798      	blx	r3
 8003282:	3601      	adds	r6, #1
 8003284:	e7ee      	b.n	8003264 <__libc_init_array+0xc>
 8003286:	00b3      	lsls	r3, r6, #2
 8003288:	58eb      	ldr	r3, [r5, r3]
 800328a:	4798      	blx	r3
 800328c:	3601      	adds	r6, #1
 800328e:	e7f2      	b.n	8003276 <__libc_init_array+0x1e>
 8003290:	08003d7c 	.word	0x08003d7c
 8003294:	08003d7c 	.word	0x08003d7c
 8003298:	08003d80 	.word	0x08003d80
 800329c:	08003d7c 	.word	0x08003d7c

080032a0 <__retarget_lock_acquire_recursive>:
 80032a0:	4770      	bx	lr

080032a2 <__retarget_lock_release_recursive>:
 80032a2:	4770      	bx	lr

080032a4 <_free_r>:
 80032a4:	b570      	push	{r4, r5, r6, lr}
 80032a6:	0005      	movs	r5, r0
 80032a8:	1e0c      	subs	r4, r1, #0
 80032aa:	d010      	beq.n	80032ce <_free_r+0x2a>
 80032ac:	3c04      	subs	r4, #4
 80032ae:	6823      	ldr	r3, [r4, #0]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	da00      	bge.n	80032b6 <_free_r+0x12>
 80032b4:	18e4      	adds	r4, r4, r3
 80032b6:	0028      	movs	r0, r5
 80032b8:	f000 f8e0 	bl	800347c <__malloc_lock>
 80032bc:	4a1d      	ldr	r2, [pc, #116]	@ (8003334 <_free_r+0x90>)
 80032be:	6813      	ldr	r3, [r2, #0]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d105      	bne.n	80032d0 <_free_r+0x2c>
 80032c4:	6063      	str	r3, [r4, #4]
 80032c6:	6014      	str	r4, [r2, #0]
 80032c8:	0028      	movs	r0, r5
 80032ca:	f000 f8df 	bl	800348c <__malloc_unlock>
 80032ce:	bd70      	pop	{r4, r5, r6, pc}
 80032d0:	42a3      	cmp	r3, r4
 80032d2:	d908      	bls.n	80032e6 <_free_r+0x42>
 80032d4:	6820      	ldr	r0, [r4, #0]
 80032d6:	1821      	adds	r1, r4, r0
 80032d8:	428b      	cmp	r3, r1
 80032da:	d1f3      	bne.n	80032c4 <_free_r+0x20>
 80032dc:	6819      	ldr	r1, [r3, #0]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	1809      	adds	r1, r1, r0
 80032e2:	6021      	str	r1, [r4, #0]
 80032e4:	e7ee      	b.n	80032c4 <_free_r+0x20>
 80032e6:	001a      	movs	r2, r3
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d001      	beq.n	80032f2 <_free_r+0x4e>
 80032ee:	42a3      	cmp	r3, r4
 80032f0:	d9f9      	bls.n	80032e6 <_free_r+0x42>
 80032f2:	6811      	ldr	r1, [r2, #0]
 80032f4:	1850      	adds	r0, r2, r1
 80032f6:	42a0      	cmp	r0, r4
 80032f8:	d10b      	bne.n	8003312 <_free_r+0x6e>
 80032fa:	6820      	ldr	r0, [r4, #0]
 80032fc:	1809      	adds	r1, r1, r0
 80032fe:	1850      	adds	r0, r2, r1
 8003300:	6011      	str	r1, [r2, #0]
 8003302:	4283      	cmp	r3, r0
 8003304:	d1e0      	bne.n	80032c8 <_free_r+0x24>
 8003306:	6818      	ldr	r0, [r3, #0]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	1841      	adds	r1, r0, r1
 800330c:	6011      	str	r1, [r2, #0]
 800330e:	6053      	str	r3, [r2, #4]
 8003310:	e7da      	b.n	80032c8 <_free_r+0x24>
 8003312:	42a0      	cmp	r0, r4
 8003314:	d902      	bls.n	800331c <_free_r+0x78>
 8003316:	230c      	movs	r3, #12
 8003318:	602b      	str	r3, [r5, #0]
 800331a:	e7d5      	b.n	80032c8 <_free_r+0x24>
 800331c:	6820      	ldr	r0, [r4, #0]
 800331e:	1821      	adds	r1, r4, r0
 8003320:	428b      	cmp	r3, r1
 8003322:	d103      	bne.n	800332c <_free_r+0x88>
 8003324:	6819      	ldr	r1, [r3, #0]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	1809      	adds	r1, r1, r0
 800332a:	6021      	str	r1, [r4, #0]
 800332c:	6063      	str	r3, [r4, #4]
 800332e:	6054      	str	r4, [r2, #4]
 8003330:	e7ca      	b.n	80032c8 <_free_r+0x24>
 8003332:	46c0      	nop			@ (mov r8, r8)
 8003334:	20000380 	.word	0x20000380

08003338 <sbrk_aligned>:
 8003338:	b570      	push	{r4, r5, r6, lr}
 800333a:	4e0f      	ldr	r6, [pc, #60]	@ (8003378 <sbrk_aligned+0x40>)
 800333c:	000d      	movs	r5, r1
 800333e:	6831      	ldr	r1, [r6, #0]
 8003340:	0004      	movs	r4, r0
 8003342:	2900      	cmp	r1, #0
 8003344:	d102      	bne.n	800334c <sbrk_aligned+0x14>
 8003346:	f000 fb95 	bl	8003a74 <_sbrk_r>
 800334a:	6030      	str	r0, [r6, #0]
 800334c:	0029      	movs	r1, r5
 800334e:	0020      	movs	r0, r4
 8003350:	f000 fb90 	bl	8003a74 <_sbrk_r>
 8003354:	1c43      	adds	r3, r0, #1
 8003356:	d103      	bne.n	8003360 <sbrk_aligned+0x28>
 8003358:	2501      	movs	r5, #1
 800335a:	426d      	negs	r5, r5
 800335c:	0028      	movs	r0, r5
 800335e:	bd70      	pop	{r4, r5, r6, pc}
 8003360:	2303      	movs	r3, #3
 8003362:	1cc5      	adds	r5, r0, #3
 8003364:	439d      	bics	r5, r3
 8003366:	42a8      	cmp	r0, r5
 8003368:	d0f8      	beq.n	800335c <sbrk_aligned+0x24>
 800336a:	1a29      	subs	r1, r5, r0
 800336c:	0020      	movs	r0, r4
 800336e:	f000 fb81 	bl	8003a74 <_sbrk_r>
 8003372:	3001      	adds	r0, #1
 8003374:	d1f2      	bne.n	800335c <sbrk_aligned+0x24>
 8003376:	e7ef      	b.n	8003358 <sbrk_aligned+0x20>
 8003378:	2000037c 	.word	0x2000037c

0800337c <_malloc_r>:
 800337c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800337e:	2203      	movs	r2, #3
 8003380:	1ccb      	adds	r3, r1, #3
 8003382:	4393      	bics	r3, r2
 8003384:	3308      	adds	r3, #8
 8003386:	0005      	movs	r5, r0
 8003388:	001f      	movs	r7, r3
 800338a:	2b0c      	cmp	r3, #12
 800338c:	d234      	bcs.n	80033f8 <_malloc_r+0x7c>
 800338e:	270c      	movs	r7, #12
 8003390:	42b9      	cmp	r1, r7
 8003392:	d833      	bhi.n	80033fc <_malloc_r+0x80>
 8003394:	0028      	movs	r0, r5
 8003396:	f000 f871 	bl	800347c <__malloc_lock>
 800339a:	4e37      	ldr	r6, [pc, #220]	@ (8003478 <_malloc_r+0xfc>)
 800339c:	6833      	ldr	r3, [r6, #0]
 800339e:	001c      	movs	r4, r3
 80033a0:	2c00      	cmp	r4, #0
 80033a2:	d12f      	bne.n	8003404 <_malloc_r+0x88>
 80033a4:	0039      	movs	r1, r7
 80033a6:	0028      	movs	r0, r5
 80033a8:	f7ff ffc6 	bl	8003338 <sbrk_aligned>
 80033ac:	0004      	movs	r4, r0
 80033ae:	1c43      	adds	r3, r0, #1
 80033b0:	d15f      	bne.n	8003472 <_malloc_r+0xf6>
 80033b2:	6834      	ldr	r4, [r6, #0]
 80033b4:	9400      	str	r4, [sp, #0]
 80033b6:	9b00      	ldr	r3, [sp, #0]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d14a      	bne.n	8003452 <_malloc_r+0xd6>
 80033bc:	2c00      	cmp	r4, #0
 80033be:	d052      	beq.n	8003466 <_malloc_r+0xea>
 80033c0:	6823      	ldr	r3, [r4, #0]
 80033c2:	0028      	movs	r0, r5
 80033c4:	18e3      	adds	r3, r4, r3
 80033c6:	9900      	ldr	r1, [sp, #0]
 80033c8:	9301      	str	r3, [sp, #4]
 80033ca:	f000 fb53 	bl	8003a74 <_sbrk_r>
 80033ce:	9b01      	ldr	r3, [sp, #4]
 80033d0:	4283      	cmp	r3, r0
 80033d2:	d148      	bne.n	8003466 <_malloc_r+0xea>
 80033d4:	6823      	ldr	r3, [r4, #0]
 80033d6:	0028      	movs	r0, r5
 80033d8:	1aff      	subs	r7, r7, r3
 80033da:	0039      	movs	r1, r7
 80033dc:	f7ff ffac 	bl	8003338 <sbrk_aligned>
 80033e0:	3001      	adds	r0, #1
 80033e2:	d040      	beq.n	8003466 <_malloc_r+0xea>
 80033e4:	6823      	ldr	r3, [r4, #0]
 80033e6:	19db      	adds	r3, r3, r7
 80033e8:	6023      	str	r3, [r4, #0]
 80033ea:	6833      	ldr	r3, [r6, #0]
 80033ec:	685a      	ldr	r2, [r3, #4]
 80033ee:	2a00      	cmp	r2, #0
 80033f0:	d133      	bne.n	800345a <_malloc_r+0xde>
 80033f2:	9b00      	ldr	r3, [sp, #0]
 80033f4:	6033      	str	r3, [r6, #0]
 80033f6:	e019      	b.n	800342c <_malloc_r+0xb0>
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	dac9      	bge.n	8003390 <_malloc_r+0x14>
 80033fc:	230c      	movs	r3, #12
 80033fe:	602b      	str	r3, [r5, #0]
 8003400:	2000      	movs	r0, #0
 8003402:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003404:	6821      	ldr	r1, [r4, #0]
 8003406:	1bc9      	subs	r1, r1, r7
 8003408:	d420      	bmi.n	800344c <_malloc_r+0xd0>
 800340a:	290b      	cmp	r1, #11
 800340c:	d90a      	bls.n	8003424 <_malloc_r+0xa8>
 800340e:	19e2      	adds	r2, r4, r7
 8003410:	6027      	str	r7, [r4, #0]
 8003412:	42a3      	cmp	r3, r4
 8003414:	d104      	bne.n	8003420 <_malloc_r+0xa4>
 8003416:	6032      	str	r2, [r6, #0]
 8003418:	6863      	ldr	r3, [r4, #4]
 800341a:	6011      	str	r1, [r2, #0]
 800341c:	6053      	str	r3, [r2, #4]
 800341e:	e005      	b.n	800342c <_malloc_r+0xb0>
 8003420:	605a      	str	r2, [r3, #4]
 8003422:	e7f9      	b.n	8003418 <_malloc_r+0x9c>
 8003424:	6862      	ldr	r2, [r4, #4]
 8003426:	42a3      	cmp	r3, r4
 8003428:	d10e      	bne.n	8003448 <_malloc_r+0xcc>
 800342a:	6032      	str	r2, [r6, #0]
 800342c:	0028      	movs	r0, r5
 800342e:	f000 f82d 	bl	800348c <__malloc_unlock>
 8003432:	0020      	movs	r0, r4
 8003434:	2207      	movs	r2, #7
 8003436:	300b      	adds	r0, #11
 8003438:	1d23      	adds	r3, r4, #4
 800343a:	4390      	bics	r0, r2
 800343c:	1ac2      	subs	r2, r0, r3
 800343e:	4298      	cmp	r0, r3
 8003440:	d0df      	beq.n	8003402 <_malloc_r+0x86>
 8003442:	1a1b      	subs	r3, r3, r0
 8003444:	50a3      	str	r3, [r4, r2]
 8003446:	e7dc      	b.n	8003402 <_malloc_r+0x86>
 8003448:	605a      	str	r2, [r3, #4]
 800344a:	e7ef      	b.n	800342c <_malloc_r+0xb0>
 800344c:	0023      	movs	r3, r4
 800344e:	6864      	ldr	r4, [r4, #4]
 8003450:	e7a6      	b.n	80033a0 <_malloc_r+0x24>
 8003452:	9c00      	ldr	r4, [sp, #0]
 8003454:	6863      	ldr	r3, [r4, #4]
 8003456:	9300      	str	r3, [sp, #0]
 8003458:	e7ad      	b.n	80033b6 <_malloc_r+0x3a>
 800345a:	001a      	movs	r2, r3
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	42a3      	cmp	r3, r4
 8003460:	d1fb      	bne.n	800345a <_malloc_r+0xde>
 8003462:	2300      	movs	r3, #0
 8003464:	e7da      	b.n	800341c <_malloc_r+0xa0>
 8003466:	230c      	movs	r3, #12
 8003468:	0028      	movs	r0, r5
 800346a:	602b      	str	r3, [r5, #0]
 800346c:	f000 f80e 	bl	800348c <__malloc_unlock>
 8003470:	e7c6      	b.n	8003400 <_malloc_r+0x84>
 8003472:	6007      	str	r7, [r0, #0]
 8003474:	e7da      	b.n	800342c <_malloc_r+0xb0>
 8003476:	46c0      	nop			@ (mov r8, r8)
 8003478:	20000380 	.word	0x20000380

0800347c <__malloc_lock>:
 800347c:	b510      	push	{r4, lr}
 800347e:	4802      	ldr	r0, [pc, #8]	@ (8003488 <__malloc_lock+0xc>)
 8003480:	f7ff ff0e 	bl	80032a0 <__retarget_lock_acquire_recursive>
 8003484:	bd10      	pop	{r4, pc}
 8003486:	46c0      	nop			@ (mov r8, r8)
 8003488:	20000378 	.word	0x20000378

0800348c <__malloc_unlock>:
 800348c:	b510      	push	{r4, lr}
 800348e:	4802      	ldr	r0, [pc, #8]	@ (8003498 <__malloc_unlock+0xc>)
 8003490:	f7ff ff07 	bl	80032a2 <__retarget_lock_release_recursive>
 8003494:	bd10      	pop	{r4, pc}
 8003496:	46c0      	nop			@ (mov r8, r8)
 8003498:	20000378 	.word	0x20000378

0800349c <__ssputs_r>:
 800349c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800349e:	688e      	ldr	r6, [r1, #8]
 80034a0:	b085      	sub	sp, #20
 80034a2:	001f      	movs	r7, r3
 80034a4:	000c      	movs	r4, r1
 80034a6:	680b      	ldr	r3, [r1, #0]
 80034a8:	9002      	str	r0, [sp, #8]
 80034aa:	9203      	str	r2, [sp, #12]
 80034ac:	42be      	cmp	r6, r7
 80034ae:	d830      	bhi.n	8003512 <__ssputs_r+0x76>
 80034b0:	210c      	movs	r1, #12
 80034b2:	5e62      	ldrsh	r2, [r4, r1]
 80034b4:	2190      	movs	r1, #144	@ 0x90
 80034b6:	00c9      	lsls	r1, r1, #3
 80034b8:	420a      	tst	r2, r1
 80034ba:	d028      	beq.n	800350e <__ssputs_r+0x72>
 80034bc:	2003      	movs	r0, #3
 80034be:	6921      	ldr	r1, [r4, #16]
 80034c0:	1a5b      	subs	r3, r3, r1
 80034c2:	9301      	str	r3, [sp, #4]
 80034c4:	6963      	ldr	r3, [r4, #20]
 80034c6:	4343      	muls	r3, r0
 80034c8:	9801      	ldr	r0, [sp, #4]
 80034ca:	0fdd      	lsrs	r5, r3, #31
 80034cc:	18ed      	adds	r5, r5, r3
 80034ce:	1c7b      	adds	r3, r7, #1
 80034d0:	181b      	adds	r3, r3, r0
 80034d2:	106d      	asrs	r5, r5, #1
 80034d4:	42ab      	cmp	r3, r5
 80034d6:	d900      	bls.n	80034da <__ssputs_r+0x3e>
 80034d8:	001d      	movs	r5, r3
 80034da:	0552      	lsls	r2, r2, #21
 80034dc:	d528      	bpl.n	8003530 <__ssputs_r+0x94>
 80034de:	0029      	movs	r1, r5
 80034e0:	9802      	ldr	r0, [sp, #8]
 80034e2:	f7ff ff4b 	bl	800337c <_malloc_r>
 80034e6:	1e06      	subs	r6, r0, #0
 80034e8:	d02c      	beq.n	8003544 <__ssputs_r+0xa8>
 80034ea:	9a01      	ldr	r2, [sp, #4]
 80034ec:	6921      	ldr	r1, [r4, #16]
 80034ee:	f000 fade 	bl	8003aae <memcpy>
 80034f2:	89a2      	ldrh	r2, [r4, #12]
 80034f4:	4b18      	ldr	r3, [pc, #96]	@ (8003558 <__ssputs_r+0xbc>)
 80034f6:	401a      	ands	r2, r3
 80034f8:	2380      	movs	r3, #128	@ 0x80
 80034fa:	4313      	orrs	r3, r2
 80034fc:	81a3      	strh	r3, [r4, #12]
 80034fe:	9b01      	ldr	r3, [sp, #4]
 8003500:	6126      	str	r6, [r4, #16]
 8003502:	18f6      	adds	r6, r6, r3
 8003504:	6026      	str	r6, [r4, #0]
 8003506:	003e      	movs	r6, r7
 8003508:	6165      	str	r5, [r4, #20]
 800350a:	1aed      	subs	r5, r5, r3
 800350c:	60a5      	str	r5, [r4, #8]
 800350e:	42be      	cmp	r6, r7
 8003510:	d900      	bls.n	8003514 <__ssputs_r+0x78>
 8003512:	003e      	movs	r6, r7
 8003514:	0032      	movs	r2, r6
 8003516:	9903      	ldr	r1, [sp, #12]
 8003518:	6820      	ldr	r0, [r4, #0]
 800351a:	f000 fa99 	bl	8003a50 <memmove>
 800351e:	2000      	movs	r0, #0
 8003520:	68a3      	ldr	r3, [r4, #8]
 8003522:	1b9b      	subs	r3, r3, r6
 8003524:	60a3      	str	r3, [r4, #8]
 8003526:	6823      	ldr	r3, [r4, #0]
 8003528:	199b      	adds	r3, r3, r6
 800352a:	6023      	str	r3, [r4, #0]
 800352c:	b005      	add	sp, #20
 800352e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003530:	002a      	movs	r2, r5
 8003532:	9802      	ldr	r0, [sp, #8]
 8003534:	f000 fac4 	bl	8003ac0 <_realloc_r>
 8003538:	1e06      	subs	r6, r0, #0
 800353a:	d1e0      	bne.n	80034fe <__ssputs_r+0x62>
 800353c:	6921      	ldr	r1, [r4, #16]
 800353e:	9802      	ldr	r0, [sp, #8]
 8003540:	f7ff feb0 	bl	80032a4 <_free_r>
 8003544:	230c      	movs	r3, #12
 8003546:	2001      	movs	r0, #1
 8003548:	9a02      	ldr	r2, [sp, #8]
 800354a:	4240      	negs	r0, r0
 800354c:	6013      	str	r3, [r2, #0]
 800354e:	89a2      	ldrh	r2, [r4, #12]
 8003550:	3334      	adds	r3, #52	@ 0x34
 8003552:	4313      	orrs	r3, r2
 8003554:	81a3      	strh	r3, [r4, #12]
 8003556:	e7e9      	b.n	800352c <__ssputs_r+0x90>
 8003558:	fffffb7f 	.word	0xfffffb7f

0800355c <_svfiprintf_r>:
 800355c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800355e:	b0a1      	sub	sp, #132	@ 0x84
 8003560:	9003      	str	r0, [sp, #12]
 8003562:	001d      	movs	r5, r3
 8003564:	898b      	ldrh	r3, [r1, #12]
 8003566:	000f      	movs	r7, r1
 8003568:	0016      	movs	r6, r2
 800356a:	061b      	lsls	r3, r3, #24
 800356c:	d511      	bpl.n	8003592 <_svfiprintf_r+0x36>
 800356e:	690b      	ldr	r3, [r1, #16]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d10e      	bne.n	8003592 <_svfiprintf_r+0x36>
 8003574:	2140      	movs	r1, #64	@ 0x40
 8003576:	f7ff ff01 	bl	800337c <_malloc_r>
 800357a:	6038      	str	r0, [r7, #0]
 800357c:	6138      	str	r0, [r7, #16]
 800357e:	2800      	cmp	r0, #0
 8003580:	d105      	bne.n	800358e <_svfiprintf_r+0x32>
 8003582:	230c      	movs	r3, #12
 8003584:	9a03      	ldr	r2, [sp, #12]
 8003586:	6013      	str	r3, [r2, #0]
 8003588:	2001      	movs	r0, #1
 800358a:	4240      	negs	r0, r0
 800358c:	e0cf      	b.n	800372e <_svfiprintf_r+0x1d2>
 800358e:	2340      	movs	r3, #64	@ 0x40
 8003590:	617b      	str	r3, [r7, #20]
 8003592:	2300      	movs	r3, #0
 8003594:	ac08      	add	r4, sp, #32
 8003596:	6163      	str	r3, [r4, #20]
 8003598:	3320      	adds	r3, #32
 800359a:	7663      	strb	r3, [r4, #25]
 800359c:	3310      	adds	r3, #16
 800359e:	76a3      	strb	r3, [r4, #26]
 80035a0:	9507      	str	r5, [sp, #28]
 80035a2:	0035      	movs	r5, r6
 80035a4:	782b      	ldrb	r3, [r5, #0]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d001      	beq.n	80035ae <_svfiprintf_r+0x52>
 80035aa:	2b25      	cmp	r3, #37	@ 0x25
 80035ac:	d148      	bne.n	8003640 <_svfiprintf_r+0xe4>
 80035ae:	1bab      	subs	r3, r5, r6
 80035b0:	9305      	str	r3, [sp, #20]
 80035b2:	42b5      	cmp	r5, r6
 80035b4:	d00b      	beq.n	80035ce <_svfiprintf_r+0x72>
 80035b6:	0032      	movs	r2, r6
 80035b8:	0039      	movs	r1, r7
 80035ba:	9803      	ldr	r0, [sp, #12]
 80035bc:	f7ff ff6e 	bl	800349c <__ssputs_r>
 80035c0:	3001      	adds	r0, #1
 80035c2:	d100      	bne.n	80035c6 <_svfiprintf_r+0x6a>
 80035c4:	e0ae      	b.n	8003724 <_svfiprintf_r+0x1c8>
 80035c6:	6963      	ldr	r3, [r4, #20]
 80035c8:	9a05      	ldr	r2, [sp, #20]
 80035ca:	189b      	adds	r3, r3, r2
 80035cc:	6163      	str	r3, [r4, #20]
 80035ce:	782b      	ldrb	r3, [r5, #0]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d100      	bne.n	80035d6 <_svfiprintf_r+0x7a>
 80035d4:	e0a6      	b.n	8003724 <_svfiprintf_r+0x1c8>
 80035d6:	2201      	movs	r2, #1
 80035d8:	2300      	movs	r3, #0
 80035da:	4252      	negs	r2, r2
 80035dc:	6062      	str	r2, [r4, #4]
 80035de:	a904      	add	r1, sp, #16
 80035e0:	3254      	adds	r2, #84	@ 0x54
 80035e2:	1852      	adds	r2, r2, r1
 80035e4:	1c6e      	adds	r6, r5, #1
 80035e6:	6023      	str	r3, [r4, #0]
 80035e8:	60e3      	str	r3, [r4, #12]
 80035ea:	60a3      	str	r3, [r4, #8]
 80035ec:	7013      	strb	r3, [r2, #0]
 80035ee:	65a3      	str	r3, [r4, #88]	@ 0x58
 80035f0:	4b54      	ldr	r3, [pc, #336]	@ (8003744 <_svfiprintf_r+0x1e8>)
 80035f2:	2205      	movs	r2, #5
 80035f4:	0018      	movs	r0, r3
 80035f6:	7831      	ldrb	r1, [r6, #0]
 80035f8:	9305      	str	r3, [sp, #20]
 80035fa:	f000 fa4d 	bl	8003a98 <memchr>
 80035fe:	1c75      	adds	r5, r6, #1
 8003600:	2800      	cmp	r0, #0
 8003602:	d11f      	bne.n	8003644 <_svfiprintf_r+0xe8>
 8003604:	6822      	ldr	r2, [r4, #0]
 8003606:	06d3      	lsls	r3, r2, #27
 8003608:	d504      	bpl.n	8003614 <_svfiprintf_r+0xb8>
 800360a:	2353      	movs	r3, #83	@ 0x53
 800360c:	a904      	add	r1, sp, #16
 800360e:	185b      	adds	r3, r3, r1
 8003610:	2120      	movs	r1, #32
 8003612:	7019      	strb	r1, [r3, #0]
 8003614:	0713      	lsls	r3, r2, #28
 8003616:	d504      	bpl.n	8003622 <_svfiprintf_r+0xc6>
 8003618:	2353      	movs	r3, #83	@ 0x53
 800361a:	a904      	add	r1, sp, #16
 800361c:	185b      	adds	r3, r3, r1
 800361e:	212b      	movs	r1, #43	@ 0x2b
 8003620:	7019      	strb	r1, [r3, #0]
 8003622:	7833      	ldrb	r3, [r6, #0]
 8003624:	2b2a      	cmp	r3, #42	@ 0x2a
 8003626:	d016      	beq.n	8003656 <_svfiprintf_r+0xfa>
 8003628:	0035      	movs	r5, r6
 800362a:	2100      	movs	r1, #0
 800362c:	200a      	movs	r0, #10
 800362e:	68e3      	ldr	r3, [r4, #12]
 8003630:	782a      	ldrb	r2, [r5, #0]
 8003632:	1c6e      	adds	r6, r5, #1
 8003634:	3a30      	subs	r2, #48	@ 0x30
 8003636:	2a09      	cmp	r2, #9
 8003638:	d950      	bls.n	80036dc <_svfiprintf_r+0x180>
 800363a:	2900      	cmp	r1, #0
 800363c:	d111      	bne.n	8003662 <_svfiprintf_r+0x106>
 800363e:	e017      	b.n	8003670 <_svfiprintf_r+0x114>
 8003640:	3501      	adds	r5, #1
 8003642:	e7af      	b.n	80035a4 <_svfiprintf_r+0x48>
 8003644:	9b05      	ldr	r3, [sp, #20]
 8003646:	6822      	ldr	r2, [r4, #0]
 8003648:	1ac0      	subs	r0, r0, r3
 800364a:	2301      	movs	r3, #1
 800364c:	4083      	lsls	r3, r0
 800364e:	4313      	orrs	r3, r2
 8003650:	002e      	movs	r6, r5
 8003652:	6023      	str	r3, [r4, #0]
 8003654:	e7cc      	b.n	80035f0 <_svfiprintf_r+0x94>
 8003656:	9b07      	ldr	r3, [sp, #28]
 8003658:	1d19      	adds	r1, r3, #4
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	9107      	str	r1, [sp, #28]
 800365e:	2b00      	cmp	r3, #0
 8003660:	db01      	blt.n	8003666 <_svfiprintf_r+0x10a>
 8003662:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003664:	e004      	b.n	8003670 <_svfiprintf_r+0x114>
 8003666:	425b      	negs	r3, r3
 8003668:	60e3      	str	r3, [r4, #12]
 800366a:	2302      	movs	r3, #2
 800366c:	4313      	orrs	r3, r2
 800366e:	6023      	str	r3, [r4, #0]
 8003670:	782b      	ldrb	r3, [r5, #0]
 8003672:	2b2e      	cmp	r3, #46	@ 0x2e
 8003674:	d10c      	bne.n	8003690 <_svfiprintf_r+0x134>
 8003676:	786b      	ldrb	r3, [r5, #1]
 8003678:	2b2a      	cmp	r3, #42	@ 0x2a
 800367a:	d134      	bne.n	80036e6 <_svfiprintf_r+0x18a>
 800367c:	9b07      	ldr	r3, [sp, #28]
 800367e:	3502      	adds	r5, #2
 8003680:	1d1a      	adds	r2, r3, #4
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	9207      	str	r2, [sp, #28]
 8003686:	2b00      	cmp	r3, #0
 8003688:	da01      	bge.n	800368e <_svfiprintf_r+0x132>
 800368a:	2301      	movs	r3, #1
 800368c:	425b      	negs	r3, r3
 800368e:	9309      	str	r3, [sp, #36]	@ 0x24
 8003690:	4e2d      	ldr	r6, [pc, #180]	@ (8003748 <_svfiprintf_r+0x1ec>)
 8003692:	2203      	movs	r2, #3
 8003694:	0030      	movs	r0, r6
 8003696:	7829      	ldrb	r1, [r5, #0]
 8003698:	f000 f9fe 	bl	8003a98 <memchr>
 800369c:	2800      	cmp	r0, #0
 800369e:	d006      	beq.n	80036ae <_svfiprintf_r+0x152>
 80036a0:	2340      	movs	r3, #64	@ 0x40
 80036a2:	1b80      	subs	r0, r0, r6
 80036a4:	4083      	lsls	r3, r0
 80036a6:	6822      	ldr	r2, [r4, #0]
 80036a8:	3501      	adds	r5, #1
 80036aa:	4313      	orrs	r3, r2
 80036ac:	6023      	str	r3, [r4, #0]
 80036ae:	7829      	ldrb	r1, [r5, #0]
 80036b0:	2206      	movs	r2, #6
 80036b2:	4826      	ldr	r0, [pc, #152]	@ (800374c <_svfiprintf_r+0x1f0>)
 80036b4:	1c6e      	adds	r6, r5, #1
 80036b6:	7621      	strb	r1, [r4, #24]
 80036b8:	f000 f9ee 	bl	8003a98 <memchr>
 80036bc:	2800      	cmp	r0, #0
 80036be:	d038      	beq.n	8003732 <_svfiprintf_r+0x1d6>
 80036c0:	4b23      	ldr	r3, [pc, #140]	@ (8003750 <_svfiprintf_r+0x1f4>)
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d122      	bne.n	800370c <_svfiprintf_r+0x1b0>
 80036c6:	2207      	movs	r2, #7
 80036c8:	9b07      	ldr	r3, [sp, #28]
 80036ca:	3307      	adds	r3, #7
 80036cc:	4393      	bics	r3, r2
 80036ce:	3308      	adds	r3, #8
 80036d0:	9307      	str	r3, [sp, #28]
 80036d2:	6963      	ldr	r3, [r4, #20]
 80036d4:	9a04      	ldr	r2, [sp, #16]
 80036d6:	189b      	adds	r3, r3, r2
 80036d8:	6163      	str	r3, [r4, #20]
 80036da:	e762      	b.n	80035a2 <_svfiprintf_r+0x46>
 80036dc:	4343      	muls	r3, r0
 80036de:	0035      	movs	r5, r6
 80036e0:	2101      	movs	r1, #1
 80036e2:	189b      	adds	r3, r3, r2
 80036e4:	e7a4      	b.n	8003630 <_svfiprintf_r+0xd4>
 80036e6:	2300      	movs	r3, #0
 80036e8:	200a      	movs	r0, #10
 80036ea:	0019      	movs	r1, r3
 80036ec:	3501      	adds	r5, #1
 80036ee:	6063      	str	r3, [r4, #4]
 80036f0:	782a      	ldrb	r2, [r5, #0]
 80036f2:	1c6e      	adds	r6, r5, #1
 80036f4:	3a30      	subs	r2, #48	@ 0x30
 80036f6:	2a09      	cmp	r2, #9
 80036f8:	d903      	bls.n	8003702 <_svfiprintf_r+0x1a6>
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d0c8      	beq.n	8003690 <_svfiprintf_r+0x134>
 80036fe:	9109      	str	r1, [sp, #36]	@ 0x24
 8003700:	e7c6      	b.n	8003690 <_svfiprintf_r+0x134>
 8003702:	4341      	muls	r1, r0
 8003704:	0035      	movs	r5, r6
 8003706:	2301      	movs	r3, #1
 8003708:	1889      	adds	r1, r1, r2
 800370a:	e7f1      	b.n	80036f0 <_svfiprintf_r+0x194>
 800370c:	aa07      	add	r2, sp, #28
 800370e:	9200      	str	r2, [sp, #0]
 8003710:	0021      	movs	r1, r4
 8003712:	003a      	movs	r2, r7
 8003714:	4b0f      	ldr	r3, [pc, #60]	@ (8003754 <_svfiprintf_r+0x1f8>)
 8003716:	9803      	ldr	r0, [sp, #12]
 8003718:	e000      	b.n	800371c <_svfiprintf_r+0x1c0>
 800371a:	bf00      	nop
 800371c:	9004      	str	r0, [sp, #16]
 800371e:	9b04      	ldr	r3, [sp, #16]
 8003720:	3301      	adds	r3, #1
 8003722:	d1d6      	bne.n	80036d2 <_svfiprintf_r+0x176>
 8003724:	89bb      	ldrh	r3, [r7, #12]
 8003726:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8003728:	065b      	lsls	r3, r3, #25
 800372a:	d500      	bpl.n	800372e <_svfiprintf_r+0x1d2>
 800372c:	e72c      	b.n	8003588 <_svfiprintf_r+0x2c>
 800372e:	b021      	add	sp, #132	@ 0x84
 8003730:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003732:	aa07      	add	r2, sp, #28
 8003734:	9200      	str	r2, [sp, #0]
 8003736:	0021      	movs	r1, r4
 8003738:	003a      	movs	r2, r7
 800373a:	4b06      	ldr	r3, [pc, #24]	@ (8003754 <_svfiprintf_r+0x1f8>)
 800373c:	9803      	ldr	r0, [sp, #12]
 800373e:	f000 f87b 	bl	8003838 <_printf_i>
 8003742:	e7eb      	b.n	800371c <_svfiprintf_r+0x1c0>
 8003744:	08003d48 	.word	0x08003d48
 8003748:	08003d4e 	.word	0x08003d4e
 800374c:	08003d52 	.word	0x08003d52
 8003750:	00000000 	.word	0x00000000
 8003754:	0800349d 	.word	0x0800349d

08003758 <_printf_common>:
 8003758:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800375a:	0016      	movs	r6, r2
 800375c:	9301      	str	r3, [sp, #4]
 800375e:	688a      	ldr	r2, [r1, #8]
 8003760:	690b      	ldr	r3, [r1, #16]
 8003762:	000c      	movs	r4, r1
 8003764:	9000      	str	r0, [sp, #0]
 8003766:	4293      	cmp	r3, r2
 8003768:	da00      	bge.n	800376c <_printf_common+0x14>
 800376a:	0013      	movs	r3, r2
 800376c:	0022      	movs	r2, r4
 800376e:	6033      	str	r3, [r6, #0]
 8003770:	3243      	adds	r2, #67	@ 0x43
 8003772:	7812      	ldrb	r2, [r2, #0]
 8003774:	2a00      	cmp	r2, #0
 8003776:	d001      	beq.n	800377c <_printf_common+0x24>
 8003778:	3301      	adds	r3, #1
 800377a:	6033      	str	r3, [r6, #0]
 800377c:	6823      	ldr	r3, [r4, #0]
 800377e:	069b      	lsls	r3, r3, #26
 8003780:	d502      	bpl.n	8003788 <_printf_common+0x30>
 8003782:	6833      	ldr	r3, [r6, #0]
 8003784:	3302      	adds	r3, #2
 8003786:	6033      	str	r3, [r6, #0]
 8003788:	6822      	ldr	r2, [r4, #0]
 800378a:	2306      	movs	r3, #6
 800378c:	0015      	movs	r5, r2
 800378e:	401d      	ands	r5, r3
 8003790:	421a      	tst	r2, r3
 8003792:	d027      	beq.n	80037e4 <_printf_common+0x8c>
 8003794:	0023      	movs	r3, r4
 8003796:	3343      	adds	r3, #67	@ 0x43
 8003798:	781b      	ldrb	r3, [r3, #0]
 800379a:	1e5a      	subs	r2, r3, #1
 800379c:	4193      	sbcs	r3, r2
 800379e:	6822      	ldr	r2, [r4, #0]
 80037a0:	0692      	lsls	r2, r2, #26
 80037a2:	d430      	bmi.n	8003806 <_printf_common+0xae>
 80037a4:	0022      	movs	r2, r4
 80037a6:	9901      	ldr	r1, [sp, #4]
 80037a8:	9800      	ldr	r0, [sp, #0]
 80037aa:	9d08      	ldr	r5, [sp, #32]
 80037ac:	3243      	adds	r2, #67	@ 0x43
 80037ae:	47a8      	blx	r5
 80037b0:	3001      	adds	r0, #1
 80037b2:	d025      	beq.n	8003800 <_printf_common+0xa8>
 80037b4:	2206      	movs	r2, #6
 80037b6:	6823      	ldr	r3, [r4, #0]
 80037b8:	2500      	movs	r5, #0
 80037ba:	4013      	ands	r3, r2
 80037bc:	2b04      	cmp	r3, #4
 80037be:	d105      	bne.n	80037cc <_printf_common+0x74>
 80037c0:	6833      	ldr	r3, [r6, #0]
 80037c2:	68e5      	ldr	r5, [r4, #12]
 80037c4:	1aed      	subs	r5, r5, r3
 80037c6:	43eb      	mvns	r3, r5
 80037c8:	17db      	asrs	r3, r3, #31
 80037ca:	401d      	ands	r5, r3
 80037cc:	68a3      	ldr	r3, [r4, #8]
 80037ce:	6922      	ldr	r2, [r4, #16]
 80037d0:	4293      	cmp	r3, r2
 80037d2:	dd01      	ble.n	80037d8 <_printf_common+0x80>
 80037d4:	1a9b      	subs	r3, r3, r2
 80037d6:	18ed      	adds	r5, r5, r3
 80037d8:	2600      	movs	r6, #0
 80037da:	42b5      	cmp	r5, r6
 80037dc:	d120      	bne.n	8003820 <_printf_common+0xc8>
 80037de:	2000      	movs	r0, #0
 80037e0:	e010      	b.n	8003804 <_printf_common+0xac>
 80037e2:	3501      	adds	r5, #1
 80037e4:	68e3      	ldr	r3, [r4, #12]
 80037e6:	6832      	ldr	r2, [r6, #0]
 80037e8:	1a9b      	subs	r3, r3, r2
 80037ea:	42ab      	cmp	r3, r5
 80037ec:	ddd2      	ble.n	8003794 <_printf_common+0x3c>
 80037ee:	0022      	movs	r2, r4
 80037f0:	2301      	movs	r3, #1
 80037f2:	9901      	ldr	r1, [sp, #4]
 80037f4:	9800      	ldr	r0, [sp, #0]
 80037f6:	9f08      	ldr	r7, [sp, #32]
 80037f8:	3219      	adds	r2, #25
 80037fa:	47b8      	blx	r7
 80037fc:	3001      	adds	r0, #1
 80037fe:	d1f0      	bne.n	80037e2 <_printf_common+0x8a>
 8003800:	2001      	movs	r0, #1
 8003802:	4240      	negs	r0, r0
 8003804:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003806:	2030      	movs	r0, #48	@ 0x30
 8003808:	18e1      	adds	r1, r4, r3
 800380a:	3143      	adds	r1, #67	@ 0x43
 800380c:	7008      	strb	r0, [r1, #0]
 800380e:	0021      	movs	r1, r4
 8003810:	1c5a      	adds	r2, r3, #1
 8003812:	3145      	adds	r1, #69	@ 0x45
 8003814:	7809      	ldrb	r1, [r1, #0]
 8003816:	18a2      	adds	r2, r4, r2
 8003818:	3243      	adds	r2, #67	@ 0x43
 800381a:	3302      	adds	r3, #2
 800381c:	7011      	strb	r1, [r2, #0]
 800381e:	e7c1      	b.n	80037a4 <_printf_common+0x4c>
 8003820:	0022      	movs	r2, r4
 8003822:	2301      	movs	r3, #1
 8003824:	9901      	ldr	r1, [sp, #4]
 8003826:	9800      	ldr	r0, [sp, #0]
 8003828:	9f08      	ldr	r7, [sp, #32]
 800382a:	321a      	adds	r2, #26
 800382c:	47b8      	blx	r7
 800382e:	3001      	adds	r0, #1
 8003830:	d0e6      	beq.n	8003800 <_printf_common+0xa8>
 8003832:	3601      	adds	r6, #1
 8003834:	e7d1      	b.n	80037da <_printf_common+0x82>
	...

08003838 <_printf_i>:
 8003838:	b5f0      	push	{r4, r5, r6, r7, lr}
 800383a:	b08b      	sub	sp, #44	@ 0x2c
 800383c:	9206      	str	r2, [sp, #24]
 800383e:	000a      	movs	r2, r1
 8003840:	3243      	adds	r2, #67	@ 0x43
 8003842:	9307      	str	r3, [sp, #28]
 8003844:	9005      	str	r0, [sp, #20]
 8003846:	9203      	str	r2, [sp, #12]
 8003848:	7e0a      	ldrb	r2, [r1, #24]
 800384a:	000c      	movs	r4, r1
 800384c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800384e:	2a78      	cmp	r2, #120	@ 0x78
 8003850:	d809      	bhi.n	8003866 <_printf_i+0x2e>
 8003852:	2a62      	cmp	r2, #98	@ 0x62
 8003854:	d80b      	bhi.n	800386e <_printf_i+0x36>
 8003856:	2a00      	cmp	r2, #0
 8003858:	d100      	bne.n	800385c <_printf_i+0x24>
 800385a:	e0ba      	b.n	80039d2 <_printf_i+0x19a>
 800385c:	497a      	ldr	r1, [pc, #488]	@ (8003a48 <_printf_i+0x210>)
 800385e:	9104      	str	r1, [sp, #16]
 8003860:	2a58      	cmp	r2, #88	@ 0x58
 8003862:	d100      	bne.n	8003866 <_printf_i+0x2e>
 8003864:	e08e      	b.n	8003984 <_printf_i+0x14c>
 8003866:	0025      	movs	r5, r4
 8003868:	3542      	adds	r5, #66	@ 0x42
 800386a:	702a      	strb	r2, [r5, #0]
 800386c:	e022      	b.n	80038b4 <_printf_i+0x7c>
 800386e:	0010      	movs	r0, r2
 8003870:	3863      	subs	r0, #99	@ 0x63
 8003872:	2815      	cmp	r0, #21
 8003874:	d8f7      	bhi.n	8003866 <_printf_i+0x2e>
 8003876:	f7fc fc47 	bl	8000108 <__gnu_thumb1_case_shi>
 800387a:	0016      	.short	0x0016
 800387c:	fff6001f 	.word	0xfff6001f
 8003880:	fff6fff6 	.word	0xfff6fff6
 8003884:	001ffff6 	.word	0x001ffff6
 8003888:	fff6fff6 	.word	0xfff6fff6
 800388c:	fff6fff6 	.word	0xfff6fff6
 8003890:	0036009f 	.word	0x0036009f
 8003894:	fff6007e 	.word	0xfff6007e
 8003898:	00b0fff6 	.word	0x00b0fff6
 800389c:	0036fff6 	.word	0x0036fff6
 80038a0:	fff6fff6 	.word	0xfff6fff6
 80038a4:	0082      	.short	0x0082
 80038a6:	0025      	movs	r5, r4
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	3542      	adds	r5, #66	@ 0x42
 80038ac:	1d11      	adds	r1, r2, #4
 80038ae:	6019      	str	r1, [r3, #0]
 80038b0:	6813      	ldr	r3, [r2, #0]
 80038b2:	702b      	strb	r3, [r5, #0]
 80038b4:	2301      	movs	r3, #1
 80038b6:	e09e      	b.n	80039f6 <_printf_i+0x1be>
 80038b8:	6818      	ldr	r0, [r3, #0]
 80038ba:	6809      	ldr	r1, [r1, #0]
 80038bc:	1d02      	adds	r2, r0, #4
 80038be:	060d      	lsls	r5, r1, #24
 80038c0:	d50b      	bpl.n	80038da <_printf_i+0xa2>
 80038c2:	6806      	ldr	r6, [r0, #0]
 80038c4:	601a      	str	r2, [r3, #0]
 80038c6:	2e00      	cmp	r6, #0
 80038c8:	da03      	bge.n	80038d2 <_printf_i+0x9a>
 80038ca:	232d      	movs	r3, #45	@ 0x2d
 80038cc:	9a03      	ldr	r2, [sp, #12]
 80038ce:	4276      	negs	r6, r6
 80038d0:	7013      	strb	r3, [r2, #0]
 80038d2:	4b5d      	ldr	r3, [pc, #372]	@ (8003a48 <_printf_i+0x210>)
 80038d4:	270a      	movs	r7, #10
 80038d6:	9304      	str	r3, [sp, #16]
 80038d8:	e018      	b.n	800390c <_printf_i+0xd4>
 80038da:	6806      	ldr	r6, [r0, #0]
 80038dc:	601a      	str	r2, [r3, #0]
 80038de:	0649      	lsls	r1, r1, #25
 80038e0:	d5f1      	bpl.n	80038c6 <_printf_i+0x8e>
 80038e2:	b236      	sxth	r6, r6
 80038e4:	e7ef      	b.n	80038c6 <_printf_i+0x8e>
 80038e6:	6808      	ldr	r0, [r1, #0]
 80038e8:	6819      	ldr	r1, [r3, #0]
 80038ea:	c940      	ldmia	r1!, {r6}
 80038ec:	0605      	lsls	r5, r0, #24
 80038ee:	d402      	bmi.n	80038f6 <_printf_i+0xbe>
 80038f0:	0640      	lsls	r0, r0, #25
 80038f2:	d500      	bpl.n	80038f6 <_printf_i+0xbe>
 80038f4:	b2b6      	uxth	r6, r6
 80038f6:	6019      	str	r1, [r3, #0]
 80038f8:	4b53      	ldr	r3, [pc, #332]	@ (8003a48 <_printf_i+0x210>)
 80038fa:	270a      	movs	r7, #10
 80038fc:	9304      	str	r3, [sp, #16]
 80038fe:	2a6f      	cmp	r2, #111	@ 0x6f
 8003900:	d100      	bne.n	8003904 <_printf_i+0xcc>
 8003902:	3f02      	subs	r7, #2
 8003904:	0023      	movs	r3, r4
 8003906:	2200      	movs	r2, #0
 8003908:	3343      	adds	r3, #67	@ 0x43
 800390a:	701a      	strb	r2, [r3, #0]
 800390c:	6863      	ldr	r3, [r4, #4]
 800390e:	60a3      	str	r3, [r4, #8]
 8003910:	2b00      	cmp	r3, #0
 8003912:	db06      	blt.n	8003922 <_printf_i+0xea>
 8003914:	2104      	movs	r1, #4
 8003916:	6822      	ldr	r2, [r4, #0]
 8003918:	9d03      	ldr	r5, [sp, #12]
 800391a:	438a      	bics	r2, r1
 800391c:	6022      	str	r2, [r4, #0]
 800391e:	4333      	orrs	r3, r6
 8003920:	d00c      	beq.n	800393c <_printf_i+0x104>
 8003922:	9d03      	ldr	r5, [sp, #12]
 8003924:	0030      	movs	r0, r6
 8003926:	0039      	movs	r1, r7
 8003928:	f7fc fc7e 	bl	8000228 <__aeabi_uidivmod>
 800392c:	9b04      	ldr	r3, [sp, #16]
 800392e:	3d01      	subs	r5, #1
 8003930:	5c5b      	ldrb	r3, [r3, r1]
 8003932:	702b      	strb	r3, [r5, #0]
 8003934:	0033      	movs	r3, r6
 8003936:	0006      	movs	r6, r0
 8003938:	429f      	cmp	r7, r3
 800393a:	d9f3      	bls.n	8003924 <_printf_i+0xec>
 800393c:	2f08      	cmp	r7, #8
 800393e:	d109      	bne.n	8003954 <_printf_i+0x11c>
 8003940:	6823      	ldr	r3, [r4, #0]
 8003942:	07db      	lsls	r3, r3, #31
 8003944:	d506      	bpl.n	8003954 <_printf_i+0x11c>
 8003946:	6862      	ldr	r2, [r4, #4]
 8003948:	6923      	ldr	r3, [r4, #16]
 800394a:	429a      	cmp	r2, r3
 800394c:	dc02      	bgt.n	8003954 <_printf_i+0x11c>
 800394e:	2330      	movs	r3, #48	@ 0x30
 8003950:	3d01      	subs	r5, #1
 8003952:	702b      	strb	r3, [r5, #0]
 8003954:	9b03      	ldr	r3, [sp, #12]
 8003956:	1b5b      	subs	r3, r3, r5
 8003958:	6123      	str	r3, [r4, #16]
 800395a:	9b07      	ldr	r3, [sp, #28]
 800395c:	0021      	movs	r1, r4
 800395e:	9300      	str	r3, [sp, #0]
 8003960:	9805      	ldr	r0, [sp, #20]
 8003962:	9b06      	ldr	r3, [sp, #24]
 8003964:	aa09      	add	r2, sp, #36	@ 0x24
 8003966:	f7ff fef7 	bl	8003758 <_printf_common>
 800396a:	3001      	adds	r0, #1
 800396c:	d148      	bne.n	8003a00 <_printf_i+0x1c8>
 800396e:	2001      	movs	r0, #1
 8003970:	4240      	negs	r0, r0
 8003972:	b00b      	add	sp, #44	@ 0x2c
 8003974:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003976:	2220      	movs	r2, #32
 8003978:	6809      	ldr	r1, [r1, #0]
 800397a:	430a      	orrs	r2, r1
 800397c:	6022      	str	r2, [r4, #0]
 800397e:	2278      	movs	r2, #120	@ 0x78
 8003980:	4932      	ldr	r1, [pc, #200]	@ (8003a4c <_printf_i+0x214>)
 8003982:	9104      	str	r1, [sp, #16]
 8003984:	0021      	movs	r1, r4
 8003986:	3145      	adds	r1, #69	@ 0x45
 8003988:	700a      	strb	r2, [r1, #0]
 800398a:	6819      	ldr	r1, [r3, #0]
 800398c:	6822      	ldr	r2, [r4, #0]
 800398e:	c940      	ldmia	r1!, {r6}
 8003990:	0610      	lsls	r0, r2, #24
 8003992:	d402      	bmi.n	800399a <_printf_i+0x162>
 8003994:	0650      	lsls	r0, r2, #25
 8003996:	d500      	bpl.n	800399a <_printf_i+0x162>
 8003998:	b2b6      	uxth	r6, r6
 800399a:	6019      	str	r1, [r3, #0]
 800399c:	07d3      	lsls	r3, r2, #31
 800399e:	d502      	bpl.n	80039a6 <_printf_i+0x16e>
 80039a0:	2320      	movs	r3, #32
 80039a2:	4313      	orrs	r3, r2
 80039a4:	6023      	str	r3, [r4, #0]
 80039a6:	2e00      	cmp	r6, #0
 80039a8:	d001      	beq.n	80039ae <_printf_i+0x176>
 80039aa:	2710      	movs	r7, #16
 80039ac:	e7aa      	b.n	8003904 <_printf_i+0xcc>
 80039ae:	2220      	movs	r2, #32
 80039b0:	6823      	ldr	r3, [r4, #0]
 80039b2:	4393      	bics	r3, r2
 80039b4:	6023      	str	r3, [r4, #0]
 80039b6:	e7f8      	b.n	80039aa <_printf_i+0x172>
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	680d      	ldr	r5, [r1, #0]
 80039bc:	1d10      	adds	r0, r2, #4
 80039be:	6949      	ldr	r1, [r1, #20]
 80039c0:	6018      	str	r0, [r3, #0]
 80039c2:	6813      	ldr	r3, [r2, #0]
 80039c4:	062e      	lsls	r6, r5, #24
 80039c6:	d501      	bpl.n	80039cc <_printf_i+0x194>
 80039c8:	6019      	str	r1, [r3, #0]
 80039ca:	e002      	b.n	80039d2 <_printf_i+0x19a>
 80039cc:	066d      	lsls	r5, r5, #25
 80039ce:	d5fb      	bpl.n	80039c8 <_printf_i+0x190>
 80039d0:	8019      	strh	r1, [r3, #0]
 80039d2:	2300      	movs	r3, #0
 80039d4:	9d03      	ldr	r5, [sp, #12]
 80039d6:	6123      	str	r3, [r4, #16]
 80039d8:	e7bf      	b.n	800395a <_printf_i+0x122>
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	1d11      	adds	r1, r2, #4
 80039de:	6019      	str	r1, [r3, #0]
 80039e0:	6815      	ldr	r5, [r2, #0]
 80039e2:	2100      	movs	r1, #0
 80039e4:	0028      	movs	r0, r5
 80039e6:	6862      	ldr	r2, [r4, #4]
 80039e8:	f000 f856 	bl	8003a98 <memchr>
 80039ec:	2800      	cmp	r0, #0
 80039ee:	d001      	beq.n	80039f4 <_printf_i+0x1bc>
 80039f0:	1b40      	subs	r0, r0, r5
 80039f2:	6060      	str	r0, [r4, #4]
 80039f4:	6863      	ldr	r3, [r4, #4]
 80039f6:	6123      	str	r3, [r4, #16]
 80039f8:	2300      	movs	r3, #0
 80039fa:	9a03      	ldr	r2, [sp, #12]
 80039fc:	7013      	strb	r3, [r2, #0]
 80039fe:	e7ac      	b.n	800395a <_printf_i+0x122>
 8003a00:	002a      	movs	r2, r5
 8003a02:	6923      	ldr	r3, [r4, #16]
 8003a04:	9906      	ldr	r1, [sp, #24]
 8003a06:	9805      	ldr	r0, [sp, #20]
 8003a08:	9d07      	ldr	r5, [sp, #28]
 8003a0a:	47a8      	blx	r5
 8003a0c:	3001      	adds	r0, #1
 8003a0e:	d0ae      	beq.n	800396e <_printf_i+0x136>
 8003a10:	6823      	ldr	r3, [r4, #0]
 8003a12:	079b      	lsls	r3, r3, #30
 8003a14:	d415      	bmi.n	8003a42 <_printf_i+0x20a>
 8003a16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003a18:	68e0      	ldr	r0, [r4, #12]
 8003a1a:	4298      	cmp	r0, r3
 8003a1c:	daa9      	bge.n	8003972 <_printf_i+0x13a>
 8003a1e:	0018      	movs	r0, r3
 8003a20:	e7a7      	b.n	8003972 <_printf_i+0x13a>
 8003a22:	0022      	movs	r2, r4
 8003a24:	2301      	movs	r3, #1
 8003a26:	9906      	ldr	r1, [sp, #24]
 8003a28:	9805      	ldr	r0, [sp, #20]
 8003a2a:	9e07      	ldr	r6, [sp, #28]
 8003a2c:	3219      	adds	r2, #25
 8003a2e:	47b0      	blx	r6
 8003a30:	3001      	adds	r0, #1
 8003a32:	d09c      	beq.n	800396e <_printf_i+0x136>
 8003a34:	3501      	adds	r5, #1
 8003a36:	68e3      	ldr	r3, [r4, #12]
 8003a38:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003a3a:	1a9b      	subs	r3, r3, r2
 8003a3c:	42ab      	cmp	r3, r5
 8003a3e:	dcf0      	bgt.n	8003a22 <_printf_i+0x1ea>
 8003a40:	e7e9      	b.n	8003a16 <_printf_i+0x1de>
 8003a42:	2500      	movs	r5, #0
 8003a44:	e7f7      	b.n	8003a36 <_printf_i+0x1fe>
 8003a46:	46c0      	nop			@ (mov r8, r8)
 8003a48:	08003d59 	.word	0x08003d59
 8003a4c:	08003d6a 	.word	0x08003d6a

08003a50 <memmove>:
 8003a50:	b510      	push	{r4, lr}
 8003a52:	4288      	cmp	r0, r1
 8003a54:	d902      	bls.n	8003a5c <memmove+0xc>
 8003a56:	188b      	adds	r3, r1, r2
 8003a58:	4298      	cmp	r0, r3
 8003a5a:	d308      	bcc.n	8003a6e <memmove+0x1e>
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	d007      	beq.n	8003a72 <memmove+0x22>
 8003a62:	5ccc      	ldrb	r4, [r1, r3]
 8003a64:	54c4      	strb	r4, [r0, r3]
 8003a66:	3301      	adds	r3, #1
 8003a68:	e7f9      	b.n	8003a5e <memmove+0xe>
 8003a6a:	5c8b      	ldrb	r3, [r1, r2]
 8003a6c:	5483      	strb	r3, [r0, r2]
 8003a6e:	3a01      	subs	r2, #1
 8003a70:	d2fb      	bcs.n	8003a6a <memmove+0x1a>
 8003a72:	bd10      	pop	{r4, pc}

08003a74 <_sbrk_r>:
 8003a74:	2300      	movs	r3, #0
 8003a76:	b570      	push	{r4, r5, r6, lr}
 8003a78:	4d06      	ldr	r5, [pc, #24]	@ (8003a94 <_sbrk_r+0x20>)
 8003a7a:	0004      	movs	r4, r0
 8003a7c:	0008      	movs	r0, r1
 8003a7e:	602b      	str	r3, [r5, #0]
 8003a80:	f7fd f9e6 	bl	8000e50 <_sbrk>
 8003a84:	1c43      	adds	r3, r0, #1
 8003a86:	d103      	bne.n	8003a90 <_sbrk_r+0x1c>
 8003a88:	682b      	ldr	r3, [r5, #0]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d000      	beq.n	8003a90 <_sbrk_r+0x1c>
 8003a8e:	6023      	str	r3, [r4, #0]
 8003a90:	bd70      	pop	{r4, r5, r6, pc}
 8003a92:	46c0      	nop			@ (mov r8, r8)
 8003a94:	20000374 	.word	0x20000374

08003a98 <memchr>:
 8003a98:	b2c9      	uxtb	r1, r1
 8003a9a:	1882      	adds	r2, r0, r2
 8003a9c:	4290      	cmp	r0, r2
 8003a9e:	d101      	bne.n	8003aa4 <memchr+0xc>
 8003aa0:	2000      	movs	r0, #0
 8003aa2:	4770      	bx	lr
 8003aa4:	7803      	ldrb	r3, [r0, #0]
 8003aa6:	428b      	cmp	r3, r1
 8003aa8:	d0fb      	beq.n	8003aa2 <memchr+0xa>
 8003aaa:	3001      	adds	r0, #1
 8003aac:	e7f6      	b.n	8003a9c <memchr+0x4>

08003aae <memcpy>:
 8003aae:	2300      	movs	r3, #0
 8003ab0:	b510      	push	{r4, lr}
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	d100      	bne.n	8003ab8 <memcpy+0xa>
 8003ab6:	bd10      	pop	{r4, pc}
 8003ab8:	5ccc      	ldrb	r4, [r1, r3]
 8003aba:	54c4      	strb	r4, [r0, r3]
 8003abc:	3301      	adds	r3, #1
 8003abe:	e7f8      	b.n	8003ab2 <memcpy+0x4>

08003ac0 <_realloc_r>:
 8003ac0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003ac2:	0006      	movs	r6, r0
 8003ac4:	000c      	movs	r4, r1
 8003ac6:	0015      	movs	r5, r2
 8003ac8:	2900      	cmp	r1, #0
 8003aca:	d105      	bne.n	8003ad8 <_realloc_r+0x18>
 8003acc:	0011      	movs	r1, r2
 8003ace:	f7ff fc55 	bl	800337c <_malloc_r>
 8003ad2:	0004      	movs	r4, r0
 8003ad4:	0020      	movs	r0, r4
 8003ad6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003ad8:	2a00      	cmp	r2, #0
 8003ada:	d103      	bne.n	8003ae4 <_realloc_r+0x24>
 8003adc:	f7ff fbe2 	bl	80032a4 <_free_r>
 8003ae0:	002c      	movs	r4, r5
 8003ae2:	e7f7      	b.n	8003ad4 <_realloc_r+0x14>
 8003ae4:	f000 f81c 	bl	8003b20 <_malloc_usable_size_r>
 8003ae8:	0007      	movs	r7, r0
 8003aea:	4285      	cmp	r5, r0
 8003aec:	d802      	bhi.n	8003af4 <_realloc_r+0x34>
 8003aee:	0843      	lsrs	r3, r0, #1
 8003af0:	42ab      	cmp	r3, r5
 8003af2:	d3ef      	bcc.n	8003ad4 <_realloc_r+0x14>
 8003af4:	0029      	movs	r1, r5
 8003af6:	0030      	movs	r0, r6
 8003af8:	f7ff fc40 	bl	800337c <_malloc_r>
 8003afc:	9001      	str	r0, [sp, #4]
 8003afe:	2800      	cmp	r0, #0
 8003b00:	d101      	bne.n	8003b06 <_realloc_r+0x46>
 8003b02:	9c01      	ldr	r4, [sp, #4]
 8003b04:	e7e6      	b.n	8003ad4 <_realloc_r+0x14>
 8003b06:	002a      	movs	r2, r5
 8003b08:	42bd      	cmp	r5, r7
 8003b0a:	d900      	bls.n	8003b0e <_realloc_r+0x4e>
 8003b0c:	003a      	movs	r2, r7
 8003b0e:	0021      	movs	r1, r4
 8003b10:	9801      	ldr	r0, [sp, #4]
 8003b12:	f7ff ffcc 	bl	8003aae <memcpy>
 8003b16:	0021      	movs	r1, r4
 8003b18:	0030      	movs	r0, r6
 8003b1a:	f7ff fbc3 	bl	80032a4 <_free_r>
 8003b1e:	e7f0      	b.n	8003b02 <_realloc_r+0x42>

08003b20 <_malloc_usable_size_r>:
 8003b20:	1f0b      	subs	r3, r1, #4
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	1f18      	subs	r0, r3, #4
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	da01      	bge.n	8003b2e <_malloc_usable_size_r+0xe>
 8003b2a:	580b      	ldr	r3, [r1, r0]
 8003b2c:	18c0      	adds	r0, r0, r3
 8003b2e:	4770      	bx	lr

08003b30 <_init>:
 8003b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b32:	46c0      	nop			@ (mov r8, r8)
 8003b34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b36:	bc08      	pop	{r3}
 8003b38:	469e      	mov	lr, r3
 8003b3a:	4770      	bx	lr

08003b3c <_fini>:
 8003b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b3e:	46c0      	nop			@ (mov r8, r8)
 8003b40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b42:	bc08      	pop	{r3}
 8003b44:	469e      	mov	lr, r3
 8003b46:	4770      	bx	lr
