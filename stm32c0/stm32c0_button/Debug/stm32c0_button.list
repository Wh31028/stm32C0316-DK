
stm32c0_button.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f9c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  0800405c  0800405c  0000505c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004180  08004180  00006010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08004180  08004180  00006010  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08004180  08004180  00006010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004180  08004180  00005180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004184  08004184  00005184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08004188  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000144  20000010  08004198  00006010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000154  08004198  00006154  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ced5  00000000  00000000  00006038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000256a  00000000  00000000  00012f0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e30  00000000  00000000  00015478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ad0  00000000  00000000  000162a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014b57  00000000  00000000  00016d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001188a  00000000  00000000  0002b8cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00080e14  00000000  00000000  0003d159  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bdf6d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003238  00000000  00000000  000bdfb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  000c11e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004044 	.word	0x08004044

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08004044 	.word	0x08004044

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_fdiv>:
 8000220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000222:	4646      	mov	r6, r8
 8000224:	464f      	mov	r7, r9
 8000226:	46d6      	mov	lr, sl
 8000228:	0245      	lsls	r5, r0, #9
 800022a:	b5c0      	push	{r6, r7, lr}
 800022c:	0fc3      	lsrs	r3, r0, #31
 800022e:	0047      	lsls	r7, r0, #1
 8000230:	4698      	mov	r8, r3
 8000232:	1c0e      	adds	r6, r1, #0
 8000234:	0a6d      	lsrs	r5, r5, #9
 8000236:	0e3f      	lsrs	r7, r7, #24
 8000238:	d05b      	beq.n	80002f2 <__aeabi_fdiv+0xd2>
 800023a:	2fff      	cmp	r7, #255	@ 0xff
 800023c:	d021      	beq.n	8000282 <__aeabi_fdiv+0x62>
 800023e:	2380      	movs	r3, #128	@ 0x80
 8000240:	00ed      	lsls	r5, r5, #3
 8000242:	04db      	lsls	r3, r3, #19
 8000244:	431d      	orrs	r5, r3
 8000246:	2300      	movs	r3, #0
 8000248:	4699      	mov	r9, r3
 800024a:	469a      	mov	sl, r3
 800024c:	3f7f      	subs	r7, #127	@ 0x7f
 800024e:	0274      	lsls	r4, r6, #9
 8000250:	0073      	lsls	r3, r6, #1
 8000252:	0a64      	lsrs	r4, r4, #9
 8000254:	0e1b      	lsrs	r3, r3, #24
 8000256:	0ff6      	lsrs	r6, r6, #31
 8000258:	2b00      	cmp	r3, #0
 800025a:	d020      	beq.n	800029e <__aeabi_fdiv+0x7e>
 800025c:	2bff      	cmp	r3, #255	@ 0xff
 800025e:	d043      	beq.n	80002e8 <__aeabi_fdiv+0xc8>
 8000260:	2280      	movs	r2, #128	@ 0x80
 8000262:	2000      	movs	r0, #0
 8000264:	00e4      	lsls	r4, r4, #3
 8000266:	04d2      	lsls	r2, r2, #19
 8000268:	4314      	orrs	r4, r2
 800026a:	3b7f      	subs	r3, #127	@ 0x7f
 800026c:	4642      	mov	r2, r8
 800026e:	1aff      	subs	r7, r7, r3
 8000270:	464b      	mov	r3, r9
 8000272:	4072      	eors	r2, r6
 8000274:	2b0f      	cmp	r3, #15
 8000276:	d900      	bls.n	800027a <__aeabi_fdiv+0x5a>
 8000278:	e09d      	b.n	80003b6 <__aeabi_fdiv+0x196>
 800027a:	4971      	ldr	r1, [pc, #452]	@ (8000440 <__aeabi_fdiv+0x220>)
 800027c:	009b      	lsls	r3, r3, #2
 800027e:	58cb      	ldr	r3, [r1, r3]
 8000280:	469f      	mov	pc, r3
 8000282:	2d00      	cmp	r5, #0
 8000284:	d15a      	bne.n	800033c <__aeabi_fdiv+0x11c>
 8000286:	2308      	movs	r3, #8
 8000288:	4699      	mov	r9, r3
 800028a:	3b06      	subs	r3, #6
 800028c:	0274      	lsls	r4, r6, #9
 800028e:	469a      	mov	sl, r3
 8000290:	0073      	lsls	r3, r6, #1
 8000292:	27ff      	movs	r7, #255	@ 0xff
 8000294:	0a64      	lsrs	r4, r4, #9
 8000296:	0e1b      	lsrs	r3, r3, #24
 8000298:	0ff6      	lsrs	r6, r6, #31
 800029a:	2b00      	cmp	r3, #0
 800029c:	d1de      	bne.n	800025c <__aeabi_fdiv+0x3c>
 800029e:	2c00      	cmp	r4, #0
 80002a0:	d13b      	bne.n	800031a <__aeabi_fdiv+0xfa>
 80002a2:	2301      	movs	r3, #1
 80002a4:	4642      	mov	r2, r8
 80002a6:	4649      	mov	r1, r9
 80002a8:	4072      	eors	r2, r6
 80002aa:	4319      	orrs	r1, r3
 80002ac:	290e      	cmp	r1, #14
 80002ae:	d818      	bhi.n	80002e2 <__aeabi_fdiv+0xc2>
 80002b0:	4864      	ldr	r0, [pc, #400]	@ (8000444 <__aeabi_fdiv+0x224>)
 80002b2:	0089      	lsls	r1, r1, #2
 80002b4:	5841      	ldr	r1, [r0, r1]
 80002b6:	468f      	mov	pc, r1
 80002b8:	4653      	mov	r3, sl
 80002ba:	2b02      	cmp	r3, #2
 80002bc:	d100      	bne.n	80002c0 <__aeabi_fdiv+0xa0>
 80002be:	e0b8      	b.n	8000432 <__aeabi_fdiv+0x212>
 80002c0:	2b03      	cmp	r3, #3
 80002c2:	d06e      	beq.n	80003a2 <__aeabi_fdiv+0x182>
 80002c4:	4642      	mov	r2, r8
 80002c6:	002c      	movs	r4, r5
 80002c8:	2b01      	cmp	r3, #1
 80002ca:	d140      	bne.n	800034e <__aeabi_fdiv+0x12e>
 80002cc:	2000      	movs	r0, #0
 80002ce:	2400      	movs	r4, #0
 80002d0:	05c0      	lsls	r0, r0, #23
 80002d2:	4320      	orrs	r0, r4
 80002d4:	07d2      	lsls	r2, r2, #31
 80002d6:	4310      	orrs	r0, r2
 80002d8:	bce0      	pop	{r5, r6, r7}
 80002da:	46ba      	mov	sl, r7
 80002dc:	46b1      	mov	r9, r6
 80002de:	46a8      	mov	r8, r5
 80002e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002e2:	20ff      	movs	r0, #255	@ 0xff
 80002e4:	2400      	movs	r4, #0
 80002e6:	e7f3      	b.n	80002d0 <__aeabi_fdiv+0xb0>
 80002e8:	2c00      	cmp	r4, #0
 80002ea:	d120      	bne.n	800032e <__aeabi_fdiv+0x10e>
 80002ec:	2302      	movs	r3, #2
 80002ee:	3fff      	subs	r7, #255	@ 0xff
 80002f0:	e7d8      	b.n	80002a4 <__aeabi_fdiv+0x84>
 80002f2:	2d00      	cmp	r5, #0
 80002f4:	d105      	bne.n	8000302 <__aeabi_fdiv+0xe2>
 80002f6:	2304      	movs	r3, #4
 80002f8:	4699      	mov	r9, r3
 80002fa:	3b03      	subs	r3, #3
 80002fc:	2700      	movs	r7, #0
 80002fe:	469a      	mov	sl, r3
 8000300:	e7a5      	b.n	800024e <__aeabi_fdiv+0x2e>
 8000302:	0028      	movs	r0, r5
 8000304:	f000 f8e8 	bl	80004d8 <__clzsi2>
 8000308:	2776      	movs	r7, #118	@ 0x76
 800030a:	1f43      	subs	r3, r0, #5
 800030c:	409d      	lsls	r5, r3
 800030e:	2300      	movs	r3, #0
 8000310:	427f      	negs	r7, r7
 8000312:	4699      	mov	r9, r3
 8000314:	469a      	mov	sl, r3
 8000316:	1a3f      	subs	r7, r7, r0
 8000318:	e799      	b.n	800024e <__aeabi_fdiv+0x2e>
 800031a:	0020      	movs	r0, r4
 800031c:	f000 f8dc 	bl	80004d8 <__clzsi2>
 8000320:	1f43      	subs	r3, r0, #5
 8000322:	409c      	lsls	r4, r3
 8000324:	2376      	movs	r3, #118	@ 0x76
 8000326:	425b      	negs	r3, r3
 8000328:	1a1b      	subs	r3, r3, r0
 800032a:	2000      	movs	r0, #0
 800032c:	e79e      	b.n	800026c <__aeabi_fdiv+0x4c>
 800032e:	2303      	movs	r3, #3
 8000330:	464a      	mov	r2, r9
 8000332:	431a      	orrs	r2, r3
 8000334:	4691      	mov	r9, r2
 8000336:	2003      	movs	r0, #3
 8000338:	33fc      	adds	r3, #252	@ 0xfc
 800033a:	e797      	b.n	800026c <__aeabi_fdiv+0x4c>
 800033c:	230c      	movs	r3, #12
 800033e:	4699      	mov	r9, r3
 8000340:	3b09      	subs	r3, #9
 8000342:	27ff      	movs	r7, #255	@ 0xff
 8000344:	469a      	mov	sl, r3
 8000346:	e782      	b.n	800024e <__aeabi_fdiv+0x2e>
 8000348:	2803      	cmp	r0, #3
 800034a:	d02c      	beq.n	80003a6 <__aeabi_fdiv+0x186>
 800034c:	0032      	movs	r2, r6
 800034e:	0038      	movs	r0, r7
 8000350:	307f      	adds	r0, #127	@ 0x7f
 8000352:	2800      	cmp	r0, #0
 8000354:	dd47      	ble.n	80003e6 <__aeabi_fdiv+0x1c6>
 8000356:	0763      	lsls	r3, r4, #29
 8000358:	d004      	beq.n	8000364 <__aeabi_fdiv+0x144>
 800035a:	230f      	movs	r3, #15
 800035c:	4023      	ands	r3, r4
 800035e:	2b04      	cmp	r3, #4
 8000360:	d000      	beq.n	8000364 <__aeabi_fdiv+0x144>
 8000362:	3404      	adds	r4, #4
 8000364:	0123      	lsls	r3, r4, #4
 8000366:	d503      	bpl.n	8000370 <__aeabi_fdiv+0x150>
 8000368:	0038      	movs	r0, r7
 800036a:	4b37      	ldr	r3, [pc, #220]	@ (8000448 <__aeabi_fdiv+0x228>)
 800036c:	3080      	adds	r0, #128	@ 0x80
 800036e:	401c      	ands	r4, r3
 8000370:	28fe      	cmp	r0, #254	@ 0xfe
 8000372:	dcb6      	bgt.n	80002e2 <__aeabi_fdiv+0xc2>
 8000374:	01a4      	lsls	r4, r4, #6
 8000376:	0a64      	lsrs	r4, r4, #9
 8000378:	b2c0      	uxtb	r0, r0
 800037a:	e7a9      	b.n	80002d0 <__aeabi_fdiv+0xb0>
 800037c:	2480      	movs	r4, #128	@ 0x80
 800037e:	2200      	movs	r2, #0
 8000380:	20ff      	movs	r0, #255	@ 0xff
 8000382:	03e4      	lsls	r4, r4, #15
 8000384:	e7a4      	b.n	80002d0 <__aeabi_fdiv+0xb0>
 8000386:	2380      	movs	r3, #128	@ 0x80
 8000388:	03db      	lsls	r3, r3, #15
 800038a:	421d      	tst	r5, r3
 800038c:	d001      	beq.n	8000392 <__aeabi_fdiv+0x172>
 800038e:	421c      	tst	r4, r3
 8000390:	d00b      	beq.n	80003aa <__aeabi_fdiv+0x18a>
 8000392:	2480      	movs	r4, #128	@ 0x80
 8000394:	03e4      	lsls	r4, r4, #15
 8000396:	432c      	orrs	r4, r5
 8000398:	0264      	lsls	r4, r4, #9
 800039a:	4642      	mov	r2, r8
 800039c:	20ff      	movs	r0, #255	@ 0xff
 800039e:	0a64      	lsrs	r4, r4, #9
 80003a0:	e796      	b.n	80002d0 <__aeabi_fdiv+0xb0>
 80003a2:	4646      	mov	r6, r8
 80003a4:	002c      	movs	r4, r5
 80003a6:	2380      	movs	r3, #128	@ 0x80
 80003a8:	03db      	lsls	r3, r3, #15
 80003aa:	431c      	orrs	r4, r3
 80003ac:	0264      	lsls	r4, r4, #9
 80003ae:	0032      	movs	r2, r6
 80003b0:	20ff      	movs	r0, #255	@ 0xff
 80003b2:	0a64      	lsrs	r4, r4, #9
 80003b4:	e78c      	b.n	80002d0 <__aeabi_fdiv+0xb0>
 80003b6:	016d      	lsls	r5, r5, #5
 80003b8:	0160      	lsls	r0, r4, #5
 80003ba:	4285      	cmp	r5, r0
 80003bc:	d22d      	bcs.n	800041a <__aeabi_fdiv+0x1fa>
 80003be:	231b      	movs	r3, #27
 80003c0:	2400      	movs	r4, #0
 80003c2:	3f01      	subs	r7, #1
 80003c4:	2601      	movs	r6, #1
 80003c6:	0029      	movs	r1, r5
 80003c8:	0064      	lsls	r4, r4, #1
 80003ca:	006d      	lsls	r5, r5, #1
 80003cc:	2900      	cmp	r1, #0
 80003ce:	db01      	blt.n	80003d4 <__aeabi_fdiv+0x1b4>
 80003d0:	4285      	cmp	r5, r0
 80003d2:	d301      	bcc.n	80003d8 <__aeabi_fdiv+0x1b8>
 80003d4:	1a2d      	subs	r5, r5, r0
 80003d6:	4334      	orrs	r4, r6
 80003d8:	3b01      	subs	r3, #1
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d1f3      	bne.n	80003c6 <__aeabi_fdiv+0x1a6>
 80003de:	1e6b      	subs	r3, r5, #1
 80003e0:	419d      	sbcs	r5, r3
 80003e2:	432c      	orrs	r4, r5
 80003e4:	e7b3      	b.n	800034e <__aeabi_fdiv+0x12e>
 80003e6:	2301      	movs	r3, #1
 80003e8:	1a1b      	subs	r3, r3, r0
 80003ea:	2b1b      	cmp	r3, #27
 80003ec:	dd00      	ble.n	80003f0 <__aeabi_fdiv+0x1d0>
 80003ee:	e76d      	b.n	80002cc <__aeabi_fdiv+0xac>
 80003f0:	0021      	movs	r1, r4
 80003f2:	379e      	adds	r7, #158	@ 0x9e
 80003f4:	40d9      	lsrs	r1, r3
 80003f6:	40bc      	lsls	r4, r7
 80003f8:	000b      	movs	r3, r1
 80003fa:	1e61      	subs	r1, r4, #1
 80003fc:	418c      	sbcs	r4, r1
 80003fe:	4323      	orrs	r3, r4
 8000400:	0759      	lsls	r1, r3, #29
 8000402:	d004      	beq.n	800040e <__aeabi_fdiv+0x1ee>
 8000404:	210f      	movs	r1, #15
 8000406:	4019      	ands	r1, r3
 8000408:	2904      	cmp	r1, #4
 800040a:	d000      	beq.n	800040e <__aeabi_fdiv+0x1ee>
 800040c:	3304      	adds	r3, #4
 800040e:	0159      	lsls	r1, r3, #5
 8000410:	d413      	bmi.n	800043a <__aeabi_fdiv+0x21a>
 8000412:	019b      	lsls	r3, r3, #6
 8000414:	2000      	movs	r0, #0
 8000416:	0a5c      	lsrs	r4, r3, #9
 8000418:	e75a      	b.n	80002d0 <__aeabi_fdiv+0xb0>
 800041a:	231a      	movs	r3, #26
 800041c:	2401      	movs	r4, #1
 800041e:	1a2d      	subs	r5, r5, r0
 8000420:	e7d0      	b.n	80003c4 <__aeabi_fdiv+0x1a4>
 8000422:	1e98      	subs	r0, r3, #2
 8000424:	4243      	negs	r3, r0
 8000426:	4158      	adcs	r0, r3
 8000428:	4240      	negs	r0, r0
 800042a:	0032      	movs	r2, r6
 800042c:	2400      	movs	r4, #0
 800042e:	b2c0      	uxtb	r0, r0
 8000430:	e74e      	b.n	80002d0 <__aeabi_fdiv+0xb0>
 8000432:	4642      	mov	r2, r8
 8000434:	20ff      	movs	r0, #255	@ 0xff
 8000436:	2400      	movs	r4, #0
 8000438:	e74a      	b.n	80002d0 <__aeabi_fdiv+0xb0>
 800043a:	2001      	movs	r0, #1
 800043c:	2400      	movs	r4, #0
 800043e:	e747      	b.n	80002d0 <__aeabi_fdiv+0xb0>
 8000440:	0800405c 	.word	0x0800405c
 8000444:	0800409c 	.word	0x0800409c
 8000448:	f7ffffff 	.word	0xf7ffffff

0800044c <__aeabi_ui2f>:
 800044c:	b510      	push	{r4, lr}
 800044e:	1e04      	subs	r4, r0, #0
 8000450:	d00d      	beq.n	800046e <__aeabi_ui2f+0x22>
 8000452:	f000 f841 	bl	80004d8 <__clzsi2>
 8000456:	239e      	movs	r3, #158	@ 0x9e
 8000458:	1a1b      	subs	r3, r3, r0
 800045a:	2b96      	cmp	r3, #150	@ 0x96
 800045c:	dc0c      	bgt.n	8000478 <__aeabi_ui2f+0x2c>
 800045e:	2808      	cmp	r0, #8
 8000460:	d034      	beq.n	80004cc <__aeabi_ui2f+0x80>
 8000462:	3808      	subs	r0, #8
 8000464:	4084      	lsls	r4, r0
 8000466:	0264      	lsls	r4, r4, #9
 8000468:	0a64      	lsrs	r4, r4, #9
 800046a:	b2d8      	uxtb	r0, r3
 800046c:	e001      	b.n	8000472 <__aeabi_ui2f+0x26>
 800046e:	2000      	movs	r0, #0
 8000470:	2400      	movs	r4, #0
 8000472:	05c0      	lsls	r0, r0, #23
 8000474:	4320      	orrs	r0, r4
 8000476:	bd10      	pop	{r4, pc}
 8000478:	2b99      	cmp	r3, #153	@ 0x99
 800047a:	dc13      	bgt.n	80004a4 <__aeabi_ui2f+0x58>
 800047c:	1f42      	subs	r2, r0, #5
 800047e:	4094      	lsls	r4, r2
 8000480:	4a14      	ldr	r2, [pc, #80]	@ (80004d4 <__aeabi_ui2f+0x88>)
 8000482:	4022      	ands	r2, r4
 8000484:	0761      	lsls	r1, r4, #29
 8000486:	d01c      	beq.n	80004c2 <__aeabi_ui2f+0x76>
 8000488:	210f      	movs	r1, #15
 800048a:	4021      	ands	r1, r4
 800048c:	2904      	cmp	r1, #4
 800048e:	d018      	beq.n	80004c2 <__aeabi_ui2f+0x76>
 8000490:	3204      	adds	r2, #4
 8000492:	08d4      	lsrs	r4, r2, #3
 8000494:	0152      	lsls	r2, r2, #5
 8000496:	d515      	bpl.n	80004c4 <__aeabi_ui2f+0x78>
 8000498:	239f      	movs	r3, #159	@ 0x9f
 800049a:	0264      	lsls	r4, r4, #9
 800049c:	1a18      	subs	r0, r3, r0
 800049e:	0a64      	lsrs	r4, r4, #9
 80004a0:	b2c0      	uxtb	r0, r0
 80004a2:	e7e6      	b.n	8000472 <__aeabi_ui2f+0x26>
 80004a4:	0002      	movs	r2, r0
 80004a6:	0021      	movs	r1, r4
 80004a8:	321b      	adds	r2, #27
 80004aa:	4091      	lsls	r1, r2
 80004ac:	000a      	movs	r2, r1
 80004ae:	1e51      	subs	r1, r2, #1
 80004b0:	418a      	sbcs	r2, r1
 80004b2:	2105      	movs	r1, #5
 80004b4:	1a09      	subs	r1, r1, r0
 80004b6:	40cc      	lsrs	r4, r1
 80004b8:	4314      	orrs	r4, r2
 80004ba:	4a06      	ldr	r2, [pc, #24]	@ (80004d4 <__aeabi_ui2f+0x88>)
 80004bc:	4022      	ands	r2, r4
 80004be:	0761      	lsls	r1, r4, #29
 80004c0:	d1e2      	bne.n	8000488 <__aeabi_ui2f+0x3c>
 80004c2:	08d4      	lsrs	r4, r2, #3
 80004c4:	0264      	lsls	r4, r4, #9
 80004c6:	0a64      	lsrs	r4, r4, #9
 80004c8:	b2d8      	uxtb	r0, r3
 80004ca:	e7d2      	b.n	8000472 <__aeabi_ui2f+0x26>
 80004cc:	0264      	lsls	r4, r4, #9
 80004ce:	0a64      	lsrs	r4, r4, #9
 80004d0:	308e      	adds	r0, #142	@ 0x8e
 80004d2:	e7ce      	b.n	8000472 <__aeabi_ui2f+0x26>
 80004d4:	fbffffff 	.word	0xfbffffff

080004d8 <__clzsi2>:
 80004d8:	211c      	movs	r1, #28
 80004da:	2301      	movs	r3, #1
 80004dc:	041b      	lsls	r3, r3, #16
 80004de:	4298      	cmp	r0, r3
 80004e0:	d301      	bcc.n	80004e6 <__clzsi2+0xe>
 80004e2:	0c00      	lsrs	r0, r0, #16
 80004e4:	3910      	subs	r1, #16
 80004e6:	0a1b      	lsrs	r3, r3, #8
 80004e8:	4298      	cmp	r0, r3
 80004ea:	d301      	bcc.n	80004f0 <__clzsi2+0x18>
 80004ec:	0a00      	lsrs	r0, r0, #8
 80004ee:	3908      	subs	r1, #8
 80004f0:	091b      	lsrs	r3, r3, #4
 80004f2:	4298      	cmp	r0, r3
 80004f4:	d301      	bcc.n	80004fa <__clzsi2+0x22>
 80004f6:	0900      	lsrs	r0, r0, #4
 80004f8:	3904      	subs	r1, #4
 80004fa:	a202      	add	r2, pc, #8	@ (adr r2, 8000504 <__clzsi2+0x2c>)
 80004fc:	5c10      	ldrb	r0, [r2, r0]
 80004fe:	1840      	adds	r0, r0, r1
 8000500:	4770      	bx	lr
 8000502:	46c0      	nop			@ (mov r8, r8)
 8000504:	02020304 	.word	0x02020304
 8000508:	01010101 	.word	0x01010101
	...

08000514 <apInit>:

bool button_data[BUTTON_MAX_CH];


void apInit(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  ledInit();
 8000518:	f000 f8f8 	bl	800070c <ledInit>
  pwmInit();
 800051c:	f000 f962 	bl	80007e4 <pwmInit>
  adcInit();
 8000520:	f000 f86c 	bl	80005fc <adcInit>
  buttonInit();
 8000524:	f000 f8b3 	bl	800068e <buttonInit>
}
 8000528:	46c0      	nop			@ (mov r8, r8)
 800052a:	46bd      	mov	sp, r7
 800052c:	bd80      	pop	{r7, pc}
	...

08000530 <apMain>:

void apMain(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
  uint32_t pre_time = 0;
 8000536:	2300      	movs	r3, #0
 8000538:	607b      	str	r3, [r7, #4]

  ledSetDuty(_DEF_CH1, 100);
 800053a:	2164      	movs	r1, #100	@ 0x64
 800053c:	2000      	movs	r0, #0
 800053e:	f000 f935 	bl	80007ac <ledSetDuty>
  while(1)
  {
    if(millis()-pre_time >= 500)
 8000542:	f000 f995 	bl	8000870 <millis>
 8000546:	0002      	movs	r2, r0
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	1ad2      	subs	r2, r2, r3
 800054c:	23fa      	movs	r3, #250	@ 0xfa
 800054e:	005b      	lsls	r3, r3, #1
 8000550:	429a      	cmp	r2, r3
 8000552:	d306      	bcc.n	8000562 <apMain+0x32>
    {
      pre_time = millis();
 8000554:	f000 f98c 	bl	8000870 <millis>
 8000558:	0003      	movs	r3, r0
 800055a:	607b      	str	r3, [r7, #4]
      ledToggle(_DEF_CH1);
 800055c:	2000      	movs	r0, #0
 800055e:	f000 f908 	bl	8000772 <ledToggle>
    }


    adc_vol = (float)adcReadVoltage(_DEF_CH1)/100.f;
 8000562:	2000      	movs	r0, #0
 8000564:	f000 f878 	bl	8000658 <adcReadVoltage>
 8000568:	0003      	movs	r3, r0
 800056a:	0018      	movs	r0, r3
 800056c:	f7ff ff6e 	bl	800044c <__aeabi_ui2f>
 8000570:	1c03      	adds	r3, r0, #0
 8000572:	491e      	ldr	r1, [pc, #120]	@ (80005ec <apMain+0xbc>)
 8000574:	1c18      	adds	r0, r3, #0
 8000576:	f7ff fe53 	bl	8000220 <__aeabi_fdiv>
 800057a:	1c03      	adds	r3, r0, #0
 800057c:	1c1a      	adds	r2, r3, #0
 800057e:	4b1c      	ldr	r3, [pc, #112]	@ (80005f0 <apMain+0xc0>)
 8000580:	601a      	str	r2, [r3, #0]
    adc_vol_vref = (float)adcReadVoltage(_DEF_CH3)/100.f;
 8000582:	2002      	movs	r0, #2
 8000584:	f000 f868 	bl	8000658 <adcReadVoltage>
 8000588:	0003      	movs	r3, r0
 800058a:	0018      	movs	r0, r3
 800058c:	f7ff ff5e 	bl	800044c <__aeabi_ui2f>
 8000590:	1c03      	adds	r3, r0, #0
 8000592:	4916      	ldr	r1, [pc, #88]	@ (80005ec <apMain+0xbc>)
 8000594:	1c18      	adds	r0, r3, #0
 8000596:	f7ff fe43 	bl	8000220 <__aeabi_fdiv>
 800059a:	1c03      	adds	r3, r0, #0
 800059c:	1c1a      	adds	r2, r3, #0
 800059e:	4b15      	ldr	r3, [pc, #84]	@ (80005f4 <apMain+0xc4>)
 80005a0:	601a      	str	r2, [r3, #0]


    button_data[_BUTTON_CH_SEL] = buttonGetPressed(_BUTTON_CH_SEL);
 80005a2:	2000      	movs	r0, #0
 80005a4:	f000 f87a 	bl	800069c <buttonGetPressed>
 80005a8:	0003      	movs	r3, r0
 80005aa:	001a      	movs	r2, r3
 80005ac:	4b12      	ldr	r3, [pc, #72]	@ (80005f8 <apMain+0xc8>)
 80005ae:	701a      	strb	r2, [r3, #0]
    button_data[_BUTTON_CH_LEFT] = buttonGetPressed(_BUTTON_CH_LEFT);
 80005b0:	2001      	movs	r0, #1
 80005b2:	f000 f873 	bl	800069c <buttonGetPressed>
 80005b6:	0003      	movs	r3, r0
 80005b8:	001a      	movs	r2, r3
 80005ba:	4b0f      	ldr	r3, [pc, #60]	@ (80005f8 <apMain+0xc8>)
 80005bc:	705a      	strb	r2, [r3, #1]
    button_data[_BUTTON_CH_DOWN] = buttonGetPressed(_BUTTON_CH_DOWN);
 80005be:	2002      	movs	r0, #2
 80005c0:	f000 f86c 	bl	800069c <buttonGetPressed>
 80005c4:	0003      	movs	r3, r0
 80005c6:	001a      	movs	r2, r3
 80005c8:	4b0b      	ldr	r3, [pc, #44]	@ (80005f8 <apMain+0xc8>)
 80005ca:	709a      	strb	r2, [r3, #2]
    button_data[_BUTTON_CH_UP] = buttonGetPressed(_BUTTON_CH_UP);
 80005cc:	2003      	movs	r0, #3
 80005ce:	f000 f865 	bl	800069c <buttonGetPressed>
 80005d2:	0003      	movs	r3, r0
 80005d4:	001a      	movs	r2, r3
 80005d6:	4b08      	ldr	r3, [pc, #32]	@ (80005f8 <apMain+0xc8>)
 80005d8:	70da      	strb	r2, [r3, #3]
    button_data[_BUTTON_CH_RIGHT] = buttonGetPressed(_BUTTON_CH_RIGHT);
 80005da:	2004      	movs	r0, #4
 80005dc:	f000 f85e 	bl	800069c <buttonGetPressed>
 80005e0:	0003      	movs	r3, r0
 80005e2:	001a      	movs	r2, r3
 80005e4:	4b04      	ldr	r3, [pc, #16]	@ (80005f8 <apMain+0xc8>)
 80005e6:	711a      	strb	r2, [r3, #4]
    if(millis()-pre_time >= 500)
 80005e8:	e7ab      	b.n	8000542 <apMain+0x12>
 80005ea:	46c0      	nop			@ (mov r8, r8)
 80005ec:	42c80000 	.word	0x42c80000
 80005f0:	2000002c 	.word	0x2000002c
 80005f4:	20000030 	.word	0x20000030
 80005f8:	20000034 	.word	0x20000034

080005fc <adcInit>:

uint16_t adc_data[3];
//uint32_t adc_time;

bool adcInit(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
  HAL_ADCEx_Calibration_Start(&hadc1);
 8000600:	4b06      	ldr	r3, [pc, #24]	@ (800061c <adcInit+0x20>)
 8000602:	0018      	movs	r0, r3
 8000604:	f001 fc86 	bl	8001f14 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1,(uint32_t *)&adc_data,3);
 8000608:	4905      	ldr	r1, [pc, #20]	@ (8000620 <adcInit+0x24>)
 800060a:	4b04      	ldr	r3, [pc, #16]	@ (800061c <adcInit+0x20>)
 800060c:	2203      	movs	r2, #3
 800060e:	0018      	movs	r0, r3
 8000610:	f001 f808 	bl	8001624 <HAL_ADC_Start_DMA>

  return true;
 8000614:	2301      	movs	r3, #1
}
 8000616:	0018      	movs	r0, r3
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	20000044 	.word	0x20000044
 8000620:	2000003c 	.word	0x2000003c

08000624 <adcRead>:


uint16_t adcRead(uint8_t ch)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b084      	sub	sp, #16
 8000628:	af00      	add	r7, sp, #0
 800062a:	0002      	movs	r2, r0
 800062c:	1dfb      	adds	r3, r7, #7
 800062e:	701a      	strb	r2, [r3, #0]
  uint16_t ret = 0;
 8000630:	200e      	movs	r0, #14
 8000632:	183b      	adds	r3, r7, r0
 8000634:	2200      	movs	r2, #0
 8000636:	801a      	strh	r2, [r3, #0]


  ret = adc_data[ch];
 8000638:	1dfb      	adds	r3, r7, #7
 800063a:	7819      	ldrb	r1, [r3, #0]
 800063c:	183b      	adds	r3, r7, r0
 800063e:	4a05      	ldr	r2, [pc, #20]	@ (8000654 <adcRead+0x30>)
 8000640:	0049      	lsls	r1, r1, #1
 8000642:	5a8a      	ldrh	r2, [r1, r2]
 8000644:	801a      	strh	r2, [r3, #0]


  return ret;
 8000646:	183b      	adds	r3, r7, r0
 8000648:	881b      	ldrh	r3, [r3, #0]

}
 800064a:	0018      	movs	r0, r3
 800064c:	46bd      	mov	sp, r7
 800064e:	b004      	add	sp, #16
 8000650:	bd80      	pop	{r7, pc}
 8000652:	46c0      	nop			@ (mov r8, r8)
 8000654:	2000003c 	.word	0x2000003c

08000658 <adcReadVoltage>:
uint32_t adcReadVoltage(uint8_t ch)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af00      	add	r7, sp, #0
 800065e:	0002      	movs	r2, r0
 8000660:	1dfb      	adds	r3, r7, #7
 8000662:	701a      	strb	r2, [r3, #0]

  uint32_t ret;
  uint32_t adc_data;
  adc_data = adcRead(ch);
 8000664:	1dfb      	adds	r3, r7, #7
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	0018      	movs	r0, r3
 800066a:	f7ff ffdb 	bl	8000624 <adcRead>
 800066e:	0003      	movs	r3, r0
 8000670:	60fb      	str	r3, [r7, #12]


  ret = (330 *adc_data)/ 4096;
 8000672:	68fa      	ldr	r2, [r7, #12]
 8000674:	0013      	movs	r3, r2
 8000676:	009b      	lsls	r3, r3, #2
 8000678:	189b      	adds	r3, r3, r2
 800067a:	015a      	lsls	r2, r3, #5
 800067c:	189b      	adds	r3, r3, r2
 800067e:	005b      	lsls	r3, r3, #1
 8000680:	0b1b      	lsrs	r3, r3, #12
 8000682:	60bb      	str	r3, [r7, #8]

  return ret;
 8000684:	68bb      	ldr	r3, [r7, #8]
}
 8000686:	0018      	movs	r0, r3
 8000688:	46bd      	mov	sp, r7
 800068a:	b004      	add	sp, #16
 800068c:	bd80      	pop	{r7, pc}

0800068e <buttonInit>:




bool buttonInit(void)
{
 800068e:	b580      	push	{r7, lr}
 8000690:	af00      	add	r7, sp, #0
  return true;
 8000692:	2301      	movs	r3, #1
}
 8000694:	0018      	movs	r0, r3
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
	...

0800069c <buttonGetPressed>:

bool buttonGetPressed(uint8_t ch)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b084      	sub	sp, #16
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	0002      	movs	r2, r0
 80006a4:	1dfb      	adds	r3, r7, #7
 80006a6:	701a      	strb	r2, [r3, #0]
  bool ret = false;
 80006a8:	230f      	movs	r3, #15
 80006aa:	18fb      	adds	r3, r7, r3
 80006ac:	2200      	movs	r2, #0
 80006ae:	701a      	strb	r2, [r3, #0]
  uint32_t adc_voltage;

  if(ch>=BUTTON_MAX_CH)
 80006b0:	1dfb      	adds	r3, r7, #7
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	2b04      	cmp	r3, #4
 80006b6:	d901      	bls.n	80006bc <buttonGetPressed+0x20>
    return false;
 80006b8:	2300      	movs	r3, #0
 80006ba:	e020      	b.n	80006fe <buttonGetPressed+0x62>

  adc_voltage = adcReadVoltage(adc_ch);
 80006bc:	2300      	movs	r3, #0
 80006be:	0018      	movs	r0, r3
 80006c0:	f7ff ffca 	bl	8000658 <adcReadVoltage>
 80006c4:	0003      	movs	r3, r0
 80006c6:	60bb      	str	r3, [r7, #8]


  if(adc_voltage >= button_adc[ch].adc_min && adc_voltage <= button_adc[ch].adc_max)
 80006c8:	1dfb      	adds	r3, r7, #7
 80006ca:	781a      	ldrb	r2, [r3, #0]
 80006cc:	4b0e      	ldr	r3, [pc, #56]	@ (8000708 <buttonGetPressed+0x6c>)
 80006ce:	0092      	lsls	r2, r2, #2
 80006d0:	5ad3      	ldrh	r3, [r2, r3]
 80006d2:	001a      	movs	r2, r3
 80006d4:	68bb      	ldr	r3, [r7, #8]
 80006d6:	4293      	cmp	r3, r2
 80006d8:	d30e      	bcc.n	80006f8 <buttonGetPressed+0x5c>
 80006da:	1dfb      	adds	r3, r7, #7
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	4a0a      	ldr	r2, [pc, #40]	@ (8000708 <buttonGetPressed+0x6c>)
 80006e0:	009b      	lsls	r3, r3, #2
 80006e2:	18d3      	adds	r3, r2, r3
 80006e4:	3302      	adds	r3, #2
 80006e6:	881b      	ldrh	r3, [r3, #0]
 80006e8:	001a      	movs	r2, r3
 80006ea:	68bb      	ldr	r3, [r7, #8]
 80006ec:	4293      	cmp	r3, r2
 80006ee:	d803      	bhi.n	80006f8 <buttonGetPressed+0x5c>
  {
      ret = true;
 80006f0:	230f      	movs	r3, #15
 80006f2:	18fb      	adds	r3, r7, r3
 80006f4:	2201      	movs	r2, #1
 80006f6:	701a      	strb	r2, [r3, #0]
  }


  return ret;
 80006f8:	230f      	movs	r3, #15
 80006fa:	18fb      	adds	r3, r7, r3
 80006fc:	781b      	ldrb	r3, [r3, #0]
}
 80006fe:	0018      	movs	r0, r3
 8000700:	46bd      	mov	sp, r7
 8000702:	b004      	add	sp, #16
 8000704:	bd80      	pop	{r7, pc}
 8000706:	46c0      	nop			@ (mov r8, r8)
 8000708:	080040d8 	.word	0x080040d8

0800070c <ledInit>:




bool ledInit(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  return true;
 8000710:	2301      	movs	r3, #1
}
 8000712:	0018      	movs	r0, r3
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}

08000718 <ledOn>:
void ledOn(uint8_t ch)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
 800071e:	0002      	movs	r2, r0
 8000720:	1dfb      	adds	r3, r7, #7
 8000722:	701a      	strb	r2, [r3, #0]
  switch(ch)
 8000724:	1dfb      	adds	r3, r7, #7
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	2b00      	cmp	r3, #0
 800072a:	d109      	bne.n	8000740 <ledOn+0x28>
  {
    case _DEF_CH1:
     pwmWrite(_DEF_CH1,100 - led_duty[_DEF_CH1]);
 800072c:	4b06      	ldr	r3, [pc, #24]	@ (8000748 <ledOn+0x30>)
 800072e:	881b      	ldrh	r3, [r3, #0]
 8000730:	2264      	movs	r2, #100	@ 0x64
 8000732:	1ad3      	subs	r3, r2, r3
 8000734:	b29b      	uxth	r3, r3
 8000736:	0019      	movs	r1, r3
 8000738:	2000      	movs	r0, #0
 800073a:	f000 f861 	bl	8000800 <pwmWrite>
      break;
 800073e:	46c0      	nop			@ (mov r8, r8)
  }

}
 8000740:	46c0      	nop			@ (mov r8, r8)
 8000742:	46bd      	mov	sp, r7
 8000744:	b002      	add	sp, #8
 8000746:	bd80      	pop	{r7, pc}
 8000748:	20000000 	.word	0x20000000

0800074c <ledOff>:
void ledOff(uint8_t ch)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	0002      	movs	r2, r0
 8000754:	1dfb      	adds	r3, r7, #7
 8000756:	701a      	strb	r2, [r3, #0]
  switch(ch)
 8000758:	1dfb      	adds	r3, r7, #7
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	2b00      	cmp	r3, #0
 800075e:	d104      	bne.n	800076a <ledOff+0x1e>
  {
    case _DEF_CH1:
      pwmWrite(_DEF_CH1,100);
 8000760:	2164      	movs	r1, #100	@ 0x64
 8000762:	2000      	movs	r0, #0
 8000764:	f000 f84c 	bl	8000800 <pwmWrite>
      break;
 8000768:	46c0      	nop			@ (mov r8, r8)
  }

}
 800076a:	46c0      	nop			@ (mov r8, r8)
 800076c:	46bd      	mov	sp, r7
 800076e:	b002      	add	sp, #8
 8000770:	bd80      	pop	{r7, pc}

08000772 <ledToggle>:
void ledToggle(uint8_t ch)
{
 8000772:	b580      	push	{r7, lr}
 8000774:	b082      	sub	sp, #8
 8000776:	af00      	add	r7, sp, #0
 8000778:	0002      	movs	r2, r0
 800077a:	1dfb      	adds	r3, r7, #7
 800077c:	701a      	strb	r2, [r3, #0]
  switch(ch)
 800077e:	1dfb      	adds	r3, r7, #7
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	2b00      	cmp	r3, #0
 8000784:	d10d      	bne.n	80007a2 <ledToggle+0x30>
  {
    case _DEF_CH1:
      if(pwmRead(_DEF_CH1) == 100 )
 8000786:	2000      	movs	r0, #0
 8000788:	f000 f854 	bl	8000834 <pwmRead>
 800078c:	0003      	movs	r3, r0
 800078e:	2b64      	cmp	r3, #100	@ 0x64
 8000790:	d103      	bne.n	800079a <ledToggle+0x28>
        ledOn(_DEF_CH1);
 8000792:	2000      	movs	r0, #0
 8000794:	f7ff ffc0 	bl	8000718 <ledOn>
      else
        ledOff(_DEF_CH1);
      break;
 8000798:	e002      	b.n	80007a0 <ledToggle+0x2e>
        ledOff(_DEF_CH1);
 800079a:	2000      	movs	r0, #0
 800079c:	f7ff ffd6 	bl	800074c <ledOff>
      break;
 80007a0:	46c0      	nop			@ (mov r8, r8)
  }

}
 80007a2:	46c0      	nop			@ (mov r8, r8)
 80007a4:	46bd      	mov	sp, r7
 80007a6:	b002      	add	sp, #8
 80007a8:	bd80      	pop	{r7, pc}
	...

080007ac <ledSetDuty>:

void ledSetDuty(uint8_t ch,uint16_t duty_data)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	0002      	movs	r2, r0
 80007b4:	1dfb      	adds	r3, r7, #7
 80007b6:	701a      	strb	r2, [r3, #0]
 80007b8:	1d3b      	adds	r3, r7, #4
 80007ba:	1c0a      	adds	r2, r1, #0
 80007bc:	801a      	strh	r2, [r3, #0]
  switch(ch)
 80007be:	1dfb      	adds	r3, r7, #7
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d107      	bne.n	80007d6 <ledSetDuty+0x2a>
    {
      case _DEF_CH1:
        led_duty[ch] = duty_data;
 80007c6:	1dfb      	adds	r3, r7, #7
 80007c8:	781a      	ldrb	r2, [r3, #0]
 80007ca:	4b05      	ldr	r3, [pc, #20]	@ (80007e0 <ledSetDuty+0x34>)
 80007cc:	0052      	lsls	r2, r2, #1
 80007ce:	1d39      	adds	r1, r7, #4
 80007d0:	8809      	ldrh	r1, [r1, #0]
 80007d2:	52d1      	strh	r1, [r2, r3]
        break;
 80007d4:	46c0      	nop			@ (mov r8, r8)
    }
}
 80007d6:	46c0      	nop			@ (mov r8, r8)
 80007d8:	46bd      	mov	sp, r7
 80007da:	b002      	add	sp, #8
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	46c0      	nop			@ (mov r8, r8)
 80007e0:	20000000 	.word	0x20000000

080007e4 <pwmInit>:




bool pwmInit(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80007e8:	4b04      	ldr	r3, [pc, #16]	@ (80007fc <pwmInit+0x18>)
 80007ea:	2100      	movs	r1, #0
 80007ec:	0018      	movs	r0, r3
 80007ee:	f002 fd23 	bl	8003238 <HAL_TIM_PWM_Start>

  return true;
 80007f2:	2301      	movs	r3, #1
}
 80007f4:	0018      	movs	r0, r3
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	46c0      	nop			@ (mov r8, r8)
 80007fc:	20000104 	.word	0x20000104

08000800 <pwmWrite>:
void pwmWrite(uint8_t ch,uint16_t duty)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	0002      	movs	r2, r0
 8000808:	1dfb      	adds	r3, r7, #7
 800080a:	701a      	strb	r2, [r3, #0]
 800080c:	1d3b      	adds	r3, r7, #4
 800080e:	1c0a      	adds	r2, r1, #0
 8000810:	801a      	strh	r2, [r3, #0]
  switch(ch)
 8000812:	1dfb      	adds	r3, r7, #7
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	2b00      	cmp	r3, #0
 8000818:	d105      	bne.n	8000826 <pwmWrite+0x26>
  {
    case _DEF_CH1:
      htim1.Instance->CCR1 = duty;
 800081a:	4b05      	ldr	r3, [pc, #20]	@ (8000830 <pwmWrite+0x30>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	1d3a      	adds	r2, r7, #4
 8000820:	8812      	ldrh	r2, [r2, #0]
 8000822:	635a      	str	r2, [r3, #52]	@ 0x34
      break;
 8000824:	46c0      	nop			@ (mov r8, r8)
  }

}
 8000826:	46c0      	nop			@ (mov r8, r8)
 8000828:	46bd      	mov	sp, r7
 800082a:	b002      	add	sp, #8
 800082c:	bd80      	pop	{r7, pc}
 800082e:	46c0      	nop			@ (mov r8, r8)
 8000830:	20000104 	.word	0x20000104

08000834 <pwmRead>:
uint16_t pwmRead(uint8_t ch)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b084      	sub	sp, #16
 8000838:	af00      	add	r7, sp, #0
 800083a:	0002      	movs	r2, r0
 800083c:	1dfb      	adds	r3, r7, #7
 800083e:	701a      	strb	r2, [r3, #0]
  uint16_t pwm_data = 0;
 8000840:	210e      	movs	r1, #14
 8000842:	187b      	adds	r3, r7, r1
 8000844:	2200      	movs	r2, #0
 8000846:	801a      	strh	r2, [r3, #0]

  switch(ch)
 8000848:	1dfb      	adds	r3, r7, #7
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d105      	bne.n	800085c <pwmRead+0x28>
    {
      case _DEF_CH1:
        pwm_data = htim1.Instance->CCR1;
 8000850:	4b06      	ldr	r3, [pc, #24]	@ (800086c <pwmRead+0x38>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000856:	187b      	adds	r3, r7, r1
 8000858:	801a      	strh	r2, [r3, #0]
        break;
 800085a:	46c0      	nop			@ (mov r8, r8)
    }

  return pwm_data;
 800085c:	230e      	movs	r3, #14
 800085e:	18fb      	adds	r3, r7, r3
 8000860:	881b      	ldrh	r3, [r3, #0]
}
 8000862:	0018      	movs	r0, r3
 8000864:	46bd      	mov	sp, r7
 8000866:	b004      	add	sp, #16
 8000868:	bd80      	pop	{r7, pc}
 800086a:	46c0      	nop			@ (mov r8, r8)
 800086c:	20000104 	.word	0x20000104

08000870 <millis>:
{
  HAL_Delay(time_ms);
}

uint32_t millis(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8000874:	f000 fbce 	bl	8001014 <HAL_GetTick>
 8000878:	0003      	movs	r3, r0
}
 800087a:	0018      	movs	r0, r3
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}

08000880 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000884:	f000 fb4a 	bl	8000f1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000888:	f000 f80e 	bl	80008a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800088c:	f000 f9d0 	bl	8000c30 <MX_GPIO_Init>
  MX_DMA_Init();
 8000890:	f000 f9b8 	bl	8000c04 <MX_DMA_Init>
  MX_TIM1_Init();
 8000894:	f000 f8ec 	bl	8000a70 <MX_TIM1_Init>
  MX_ADC1_Init();
 8000898:	f000 f854 	bl	8000944 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  apInit();
 800089c:	f7ff fe3a 	bl	8000514 <apInit>
  apMain();
 80008a0:	f7ff fe46 	bl	8000530 <apMain>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008a4:	46c0      	nop			@ (mov r8, r8)
 80008a6:	e7fd      	b.n	80008a4 <main+0x24>

080008a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008a8:	b590      	push	{r4, r7, lr}
 80008aa:	b08d      	sub	sp, #52	@ 0x34
 80008ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ae:	2414      	movs	r4, #20
 80008b0:	193b      	adds	r3, r7, r4
 80008b2:	0018      	movs	r0, r3
 80008b4:	231c      	movs	r3, #28
 80008b6:	001a      	movs	r2, r3
 80008b8:	2100      	movs	r1, #0
 80008ba:	f003 fb97 	bl	8003fec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008be:	003b      	movs	r3, r7
 80008c0:	0018      	movs	r0, r3
 80008c2:	2314      	movs	r3, #20
 80008c4:	001a      	movs	r2, r3
 80008c6:	2100      	movs	r1, #0
 80008c8:	f003 fb90 	bl	8003fec <memset>

  __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_1);
 80008cc:	4b1c      	ldr	r3, [pc, #112]	@ (8000940 <SystemClock_Config+0x98>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	2207      	movs	r2, #7
 80008d2:	4393      	bics	r3, r2
 80008d4:	001a      	movs	r2, r3
 80008d6:	4b1a      	ldr	r3, [pc, #104]	@ (8000940 <SystemClock_Config+0x98>)
 80008d8:	2101      	movs	r1, #1
 80008da:	430a      	orrs	r2, r1
 80008dc:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008de:	193b      	adds	r3, r7, r4
 80008e0:	2202      	movs	r2, #2
 80008e2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008e4:	193b      	adds	r3, r7, r4
 80008e6:	2280      	movs	r2, #128	@ 0x80
 80008e8:	0052      	lsls	r2, r2, #1
 80008ea:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80008ec:	193b      	adds	r3, r7, r4
 80008ee:	2200      	movs	r2, #0
 80008f0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008f2:	193b      	adds	r3, r7, r4
 80008f4:	2240      	movs	r2, #64	@ 0x40
 80008f6:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008f8:	193b      	adds	r3, r7, r4
 80008fa:	0018      	movs	r0, r3
 80008fc:	f001 ffd2 	bl	80028a4 <HAL_RCC_OscConfig>
 8000900:	1e03      	subs	r3, r0, #0
 8000902:	d001      	beq.n	8000908 <SystemClock_Config+0x60>
  {
    Error_Handler();
 8000904:	f000 f9aa 	bl	8000c5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000908:	003b      	movs	r3, r7
 800090a:	2207      	movs	r2, #7
 800090c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800090e:	003b      	movs	r3, r7
 8000910:	2200      	movs	r2, #0
 8000912:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000914:	003b      	movs	r3, r7
 8000916:	2200      	movs	r2, #0
 8000918:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800091a:	003b      	movs	r3, r7
 800091c:	2200      	movs	r2, #0
 800091e:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000920:	003b      	movs	r3, r7
 8000922:	2200      	movs	r2, #0
 8000924:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000926:	003b      	movs	r3, r7
 8000928:	2101      	movs	r1, #1
 800092a:	0018      	movs	r0, r3
 800092c:	f002 f99e 	bl	8002c6c <HAL_RCC_ClockConfig>
 8000930:	1e03      	subs	r3, r0, #0
 8000932:	d001      	beq.n	8000938 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000934:	f000 f992 	bl	8000c5c <Error_Handler>
  }
}
 8000938:	46c0      	nop			@ (mov r8, r8)
 800093a:	46bd      	mov	sp, r7
 800093c:	b00d      	add	sp, #52	@ 0x34
 800093e:	bd90      	pop	{r4, r7, pc}
 8000940:	40022000 	.word	0x40022000

08000944 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b084      	sub	sp, #16
 8000948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800094a:	1d3b      	adds	r3, r7, #4
 800094c:	0018      	movs	r0, r3
 800094e:	230c      	movs	r3, #12
 8000950:	001a      	movs	r2, r3
 8000952:	2100      	movs	r1, #0
 8000954:	f003 fb4a 	bl	8003fec <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000958:	4b40      	ldr	r3, [pc, #256]	@ (8000a5c <MX_ADC1_Init+0x118>)
 800095a:	4a41      	ldr	r2, [pc, #260]	@ (8000a60 <MX_ADC1_Init+0x11c>)
 800095c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800095e:	4b3f      	ldr	r3, [pc, #252]	@ (8000a5c <MX_ADC1_Init+0x118>)
 8000960:	2280      	movs	r2, #128	@ 0x80
 8000962:	05d2      	lsls	r2, r2, #23
 8000964:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000966:	4b3d      	ldr	r3, [pc, #244]	@ (8000a5c <MX_ADC1_Init+0x118>)
 8000968:	2200      	movs	r2, #0
 800096a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800096c:	4b3b      	ldr	r3, [pc, #236]	@ (8000a5c <MX_ADC1_Init+0x118>)
 800096e:	2200      	movs	r2, #0
 8000970:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000972:	4b3a      	ldr	r3, [pc, #232]	@ (8000a5c <MX_ADC1_Init+0x118>)
 8000974:	2280      	movs	r2, #128	@ 0x80
 8000976:	0392      	lsls	r2, r2, #14
 8000978:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800097a:	4b38      	ldr	r3, [pc, #224]	@ (8000a5c <MX_ADC1_Init+0x118>)
 800097c:	2204      	movs	r2, #4
 800097e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000980:	4b36      	ldr	r3, [pc, #216]	@ (8000a5c <MX_ADC1_Init+0x118>)
 8000982:	2200      	movs	r2, #0
 8000984:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000986:	4b35      	ldr	r3, [pc, #212]	@ (8000a5c <MX_ADC1_Init+0x118>)
 8000988:	2200      	movs	r2, #0
 800098a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800098c:	4b33      	ldr	r3, [pc, #204]	@ (8000a5c <MX_ADC1_Init+0x118>)
 800098e:	2201      	movs	r2, #1
 8000990:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 3;
 8000992:	4b32      	ldr	r3, [pc, #200]	@ (8000a5c <MX_ADC1_Init+0x118>)
 8000994:	2203      	movs	r2, #3
 8000996:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000998:	4b30      	ldr	r3, [pc, #192]	@ (8000a5c <MX_ADC1_Init+0x118>)
 800099a:	2200      	movs	r2, #0
 800099c:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800099e:	4b2f      	ldr	r3, [pc, #188]	@ (8000a5c <MX_ADC1_Init+0x118>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80009a4:	4b2d      	ldr	r3, [pc, #180]	@ (8000a5c <MX_ADC1_Init+0x118>)
 80009a6:	222c      	movs	r2, #44	@ 0x2c
 80009a8:	2101      	movs	r1, #1
 80009aa:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80009ac:	4b2b      	ldr	r3, [pc, #172]	@ (8000a5c <MX_ADC1_Init+0x118>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 80009b2:	4b2a      	ldr	r3, [pc, #168]	@ (8000a5c <MX_ADC1_Init+0x118>)
 80009b4:	2207      	movs	r2, #7
 80009b6:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 80009b8:	4b28      	ldr	r3, [pc, #160]	@ (8000a5c <MX_ADC1_Init+0x118>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = ENABLE;
 80009be:	4b27      	ldr	r3, [pc, #156]	@ (8000a5c <MX_ADC1_Init+0x118>)
 80009c0:	223c      	movs	r2, #60	@ 0x3c
 80009c2:	2101      	movs	r1, #1
 80009c4:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_8;
 80009c6:	4b25      	ldr	r3, [pc, #148]	@ (8000a5c <MX_ADC1_Init+0x118>)
 80009c8:	2208      	movs	r2, #8
 80009ca:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_3;
 80009cc:	4b23      	ldr	r3, [pc, #140]	@ (8000a5c <MX_ADC1_Init+0x118>)
 80009ce:	2260      	movs	r2, #96	@ 0x60
 80009d0:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 80009d2:	4b22      	ldr	r3, [pc, #136]	@ (8000a5c <MX_ADC1_Init+0x118>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80009d8:	4b20      	ldr	r3, [pc, #128]	@ (8000a5c <MX_ADC1_Init+0x118>)
 80009da:	2200      	movs	r2, #0
 80009dc:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009de:	4b1f      	ldr	r3, [pc, #124]	@ (8000a5c <MX_ADC1_Init+0x118>)
 80009e0:	0018      	movs	r0, r3
 80009e2:	f000 fc79 	bl	80012d8 <HAL_ADC_Init>
 80009e6:	1e03      	subs	r3, r0, #0
 80009e8:	d001      	beq.n	80009ee <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 80009ea:	f000 f937 	bl	8000c5c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80009ee:	1d3b      	adds	r3, r7, #4
 80009f0:	4a1c      	ldr	r2, [pc, #112]	@ (8000a64 <MX_ADC1_Init+0x120>)
 80009f2:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009f4:	1d3b      	adds	r3, r7, #4
 80009f6:	2200      	movs	r2, #0
 80009f8:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80009fa:	1d3b      	adds	r3, r7, #4
 80009fc:	2200      	movs	r2, #0
 80009fe:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a00:	1d3a      	adds	r2, r7, #4
 8000a02:	4b16      	ldr	r3, [pc, #88]	@ (8000a5c <MX_ADC1_Init+0x118>)
 8000a04:	0011      	movs	r1, r2
 8000a06:	0018      	movs	r0, r3
 8000a08:	f000 feb2 	bl	8001770 <HAL_ADC_ConfigChannel>
 8000a0c:	1e03      	subs	r3, r0, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 8000a10:	f000 f924 	bl	8000c5c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000a14:	1d3b      	adds	r3, r7, #4
 8000a16:	4a14      	ldr	r2, [pc, #80]	@ (8000a68 <MX_ADC1_Init+0x124>)
 8000a18:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000a1a:	1d3b      	adds	r3, r7, #4
 8000a1c:	2204      	movs	r2, #4
 8000a1e:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a20:	1d3a      	adds	r2, r7, #4
 8000a22:	4b0e      	ldr	r3, [pc, #56]	@ (8000a5c <MX_ADC1_Init+0x118>)
 8000a24:	0011      	movs	r1, r2
 8000a26:	0018      	movs	r0, r3
 8000a28:	f000 fea2 	bl	8001770 <HAL_ADC_ConfigChannel>
 8000a2c:	1e03      	subs	r3, r0, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_ADC1_Init+0xf0>
  {
    Error_Handler();
 8000a30:	f000 f914 	bl	8000c5c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000a34:	1d3b      	adds	r3, r7, #4
 8000a36:	4a0d      	ldr	r2, [pc, #52]	@ (8000a6c <MX_ADC1_Init+0x128>)
 8000a38:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000a3a:	1d3b      	adds	r3, r7, #4
 8000a3c:	2208      	movs	r2, #8
 8000a3e:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a40:	1d3a      	adds	r2, r7, #4
 8000a42:	4b06      	ldr	r3, [pc, #24]	@ (8000a5c <MX_ADC1_Init+0x118>)
 8000a44:	0011      	movs	r1, r2
 8000a46:	0018      	movs	r0, r3
 8000a48:	f000 fe92 	bl	8001770 <HAL_ADC_ConfigChannel>
 8000a4c:	1e03      	subs	r3, r0, #0
 8000a4e:	d001      	beq.n	8000a54 <MX_ADC1_Init+0x110>
  {
    Error_Handler();
 8000a50:	f000 f904 	bl	8000c5c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a54:	46c0      	nop			@ (mov r8, r8)
 8000a56:	46bd      	mov	sp, r7
 8000a58:	b004      	add	sp, #16
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	20000044 	.word	0x20000044
 8000a60:	40012400 	.word	0x40012400
 8000a64:	10000010 	.word	0x10000010
 8000a68:	a4000200 	.word	0xa4000200
 8000a6c:	a8000400 	.word	0xa8000400

08000a70 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b09c      	sub	sp, #112	@ 0x70
 8000a74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a76:	2360      	movs	r3, #96	@ 0x60
 8000a78:	18fb      	adds	r3, r7, r3
 8000a7a:	0018      	movs	r0, r3
 8000a7c:	2310      	movs	r3, #16
 8000a7e:	001a      	movs	r2, r3
 8000a80:	2100      	movs	r1, #0
 8000a82:	f003 fab3 	bl	8003fec <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a86:	2354      	movs	r3, #84	@ 0x54
 8000a88:	18fb      	adds	r3, r7, r3
 8000a8a:	0018      	movs	r0, r3
 8000a8c:	230c      	movs	r3, #12
 8000a8e:	001a      	movs	r2, r3
 8000a90:	2100      	movs	r1, #0
 8000a92:	f003 faab 	bl	8003fec <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a96:	2338      	movs	r3, #56	@ 0x38
 8000a98:	18fb      	adds	r3, r7, r3
 8000a9a:	0018      	movs	r0, r3
 8000a9c:	231c      	movs	r3, #28
 8000a9e:	001a      	movs	r2, r3
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	f003 faa3 	bl	8003fec <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000aa6:	1d3b      	adds	r3, r7, #4
 8000aa8:	0018      	movs	r0, r3
 8000aaa:	2334      	movs	r3, #52	@ 0x34
 8000aac:	001a      	movs	r2, r3
 8000aae:	2100      	movs	r1, #0
 8000ab0:	f003 fa9c 	bl	8003fec <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ab4:	4b51      	ldr	r3, [pc, #324]	@ (8000bfc <MX_TIM1_Init+0x18c>)
 8000ab6:	4a52      	ldr	r2, [pc, #328]	@ (8000c00 <MX_TIM1_Init+0x190>)
 8000ab8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 47;
 8000aba:	4b50      	ldr	r3, [pc, #320]	@ (8000bfc <MX_TIM1_Init+0x18c>)
 8000abc:	222f      	movs	r2, #47	@ 0x2f
 8000abe:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ac0:	4b4e      	ldr	r3, [pc, #312]	@ (8000bfc <MX_TIM1_Init+0x18c>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 8000ac6:	4b4d      	ldr	r3, [pc, #308]	@ (8000bfc <MX_TIM1_Init+0x18c>)
 8000ac8:	2263      	movs	r2, #99	@ 0x63
 8000aca:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000acc:	4b4b      	ldr	r3, [pc, #300]	@ (8000bfc <MX_TIM1_Init+0x18c>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ad2:	4b4a      	ldr	r3, [pc, #296]	@ (8000bfc <MX_TIM1_Init+0x18c>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ad8:	4b48      	ldr	r3, [pc, #288]	@ (8000bfc <MX_TIM1_Init+0x18c>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ade:	4b47      	ldr	r3, [pc, #284]	@ (8000bfc <MX_TIM1_Init+0x18c>)
 8000ae0:	0018      	movs	r0, r3
 8000ae2:	f002 faf1 	bl	80030c8 <HAL_TIM_Base_Init>
 8000ae6:	1e03      	subs	r3, r0, #0
 8000ae8:	d001      	beq.n	8000aee <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8000aea:	f000 f8b7 	bl	8000c5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000aee:	2160      	movs	r1, #96	@ 0x60
 8000af0:	187b      	adds	r3, r7, r1
 8000af2:	2280      	movs	r2, #128	@ 0x80
 8000af4:	0152      	lsls	r2, r2, #5
 8000af6:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000af8:	187a      	adds	r2, r7, r1
 8000afa:	4b40      	ldr	r3, [pc, #256]	@ (8000bfc <MX_TIM1_Init+0x18c>)
 8000afc:	0011      	movs	r1, r2
 8000afe:	0018      	movs	r0, r3
 8000b00:	f002 fcd2 	bl	80034a8 <HAL_TIM_ConfigClockSource>
 8000b04:	1e03      	subs	r3, r0, #0
 8000b06:	d001      	beq.n	8000b0c <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8000b08:	f000 f8a8 	bl	8000c5c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000b0c:	4b3b      	ldr	r3, [pc, #236]	@ (8000bfc <MX_TIM1_Init+0x18c>)
 8000b0e:	0018      	movs	r0, r3
 8000b10:	f002 fb32 	bl	8003178 <HAL_TIM_OC_Init>
 8000b14:	1e03      	subs	r3, r0, #0
 8000b16:	d001      	beq.n	8000b1c <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8000b18:	f000 f8a0 	bl	8000c5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b1c:	2154      	movs	r1, #84	@ 0x54
 8000b1e:	187b      	adds	r3, r7, r1
 8000b20:	2200      	movs	r2, #0
 8000b22:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b24:	187b      	adds	r3, r7, r1
 8000b26:	2200      	movs	r2, #0
 8000b28:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b2a:	187b      	adds	r3, r7, r1
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b30:	187a      	adds	r2, r7, r1
 8000b32:	4b32      	ldr	r3, [pc, #200]	@ (8000bfc <MX_TIM1_Init+0x18c>)
 8000b34:	0011      	movs	r1, r2
 8000b36:	0018      	movs	r0, r3
 8000b38:	f003 f95a 	bl	8003df0 <HAL_TIMEx_MasterConfigSynchronization>
 8000b3c:	1e03      	subs	r3, r0, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8000b40:	f000 f88c 	bl	8000c5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000b44:	2138      	movs	r1, #56	@ 0x38
 8000b46:	187b      	adds	r3, r7, r1
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000b4c:	187b      	adds	r3, r7, r1
 8000b4e:	2200      	movs	r2, #0
 8000b50:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b52:	187b      	adds	r3, r7, r1
 8000b54:	2200      	movs	r2, #0
 8000b56:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b58:	187b      	adds	r3, r7, r1
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b5e:	187b      	adds	r3, r7, r1
 8000b60:	2200      	movs	r2, #0
 8000b62:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b64:	187b      	adds	r3, r7, r1
 8000b66:	2200      	movs	r2, #0
 8000b68:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b6a:	187b      	adds	r3, r7, r1
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b70:	1879      	adds	r1, r7, r1
 8000b72:	4b22      	ldr	r3, [pc, #136]	@ (8000bfc <MX_TIM1_Init+0x18c>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	0018      	movs	r0, r3
 8000b78:	f002 fc36 	bl	80033e8 <HAL_TIM_OC_ConfigChannel>
 8000b7c:	1e03      	subs	r3, r0, #0
 8000b7e:	d001      	beq.n	8000b84 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8000b80:	f000 f86c 	bl	8000c5c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b84:	1d3b      	adds	r3, r7, #4
 8000b86:	2200      	movs	r2, #0
 8000b88:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b8a:	1d3b      	adds	r3, r7, #4
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b90:	1d3b      	adds	r3, r7, #4
 8000b92:	2200      	movs	r2, #0
 8000b94:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b96:	1d3b      	adds	r3, r7, #4
 8000b98:	2200      	movs	r2, #0
 8000b9a:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b9c:	1d3b      	adds	r3, r7, #4
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ba2:	1d3b      	adds	r3, r7, #4
 8000ba4:	2280      	movs	r2, #128	@ 0x80
 8000ba6:	0192      	lsls	r2, r2, #6
 8000ba8:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000baa:	1d3b      	adds	r3, r7, #4
 8000bac:	2200      	movs	r2, #0
 8000bae:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000bb0:	1d3b      	adds	r3, r7, #4
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000bb6:	1d3b      	adds	r3, r7, #4
 8000bb8:	2200      	movs	r2, #0
 8000bba:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000bbc:	1d3b      	adds	r3, r7, #4
 8000bbe:	2280      	movs	r2, #128	@ 0x80
 8000bc0:	0492      	lsls	r2, r2, #18
 8000bc2:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000bc4:	1d3b      	adds	r3, r7, #4
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000bca:	1d3b      	adds	r3, r7, #4
 8000bcc:	2200      	movs	r2, #0
 8000bce:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000bd0:	1d3b      	adds	r3, r7, #4
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000bd6:	1d3a      	adds	r2, r7, #4
 8000bd8:	4b08      	ldr	r3, [pc, #32]	@ (8000bfc <MX_TIM1_Init+0x18c>)
 8000bda:	0011      	movs	r1, r2
 8000bdc:	0018      	movs	r0, r3
 8000bde:	f003 f969 	bl	8003eb4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000be2:	1e03      	subs	r3, r0, #0
 8000be4:	d001      	beq.n	8000bea <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 8000be6:	f000 f839 	bl	8000c5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000bea:	4b04      	ldr	r3, [pc, #16]	@ (8000bfc <MX_TIM1_Init+0x18c>)
 8000bec:	0018      	movs	r0, r3
 8000bee:	f000 f909 	bl	8000e04 <HAL_TIM_MspPostInit>

}
 8000bf2:	46c0      	nop			@ (mov r8, r8)
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	b01c      	add	sp, #112	@ 0x70
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	46c0      	nop			@ (mov r8, r8)
 8000bfc:	20000104 	.word	0x20000104
 8000c00:	40012c00 	.word	0x40012c00

08000c04 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c0a:	4b08      	ldr	r3, [pc, #32]	@ (8000c2c <MX_DMA_Init+0x28>)
 8000c0c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000c0e:	4b07      	ldr	r3, [pc, #28]	@ (8000c2c <MX_DMA_Init+0x28>)
 8000c10:	2101      	movs	r1, #1
 8000c12:	430a      	orrs	r2, r1
 8000c14:	639a      	str	r2, [r3, #56]	@ 0x38
 8000c16:	4b05      	ldr	r3, [pc, #20]	@ (8000c2c <MX_DMA_Init+0x28>)
 8000c18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	607b      	str	r3, [r7, #4]
 8000c20:	687b      	ldr	r3, [r7, #4]

}
 8000c22:	46c0      	nop			@ (mov r8, r8)
 8000c24:	46bd      	mov	sp, r7
 8000c26:	b002      	add	sp, #8
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	46c0      	nop			@ (mov r8, r8)
 8000c2c:	40021000 	.word	0x40021000

08000c30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c36:	4b08      	ldr	r3, [pc, #32]	@ (8000c58 <MX_GPIO_Init+0x28>)
 8000c38:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000c3a:	4b07      	ldr	r3, [pc, #28]	@ (8000c58 <MX_GPIO_Init+0x28>)
 8000c3c:	2101      	movs	r1, #1
 8000c3e:	430a      	orrs	r2, r1
 8000c40:	635a      	str	r2, [r3, #52]	@ 0x34
 8000c42:	4b05      	ldr	r3, [pc, #20]	@ (8000c58 <MX_GPIO_Init+0x28>)
 8000c44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c46:	2201      	movs	r2, #1
 8000c48:	4013      	ands	r3, r2
 8000c4a:	607b      	str	r3, [r7, #4]
 8000c4c:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000c4e:	46c0      	nop			@ (mov r8, r8)
 8000c50:	46bd      	mov	sp, r7
 8000c52:	b002      	add	sp, #8
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	46c0      	nop			@ (mov r8, r8)
 8000c58:	40021000 	.word	0x40021000

08000c5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c60:	b672      	cpsid	i
}
 8000c62:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c64:	46c0      	nop			@ (mov r8, r8)
 8000c66:	e7fd      	b.n	8000c64 <Error_Handler+0x8>

08000c68 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c6e:	4b0f      	ldr	r3, [pc, #60]	@ (8000cac <HAL_MspInit+0x44>)
 8000c70:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000c72:	4b0e      	ldr	r3, [pc, #56]	@ (8000cac <HAL_MspInit+0x44>)
 8000c74:	2101      	movs	r1, #1
 8000c76:	430a      	orrs	r2, r1
 8000c78:	641a      	str	r2, [r3, #64]	@ 0x40
 8000c7a:	4b0c      	ldr	r3, [pc, #48]	@ (8000cac <HAL_MspInit+0x44>)
 8000c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c7e:	2201      	movs	r2, #1
 8000c80:	4013      	ands	r3, r2
 8000c82:	607b      	str	r3, [r7, #4]
 8000c84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c86:	4b09      	ldr	r3, [pc, #36]	@ (8000cac <HAL_MspInit+0x44>)
 8000c88:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000c8a:	4b08      	ldr	r3, [pc, #32]	@ (8000cac <HAL_MspInit+0x44>)
 8000c8c:	2180      	movs	r1, #128	@ 0x80
 8000c8e:	0549      	lsls	r1, r1, #21
 8000c90:	430a      	orrs	r2, r1
 8000c92:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000c94:	4b05      	ldr	r3, [pc, #20]	@ (8000cac <HAL_MspInit+0x44>)
 8000c96:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000c98:	2380      	movs	r3, #128	@ 0x80
 8000c9a:	055b      	lsls	r3, r3, #21
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	603b      	str	r3, [r7, #0]
 8000ca0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ca2:	46c0      	nop			@ (mov r8, r8)
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	b002      	add	sp, #8
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	46c0      	nop			@ (mov r8, r8)
 8000cac:	40021000 	.word	0x40021000

08000cb0 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000cb0:	b590      	push	{r4, r7, lr}
 8000cb2:	b091      	sub	sp, #68	@ 0x44
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb8:	232c      	movs	r3, #44	@ 0x2c
 8000cba:	18fb      	adds	r3, r7, r3
 8000cbc:	0018      	movs	r0, r3
 8000cbe:	2314      	movs	r3, #20
 8000cc0:	001a      	movs	r2, r3
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	f003 f992 	bl	8003fec <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cc8:	2410      	movs	r4, #16
 8000cca:	193b      	adds	r3, r7, r4
 8000ccc:	0018      	movs	r0, r3
 8000cce:	231c      	movs	r3, #28
 8000cd0:	001a      	movs	r2, r3
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	f003 f98a 	bl	8003fec <memset>
  if(hadc->Instance==ADC1)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a35      	ldr	r2, [pc, #212]	@ (8000db4 <HAL_ADC_MspInit+0x104>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d163      	bne.n	8000daa <HAL_ADC_MspInit+0xfa>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000ce2:	193b      	adds	r3, r7, r4
 8000ce4:	2220      	movs	r2, #32
 8000ce6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000ce8:	193b      	adds	r3, r7, r4
 8000cea:	2200      	movs	r2, #0
 8000cec:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cee:	193b      	adds	r3, r7, r4
 8000cf0:	0018      	movs	r0, r3
 8000cf2:	f002 f8fd 	bl	8002ef0 <HAL_RCCEx_PeriphCLKConfig>
 8000cf6:	1e03      	subs	r3, r0, #0
 8000cf8:	d001      	beq.n	8000cfe <HAL_ADC_MspInit+0x4e>
    {
      Error_Handler();
 8000cfa:	f7ff ffaf 	bl	8000c5c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000cfe:	4b2e      	ldr	r3, [pc, #184]	@ (8000db8 <HAL_ADC_MspInit+0x108>)
 8000d00:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000d02:	4b2d      	ldr	r3, [pc, #180]	@ (8000db8 <HAL_ADC_MspInit+0x108>)
 8000d04:	2180      	movs	r1, #128	@ 0x80
 8000d06:	0349      	lsls	r1, r1, #13
 8000d08:	430a      	orrs	r2, r1
 8000d0a:	641a      	str	r2, [r3, #64]	@ 0x40
 8000d0c:	4b2a      	ldr	r3, [pc, #168]	@ (8000db8 <HAL_ADC_MspInit+0x108>)
 8000d0e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000d10:	2380      	movs	r3, #128	@ 0x80
 8000d12:	035b      	lsls	r3, r3, #13
 8000d14:	4013      	ands	r3, r2
 8000d16:	60fb      	str	r3, [r7, #12]
 8000d18:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d1a:	4b27      	ldr	r3, [pc, #156]	@ (8000db8 <HAL_ADC_MspInit+0x108>)
 8000d1c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000d1e:	4b26      	ldr	r3, [pc, #152]	@ (8000db8 <HAL_ADC_MspInit+0x108>)
 8000d20:	2101      	movs	r1, #1
 8000d22:	430a      	orrs	r2, r1
 8000d24:	635a      	str	r2, [r3, #52]	@ 0x34
 8000d26:	4b24      	ldr	r3, [pc, #144]	@ (8000db8 <HAL_ADC_MspInit+0x108>)
 8000d28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	60bb      	str	r3, [r7, #8]
 8000d30:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000d32:	212c      	movs	r1, #44	@ 0x2c
 8000d34:	187b      	adds	r3, r7, r1
 8000d36:	2210      	movs	r2, #16
 8000d38:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d3a:	187b      	adds	r3, r7, r1
 8000d3c:	2203      	movs	r2, #3
 8000d3e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d40:	187b      	adds	r3, r7, r1
 8000d42:	2200      	movs	r2, #0
 8000d44:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d46:	187a      	adds	r2, r7, r1
 8000d48:	23a0      	movs	r3, #160	@ 0xa0
 8000d4a:	05db      	lsls	r3, r3, #23
 8000d4c:	0011      	movs	r1, r2
 8000d4e:	0018      	movs	r0, r3
 8000d50:	f001 fc36 	bl	80025c0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000d54:	4b19      	ldr	r3, [pc, #100]	@ (8000dbc <HAL_ADC_MspInit+0x10c>)
 8000d56:	4a1a      	ldr	r2, [pc, #104]	@ (8000dc0 <HAL_ADC_MspInit+0x110>)
 8000d58:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000d5a:	4b18      	ldr	r3, [pc, #96]	@ (8000dbc <HAL_ADC_MspInit+0x10c>)
 8000d5c:	2205      	movs	r2, #5
 8000d5e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d60:	4b16      	ldr	r3, [pc, #88]	@ (8000dbc <HAL_ADC_MspInit+0x10c>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d66:	4b15      	ldr	r3, [pc, #84]	@ (8000dbc <HAL_ADC_MspInit+0x10c>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000d6c:	4b13      	ldr	r3, [pc, #76]	@ (8000dbc <HAL_ADC_MspInit+0x10c>)
 8000d6e:	2280      	movs	r2, #128	@ 0x80
 8000d70:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d72:	4b12      	ldr	r3, [pc, #72]	@ (8000dbc <HAL_ADC_MspInit+0x10c>)
 8000d74:	2280      	movs	r2, #128	@ 0x80
 8000d76:	0052      	lsls	r2, r2, #1
 8000d78:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d7a:	4b10      	ldr	r3, [pc, #64]	@ (8000dbc <HAL_ADC_MspInit+0x10c>)
 8000d7c:	2280      	movs	r2, #128	@ 0x80
 8000d7e:	00d2      	lsls	r2, r2, #3
 8000d80:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000d82:	4b0e      	ldr	r3, [pc, #56]	@ (8000dbc <HAL_ADC_MspInit+0x10c>)
 8000d84:	2220      	movs	r2, #32
 8000d86:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000d88:	4b0c      	ldr	r3, [pc, #48]	@ (8000dbc <HAL_ADC_MspInit+0x10c>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000d8e:	4b0b      	ldr	r3, [pc, #44]	@ (8000dbc <HAL_ADC_MspInit+0x10c>)
 8000d90:	0018      	movs	r0, r3
 8000d92:	f001 fa73 	bl	800227c <HAL_DMA_Init>
 8000d96:	1e03      	subs	r3, r0, #0
 8000d98:	d001      	beq.n	8000d9e <HAL_ADC_MspInit+0xee>
    {
      Error_Handler();
 8000d9a:	f7ff ff5f 	bl	8000c5c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	4a06      	ldr	r2, [pc, #24]	@ (8000dbc <HAL_ADC_MspInit+0x10c>)
 8000da2:	651a      	str	r2, [r3, #80]	@ 0x50
 8000da4:	4b05      	ldr	r3, [pc, #20]	@ (8000dbc <HAL_ADC_MspInit+0x10c>)
 8000da6:	687a      	ldr	r2, [r7, #4]
 8000da8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000daa:	46c0      	nop			@ (mov r8, r8)
 8000dac:	46bd      	mov	sp, r7
 8000dae:	b011      	add	sp, #68	@ 0x44
 8000db0:	bd90      	pop	{r4, r7, pc}
 8000db2:	46c0      	nop			@ (mov r8, r8)
 8000db4:	40012400 	.word	0x40012400
 8000db8:	40021000 	.word	0x40021000
 8000dbc:	200000a8 	.word	0x200000a8
 8000dc0:	40020008 	.word	0x40020008

08000dc4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b084      	sub	sp, #16
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a0a      	ldr	r2, [pc, #40]	@ (8000dfc <HAL_TIM_Base_MspInit+0x38>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d10d      	bne.n	8000df2 <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000dd6:	4b0a      	ldr	r3, [pc, #40]	@ (8000e00 <HAL_TIM_Base_MspInit+0x3c>)
 8000dd8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000dda:	4b09      	ldr	r3, [pc, #36]	@ (8000e00 <HAL_TIM_Base_MspInit+0x3c>)
 8000ddc:	2180      	movs	r1, #128	@ 0x80
 8000dde:	0109      	lsls	r1, r1, #4
 8000de0:	430a      	orrs	r2, r1
 8000de2:	641a      	str	r2, [r3, #64]	@ 0x40
 8000de4:	4b06      	ldr	r3, [pc, #24]	@ (8000e00 <HAL_TIM_Base_MspInit+0x3c>)
 8000de6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000de8:	2380      	movs	r3, #128	@ 0x80
 8000dea:	011b      	lsls	r3, r3, #4
 8000dec:	4013      	ands	r3, r2
 8000dee:	60fb      	str	r3, [r7, #12]
 8000df0:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000df2:	46c0      	nop			@ (mov r8, r8)
 8000df4:	46bd      	mov	sp, r7
 8000df6:	b004      	add	sp, #16
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	46c0      	nop			@ (mov r8, r8)
 8000dfc:	40012c00 	.word	0x40012c00
 8000e00:	40021000 	.word	0x40021000

08000e04 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e04:	b590      	push	{r4, r7, lr}
 8000e06:	b089      	sub	sp, #36	@ 0x24
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e0c:	240c      	movs	r4, #12
 8000e0e:	193b      	adds	r3, r7, r4
 8000e10:	0018      	movs	r0, r3
 8000e12:	2314      	movs	r3, #20
 8000e14:	001a      	movs	r2, r3
 8000e16:	2100      	movs	r1, #0
 8000e18:	f003 f8e8 	bl	8003fec <memset>
  if(htim->Instance==TIM1)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a14      	ldr	r2, [pc, #80]	@ (8000e74 <HAL_TIM_MspPostInit+0x70>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d122      	bne.n	8000e6c <HAL_TIM_MspPostInit+0x68>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e26:	4b14      	ldr	r3, [pc, #80]	@ (8000e78 <HAL_TIM_MspPostInit+0x74>)
 8000e28:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000e2a:	4b13      	ldr	r3, [pc, #76]	@ (8000e78 <HAL_TIM_MspPostInit+0x74>)
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	430a      	orrs	r2, r1
 8000e30:	635a      	str	r2, [r3, #52]	@ 0x34
 8000e32:	4b11      	ldr	r3, [pc, #68]	@ (8000e78 <HAL_TIM_MspPostInit+0x74>)
 8000e34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e36:	2201      	movs	r2, #1
 8000e38:	4013      	ands	r3, r2
 8000e3a:	60bb      	str	r3, [r7, #8]
 8000e3c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA5     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000e3e:	0021      	movs	r1, r4
 8000e40:	187b      	adds	r3, r7, r1
 8000e42:	2220      	movs	r2, #32
 8000e44:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e46:	187b      	adds	r3, r7, r1
 8000e48:	2202      	movs	r2, #2
 8000e4a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4c:	187b      	adds	r3, r7, r1
 8000e4e:	2200      	movs	r2, #0
 8000e50:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e52:	187b      	adds	r3, r7, r1
 8000e54:	2200      	movs	r2, #0
 8000e56:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM1;
 8000e58:	187b      	adds	r3, r7, r1
 8000e5a:	2205      	movs	r2, #5
 8000e5c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e5e:	187a      	adds	r2, r7, r1
 8000e60:	23a0      	movs	r3, #160	@ 0xa0
 8000e62:	05db      	lsls	r3, r3, #23
 8000e64:	0011      	movs	r1, r2
 8000e66:	0018      	movs	r0, r3
 8000e68:	f001 fbaa 	bl	80025c0 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000e6c:	46c0      	nop			@ (mov r8, r8)
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	b009      	add	sp, #36	@ 0x24
 8000e72:	bd90      	pop	{r4, r7, pc}
 8000e74:	40012c00 	.word	0x40012c00
 8000e78:	40021000 	.word	0x40021000

08000e7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e80:	46c0      	nop			@ (mov r8, r8)
 8000e82:	e7fd      	b.n	8000e80 <NMI_Handler+0x4>

08000e84 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e88:	46c0      	nop			@ (mov r8, r8)
 8000e8a:	e7fd      	b.n	8000e88 <HardFault_Handler+0x4>

08000e8c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000e90:	46c0      	nop			@ (mov r8, r8)
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}

08000e96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e96:	b580      	push	{r7, lr}
 8000e98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e9a:	46c0      	nop			@ (mov r8, r8)
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ea4:	f000 f8a4 	bl	8000ff0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ea8:	46c0      	nop			@ (mov r8, r8)
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
	...

08000eb0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000eb4:	4b03      	ldr	r3, [pc, #12]	@ (8000ec4 <SystemInit+0x14>)
 8000eb6:	2280      	movs	r2, #128	@ 0x80
 8000eb8:	0512      	lsls	r2, r2, #20
 8000eba:	609a      	str	r2, [r3, #8]
#endif
}
 8000ebc:	46c0      	nop			@ (mov r8, r8)
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	46c0      	nop			@ (mov r8, r8)
 8000ec4:	e000ed00 	.word	0xe000ed00

08000ec8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ec8:	480d      	ldr	r0, [pc, #52]	@ (8000f00 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000eca:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ecc:	f7ff fff0 	bl	8000eb0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000ed0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000ed2:	e003      	b.n	8000edc <LoopCopyDataInit>

08000ed4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000ed4:	4b0b      	ldr	r3, [pc, #44]	@ (8000f04 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8000ed6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000ed8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000eda:	3104      	adds	r1, #4

08000edc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000edc:	480a      	ldr	r0, [pc, #40]	@ (8000f08 <LoopForever+0xa>)
  ldr r3, =_edata
 8000ede:	4b0b      	ldr	r3, [pc, #44]	@ (8000f0c <LoopForever+0xe>)
  adds r2, r0, r1
 8000ee0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000ee2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000ee4:	d3f6      	bcc.n	8000ed4 <CopyDataInit>
  ldr r2, =_sbss
 8000ee6:	4a0a      	ldr	r2, [pc, #40]	@ (8000f10 <LoopForever+0x12>)
  b LoopFillZerobss
 8000ee8:	e002      	b.n	8000ef0 <LoopFillZerobss>

08000eea <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000eea:	2300      	movs	r3, #0
  str  r3, [r2]
 8000eec:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eee:	3204      	adds	r2, #4

08000ef0 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000ef0:	4b08      	ldr	r3, [pc, #32]	@ (8000f14 <LoopForever+0x16>)
  cmp r2, r3
 8000ef2:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000ef4:	d3f9      	bcc.n	8000eea <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000ef6:	f003 f881 	bl	8003ffc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000efa:	f7ff fcc1 	bl	8000880 <main>

08000efe <LoopForever>:

LoopForever:
    b LoopForever
 8000efe:	e7fe      	b.n	8000efe <LoopForever>
  ldr   r0, =_estack
 8000f00:	20003000 	.word	0x20003000
  ldr r3, =_sidata
 8000f04:	08004188 	.word	0x08004188
  ldr r0, =_sdata
 8000f08:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000f0c:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 8000f10:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 8000f14:	20000154 	.word	0x20000154

08000f18 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f18:	e7fe      	b.n	8000f18 <ADC1_IRQHandler>
	...

08000f1c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f22:	1dfb      	adds	r3, r7, #7
 8000f24:	2200      	movs	r2, #0
 8000f26:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f28:	4b0b      	ldr	r3, [pc, #44]	@ (8000f58 <HAL_Init+0x3c>)
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	4b0a      	ldr	r3, [pc, #40]	@ (8000f58 <HAL_Init+0x3c>)
 8000f2e:	2180      	movs	r1, #128	@ 0x80
 8000f30:	0049      	lsls	r1, r1, #1
 8000f32:	430a      	orrs	r2, r1
 8000f34:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f36:	2000      	movs	r0, #0
 8000f38:	f000 f810 	bl	8000f5c <HAL_InitTick>
 8000f3c:	1e03      	subs	r3, r0, #0
 8000f3e:	d003      	beq.n	8000f48 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000f40:	1dfb      	adds	r3, r7, #7
 8000f42:	2201      	movs	r2, #1
 8000f44:	701a      	strb	r2, [r3, #0]
 8000f46:	e001      	b.n	8000f4c <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f48:	f7ff fe8e 	bl	8000c68 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f4c:	1dfb      	adds	r3, r7, #7
 8000f4e:	781b      	ldrb	r3, [r3, #0]
}
 8000f50:	0018      	movs	r0, r3
 8000f52:	46bd      	mov	sp, r7
 8000f54:	b002      	add	sp, #8
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	40022000 	.word	0x40022000

08000f5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f5c:	b590      	push	{r4, r7, lr}
 8000f5e:	b085      	sub	sp, #20
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f64:	230f      	movs	r3, #15
 8000f66:	18fb      	adds	r3, r7, r3
 8000f68:	2200      	movs	r2, #0
 8000f6a:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8000f6c:	4b1d      	ldr	r3, [pc, #116]	@ (8000fe4 <HAL_InitTick+0x88>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d02b      	beq.n	8000fcc <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8000f74:	4b1c      	ldr	r3, [pc, #112]	@ (8000fe8 <HAL_InitTick+0x8c>)
 8000f76:	681c      	ldr	r4, [r3, #0]
 8000f78:	4b1a      	ldr	r3, [pc, #104]	@ (8000fe4 <HAL_InitTick+0x88>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	0019      	movs	r1, r3
 8000f7e:	23fa      	movs	r3, #250	@ 0xfa
 8000f80:	0098      	lsls	r0, r3, #2
 8000f82:	f7ff f8c1 	bl	8000108 <__udivsi3>
 8000f86:	0003      	movs	r3, r0
 8000f88:	0019      	movs	r1, r3
 8000f8a:	0020      	movs	r0, r4
 8000f8c:	f7ff f8bc 	bl	8000108 <__udivsi3>
 8000f90:	0003      	movs	r3, r0
 8000f92:	0018      	movs	r0, r3
 8000f94:	f001 f965 	bl	8002262 <HAL_SYSTICK_Config>
 8000f98:	1e03      	subs	r3, r0, #0
 8000f9a:	d112      	bne.n	8000fc2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2b03      	cmp	r3, #3
 8000fa0:	d80a      	bhi.n	8000fb8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fa2:	6879      	ldr	r1, [r7, #4]
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	425b      	negs	r3, r3
 8000fa8:	2200      	movs	r2, #0
 8000faa:	0018      	movs	r0, r3
 8000fac:	f001 f944 	bl	8002238 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fb0:	4b0e      	ldr	r3, [pc, #56]	@ (8000fec <HAL_InitTick+0x90>)
 8000fb2:	687a      	ldr	r2, [r7, #4]
 8000fb4:	601a      	str	r2, [r3, #0]
 8000fb6:	e00d      	b.n	8000fd4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000fb8:	230f      	movs	r3, #15
 8000fba:	18fb      	adds	r3, r7, r3
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	701a      	strb	r2, [r3, #0]
 8000fc0:	e008      	b.n	8000fd4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000fc2:	230f      	movs	r3, #15
 8000fc4:	18fb      	adds	r3, r7, r3
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	701a      	strb	r2, [r3, #0]
 8000fca:	e003      	b.n	8000fd4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000fcc:	230f      	movs	r3, #15
 8000fce:	18fb      	adds	r3, r7, r3
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000fd4:	230f      	movs	r3, #15
 8000fd6:	18fb      	adds	r3, r7, r3
 8000fd8:	781b      	ldrb	r3, [r3, #0]
}
 8000fda:	0018      	movs	r0, r3
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	b005      	add	sp, #20
 8000fe0:	bd90      	pop	{r4, r7, pc}
 8000fe2:	46c0      	nop			@ (mov r8, r8)
 8000fe4:	2000000c 	.word	0x2000000c
 8000fe8:	20000004 	.word	0x20000004
 8000fec:	20000008 	.word	0x20000008

08000ff0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ff4:	4b05      	ldr	r3, [pc, #20]	@ (800100c <HAL_IncTick+0x1c>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	001a      	movs	r2, r3
 8000ffa:	4b05      	ldr	r3, [pc, #20]	@ (8001010 <HAL_IncTick+0x20>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	18d2      	adds	r2, r2, r3
 8001000:	4b03      	ldr	r3, [pc, #12]	@ (8001010 <HAL_IncTick+0x20>)
 8001002:	601a      	str	r2, [r3, #0]
}
 8001004:	46c0      	nop			@ (mov r8, r8)
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	46c0      	nop			@ (mov r8, r8)
 800100c:	2000000c 	.word	0x2000000c
 8001010:	20000150 	.word	0x20000150

08001014 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  return uwTick;
 8001018:	4b02      	ldr	r3, [pc, #8]	@ (8001024 <HAL_GetTick+0x10>)
 800101a:	681b      	ldr	r3, [r3, #0]
}
 800101c:	0018      	movs	r0, r3
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	46c0      	nop			@ (mov r8, r8)
 8001024:	20000150 	.word	0x20000150

08001028 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4a05      	ldr	r2, [pc, #20]	@ (800104c <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001038:	401a      	ands	r2, r3
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	431a      	orrs	r2, r3
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	601a      	str	r2, [r3, #0]
}
 8001042:	46c0      	nop			@ (mov r8, r8)
 8001044:	46bd      	mov	sp, r7
 8001046:	b002      	add	sp, #8
 8001048:	bd80      	pop	{r7, pc}
 800104a:	46c0      	nop			@ (mov r8, r8)
 800104c:	ff3fffff 	.word	0xff3fffff

08001050 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_NONE
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN));
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	23c0      	movs	r3, #192	@ 0xc0
 800105e:	041b      	lsls	r3, r3, #16
 8001060:	4013      	ands	r3, r2
}
 8001062:	0018      	movs	r0, r3
 8001064:	46bd      	mov	sp, r7
 8001066:	b002      	add	sp, #8
 8001068:	bd80      	pop	{r7, pc}

0800106a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800106a:	b580      	push	{r7, lr}
 800106c:	b084      	sub	sp, #16
 800106e:	af00      	add	r7, sp, #0
 8001070:	60f8      	str	r0, [r7, #12]
 8001072:	60b9      	str	r1, [r7, #8]
 8001074:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	695b      	ldr	r3, [r3, #20]
 800107a:	68ba      	ldr	r2, [r7, #8]
 800107c:	2104      	movs	r1, #4
 800107e:	400a      	ands	r2, r1
 8001080:	2107      	movs	r1, #7
 8001082:	4091      	lsls	r1, r2
 8001084:	000a      	movs	r2, r1
 8001086:	43d2      	mvns	r2, r2
 8001088:	401a      	ands	r2, r3
 800108a:	68bb      	ldr	r3, [r7, #8]
 800108c:	2104      	movs	r1, #4
 800108e:	400b      	ands	r3, r1
 8001090:	6879      	ldr	r1, [r7, #4]
 8001092:	4099      	lsls	r1, r3
 8001094:	000b      	movs	r3, r1
 8001096:	431a      	orrs	r2, r3
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 800109c:	46c0      	nop			@ (mov r8, r8)
 800109e:	46bd      	mov	sp, r7
 80010a0:	b004      	add	sp, #16
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	695b      	ldr	r3, [r3, #20]
 80010b2:	683a      	ldr	r2, [r7, #0]
 80010b4:	2104      	movs	r1, #4
 80010b6:	400a      	ands	r2, r1
 80010b8:	2107      	movs	r1, #7
 80010ba:	4091      	lsls	r1, r2
 80010bc:	000a      	movs	r2, r1
 80010be:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	2104      	movs	r1, #4
 80010c4:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80010c6:	40da      	lsrs	r2, r3
 80010c8:	0013      	movs	r3, r2
}
 80010ca:	0018      	movs	r0, r3
 80010cc:	46bd      	mov	sp, r7
 80010ce:	b002      	add	sp, #8
 80010d0:	bd80      	pop	{r7, pc}

080010d2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80010d2:	b580      	push	{r7, lr}
 80010d4:	b082      	sub	sp, #8
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	68da      	ldr	r2, [r3, #12]
 80010de:	23c0      	movs	r3, #192	@ 0xc0
 80010e0:	011b      	lsls	r3, r3, #4
 80010e2:	4013      	ands	r3, r2
 80010e4:	d101      	bne.n	80010ea <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80010e6:	2301      	movs	r3, #1
 80010e8:	e000      	b.n	80010ec <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80010ea:	2300      	movs	r3, #0
}
 80010ec:	0018      	movs	r0, r3
 80010ee:	46bd      	mov	sp, r7
 80010f0:	b002      	add	sp, #8
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <LL_ADC_REG_SetSequencerRanks>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b084      	sub	sp, #16
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	60f8      	str	r0, [r7, #12]
 80010fc:	60b9      	str	r1, [r7, #8]
 80010fe:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001104:	68ba      	ldr	r2, [r7, #8]
 8001106:	211f      	movs	r1, #31
 8001108:	400a      	ands	r2, r1
 800110a:	210f      	movs	r1, #15
 800110c:	4091      	lsls	r1, r2
 800110e:	000a      	movs	r2, r1
 8001110:	43d2      	mvns	r2, r2
 8001112:	401a      	ands	r2, r3
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	0e9b      	lsrs	r3, r3, #26
 8001118:	210f      	movs	r1, #15
 800111a:	4019      	ands	r1, r3
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	201f      	movs	r0, #31
 8001120:	4003      	ands	r3, r0
 8001122:	4099      	lsls	r1, r3
 8001124:	000b      	movs	r3, r1
 8001126:	431a      	orrs	r2, r3
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800112c:	46c0      	nop			@ (mov r8, r8)
 800112e:	46bd      	mov	sp, r7
 8001130:	b004      	add	sp, #16
 8001132:	bd80      	pop	{r7, pc}

08001134 <LL_ADC_REG_SetSequencerChAdd>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
 800113c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	025b      	lsls	r3, r3, #9
 8001146:	0a5b      	lsrs	r3, r3, #9
 8001148:	431a      	orrs	r2, r3
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800114e:	46c0      	nop			@ (mov r8, r8)
 8001150:	46bd      	mov	sp, r7
 8001152:	b002      	add	sp, #8
 8001154:	bd80      	pop	{r7, pc}

08001156 <LL_ADC_REG_SetSequencerChRem>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001156:	b580      	push	{r7, lr}
 8001158:	b082      	sub	sp, #8
 800115a:	af00      	add	r7, sp, #0
 800115c:	6078      	str	r0, [r7, #4]
 800115e:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001164:	683a      	ldr	r2, [r7, #0]
 8001166:	0252      	lsls	r2, r2, #9
 8001168:	0a52      	lsrs	r2, r2, #9
 800116a:	43d2      	mvns	r2, r2
 800116c:	401a      	ands	r2, r3
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001172:	46c0      	nop			@ (mov r8, r8)
 8001174:	46bd      	mov	sp, r7
 8001176:	b002      	add	sp, #8
 8001178:	bd80      	pop	{r7, pc}
	...

0800117c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0
 8001182:	60f8      	str	r0, [r7, #12]
 8001184:	60b9      	str	r1, [r7, #8]
 8001186:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	695b      	ldr	r3, [r3, #20]
 800118c:	68ba      	ldr	r2, [r7, #8]
 800118e:	0212      	lsls	r2, r2, #8
 8001190:	43d2      	mvns	r2, r2
 8001192:	401a      	ands	r2, r3
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	021b      	lsls	r3, r3, #8
 8001198:	6879      	ldr	r1, [r7, #4]
 800119a:	400b      	ands	r3, r1
 800119c:	4904      	ldr	r1, [pc, #16]	@ (80011b0 <LL_ADC_SetChannelSamplingTime+0x34>)
 800119e:	400b      	ands	r3, r1
 80011a0:	431a      	orrs	r2, r3
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80011a6:	46c0      	nop			@ (mov r8, r8)
 80011a8:	46bd      	mov	sp, r7
 80011aa:	b004      	add	sp, #16
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	46c0      	nop			@ (mov r8, r8)
 80011b0:	7fffff00 	.word	0x7fffff00

080011b4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	689b      	ldr	r3, [r3, #8]
 80011c0:	4a05      	ldr	r2, [pc, #20]	@ (80011d8 <LL_ADC_EnableInternalRegulator+0x24>)
 80011c2:	4013      	ands	r3, r2
 80011c4:	2280      	movs	r2, #128	@ 0x80
 80011c6:	0552      	lsls	r2, r2, #21
 80011c8:	431a      	orrs	r2, r3
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80011ce:	46c0      	nop			@ (mov r8, r8)
 80011d0:	46bd      	mov	sp, r7
 80011d2:	b002      	add	sp, #8
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	46c0      	nop			@ (mov r8, r8)
 80011d8:	6fffffe8 	.word	0x6fffffe8

080011dc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	689a      	ldr	r2, [r3, #8]
 80011e8:	2380      	movs	r3, #128	@ 0x80
 80011ea:	055b      	lsls	r3, r3, #21
 80011ec:	401a      	ands	r2, r3
 80011ee:	2380      	movs	r3, #128	@ 0x80
 80011f0:	055b      	lsls	r3, r3, #21
 80011f2:	429a      	cmp	r2, r3
 80011f4:	d101      	bne.n	80011fa <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80011f6:	2301      	movs	r3, #1
 80011f8:	e000      	b.n	80011fc <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80011fa:	2300      	movs	r3, #0
}
 80011fc:	0018      	movs	r0, r3
 80011fe:	46bd      	mov	sp, r7
 8001200:	b002      	add	sp, #8
 8001202:	bd80      	pop	{r7, pc}

08001204 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	689b      	ldr	r3, [r3, #8]
 8001210:	4a04      	ldr	r2, [pc, #16]	@ (8001224 <LL_ADC_Enable+0x20>)
 8001212:	4013      	ands	r3, r2
 8001214:	2201      	movs	r2, #1
 8001216:	431a      	orrs	r2, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800121c:	46c0      	nop			@ (mov r8, r8)
 800121e:	46bd      	mov	sp, r7
 8001220:	b002      	add	sp, #8
 8001222:	bd80      	pop	{r7, pc}
 8001224:	7fffffe8 	.word	0x7fffffe8

08001228 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	4a04      	ldr	r2, [pc, #16]	@ (8001248 <LL_ADC_Disable+0x20>)
 8001236:	4013      	ands	r3, r2
 8001238:	2202      	movs	r2, #2
 800123a:	431a      	orrs	r2, r3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001240:	46c0      	nop			@ (mov r8, r8)
 8001242:	46bd      	mov	sp, r7
 8001244:	b002      	add	sp, #8
 8001246:	bd80      	pop	{r7, pc}
 8001248:	7fffffe8 	.word	0x7fffffe8

0800124c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	2201      	movs	r2, #1
 800125a:	4013      	ands	r3, r2
 800125c:	2b01      	cmp	r3, #1
 800125e:	d101      	bne.n	8001264 <LL_ADC_IsEnabled+0x18>
 8001260:	2301      	movs	r3, #1
 8001262:	e000      	b.n	8001266 <LL_ADC_IsEnabled+0x1a>
 8001264:	2300      	movs	r3, #0
}
 8001266:	0018      	movs	r0, r3
 8001268:	46bd      	mov	sp, r7
 800126a:	b002      	add	sp, #8
 800126c:	bd80      	pop	{r7, pc}

0800126e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800126e:	b580      	push	{r7, lr}
 8001270:	b082      	sub	sp, #8
 8001272:	af00      	add	r7, sp, #0
 8001274:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	689b      	ldr	r3, [r3, #8]
 800127a:	2202      	movs	r2, #2
 800127c:	4013      	ands	r3, r2
 800127e:	2b02      	cmp	r3, #2
 8001280:	d101      	bne.n	8001286 <LL_ADC_IsDisableOngoing+0x18>
 8001282:	2301      	movs	r3, #1
 8001284:	e000      	b.n	8001288 <LL_ADC_IsDisableOngoing+0x1a>
 8001286:	2300      	movs	r3, #0
}
 8001288:	0018      	movs	r0, r3
 800128a:	46bd      	mov	sp, r7
 800128c:	b002      	add	sp, #8
 800128e:	bd80      	pop	{r7, pc}

08001290 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	4a04      	ldr	r2, [pc, #16]	@ (80012b0 <LL_ADC_REG_StartConversion+0x20>)
 800129e:	4013      	ands	r3, r2
 80012a0:	2204      	movs	r2, #4
 80012a2:	431a      	orrs	r2, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80012a8:	46c0      	nop			@ (mov r8, r8)
 80012aa:	46bd      	mov	sp, r7
 80012ac:	b002      	add	sp, #8
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	7fffffe8 	.word	0x7fffffe8

080012b4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	2204      	movs	r2, #4
 80012c2:	4013      	ands	r3, r2
 80012c4:	2b04      	cmp	r3, #4
 80012c6:	d101      	bne.n	80012cc <LL_ADC_REG_IsConversionOngoing+0x18>
 80012c8:	2301      	movs	r3, #1
 80012ca:	e000      	b.n	80012ce <LL_ADC_REG_IsConversionOngoing+0x1a>
 80012cc:	2300      	movs	r3, #0
}
 80012ce:	0018      	movs	r0, r3
 80012d0:	46bd      	mov	sp, r7
 80012d2:	b002      	add	sp, #8
 80012d4:	bd80      	pop	{r7, pc}
	...

080012d8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b088      	sub	sp, #32
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012e0:	231f      	movs	r3, #31
 80012e2:	18fb      	adds	r3, r7, r3
 80012e4:	2200      	movs	r2, #0
 80012e6:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 80012e8:	2300      	movs	r3, #0
 80012ea:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 80012ec:	2300      	movs	r3, #0
 80012ee:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80012f0:	2300      	movs	r3, #0
 80012f2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d101      	bne.n	80012fe <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	e17e      	b.n	80015fc <HAL_ADC_Init+0x324>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001302:	2b00      	cmp	r3, #0
 8001304:	d10a      	bne.n	800131c <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	0018      	movs	r0, r3
 800130a:	f7ff fcd1 	bl	8000cb0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2200      	movs	r2, #0
 8001312:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2254      	movs	r2, #84	@ 0x54
 8001318:	2100      	movs	r1, #0
 800131a:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	0018      	movs	r0, r3
 8001322:	f7ff ff5b 	bl	80011dc <LL_ADC_IsInternalRegulatorEnabled>
 8001326:	1e03      	subs	r3, r0, #0
 8001328:	d114      	bne.n	8001354 <HAL_ADC_Init+0x7c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	0018      	movs	r0, r3
 8001330:	f7ff ff40 	bl	80011b4 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001334:	4bb3      	ldr	r3, [pc, #716]	@ (8001604 <HAL_ADC_Init+0x32c>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	49b3      	ldr	r1, [pc, #716]	@ (8001608 <HAL_ADC_Init+0x330>)
 800133a:	0018      	movs	r0, r3
 800133c:	f7fe fee4 	bl	8000108 <__udivsi3>
 8001340:	0003      	movs	r3, r0
 8001342:	005b      	lsls	r3, r3, #1
 8001344:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001346:	e002      	b.n	800134e <HAL_ADC_Init+0x76>
    {
      wait_loop_index--;
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	3b01      	subs	r3, #1
 800134c:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d1f9      	bne.n	8001348 <HAL_ADC_Init+0x70>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	0018      	movs	r0, r3
 800135a:	f7ff ff3f 	bl	80011dc <LL_ADC_IsInternalRegulatorEnabled>
 800135e:	1e03      	subs	r3, r0, #0
 8001360:	d10f      	bne.n	8001382 <HAL_ADC_Init+0xaa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001366:	2210      	movs	r2, #16
 8001368:	431a      	orrs	r2, r3
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001372:	2201      	movs	r2, #1
 8001374:	431a      	orrs	r2, r3
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800137a:	231f      	movs	r3, #31
 800137c:	18fb      	adds	r3, r7, r3
 800137e:	2201      	movs	r2, #1
 8001380:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	0018      	movs	r0, r3
 8001388:	f7ff ff94 	bl	80012b4 <LL_ADC_REG_IsConversionOngoing>
 800138c:	0003      	movs	r3, r0
 800138e:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001394:	2210      	movs	r2, #16
 8001396:	4013      	ands	r3, r2
 8001398:	d000      	beq.n	800139c <HAL_ADC_Init+0xc4>
 800139a:	e122      	b.n	80015e2 <HAL_ADC_Init+0x30a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d000      	beq.n	80013a4 <HAL_ADC_Init+0xcc>
 80013a2:	e11e      	b.n	80015e2 <HAL_ADC_Init+0x30a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013a8:	4a98      	ldr	r2, [pc, #608]	@ (800160c <HAL_ADC_Init+0x334>)
 80013aa:	4013      	ands	r3, r2
 80013ac:	2202      	movs	r2, #2
 80013ae:	431a      	orrs	r2, r3
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	0018      	movs	r0, r3
 80013ba:	f7ff ff47 	bl	800124c <LL_ADC_IsEnabled>
 80013be:	1e03      	subs	r3, r0, #0
 80013c0:	d000      	beq.n	80013c4 <HAL_ADC_Init+0xec>
 80013c2:	e0ad      	b.n	8001520 <HAL_ADC_Init+0x248>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths: temperature sensor, Vref             */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	7e1b      	ldrb	r3, [r3, #24]
 80013cc:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80013ce:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	7e5b      	ldrb	r3, [r3, #25]
 80013d4:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80013d6:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	7e9b      	ldrb	r3, [r3, #26]
 80013dc:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80013de:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d002      	beq.n	80013ee <HAL_ADC_Init+0x116>
 80013e8:	2380      	movs	r3, #128	@ 0x80
 80013ea:	015b      	lsls	r3, r3, #5
 80013ec:	e000      	b.n	80013f0 <HAL_ADC_Init+0x118>
 80013ee:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80013f0:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80013f6:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	691b      	ldr	r3, [r3, #16]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	da04      	bge.n	800140a <HAL_ADC_Init+0x132>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	691b      	ldr	r3, [r3, #16]
 8001404:	005b      	lsls	r3, r3, #1
 8001406:	085b      	lsrs	r3, r3, #1
 8001408:	e001      	b.n	800140e <HAL_ADC_Init+0x136>
 800140a:	2380      	movs	r3, #128	@ 0x80
 800140c:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 800140e:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	212c      	movs	r1, #44	@ 0x2c
 8001414:	5c5b      	ldrb	r3, [r3, r1]
 8001416:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001418:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800141a:	69ba      	ldr	r2, [r7, #24]
 800141c:	4313      	orrs	r3, r2
 800141e:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2220      	movs	r2, #32
 8001424:	5c9b      	ldrb	r3, [r3, r2]
 8001426:	2b01      	cmp	r3, #1
 8001428:	d115      	bne.n	8001456 <HAL_ADC_Init+0x17e>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	7e9b      	ldrb	r3, [r3, #26]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d105      	bne.n	800143e <HAL_ADC_Init+0x166>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001432:	69bb      	ldr	r3, [r7, #24]
 8001434:	2280      	movs	r2, #128	@ 0x80
 8001436:	0252      	lsls	r2, r2, #9
 8001438:	4313      	orrs	r3, r2
 800143a:	61bb      	str	r3, [r7, #24]
 800143c:	e00b      	b.n	8001456 <HAL_ADC_Init+0x17e>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001442:	2220      	movs	r2, #32
 8001444:	431a      	orrs	r2, r3
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800144e:	2201      	movs	r2, #1
 8001450:	431a      	orrs	r2, r3
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800145a:	2b00      	cmp	r3, #0
 800145c:	d00a      	beq.n	8001474 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001462:	23e0      	movs	r3, #224	@ 0xe0
 8001464:	005b      	lsls	r3, r3, #1
 8001466:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800146c:	4313      	orrs	r3, r2
 800146e:	69ba      	ldr	r2, [r7, #24]
 8001470:	4313      	orrs	r3, r2
 8001472:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	68db      	ldr	r3, [r3, #12]
 800147a:	4a65      	ldr	r2, [pc, #404]	@ (8001610 <HAL_ADC_Init+0x338>)
 800147c:	4013      	ands	r3, r2
 800147e:	0019      	movs	r1, r3
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	69ba      	ldr	r2, [r7, #24]
 8001486:	430a      	orrs	r2, r1
 8001488:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	0f9b      	lsrs	r3, r3, #30
 8001490:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001496:	4313      	orrs	r3, r2
 8001498:	697a      	ldr	r2, [r7, #20]
 800149a:	4313      	orrs	r3, r2
 800149c:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	223c      	movs	r2, #60	@ 0x3c
 80014a2:	5c9b      	ldrb	r3, [r3, r2]
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d111      	bne.n	80014cc <HAL_ADC_Init+0x1f4>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	0f9b      	lsrs	r3, r3, #30
 80014ae:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80014b4:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                     hadc->Init.Oversampling.Ratio         |
 80014ba:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                     hadc->Init.Oversampling.RightBitShift |
 80014c0:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	4313      	orrs	r3, r2
 80014c6:	2201      	movs	r2, #1
 80014c8:	4313      	orrs	r3, r2
 80014ca:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	691b      	ldr	r3, [r3, #16]
 80014d2:	4a50      	ldr	r2, [pc, #320]	@ (8001614 <HAL_ADC_Init+0x33c>)
 80014d4:	4013      	ands	r3, r2
 80014d6:	0019      	movs	r1, r3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	697a      	ldr	r2, [r7, #20]
 80014de:	430a      	orrs	r2, r1
 80014e0:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	685a      	ldr	r2, [r3, #4]
 80014e6:	23c0      	movs	r3, #192	@ 0xc0
 80014e8:	061b      	lsls	r3, r3, #24
 80014ea:	429a      	cmp	r2, r3
 80014ec:	d018      	beq.n	8001520 <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80014f2:	2380      	movs	r3, #128	@ 0x80
 80014f4:	05db      	lsls	r3, r3, #23
 80014f6:	429a      	cmp	r2, r3
 80014f8:	d012      	beq.n	8001520 <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80014fe:	2380      	movs	r3, #128	@ 0x80
 8001500:	061b      	lsls	r3, r3, #24
 8001502:	429a      	cmp	r2, r3
 8001504:	d00c      	beq.n	8001520 <HAL_ADC_Init+0x248>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001506:	4b44      	ldr	r3, [pc, #272]	@ (8001618 <HAL_ADC_Init+0x340>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a44      	ldr	r2, [pc, #272]	@ (800161c <HAL_ADC_Init+0x344>)
 800150c:	4013      	ands	r3, r2
 800150e:	0019      	movs	r1, r3
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	685a      	ldr	r2, [r3, #4]
 8001514:	23f0      	movs	r3, #240	@ 0xf0
 8001516:	039b      	lsls	r3, r3, #14
 8001518:	401a      	ands	r2, r3
 800151a:	4b3f      	ldr	r3, [pc, #252]	@ (8001618 <HAL_ADC_Init+0x340>)
 800151c:	430a      	orrs	r2, r1
 800151e:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6818      	ldr	r0, [r3, #0]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001528:	001a      	movs	r2, r3
 800152a:	2100      	movs	r1, #0
 800152c:	f7ff fd9d 	bl	800106a <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6818      	ldr	r0, [r3, #0]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001538:	4939      	ldr	r1, [pc, #228]	@ (8001620 <HAL_ADC_Init+0x348>)
 800153a:	001a      	movs	r2, r3
 800153c:	f7ff fd95 	bl	800106a <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	691b      	ldr	r3, [r3, #16]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d109      	bne.n	800155c <HAL_ADC_Init+0x284>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	2110      	movs	r1, #16
 8001554:	4249      	negs	r1, r1
 8001556:	430a      	orrs	r2, r1
 8001558:	629a      	str	r2, [r3, #40]	@ 0x28
 800155a:	e018      	b.n	800158e <HAL_ADC_Init+0x2b6>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	691a      	ldr	r2, [r3, #16]
 8001560:	2380      	movs	r3, #128	@ 0x80
 8001562:	039b      	lsls	r3, r3, #14
 8001564:	429a      	cmp	r2, r3
 8001566:	d112      	bne.n	800158e <HAL_ADC_Init+0x2b6>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	69db      	ldr	r3, [r3, #28]
 8001572:	3b01      	subs	r3, #1
 8001574:	009b      	lsls	r3, r3, #2
 8001576:	221c      	movs	r2, #28
 8001578:	4013      	ands	r3, r2
 800157a:	2210      	movs	r2, #16
 800157c:	4252      	negs	r2, r2
 800157e:	409a      	lsls	r2, r3
 8001580:	0011      	movs	r1, r2
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	430a      	orrs	r2, r1
 800158c:	629a      	str	r2, [r3, #40]	@ 0x28
    {
      /* Nothing to do */
    }
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	2100      	movs	r1, #0
 8001594:	0018      	movs	r0, r3
 8001596:	f7ff fd85 	bl	80010a4 <LL_ADC_GetSamplingTimeCommonChannels>
 800159a:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d10b      	bne.n	80015bc <HAL_ADC_Init+0x2e4>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2200      	movs	r2, #0
 80015a8:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015ae:	2203      	movs	r2, #3
 80015b0:	4393      	bics	r3, r2
 80015b2:	2201      	movs	r2, #1
 80015b4:	431a      	orrs	r2, r3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80015ba:	e01c      	b.n	80015f6 <HAL_ADC_Init+0x31e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015c0:	2212      	movs	r2, #18
 80015c2:	4393      	bics	r3, r2
 80015c4:	2210      	movs	r2, #16
 80015c6:	431a      	orrs	r2, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015d0:	2201      	movs	r2, #1
 80015d2:	431a      	orrs	r2, r3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 80015d8:	231f      	movs	r3, #31
 80015da:	18fb      	adds	r3, r7, r3
 80015dc:	2201      	movs	r2, #1
 80015de:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80015e0:	e009      	b.n	80015f6 <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015e6:	2210      	movs	r2, #16
 80015e8:	431a      	orrs	r2, r3
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80015ee:	231f      	movs	r3, #31
 80015f0:	18fb      	adds	r3, r7, r3
 80015f2:	2201      	movs	r2, #1
 80015f4:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 80015f6:	231f      	movs	r3, #31
 80015f8:	18fb      	adds	r3, r7, r3
 80015fa:	781b      	ldrb	r3, [r3, #0]
}
 80015fc:	0018      	movs	r0, r3
 80015fe:	46bd      	mov	sp, r7
 8001600:	b008      	add	sp, #32
 8001602:	bd80      	pop	{r7, pc}
 8001604:	20000004 	.word	0x20000004
 8001608:	00030d40 	.word	0x00030d40
 800160c:	fffffefd 	.word	0xfffffefd
 8001610:	ffde0201 	.word	0xffde0201
 8001614:	1ffffc02 	.word	0x1ffffc02
 8001618:	40012708 	.word	0x40012708
 800161c:	ffc3ffff 	.word	0xffc3ffff
 8001620:	7fffff04 	.word	0x7fffff04

08001624 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001624:	b5b0      	push	{r4, r5, r7, lr}
 8001626:	b086      	sub	sp, #24
 8001628:	af00      	add	r7, sp, #0
 800162a:	60f8      	str	r0, [r7, #12]
 800162c:	60b9      	str	r1, [r7, #8]
 800162e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	0018      	movs	r0, r3
 8001636:	f7ff fe3d 	bl	80012b4 <LL_ADC_REG_IsConversionOngoing>
 800163a:	1e03      	subs	r3, r0, #0
 800163c:	d16c      	bne.n	8001718 <HAL_ADC_Start_DMA+0xf4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	2254      	movs	r2, #84	@ 0x54
 8001642:	5c9b      	ldrb	r3, [r3, r2]
 8001644:	2b01      	cmp	r3, #1
 8001646:	d101      	bne.n	800164c <HAL_ADC_Start_DMA+0x28>
 8001648:	2302      	movs	r3, #2
 800164a:	e06c      	b.n	8001726 <HAL_ADC_Start_DMA+0x102>
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	2254      	movs	r2, #84	@ 0x54
 8001650:	2101      	movs	r1, #1
 8001652:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	68db      	ldr	r3, [r3, #12]
 800165a:	2201      	movs	r2, #1
 800165c:	4013      	ands	r3, r2
 800165e:	d113      	bne.n	8001688 <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	0018      	movs	r0, r3
 8001666:	f7ff fdf1 	bl	800124c <LL_ADC_IsEnabled>
 800166a:	1e03      	subs	r3, r0, #0
 800166c:	d004      	beq.n	8001678 <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	0018      	movs	r0, r3
 8001674:	f7ff fdd8 	bl	8001228 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	68da      	ldr	r2, [r3, #12]
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	2101      	movs	r1, #1
 8001684:	430a      	orrs	r2, r1
 8001686:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001688:	2517      	movs	r5, #23
 800168a:	197c      	adds	r4, r7, r5
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	0018      	movs	r0, r3
 8001690:	f000 fa44 	bl	8001b1c <ADC_Enable>
 8001694:	0003      	movs	r3, r0
 8001696:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001698:	002c      	movs	r4, r5
 800169a:	193b      	adds	r3, r7, r4
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d13e      	bne.n	8001720 <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016a6:	4a22      	ldr	r2, [pc, #136]	@ (8001730 <HAL_ADC_Start_DMA+0x10c>)
 80016a8:	4013      	ands	r3, r2
 80016aa:	2280      	movs	r2, #128	@ 0x80
 80016ac:	0052      	lsls	r2, r2, #1
 80016ae:	431a      	orrs	r2, r3
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	2200      	movs	r2, #0
 80016b8:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80016be:	4a1d      	ldr	r2, [pc, #116]	@ (8001734 <HAL_ADC_Start_DMA+0x110>)
 80016c0:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80016c6:	4a1c      	ldr	r2, [pc, #112]	@ (8001738 <HAL_ADC_Start_DMA+0x114>)
 80016c8:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80016ce:	4a1b      	ldr	r2, [pc, #108]	@ (800173c <HAL_ADC_Start_DMA+0x118>)
 80016d0:	635a      	str	r2, [r3, #52]	@ 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	221c      	movs	r2, #28
 80016d8:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	2254      	movs	r2, #84	@ 0x54
 80016de:	2100      	movs	r1, #0
 80016e0:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	685a      	ldr	r2, [r3, #4]
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	2110      	movs	r1, #16
 80016ee:	430a      	orrs	r2, r1
 80016f0:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	3340      	adds	r3, #64	@ 0x40
 80016fc:	0019      	movs	r1, r3
 80016fe:	68ba      	ldr	r2, [r7, #8]
 8001700:	193c      	adds	r4, r7, r4
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	f000 fe44 	bl	8002390 <HAL_DMA_Start_IT>
 8001708:	0003      	movs	r3, r0
 800170a:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	0018      	movs	r0, r3
 8001712:	f7ff fdbd 	bl	8001290 <LL_ADC_REG_StartConversion>
 8001716:	e003      	b.n	8001720 <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001718:	2317      	movs	r3, #23
 800171a:	18fb      	adds	r3, r7, r3
 800171c:	2202      	movs	r2, #2
 800171e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8001720:	2317      	movs	r3, #23
 8001722:	18fb      	adds	r3, r7, r3
 8001724:	781b      	ldrb	r3, [r3, #0]
}
 8001726:	0018      	movs	r0, r3
 8001728:	46bd      	mov	sp, r7
 800172a:	b006      	add	sp, #24
 800172c:	bdb0      	pop	{r4, r5, r7, pc}
 800172e:	46c0      	nop			@ (mov r8, r8)
 8001730:	fffff0fe 	.word	0xfffff0fe
 8001734:	08001cc9 	.word	0x08001cc9
 8001738:	08001d91 	.word	0x08001d91
 800173c:	08001daf 	.word	0x08001daf

08001740 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001748:	46c0      	nop			@ (mov r8, r8)
 800174a:	46bd      	mov	sp, r7
 800174c:	b002      	add	sp, #8
 800174e:	bd80      	pop	{r7, pc}

08001750 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001758:	46c0      	nop			@ (mov r8, r8)
 800175a:	46bd      	mov	sp, r7
 800175c:	b002      	add	sp, #8
 800175e:	bd80      	pop	{r7, pc}

08001760 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001768:	46c0      	nop			@ (mov r8, r8)
 800176a:	46bd      	mov	sp, r7
 800176c:	b002      	add	sp, #8
 800176e:	bd80      	pop	{r7, pc}

08001770 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b086      	sub	sp, #24
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
 8001778:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800177a:	2317      	movs	r3, #23
 800177c:	18fb      	adds	r3, r7, r3
 800177e:	2200      	movs	r2, #0
 8001780:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001782:	2300      	movs	r3, #0
 8001784:	60fb      	str	r3, [r7, #12]

    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2254      	movs	r2, #84	@ 0x54
 800178a:	5c9b      	ldrb	r3, [r3, r2]
 800178c:	2b01      	cmp	r3, #1
 800178e:	d101      	bne.n	8001794 <HAL_ADC_ConfigChannel+0x24>
 8001790:	2302      	movs	r3, #2
 8001792:	e1be      	b.n	8001b12 <HAL_ADC_ConfigChannel+0x3a2>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2254      	movs	r2, #84	@ 0x54
 8001798:	2101      	movs	r1, #1
 800179a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor       */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	0018      	movs	r0, r3
 80017a2:	f7ff fd87 	bl	80012b4 <LL_ADC_REG_IsConversionOngoing>
 80017a6:	1e03      	subs	r3, r0, #0
 80017a8:	d000      	beq.n	80017ac <HAL_ADC_ConfigChannel+0x3c>
 80017aa:	e1a1      	b.n	8001af0 <HAL_ADC_ConfigChannel+0x380>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (sConfig->Rank != ADC_RANK_NONE)
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	2b02      	cmp	r3, #2
 80017b2:	d100      	bne.n	80017b6 <HAL_ADC_ConfigChannel+0x46>
 80017b4:	e152      	b.n	8001a5c <HAL_ADC_ConfigChannel+0x2ec>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	691a      	ldr	r2, [r3, #16]
 80017ba:	2380      	movs	r3, #128	@ 0x80
 80017bc:	061b      	lsls	r3, r3, #24
 80017be:	429a      	cmp	r2, r3
 80017c0:	d004      	beq.n	80017cc <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80017c6:	4ac2      	ldr	r2, [pc, #776]	@ (8001ad0 <HAL_ADC_ConfigChannel+0x360>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d108      	bne.n	80017de <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	0019      	movs	r1, r3
 80017d6:	0010      	movs	r0, r2
 80017d8:	f7ff fcac 	bl	8001134 <LL_ADC_REG_SetSequencerChAdd>
 80017dc:	e0ed      	b.n	80019ba <HAL_ADC_ConfigChannel+0x24a>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	211f      	movs	r1, #31
 80017e8:	400b      	ands	r3, r1
 80017ea:	210f      	movs	r1, #15
 80017ec:	4099      	lsls	r1, r3
 80017ee:	000b      	movs	r3, r1
 80017f0:	43db      	mvns	r3, r3
 80017f2:	4013      	ands	r3, r2
 80017f4:	0019      	movs	r1, r3
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	025b      	lsls	r3, r3, #9
 80017fc:	0a5b      	lsrs	r3, r3, #9
 80017fe:	d105      	bne.n	800180c <HAL_ADC_ConfigChannel+0x9c>
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	0e9b      	lsrs	r3, r3, #26
 8001806:	221f      	movs	r2, #31
 8001808:	4013      	ands	r3, r2
 800180a:	e0bc      	b.n	8001986 <HAL_ADC_ConfigChannel+0x216>
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	2201      	movs	r2, #1
 8001812:	4013      	ands	r3, r2
 8001814:	d000      	beq.n	8001818 <HAL_ADC_ConfigChannel+0xa8>
 8001816:	e0b5      	b.n	8001984 <HAL_ADC_ConfigChannel+0x214>
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	2202      	movs	r2, #2
 800181e:	4013      	ands	r3, r2
 8001820:	d000      	beq.n	8001824 <HAL_ADC_ConfigChannel+0xb4>
 8001822:	e0ad      	b.n	8001980 <HAL_ADC_ConfigChannel+0x210>
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	2204      	movs	r2, #4
 800182a:	4013      	ands	r3, r2
 800182c:	d000      	beq.n	8001830 <HAL_ADC_ConfigChannel+0xc0>
 800182e:	e0a5      	b.n	800197c <HAL_ADC_ConfigChannel+0x20c>
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2208      	movs	r2, #8
 8001836:	4013      	ands	r3, r2
 8001838:	d000      	beq.n	800183c <HAL_ADC_ConfigChannel+0xcc>
 800183a:	e09d      	b.n	8001978 <HAL_ADC_ConfigChannel+0x208>
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	2210      	movs	r2, #16
 8001842:	4013      	ands	r3, r2
 8001844:	d000      	beq.n	8001848 <HAL_ADC_ConfigChannel+0xd8>
 8001846:	e095      	b.n	8001974 <HAL_ADC_ConfigChannel+0x204>
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	2220      	movs	r2, #32
 800184e:	4013      	ands	r3, r2
 8001850:	d000      	beq.n	8001854 <HAL_ADC_ConfigChannel+0xe4>
 8001852:	e08d      	b.n	8001970 <HAL_ADC_ConfigChannel+0x200>
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	2240      	movs	r2, #64	@ 0x40
 800185a:	4013      	ands	r3, r2
 800185c:	d000      	beq.n	8001860 <HAL_ADC_ConfigChannel+0xf0>
 800185e:	e085      	b.n	800196c <HAL_ADC_ConfigChannel+0x1fc>
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	2280      	movs	r2, #128	@ 0x80
 8001866:	4013      	ands	r3, r2
 8001868:	d000      	beq.n	800186c <HAL_ADC_ConfigChannel+0xfc>
 800186a:	e07d      	b.n	8001968 <HAL_ADC_ConfigChannel+0x1f8>
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	2380      	movs	r3, #128	@ 0x80
 8001872:	005b      	lsls	r3, r3, #1
 8001874:	4013      	ands	r3, r2
 8001876:	d000      	beq.n	800187a <HAL_ADC_ConfigChannel+0x10a>
 8001878:	e074      	b.n	8001964 <HAL_ADC_ConfigChannel+0x1f4>
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	2380      	movs	r3, #128	@ 0x80
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	4013      	ands	r3, r2
 8001884:	d000      	beq.n	8001888 <HAL_ADC_ConfigChannel+0x118>
 8001886:	e06b      	b.n	8001960 <HAL_ADC_ConfigChannel+0x1f0>
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	2380      	movs	r3, #128	@ 0x80
 800188e:	00db      	lsls	r3, r3, #3
 8001890:	4013      	ands	r3, r2
 8001892:	d000      	beq.n	8001896 <HAL_ADC_ConfigChannel+0x126>
 8001894:	e062      	b.n	800195c <HAL_ADC_ConfigChannel+0x1ec>
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	2380      	movs	r3, #128	@ 0x80
 800189c:	011b      	lsls	r3, r3, #4
 800189e:	4013      	ands	r3, r2
 80018a0:	d000      	beq.n	80018a4 <HAL_ADC_ConfigChannel+0x134>
 80018a2:	e059      	b.n	8001958 <HAL_ADC_ConfigChannel+0x1e8>
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	2380      	movs	r3, #128	@ 0x80
 80018aa:	015b      	lsls	r3, r3, #5
 80018ac:	4013      	ands	r3, r2
 80018ae:	d151      	bne.n	8001954 <HAL_ADC_ConfigChannel+0x1e4>
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	2380      	movs	r3, #128	@ 0x80
 80018b6:	019b      	lsls	r3, r3, #6
 80018b8:	4013      	ands	r3, r2
 80018ba:	d149      	bne.n	8001950 <HAL_ADC_ConfigChannel+0x1e0>
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	2380      	movs	r3, #128	@ 0x80
 80018c2:	01db      	lsls	r3, r3, #7
 80018c4:	4013      	ands	r3, r2
 80018c6:	d141      	bne.n	800194c <HAL_ADC_ConfigChannel+0x1dc>
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	2380      	movs	r3, #128	@ 0x80
 80018ce:	021b      	lsls	r3, r3, #8
 80018d0:	4013      	ands	r3, r2
 80018d2:	d139      	bne.n	8001948 <HAL_ADC_ConfigChannel+0x1d8>
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	2380      	movs	r3, #128	@ 0x80
 80018da:	025b      	lsls	r3, r3, #9
 80018dc:	4013      	ands	r3, r2
 80018de:	d131      	bne.n	8001944 <HAL_ADC_ConfigChannel+0x1d4>
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	2380      	movs	r3, #128	@ 0x80
 80018e6:	029b      	lsls	r3, r3, #10
 80018e8:	4013      	ands	r3, r2
 80018ea:	d129      	bne.n	8001940 <HAL_ADC_ConfigChannel+0x1d0>
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	2380      	movs	r3, #128	@ 0x80
 80018f2:	02db      	lsls	r3, r3, #11
 80018f4:	4013      	ands	r3, r2
 80018f6:	d121      	bne.n	800193c <HAL_ADC_ConfigChannel+0x1cc>
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	2380      	movs	r3, #128	@ 0x80
 80018fe:	031b      	lsls	r3, r3, #12
 8001900:	4013      	ands	r3, r2
 8001902:	d119      	bne.n	8001938 <HAL_ADC_ConfigChannel+0x1c8>
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	2380      	movs	r3, #128	@ 0x80
 800190a:	035b      	lsls	r3, r3, #13
 800190c:	4013      	ands	r3, r2
 800190e:	d111      	bne.n	8001934 <HAL_ADC_ConfigChannel+0x1c4>
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	2380      	movs	r3, #128	@ 0x80
 8001916:	039b      	lsls	r3, r3, #14
 8001918:	4013      	ands	r3, r2
 800191a:	d109      	bne.n	8001930 <HAL_ADC_ConfigChannel+0x1c0>
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	2380      	movs	r3, #128	@ 0x80
 8001922:	03db      	lsls	r3, r3, #15
 8001924:	4013      	ands	r3, r2
 8001926:	d001      	beq.n	800192c <HAL_ADC_ConfigChannel+0x1bc>
 8001928:	2316      	movs	r3, #22
 800192a:	e02c      	b.n	8001986 <HAL_ADC_ConfigChannel+0x216>
 800192c:	2300      	movs	r3, #0
 800192e:	e02a      	b.n	8001986 <HAL_ADC_ConfigChannel+0x216>
 8001930:	2315      	movs	r3, #21
 8001932:	e028      	b.n	8001986 <HAL_ADC_ConfigChannel+0x216>
 8001934:	2314      	movs	r3, #20
 8001936:	e026      	b.n	8001986 <HAL_ADC_ConfigChannel+0x216>
 8001938:	2313      	movs	r3, #19
 800193a:	e024      	b.n	8001986 <HAL_ADC_ConfigChannel+0x216>
 800193c:	2312      	movs	r3, #18
 800193e:	e022      	b.n	8001986 <HAL_ADC_ConfigChannel+0x216>
 8001940:	2311      	movs	r3, #17
 8001942:	e020      	b.n	8001986 <HAL_ADC_ConfigChannel+0x216>
 8001944:	2310      	movs	r3, #16
 8001946:	e01e      	b.n	8001986 <HAL_ADC_ConfigChannel+0x216>
 8001948:	230f      	movs	r3, #15
 800194a:	e01c      	b.n	8001986 <HAL_ADC_ConfigChannel+0x216>
 800194c:	230e      	movs	r3, #14
 800194e:	e01a      	b.n	8001986 <HAL_ADC_ConfigChannel+0x216>
 8001950:	230d      	movs	r3, #13
 8001952:	e018      	b.n	8001986 <HAL_ADC_ConfigChannel+0x216>
 8001954:	230c      	movs	r3, #12
 8001956:	e016      	b.n	8001986 <HAL_ADC_ConfigChannel+0x216>
 8001958:	230b      	movs	r3, #11
 800195a:	e014      	b.n	8001986 <HAL_ADC_ConfigChannel+0x216>
 800195c:	230a      	movs	r3, #10
 800195e:	e012      	b.n	8001986 <HAL_ADC_ConfigChannel+0x216>
 8001960:	2309      	movs	r3, #9
 8001962:	e010      	b.n	8001986 <HAL_ADC_ConfigChannel+0x216>
 8001964:	2308      	movs	r3, #8
 8001966:	e00e      	b.n	8001986 <HAL_ADC_ConfigChannel+0x216>
 8001968:	2307      	movs	r3, #7
 800196a:	e00c      	b.n	8001986 <HAL_ADC_ConfigChannel+0x216>
 800196c:	2306      	movs	r3, #6
 800196e:	e00a      	b.n	8001986 <HAL_ADC_ConfigChannel+0x216>
 8001970:	2305      	movs	r3, #5
 8001972:	e008      	b.n	8001986 <HAL_ADC_ConfigChannel+0x216>
 8001974:	2304      	movs	r3, #4
 8001976:	e006      	b.n	8001986 <HAL_ADC_ConfigChannel+0x216>
 8001978:	2303      	movs	r3, #3
 800197a:	e004      	b.n	8001986 <HAL_ADC_ConfigChannel+0x216>
 800197c:	2302      	movs	r3, #2
 800197e:	e002      	b.n	8001986 <HAL_ADC_ConfigChannel+0x216>
 8001980:	2301      	movs	r3, #1
 8001982:	e000      	b.n	8001986 <HAL_ADC_ConfigChannel+0x216>
 8001984:	2300      	movs	r3, #0
 8001986:	683a      	ldr	r2, [r7, #0]
 8001988:	6852      	ldr	r2, [r2, #4]
 800198a:	201f      	movs	r0, #31
 800198c:	4002      	ands	r2, r0
 800198e:	4093      	lsls	r3, r2
 8001990:	000a      	movs	r2, r1
 8001992:	431a      	orrs	r2, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	089b      	lsrs	r3, r3, #2
 800199e:	1c5a      	adds	r2, r3, #1
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	69db      	ldr	r3, [r3, #28]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d808      	bhi.n	80019ba <HAL_ADC_ConfigChannel+0x24a>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6818      	ldr	r0, [r3, #0]
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	6859      	ldr	r1, [r3, #4]
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	001a      	movs	r2, r3
 80019b6:	f7ff fb9d 	bl	80010f4 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6818      	ldr	r0, [r3, #0]
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	6819      	ldr	r1, [r3, #0]
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	001a      	movs	r2, r3
 80019c8:	f7ff fbd8 	bl	800117c <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	db00      	blt.n	80019d6 <HAL_ADC_ConfigChannel+0x266>
 80019d4:	e096      	b.n	8001b04 <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80019d6:	4b3f      	ldr	r3, [pc, #252]	@ (8001ad4 <HAL_ADC_ConfigChannel+0x364>)
 80019d8:	0018      	movs	r0, r3
 80019da:	f7ff fb39 	bl	8001050 <LL_ADC_GetCommonPathInternalCh>
 80019de:	0003      	movs	r3, r0
 80019e0:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a3c      	ldr	r2, [pc, #240]	@ (8001ad8 <HAL_ADC_ConfigChannel+0x368>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d123      	bne.n	8001a34 <HAL_ADC_ConfigChannel+0x2c4>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80019ec:	693a      	ldr	r2, [r7, #16]
 80019ee:	2380      	movs	r3, #128	@ 0x80
 80019f0:	041b      	lsls	r3, r3, #16
 80019f2:	4013      	ands	r3, r2
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80019f4:	d11e      	bne.n	8001a34 <HAL_ADC_ConfigChannel+0x2c4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	2280      	movs	r2, #128	@ 0x80
 80019fa:	0412      	lsls	r2, r2, #16
 80019fc:	4313      	orrs	r3, r2
 80019fe:	4a35      	ldr	r2, [pc, #212]	@ (8001ad4 <HAL_ADC_ConfigChannel+0x364>)
 8001a00:	0019      	movs	r1, r3
 8001a02:	0010      	movs	r0, r2
 8001a04:	f7ff fb10 	bl	8001028 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 8001a08:	4b34      	ldr	r3, [pc, #208]	@ (8001adc <HAL_ADC_ConfigChannel+0x36c>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4934      	ldr	r1, [pc, #208]	@ (8001ae0 <HAL_ADC_ConfigChannel+0x370>)
 8001a0e:	0018      	movs	r0, r3
 8001a10:	f7fe fb7a 	bl	8000108 <__udivsi3>
 8001a14:	0003      	movs	r3, r0
 8001a16:	001a      	movs	r2, r3
 8001a18:	0013      	movs	r3, r2
 8001a1a:	005b      	lsls	r3, r3, #1
 8001a1c:	189b      	adds	r3, r3, r2
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	3301      	adds	r3, #1
 8001a22:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001a24:	e002      	b.n	8001a2c <HAL_ADC_ConfigChannel+0x2bc>
          {
            wait_loop_index--;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	3b01      	subs	r3, #1
 8001a2a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d1f9      	bne.n	8001a26 <HAL_ADC_ConfigChannel+0x2b6>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001a32:	e067      	b.n	8001b04 <HAL_ADC_ConfigChannel+0x394>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a2a      	ldr	r2, [pc, #168]	@ (8001ae4 <HAL_ADC_ConfigChannel+0x374>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d162      	bne.n	8001b04 <HAL_ADC_ConfigChannel+0x394>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001a3e:	693a      	ldr	r2, [r7, #16]
 8001a40:	2380      	movs	r3, #128	@ 0x80
 8001a42:	03db      	lsls	r3, r3, #15
 8001a44:	4013      	ands	r3, r2
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001a46:	d15d      	bne.n	8001b04 <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	2280      	movs	r2, #128	@ 0x80
 8001a4c:	03d2      	lsls	r2, r2, #15
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	4a20      	ldr	r2, [pc, #128]	@ (8001ad4 <HAL_ADC_ConfigChannel+0x364>)
 8001a52:	0019      	movs	r1, r3
 8001a54:	0010      	movs	r0, r2
 8001a56:	f7ff fae7 	bl	8001028 <LL_ADC_SetCommonPathInternalCh>
 8001a5a:	e053      	b.n	8001b04 <HAL_ADC_ConfigChannel+0x394>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	691a      	ldr	r2, [r3, #16]
 8001a60:	2380      	movs	r3, #128	@ 0x80
 8001a62:	061b      	lsls	r3, r3, #24
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d004      	beq.n	8001a72 <HAL_ADC_ConfigChannel+0x302>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001a6c:	4a18      	ldr	r2, [pc, #96]	@ (8001ad0 <HAL_ADC_ConfigChannel+0x360>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d107      	bne.n	8001a82 <HAL_ADC_ConfigChannel+0x312>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	0019      	movs	r1, r3
 8001a7c:	0010      	movs	r0, r2
 8001a7e:	f7ff fb6a 	bl	8001156 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: VrefInt/TempSensor.       */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	da3c      	bge.n	8001b04 <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001a8a:	4b12      	ldr	r3, [pc, #72]	@ (8001ad4 <HAL_ADC_ConfigChannel+0x364>)
 8001a8c:	0018      	movs	r0, r3
 8001a8e:	f7ff fadf 	bl	8001050 <LL_ADC_GetCommonPathInternalCh>
 8001a92:	0003      	movs	r3, r0
 8001a94:	613b      	str	r3, [r7, #16]

        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a0f      	ldr	r2, [pc, #60]	@ (8001ad8 <HAL_ADC_ConfigChannel+0x368>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d108      	bne.n	8001ab2 <HAL_ADC_ConfigChannel+0x342>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	4a11      	ldr	r2, [pc, #68]	@ (8001ae8 <HAL_ADC_ConfigChannel+0x378>)
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	4a0b      	ldr	r2, [pc, #44]	@ (8001ad4 <HAL_ADC_ConfigChannel+0x364>)
 8001aa8:	0019      	movs	r1, r3
 8001aaa:	0010      	movs	r0, r2
 8001aac:	f7ff fabc 	bl	8001028 <LL_ADC_SetCommonPathInternalCh>
 8001ab0:	e028      	b.n	8001b04 <HAL_ADC_ConfigChannel+0x394>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a0b      	ldr	r2, [pc, #44]	@ (8001ae4 <HAL_ADC_ConfigChannel+0x374>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d123      	bne.n	8001b04 <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	4a0b      	ldr	r2, [pc, #44]	@ (8001aec <HAL_ADC_ConfigChannel+0x37c>)
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	4a04      	ldr	r2, [pc, #16]	@ (8001ad4 <HAL_ADC_ConfigChannel+0x364>)
 8001ac4:	0019      	movs	r1, r3
 8001ac6:	0010      	movs	r0, r2
 8001ac8:	f7ff faae 	bl	8001028 <LL_ADC_SetCommonPathInternalCh>
 8001acc:	e01a      	b.n	8001b04 <HAL_ADC_ConfigChannel+0x394>
 8001ace:	46c0      	nop			@ (mov r8, r8)
 8001ad0:	80000004 	.word	0x80000004
 8001ad4:	40012708 	.word	0x40012708
 8001ad8:	a4000200 	.word	0xa4000200
 8001adc:	20000004 	.word	0x20000004
 8001ae0:	00030d40 	.word	0x00030d40
 8001ae4:	a8000400 	.word	0xa8000400
 8001ae8:	ff7fffff 	.word	0xff7fffff
 8001aec:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001af4:	2220      	movs	r2, #32
 8001af6:	431a      	orrs	r2, r3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001afc:	2317      	movs	r3, #23
 8001afe:	18fb      	adds	r3, r7, r3
 8001b00:	2201      	movs	r2, #1
 8001b02:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2254      	movs	r2, #84	@ 0x54
 8001b08:	2100      	movs	r1, #0
 8001b0a:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 8001b0c:	2317      	movs	r3, #23
 8001b0e:	18fb      	adds	r3, r7, r3
 8001b10:	781b      	ldrb	r3, [r3, #0]
}
 8001b12:	0018      	movs	r0, r3
 8001b14:	46bd      	mov	sp, r7
 8001b16:	b006      	add	sp, #24
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	46c0      	nop			@ (mov r8, r8)

08001b1c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b084      	sub	sp, #16
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001b24:	2300      	movs	r3, #0
 8001b26:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	0018      	movs	r0, r3
 8001b2e:	f7ff fb8d 	bl	800124c <LL_ADC_IsEnabled>
 8001b32:	1e03      	subs	r3, r0, #0
 8001b34:	d162      	bne.n	8001bfc <ADC_Enable+0xe0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	4a32      	ldr	r2, [pc, #200]	@ (8001c08 <ADC_Enable+0xec>)
 8001b3e:	4013      	ands	r3, r2
 8001b40:	d00d      	beq.n	8001b5e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b46:	2210      	movs	r2, #16
 8001b48:	431a      	orrs	r2, r3
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b52:	2201      	movs	r2, #1
 8001b54:	431a      	orrs	r2, r3
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e04f      	b.n	8001bfe <ADC_Enable+0xe2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	0018      	movs	r0, r3
 8001b64:	f7ff fb4e 	bl	8001204 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8001b68:	4b28      	ldr	r3, [pc, #160]	@ (8001c0c <ADC_Enable+0xf0>)
 8001b6a:	0018      	movs	r0, r3
 8001b6c:	f7ff fa70 	bl	8001050 <LL_ADC_GetCommonPathInternalCh>
 8001b70:	0002      	movs	r2, r0
 8001b72:	2380      	movs	r3, #128	@ 0x80
 8001b74:	041b      	lsls	r3, r3, #16
 8001b76:	4013      	ands	r3, r2
 8001b78:	d00f      	beq.n	8001b9a <ADC_Enable+0x7e>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001b7a:	4b25      	ldr	r3, [pc, #148]	@ (8001c10 <ADC_Enable+0xf4>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4925      	ldr	r1, [pc, #148]	@ (8001c14 <ADC_Enable+0xf8>)
 8001b80:	0018      	movs	r0, r3
 8001b82:	f7fe fac1 	bl	8000108 <__udivsi3>
 8001b86:	0003      	movs	r3, r0
 8001b88:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8001b8a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001b8c:	e002      	b.n	8001b94 <ADC_Enable+0x78>
      {
        wait_loop_index--;
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	3b01      	subs	r3, #1
 8001b92:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d1f9      	bne.n	8001b8e <ADC_Enable+0x72>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	7e5b      	ldrb	r3, [r3, #25]
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d02c      	beq.n	8001bfc <ADC_Enable+0xe0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8001ba2:	f7ff fa37 	bl	8001014 <HAL_GetTick>
 8001ba6:	0003      	movs	r3, r0
 8001ba8:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001baa:	e020      	b.n	8001bee <ADC_Enable+0xd2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	0018      	movs	r0, r3
 8001bb2:	f7ff fb4b 	bl	800124c <LL_ADC_IsEnabled>
 8001bb6:	1e03      	subs	r3, r0, #0
 8001bb8:	d104      	bne.n	8001bc4 <ADC_Enable+0xa8>
        {
          LL_ADC_Enable(hadc->Instance);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	0018      	movs	r0, r3
 8001bc0:	f7ff fb20 	bl	8001204 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001bc4:	f7ff fa26 	bl	8001014 <HAL_GetTick>
 8001bc8:	0002      	movs	r2, r0
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	2b02      	cmp	r3, #2
 8001bd0:	d90d      	bls.n	8001bee <ADC_Enable+0xd2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bd6:	2210      	movs	r2, #16
 8001bd8:	431a      	orrs	r2, r3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001be2:	2201      	movs	r2, #1
 8001be4:	431a      	orrs	r2, r3
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e007      	b.n	8001bfe <ADC_Enable+0xe2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	d1d7      	bne.n	8001bac <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001bfc:	2300      	movs	r3, #0
}
 8001bfe:	0018      	movs	r0, r3
 8001c00:	46bd      	mov	sp, r7
 8001c02:	b004      	add	sp, #16
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	46c0      	nop			@ (mov r8, r8)
 8001c08:	80000017 	.word	0x80000017
 8001c0c:	40012708 	.word	0x40012708
 8001c10:	20000004 	.word	0x20000004
 8001c14:	00030d40 	.word	0x00030d40

08001c18 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b084      	sub	sp, #16
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	0018      	movs	r0, r3
 8001c26:	f7ff fb22 	bl	800126e <LL_ADC_IsDisableOngoing>
 8001c2a:	0003      	movs	r3, r0
 8001c2c:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	0018      	movs	r0, r3
 8001c34:	f7ff fb0a 	bl	800124c <LL_ADC_IsEnabled>
 8001c38:	1e03      	subs	r3, r0, #0
 8001c3a:	d040      	beq.n	8001cbe <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d13d      	bne.n	8001cbe <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	2205      	movs	r2, #5
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d10d      	bne.n	8001c6c <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	0018      	movs	r0, r3
 8001c56:	f7ff fae7 	bl	8001228 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	2203      	movs	r2, #3
 8001c60:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001c62:	f7ff f9d7 	bl	8001014 <HAL_GetTick>
 8001c66:	0003      	movs	r3, r0
 8001c68:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001c6a:	e022      	b.n	8001cb2 <ADC_Disable+0x9a>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c70:	2210      	movs	r2, #16
 8001c72:	431a      	orrs	r2, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	431a      	orrs	r2, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e01b      	b.n	8001cc0 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001c88:	f7ff f9c4 	bl	8001014 <HAL_GetTick>
 8001c8c:	0002      	movs	r2, r0
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d90d      	bls.n	8001cb2 <ADC_Disable+0x9a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c9a:	2210      	movs	r2, #16
 8001c9c:	431a      	orrs	r2, r3
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	431a      	orrs	r2, r3
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	65da      	str	r2, [r3, #92]	@ 0x5c

        return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e006      	b.n	8001cc0 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	2201      	movs	r2, #1
 8001cba:	4013      	ands	r3, r2
 8001cbc:	d1e4      	bne.n	8001c88 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001cbe:	2300      	movs	r3, #0
}
 8001cc0:	0018      	movs	r0, r3
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	b004      	add	sp, #16
 8001cc6:	bd80      	pop	{r7, pc}

08001cc8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b084      	sub	sp, #16
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cd4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cda:	2250      	movs	r2, #80	@ 0x50
 8001cdc:	4013      	ands	r3, r2
 8001cde:	d141      	bne.n	8001d64 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ce4:	2280      	movs	r2, #128	@ 0x80
 8001ce6:	0092      	lsls	r2, r2, #2
 8001ce8:	431a      	orrs	r2, r3
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	0018      	movs	r0, r3
 8001cf4:	f7ff f9ed 	bl	80010d2 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001cf8:	1e03      	subs	r3, r0, #0
 8001cfa:	d02e      	beq.n	8001d5a <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	7e9b      	ldrb	r3, [r3, #26]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d12a      	bne.n	8001d5a <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	2208      	movs	r2, #8
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	2b08      	cmp	r3, #8
 8001d10:	d123      	bne.n	8001d5a <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	0018      	movs	r0, r3
 8001d18:	f7ff facc 	bl	80012b4 <LL_ADC_REG_IsConversionOngoing>
 8001d1c:	1e03      	subs	r3, r0, #0
 8001d1e:	d110      	bne.n	8001d42 <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	685a      	ldr	r2, [r3, #4]
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	210c      	movs	r1, #12
 8001d2c:	438a      	bics	r2, r1
 8001d2e:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d34:	4a15      	ldr	r2, [pc, #84]	@ (8001d8c <ADC_DMAConvCplt+0xc4>)
 8001d36:	4013      	ands	r3, r2
 8001d38:	2201      	movs	r2, #1
 8001d3a:	431a      	orrs	r2, r3
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	659a      	str	r2, [r3, #88]	@ 0x58
 8001d40:	e00b      	b.n	8001d5a <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d46:	2220      	movs	r2, #32
 8001d48:	431a      	orrs	r2, r3
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d52:	2201      	movs	r2, #1
 8001d54:	431a      	orrs	r2, r3
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	0018      	movs	r0, r3
 8001d5e:	f7ff fcef 	bl	8001740 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001d62:	e00f      	b.n	8001d84 <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d68:	2210      	movs	r2, #16
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	d004      	beq.n	8001d78 <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	0018      	movs	r0, r3
 8001d72:	f7ff fcf5 	bl	8001760 <HAL_ADC_ErrorCallback>
}
 8001d76:	e005      	b.n	8001d84 <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	0010      	movs	r0, r2
 8001d82:	4798      	blx	r3
}
 8001d84:	46c0      	nop			@ (mov r8, r8)
 8001d86:	46bd      	mov	sp, r7
 8001d88:	b004      	add	sp, #16
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	fffffefe 	.word	0xfffffefe

08001d90 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b084      	sub	sp, #16
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d9c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	0018      	movs	r0, r3
 8001da2:	f7ff fcd5 	bl	8001750 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001da6:	46c0      	nop			@ (mov r8, r8)
 8001da8:	46bd      	mov	sp, r7
 8001daa:	b004      	add	sp, #16
 8001dac:	bd80      	pop	{r7, pc}

08001dae <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001dae:	b580      	push	{r7, lr}
 8001db0:	b084      	sub	sp, #16
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dba:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dc0:	2240      	movs	r2, #64	@ 0x40
 8001dc2:	431a      	orrs	r2, r3
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dcc:	2204      	movs	r2, #4
 8001dce:	431a      	orrs	r2, r3
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	0018      	movs	r0, r3
 8001dd8:	f7ff fcc2 	bl	8001760 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001ddc:	46c0      	nop			@ (mov r8, r8)
 8001dde:	46bd      	mov	sp, r7
 8001de0:	b004      	add	sp, #16
 8001de2:	bd80      	pop	{r7, pc}

08001de4 <LL_ADC_GetCommonClock>:
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_PRESC));
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	23f0      	movs	r3, #240	@ 0xf0
 8001df2:	039b      	lsls	r3, r3, #14
 8001df4:	4013      	ands	r3, r2
}
 8001df6:	0018      	movs	r0, r3
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	b002      	add	sp, #8
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <LL_ADC_GetClock>:
{
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	b082      	sub	sp, #8
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_CKMODE));
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	691b      	ldr	r3, [r3, #16]
 8001e0a:	0f9b      	lsrs	r3, r3, #30
 8001e0c:	079b      	lsls	r3, r3, #30
}
 8001e0e:	0018      	movs	r0, r3
 8001e10:	46bd      	mov	sp, r7
 8001e12:	b002      	add	sp, #8
 8001e14:	bd80      	pop	{r7, pc}

08001e16 <LL_ADC_SetCalibrationFactor>:
{
 8001e16:	b580      	push	{r7, lr}
 8001e18:	b082      	sub	sp, #8
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	6078      	str	r0, [r7, #4]
 8001e1e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	22b4      	movs	r2, #180	@ 0xb4
 8001e24:	589b      	ldr	r3, [r3, r2]
 8001e26:	227f      	movs	r2, #127	@ 0x7f
 8001e28:	4393      	bics	r3, r2
 8001e2a:	001a      	movs	r2, r3
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	431a      	orrs	r2, r3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	21b4      	movs	r1, #180	@ 0xb4
 8001e34:	505a      	str	r2, [r3, r1]
}
 8001e36:	46c0      	nop			@ (mov r8, r8)
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	b002      	add	sp, #8
 8001e3c:	bd80      	pop	{r7, pc}

08001e3e <LL_ADC_GetCalibrationFactor>:
{
 8001e3e:	b580      	push	{r7, lr}
 8001e40:	b082      	sub	sp, #8
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	22b4      	movs	r2, #180	@ 0xb4
 8001e4a:	589b      	ldr	r3, [r3, r2]
 8001e4c:	227f      	movs	r2, #127	@ 0x7f
 8001e4e:	4013      	ands	r3, r2
}
 8001e50:	0018      	movs	r0, r3
 8001e52:	46bd      	mov	sp, r7
 8001e54:	b002      	add	sp, #8
 8001e56:	bd80      	pop	{r7, pc}

08001e58 <LL_ADC_Enable>:
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	4a04      	ldr	r2, [pc, #16]	@ (8001e78 <LL_ADC_Enable+0x20>)
 8001e66:	4013      	ands	r3, r2
 8001e68:	2201      	movs	r2, #1
 8001e6a:	431a      	orrs	r2, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	609a      	str	r2, [r3, #8]
}
 8001e70:	46c0      	nop			@ (mov r8, r8)
 8001e72:	46bd      	mov	sp, r7
 8001e74:	b002      	add	sp, #8
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	7fffffe8 	.word	0x7fffffe8

08001e7c <LL_ADC_Disable>:
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	4a04      	ldr	r2, [pc, #16]	@ (8001e9c <LL_ADC_Disable+0x20>)
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	2202      	movs	r2, #2
 8001e8e:	431a      	orrs	r2, r3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	609a      	str	r2, [r3, #8]
}
 8001e94:	46c0      	nop			@ (mov r8, r8)
 8001e96:	46bd      	mov	sp, r7
 8001e98:	b002      	add	sp, #8
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	7fffffe8 	.word	0x7fffffe8

08001ea0 <LL_ADC_IsEnabled>:
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	2201      	movs	r2, #1
 8001eae:	4013      	ands	r3, r2
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d101      	bne.n	8001eb8 <LL_ADC_IsEnabled+0x18>
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e000      	b.n	8001eba <LL_ADC_IsEnabled+0x1a>
 8001eb8:	2300      	movs	r3, #0
}
 8001eba:	0018      	movs	r0, r3
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	b002      	add	sp, #8
 8001ec0:	bd80      	pop	{r7, pc}
	...

08001ec4 <LL_ADC_StartCalibration>:
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	4a05      	ldr	r2, [pc, #20]	@ (8001ee8 <LL_ADC_StartCalibration+0x24>)
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	2280      	movs	r2, #128	@ 0x80
 8001ed6:	0612      	lsls	r2, r2, #24
 8001ed8:	431a      	orrs	r2, r3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	609a      	str	r2, [r3, #8]
}
 8001ede:	46c0      	nop			@ (mov r8, r8)
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	b002      	add	sp, #8
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	46c0      	nop			@ (mov r8, r8)
 8001ee8:	7fffffe8 	.word	0x7fffffe8

08001eec <LL_ADC_IsCalibrationOnGoing>:
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	0fdb      	lsrs	r3, r3, #31
 8001efa:	07da      	lsls	r2, r3, #31
 8001efc:	2380      	movs	r3, #128	@ 0x80
 8001efe:	061b      	lsls	r3, r3, #24
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d101      	bne.n	8001f08 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8001f04:	2301      	movs	r3, #1
 8001f06:	e000      	b.n	8001f0a <LL_ADC_IsCalibrationOnGoing+0x1e>
 8001f08:	2300      	movs	r3, #0
}
 8001f0a:	0018      	movs	r0, r3
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	b002      	add	sp, #8
 8001f10:	bd80      	pop	{r7, pc}
	...

08001f14 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8001f14:	b590      	push	{r4, r7, lr}
 8001f16:	b08b      	sub	sp, #44	@ 0x2c
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	60fb      	str	r3, [r7, #12]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 8001f20:	2300      	movs	r3, #0
 8001f22:	623b      	str	r3, [r7, #32]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2254      	movs	r2, #84	@ 0x54
 8001f28:	5c9b      	ldrb	r3, [r3, r2]
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d101      	bne.n	8001f32 <HAL_ADCEx_Calibration_Start+0x1e>
 8001f2e:	2302      	movs	r3, #2
 8001f30:	e0e4      	b.n	80020fc <HAL_ADCEx_Calibration_Start+0x1e8>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2254      	movs	r2, #84	@ 0x54
 8001f36:	2101      	movs	r1, #1
 8001f38:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8001f3a:	231f      	movs	r3, #31
 8001f3c:	18fc      	adds	r4, r7, r3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	0018      	movs	r0, r3
 8001f42:	f7ff fe69 	bl	8001c18 <ADC_Disable>
 8001f46:	0003      	movs	r3, r0
 8001f48:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	0018      	movs	r0, r3
 8001f50:	f7ff ffa6 	bl	8001ea0 <LL_ADC_IsEnabled>
 8001f54:	1e03      	subs	r3, r0, #0
 8001f56:	d000      	beq.n	8001f5a <HAL_ADCEx_Calibration_Start+0x46>
 8001f58:	e0c3      	b.n	80020e2 <HAL_ADCEx_Calibration_Start+0x1ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f5e:	4a69      	ldr	r2, [pc, #420]	@ (8002104 <HAL_ADCEx_Calibration_Start+0x1f0>)
 8001f60:	4013      	ands	r3, r2
 8001f62:	2202      	movs	r2, #2
 8001f64:	431a      	orrs	r2, r3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	4a65      	ldr	r2, [pc, #404]	@ (8002108 <HAL_ADCEx_Calibration_Start+0x1f4>)
 8001f72:	4013      	ands	r3, r2
 8001f74:	61bb      	str	r3, [r7, #24]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	68da      	ldr	r2, [r3, #12]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4962      	ldr	r1, [pc, #392]	@ (800210c <HAL_ADCEx_Calibration_Start+0x1f8>)
 8001f82:	400a      	ands	r2, r1
 8001f84:	60da      	str	r2, [r3, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8001f86:	2300      	movs	r3, #0
 8001f88:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f8a:	e02f      	b.n	8001fec <HAL_ADCEx_Calibration_Start+0xd8>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	0018      	movs	r0, r3
 8001f92:	f7ff ff97 	bl	8001ec4 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8001f96:	e015      	b.n	8001fc4 <HAL_ADCEx_Calibration_Start+0xb0>
      {
        wait_loop_index++;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	60fb      	str	r3, [r7, #12]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8001f9e:	68fa      	ldr	r2, [r7, #12]
 8001fa0:	23ae      	movs	r3, #174	@ 0xae
 8001fa2:	029b      	lsls	r3, r3, #10
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d30d      	bcc.n	8001fc4 <HAL_ADCEx_Calibration_Start+0xb0>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fac:	2212      	movs	r2, #18
 8001fae:	4393      	bics	r3, r2
 8001fb0:	2210      	movs	r2, #16
 8001fb2:	431a      	orrs	r2, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	659a      	str	r2, [r3, #88]	@ 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2254      	movs	r2, #84	@ 0x54
 8001fbc:	2100      	movs	r1, #0
 8001fbe:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e09b      	b.n	80020fc <HAL_ADCEx_Calibration_Start+0x1e8>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	0018      	movs	r0, r3
 8001fca:	f7ff ff8f 	bl	8001eec <LL_ADC_IsCalibrationOnGoing>
 8001fce:	1e03      	subs	r3, r0, #0
 8001fd0:	d1e2      	bne.n	8001f98 <HAL_ADCEx_Calibration_Start+0x84>
        }
      }
      /* Read the calibration factor and increment by one */
      calibration_factor_accumulated += (LL_ADC_GetCalibrationFactor(hadc->Instance) + 1UL);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	0018      	movs	r0, r3
 8001fd8:	f7ff ff31 	bl	8001e3e <LL_ADC_GetCalibrationFactor>
 8001fdc:	0003      	movs	r3, r0
 8001fde:	3301      	adds	r3, #1
 8001fe0:	6a3a      	ldr	r2, [r7, #32]
 8001fe2:	18d3      	adds	r3, r2, r3
 8001fe4:	623b      	str	r3, [r7, #32]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8001fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fe8:	3301      	adds	r3, #1
 8001fea:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fee:	2b07      	cmp	r3, #7
 8001ff0:	d9cc      	bls.n	8001f8c <HAL_ADCEx_Calibration_Start+0x78>
    }
    /* Compute average (rounded up to the nearest integer) */
    calibration_factor_accumulated += (calibration_index / 2UL);
 8001ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ff4:	085b      	lsrs	r3, r3, #1
 8001ff6:	6a3a      	ldr	r2, [r7, #32]
 8001ff8:	18d3      	adds	r3, r2, r3
 8001ffa:	623b      	str	r3, [r7, #32]
    calibration_factor_accumulated /= calibration_index;
 8001ffc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001ffe:	6a38      	ldr	r0, [r7, #32]
 8002000:	f7fe f882 	bl	8000108 <__udivsi3>
 8002004:	0003      	movs	r3, r0
 8002006:	623b      	str	r3, [r7, #32]

    /* Apply calibration factor (requires ADC enable and disable process) */
    LL_ADC_Enable(hadc->Instance);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	0018      	movs	r0, r3
 800200e:	f7ff ff23 	bl	8001e58 <LL_ADC_Enable>

    /* Case of ADC clocked at low frequency: Delay required between ADC enable and disable actions */
    if (LL_ADC_GetClock(hadc->Instance) == LL_ADC_CLOCK_ASYNC)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	0018      	movs	r0, r3
 8002018:	f7ff fef1 	bl	8001dfe <LL_ADC_GetClock>
 800201c:	1e03      	subs	r3, r0, #0
 800201e:	d11b      	bne.n	8002058 <HAL_ADCEx_Calibration_Start+0x144>
    {
      adc_clk_async_presc = LL_ADC_GetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002020:	4b3b      	ldr	r3, [pc, #236]	@ (8002110 <HAL_ADCEx_Calibration_Start+0x1fc>)
 8002022:	0018      	movs	r0, r3
 8002024:	f7ff fede 	bl	8001de4 <LL_ADC_GetCommonClock>
 8002028:	0003      	movs	r3, r0
 800202a:	617b      	str	r3, [r7, #20]

      if (adc_clk_async_presc >= LL_ADC_CLOCK_ASYNC_DIV16)
 800202c:	697a      	ldr	r2, [r7, #20]
 800202e:	23e0      	movs	r3, #224	@ 0xe0
 8002030:	035b      	lsls	r3, r3, #13
 8002032:	429a      	cmp	r2, r3
 8002034:	d310      	bcc.n	8002058 <HAL_ADCEx_Calibration_Start+0x144>
      {
        /* Delay loop initialization and execution */
        /* Delay depends on ADC clock prescaler: Compute ADC clock asynchronous prescaler to decimal format */
        delay_cpu_cycles = (1UL << ((adc_clk_async_presc >> ADC_CCR_PRESC_Pos) - 3UL));
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	0c9b      	lsrs	r3, r3, #18
 800203a:	3b03      	subs	r3, #3
 800203c:	2201      	movs	r2, #1
 800203e:	409a      	lsls	r2, r3
 8002040:	0013      	movs	r3, r2
 8002042:	60bb      	str	r3, [r7, #8]
        /* Divide variable by 2 to compensate partially CPU processing cycles */
        delay_cpu_cycles >>= 1UL;
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	085b      	lsrs	r3, r3, #1
 8002048:	60bb      	str	r3, [r7, #8]

        while (delay_cpu_cycles != 0UL)
 800204a:	e002      	b.n	8002052 <HAL_ADCEx_Calibration_Start+0x13e>
        {
          delay_cpu_cycles--;
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	3b01      	subs	r3, #1
 8002050:	60bb      	str	r3, [r7, #8]
        while (delay_cpu_cycles != 0UL)
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d1f9      	bne.n	800204c <HAL_ADCEx_Calibration_Start+0x138>
        }
      }
    }

    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	6a3a      	ldr	r2, [r7, #32]
 800205e:	0011      	movs	r1, r2
 8002060:	0018      	movs	r0, r3
 8002062:	f7ff fed8 	bl	8001e16 <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	0018      	movs	r0, r3
 800206c:	f7ff ff06 	bl	8001e7c <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002070:	f7fe ffd0 	bl	8001014 <HAL_GetTick>
 8002074:	0003      	movs	r3, r0
 8002076:	613b      	str	r3, [r7, #16]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002078:	e01b      	b.n	80020b2 <HAL_ADCEx_Calibration_Start+0x19e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800207a:	f7fe ffcb 	bl	8001014 <HAL_GetTick>
 800207e:	0002      	movs	r2, r0
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	2b02      	cmp	r3, #2
 8002086:	d914      	bls.n	80020b2 <HAL_ADCEx_Calibration_Start+0x19e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	0018      	movs	r0, r3
 800208e:	f7ff ff07 	bl	8001ea0 <LL_ADC_IsEnabled>
 8002092:	1e03      	subs	r3, r0, #0
 8002094:	d00d      	beq.n	80020b2 <HAL_ADCEx_Calibration_Start+0x19e>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800209a:	2210      	movs	r2, #16
 800209c:	431a      	orrs	r2, r3
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020a6:	2201      	movs	r2, #1
 80020a8:	431a      	orrs	r2, r3
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e024      	b.n	80020fc <HAL_ADCEx_Calibration_Start+0x1e8>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	0018      	movs	r0, r3
 80020b8:	f7ff fef2 	bl	8001ea0 <LL_ADC_IsEnabled>
 80020bc:	1e03      	subs	r3, r0, #0
 80020be:	d1dc      	bne.n	800207a <HAL_ADCEx_Calibration_Start+0x166>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	68d9      	ldr	r1, [r3, #12]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	69ba      	ldr	r2, [r7, #24]
 80020cc:	430a      	orrs	r2, r1
 80020ce:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020d4:	2203      	movs	r2, #3
 80020d6:	4393      	bics	r3, r2
 80020d8:	2201      	movs	r2, #1
 80020da:	431a      	orrs	r2, r3
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	659a      	str	r2, [r3, #88]	@ 0x58
 80020e0:	e005      	b.n	80020ee <HAL_ADCEx_Calibration_Start+0x1da>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020e6:	2210      	movs	r2, #16
 80020e8:	431a      	orrs	r2, r3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2254      	movs	r2, #84	@ 0x54
 80020f2:	2100      	movs	r1, #0
 80020f4:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 80020f6:	231f      	movs	r3, #31
 80020f8:	18fb      	adds	r3, r7, r3
 80020fa:	781b      	ldrb	r3, [r3, #0]
}
 80020fc:	0018      	movs	r0, r3
 80020fe:	46bd      	mov	sp, r7
 8002100:	b00b      	add	sp, #44	@ 0x2c
 8002102:	bd90      	pop	{r4, r7, pc}
 8002104:	fffffefd 	.word	0xfffffefd
 8002108:	00008003 	.word	0x00008003
 800210c:	ffff7ffc 	.word	0xffff7ffc
 8002110:	40012708 	.word	0x40012708

08002114 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002114:	b590      	push	{r4, r7, lr}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	0002      	movs	r2, r0
 800211c:	6039      	str	r1, [r7, #0]
 800211e:	1dfb      	adds	r3, r7, #7
 8002120:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002122:	1dfb      	adds	r3, r7, #7
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	2b7f      	cmp	r3, #127	@ 0x7f
 8002128:	d828      	bhi.n	800217c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800212a:	4a2f      	ldr	r2, [pc, #188]	@ (80021e8 <__NVIC_SetPriority+0xd4>)
 800212c:	1dfb      	adds	r3, r7, #7
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	b25b      	sxtb	r3, r3
 8002132:	089b      	lsrs	r3, r3, #2
 8002134:	33c0      	adds	r3, #192	@ 0xc0
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	589b      	ldr	r3, [r3, r2]
 800213a:	1dfa      	adds	r2, r7, #7
 800213c:	7812      	ldrb	r2, [r2, #0]
 800213e:	0011      	movs	r1, r2
 8002140:	2203      	movs	r2, #3
 8002142:	400a      	ands	r2, r1
 8002144:	00d2      	lsls	r2, r2, #3
 8002146:	21ff      	movs	r1, #255	@ 0xff
 8002148:	4091      	lsls	r1, r2
 800214a:	000a      	movs	r2, r1
 800214c:	43d2      	mvns	r2, r2
 800214e:	401a      	ands	r2, r3
 8002150:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	019b      	lsls	r3, r3, #6
 8002156:	22ff      	movs	r2, #255	@ 0xff
 8002158:	401a      	ands	r2, r3
 800215a:	1dfb      	adds	r3, r7, #7
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	0018      	movs	r0, r3
 8002160:	2303      	movs	r3, #3
 8002162:	4003      	ands	r3, r0
 8002164:	00db      	lsls	r3, r3, #3
 8002166:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002168:	481f      	ldr	r0, [pc, #124]	@ (80021e8 <__NVIC_SetPriority+0xd4>)
 800216a:	1dfb      	adds	r3, r7, #7
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	b25b      	sxtb	r3, r3
 8002170:	089b      	lsrs	r3, r3, #2
 8002172:	430a      	orrs	r2, r1
 8002174:	33c0      	adds	r3, #192	@ 0xc0
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800217a:	e031      	b.n	80021e0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800217c:	4a1b      	ldr	r2, [pc, #108]	@ (80021ec <__NVIC_SetPriority+0xd8>)
 800217e:	1dfb      	adds	r3, r7, #7
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	0019      	movs	r1, r3
 8002184:	230f      	movs	r3, #15
 8002186:	400b      	ands	r3, r1
 8002188:	3b08      	subs	r3, #8
 800218a:	089b      	lsrs	r3, r3, #2
 800218c:	3306      	adds	r3, #6
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	18d3      	adds	r3, r2, r3
 8002192:	3304      	adds	r3, #4
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	1dfa      	adds	r2, r7, #7
 8002198:	7812      	ldrb	r2, [r2, #0]
 800219a:	0011      	movs	r1, r2
 800219c:	2203      	movs	r2, #3
 800219e:	400a      	ands	r2, r1
 80021a0:	00d2      	lsls	r2, r2, #3
 80021a2:	21ff      	movs	r1, #255	@ 0xff
 80021a4:	4091      	lsls	r1, r2
 80021a6:	000a      	movs	r2, r1
 80021a8:	43d2      	mvns	r2, r2
 80021aa:	401a      	ands	r2, r3
 80021ac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	019b      	lsls	r3, r3, #6
 80021b2:	22ff      	movs	r2, #255	@ 0xff
 80021b4:	401a      	ands	r2, r3
 80021b6:	1dfb      	adds	r3, r7, #7
 80021b8:	781b      	ldrb	r3, [r3, #0]
 80021ba:	0018      	movs	r0, r3
 80021bc:	2303      	movs	r3, #3
 80021be:	4003      	ands	r3, r0
 80021c0:	00db      	lsls	r3, r3, #3
 80021c2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80021c4:	4809      	ldr	r0, [pc, #36]	@ (80021ec <__NVIC_SetPriority+0xd8>)
 80021c6:	1dfb      	adds	r3, r7, #7
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	001c      	movs	r4, r3
 80021cc:	230f      	movs	r3, #15
 80021ce:	4023      	ands	r3, r4
 80021d0:	3b08      	subs	r3, #8
 80021d2:	089b      	lsrs	r3, r3, #2
 80021d4:	430a      	orrs	r2, r1
 80021d6:	3306      	adds	r3, #6
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	18c3      	adds	r3, r0, r3
 80021dc:	3304      	adds	r3, #4
 80021de:	601a      	str	r2, [r3, #0]
}
 80021e0:	46c0      	nop			@ (mov r8, r8)
 80021e2:	46bd      	mov	sp, r7
 80021e4:	b003      	add	sp, #12
 80021e6:	bd90      	pop	{r4, r7, pc}
 80021e8:	e000e100 	.word	0xe000e100
 80021ec:	e000ed00 	.word	0xe000ed00

080021f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	1e5a      	subs	r2, r3, #1
 80021fc:	2380      	movs	r3, #128	@ 0x80
 80021fe:	045b      	lsls	r3, r3, #17
 8002200:	429a      	cmp	r2, r3
 8002202:	d301      	bcc.n	8002208 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002204:	2301      	movs	r3, #1
 8002206:	e010      	b.n	800222a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002208:	4b0a      	ldr	r3, [pc, #40]	@ (8002234 <SysTick_Config+0x44>)
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	3a01      	subs	r2, #1
 800220e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002210:	2301      	movs	r3, #1
 8002212:	425b      	negs	r3, r3
 8002214:	2103      	movs	r1, #3
 8002216:	0018      	movs	r0, r3
 8002218:	f7ff ff7c 	bl	8002114 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800221c:	4b05      	ldr	r3, [pc, #20]	@ (8002234 <SysTick_Config+0x44>)
 800221e:	2200      	movs	r2, #0
 8002220:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002222:	4b04      	ldr	r3, [pc, #16]	@ (8002234 <SysTick_Config+0x44>)
 8002224:	2207      	movs	r2, #7
 8002226:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002228:	2300      	movs	r3, #0
}
 800222a:	0018      	movs	r0, r3
 800222c:	46bd      	mov	sp, r7
 800222e:	b002      	add	sp, #8
 8002230:	bd80      	pop	{r7, pc}
 8002232:	46c0      	nop			@ (mov r8, r8)
 8002234:	e000e010 	.word	0xe000e010

08002238 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b084      	sub	sp, #16
 800223c:	af00      	add	r7, sp, #0
 800223e:	60b9      	str	r1, [r7, #8]
 8002240:	607a      	str	r2, [r7, #4]
 8002242:	210f      	movs	r1, #15
 8002244:	187b      	adds	r3, r7, r1
 8002246:	1c02      	adds	r2, r0, #0
 8002248:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800224a:	68ba      	ldr	r2, [r7, #8]
 800224c:	187b      	adds	r3, r7, r1
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	b25b      	sxtb	r3, r3
 8002252:	0011      	movs	r1, r2
 8002254:	0018      	movs	r0, r3
 8002256:	f7ff ff5d 	bl	8002114 <__NVIC_SetPriority>
}
 800225a:	46c0      	nop			@ (mov r8, r8)
 800225c:	46bd      	mov	sp, r7
 800225e:	b004      	add	sp, #16
 8002260:	bd80      	pop	{r7, pc}

08002262 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002262:	b580      	push	{r7, lr}
 8002264:	b082      	sub	sp, #8
 8002266:	af00      	add	r7, sp, #0
 8002268:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	0018      	movs	r0, r3
 800226e:	f7ff ffbf 	bl	80021f0 <SysTick_Config>
 8002272:	0003      	movs	r3, r0
}
 8002274:	0018      	movs	r0, r3
 8002276:	46bd      	mov	sp, r7
 8002278:	b002      	add	sp, #8
 800227a:	bd80      	pop	{r7, pc}

0800227c <HAL_DMA_Init>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d101      	bne.n	800228e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e077      	b.n	800237e <HAL_DMA_Init+0x102>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* calculation of the channel index */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a3d      	ldr	r2, [pc, #244]	@ (8002388 <HAL_DMA_Init+0x10c>)
 8002294:	4694      	mov	ip, r2
 8002296:	4463      	add	r3, ip
 8002298:	2114      	movs	r1, #20
 800229a:	0018      	movs	r0, r3
 800229c:	f7fd ff34 	bl	8000108 <__udivsi3>
 80022a0:	0003      	movs	r3, r0
                                                                                (uint32_t)DMA1_Channel1)) << 2U;
 80022a2:	009a      	lsls	r2, r3, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2225      	movs	r2, #37	@ 0x25
 80022ac:	2102      	movs	r1, #2
 80022ae:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4934      	ldr	r1, [pc, #208]	@ (800238c <HAL_DMA_Init+0x110>)
 80022bc:	400a      	ands	r2, r1
 80022be:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	6819      	ldr	r1, [r3, #0]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	689a      	ldr	r2, [r3, #8]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	68db      	ldr	r3, [r3, #12]
 80022ce:	431a      	orrs	r2, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	691b      	ldr	r3, [r3, #16]
 80022d4:	431a      	orrs	r2, r3
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	695b      	ldr	r3, [r3, #20]
 80022da:	431a      	orrs	r2, r3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	699b      	ldr	r3, [r3, #24]
 80022e0:	431a      	orrs	r2, r3
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	69db      	ldr	r3, [r3, #28]
 80022e6:	431a      	orrs	r2, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6a1b      	ldr	r3, [r3, #32]
 80022ec:	431a      	orrs	r2, r3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	430a      	orrs	r2, r1
 80022f4:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	0018      	movs	r0, r3
 80022fa:	f000 f911 	bl	8002520 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	689a      	ldr	r2, [r3, #8]
 8002302:	2380      	movs	r3, #128	@ 0x80
 8002304:	01db      	lsls	r3, r3, #7
 8002306:	429a      	cmp	r2, r3
 8002308:	d102      	bne.n	8002310 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2200      	movs	r2, #0
 800230e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	685a      	ldr	r2, [r3, #4]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002318:	21ff      	movs	r1, #255	@ 0xff
 800231a:	400a      	ands	r2, r1
 800231c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002326:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d011      	beq.n	8002354 <HAL_DMA_Init+0xd8>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	2b04      	cmp	r3, #4
 8002336:	d80d      	bhi.n	8002354 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	0018      	movs	r0, r3
 800233c:	f000 f91c 	bl	8002578 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002344:	2200      	movs	r2, #0
 8002346:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002350:	605a      	str	r2, [r3, #4]
 8002352:	e008      	b.n	8002366 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2200      	movs	r2, #0
 8002358:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2200      	movs	r2, #0
 800235e:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2200      	movs	r2, #0
 8002364:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2200      	movs	r2, #0
 800236a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2225      	movs	r2, #37	@ 0x25
 8002370:	2101      	movs	r1, #1
 8002372:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2224      	movs	r2, #36	@ 0x24
 8002378:	2100      	movs	r1, #0
 800237a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800237c:	2300      	movs	r3, #0
}
 800237e:	0018      	movs	r0, r3
 8002380:	46bd      	mov	sp, r7
 8002382:	b002      	add	sp, #8
 8002384:	bd80      	pop	{r7, pc}
 8002386:	46c0      	nop			@ (mov r8, r8)
 8002388:	bffdfff8 	.word	0xbffdfff8
 800238c:	ffff800f 	.word	0xffff800f

08002390 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b086      	sub	sp, #24
 8002394:	af00      	add	r7, sp, #0
 8002396:	60f8      	str	r0, [r7, #12]
 8002398:	60b9      	str	r1, [r7, #8]
 800239a:	607a      	str	r2, [r7, #4]
 800239c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800239e:	2317      	movs	r3, #23
 80023a0:	18fb      	adds	r3, r7, r3
 80023a2:	2200      	movs	r2, #0
 80023a4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2224      	movs	r2, #36	@ 0x24
 80023aa:	5c9b      	ldrb	r3, [r3, r2]
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d101      	bne.n	80023b4 <HAL_DMA_Start_IT+0x24>
 80023b0:	2302      	movs	r3, #2
 80023b2:	e070      	b.n	8002496 <HAL_DMA_Start_IT+0x106>
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2224      	movs	r2, #36	@ 0x24
 80023b8:	2101      	movs	r1, #1
 80023ba:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2225      	movs	r2, #37	@ 0x25
 80023c0:	5c9b      	ldrb	r3, [r3, r2]
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d157      	bne.n	8002478 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2225      	movs	r2, #37	@ 0x25
 80023cc:	2102      	movs	r1, #2
 80023ce:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2200      	movs	r2, #0
 80023d4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2101      	movs	r1, #1
 80023e2:	438a      	bics	r2, r1
 80023e4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	68b9      	ldr	r1, [r7, #8]
 80023ec:	68f8      	ldr	r0, [r7, #12]
 80023ee:	f000 f857 	bl	80024a0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d008      	beq.n	800240c <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	210e      	movs	r1, #14
 8002406:	430a      	orrs	r2, r1
 8002408:	601a      	str	r2, [r3, #0]
 800240a:	e00f      	b.n	800242c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	2104      	movs	r1, #4
 8002418:	438a      	bics	r2, r1
 800241a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	210a      	movs	r1, #10
 8002428:	430a      	orrs	r2, r1
 800242a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	2380      	movs	r3, #128	@ 0x80
 8002434:	025b      	lsls	r3, r3, #9
 8002436:	4013      	ands	r3, r2
 8002438:	d008      	beq.n	800244c <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002444:	2180      	movs	r1, #128	@ 0x80
 8002446:	0049      	lsls	r1, r1, #1
 8002448:	430a      	orrs	r2, r1
 800244a:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002450:	2b00      	cmp	r3, #0
 8002452:	d008      	beq.n	8002466 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800245e:	2180      	movs	r1, #128	@ 0x80
 8002460:	0049      	lsls	r1, r1, #1
 8002462:	430a      	orrs	r2, r1
 8002464:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	2101      	movs	r1, #1
 8002472:	430a      	orrs	r2, r1
 8002474:	601a      	str	r2, [r3, #0]
 8002476:	e007      	b.n	8002488 <HAL_DMA_Start_IT+0xf8>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2224      	movs	r2, #36	@ 0x24
 800247c:	2100      	movs	r1, #0
 800247e:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002480:	2317      	movs	r3, #23
 8002482:	18fb      	adds	r3, r7, r3
 8002484:	2202      	movs	r2, #2
 8002486:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hdma);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2224      	movs	r2, #36	@ 0x24
 800248c:	2100      	movs	r1, #0
 800248e:	5499      	strb	r1, [r3, r2]

  return status;
 8002490:	2317      	movs	r3, #23
 8002492:	18fb      	adds	r3, r7, r3
 8002494:	781b      	ldrb	r3, [r3, #0]
}
 8002496:	0018      	movs	r0, r3
 8002498:	46bd      	mov	sp, r7
 800249a:	b006      	add	sp, #24
 800249c:	bd80      	pop	{r7, pc}
	...

080024a0 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b084      	sub	sp, #16
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	60f8      	str	r0, [r7, #12]
 80024a8:	60b9      	str	r1, [r7, #8]
 80024aa:	607a      	str	r2, [r7, #4]
 80024ac:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024b2:	68fa      	ldr	r2, [r7, #12]
 80024b4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80024b6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d004      	beq.n	80024ca <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024c4:	68fa      	ldr	r2, [r7, #12]
 80024c6:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80024c8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 80024ca:	4b14      	ldr	r3, [pc, #80]	@ (800251c <DMA_SetConfig+0x7c>)
 80024cc:	6859      	ldr	r1, [r3, #4]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024d2:	221c      	movs	r2, #28
 80024d4:	4013      	ands	r3, r2
 80024d6:	2201      	movs	r2, #1
 80024d8:	409a      	lsls	r2, r3
 80024da:	4b10      	ldr	r3, [pc, #64]	@ (800251c <DMA_SetConfig+0x7c>)
 80024dc:	430a      	orrs	r2, r1
 80024de:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	683a      	ldr	r2, [r7, #0]
 80024e6:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	2b10      	cmp	r3, #16
 80024ee:	d108      	bne.n	8002502 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	687a      	ldr	r2, [r7, #4]
 80024f6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	68ba      	ldr	r2, [r7, #8]
 80024fe:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002500:	e007      	b.n	8002512 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	68ba      	ldr	r2, [r7, #8]
 8002508:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	687a      	ldr	r2, [r7, #4]
 8002510:	60da      	str	r2, [r3, #12]
}
 8002512:	46c0      	nop			@ (mov r8, r8)
 8002514:	46bd      	mov	sp, r7
 8002516:	b004      	add	sp, #16
 8002518:	bd80      	pop	{r7, pc}
 800251a:	46c0      	nop			@ (mov r8, r8)
 800251c:	40020000 	.word	0x40020000

08002520 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	001a      	movs	r2, r3
 800252e:	23ff      	movs	r3, #255	@ 0xff
 8002530:	4013      	ands	r3, r2
 8002532:	3b08      	subs	r3, #8
 8002534:	2114      	movs	r1, #20
 8002536:	0018      	movs	r0, r3
 8002538:	f7fd fde6 	bl	8000108 <__udivsi3>
 800253c:	0003      	movs	r3, r0
 800253e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
                                                             ((hdma->ChannelIndex >> 2U) * \
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002544:	089b      	lsrs	r3, r3, #2
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
 8002546:	4a0a      	ldr	r2, [pc, #40]	@ (8002570 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8002548:	4694      	mov	ip, r2
 800254a:	4463      	add	r3, ip
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	001a      	movs	r2, r3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	645a      	str	r2, [r3, #68]	@ 0x44
                                                              ((uint32_t)DMAMUX1_Channel1 - \
                                                               (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	4a07      	ldr	r2, [pc, #28]	@ (8002574 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8002558:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	221c      	movs	r2, #28
 800255e:	4013      	ands	r3, r2
 8002560:	2201      	movs	r2, #1
 8002562:	409a      	lsls	r2, r3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8002568:	46c0      	nop			@ (mov r8, r8)
 800256a:	46bd      	mov	sp, r7
 800256c:	b004      	add	sp, #16
 800256e:	bd80      	pop	{r7, pc}
 8002570:	10008200 	.word	0x10008200
 8002574:	40020880 	.word	0x40020880

08002578 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	22ff      	movs	r2, #255	@ 0xff
 8002586:	4013      	ands	r3, r2
 8002588:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + \
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	4a0a      	ldr	r2, [pc, #40]	@ (80025b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800258e:	4694      	mov	ip, r2
 8002590:	4463      	add	r3, ip
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	001a      	movs	r2, r3
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	651a      	str	r2, [r3, #80]	@ 0x50
                                                                    ((request - 1U) * 4U)));

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4a07      	ldr	r2, [pc, #28]	@ (80025bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800259e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to 4, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	3b01      	subs	r3, #1
 80025a4:	2203      	movs	r2, #3
 80025a6:	4013      	ands	r3, r2
 80025a8:	2201      	movs	r2, #1
 80025aa:	409a      	lsls	r2, r3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	659a      	str	r2, [r3, #88]	@ 0x58
}
 80025b0:	46c0      	nop			@ (mov r8, r8)
 80025b2:	46bd      	mov	sp, r7
 80025b4:	b004      	add	sp, #16
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	1000823f 	.word	0x1000823f
 80025bc:	40020940 	.word	0x40020940

080025c0 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b086      	sub	sp, #24
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 80025ca:	2300      	movs	r3, #0
 80025cc:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80025ce:	e153      	b.n	8002878 <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	2101      	movs	r1, #1
 80025d6:	693a      	ldr	r2, [r7, #16]
 80025d8:	4091      	lsls	r1, r2
 80025da:	000a      	movs	r2, r1
 80025dc:	4013      	ands	r3, r2
 80025de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d100      	bne.n	80025e8 <HAL_GPIO_Init+0x28>
 80025e6:	e144      	b.n	8002872 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	2b02      	cmp	r3, #2
 80025ee:	d003      	beq.n	80025f8 <HAL_GPIO_Init+0x38>
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	2b12      	cmp	r3, #18
 80025f6:	d125      	bne.n	8002644 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	08da      	lsrs	r2, r3, #3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	3208      	adds	r2, #8
 8002600:	0092      	lsls	r2, r2, #2
 8002602:	58d3      	ldr	r3, [r2, r3]
 8002604:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	2207      	movs	r2, #7
 800260a:	4013      	ands	r3, r2
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	220f      	movs	r2, #15
 8002610:	409a      	lsls	r2, r3
 8002612:	0013      	movs	r3, r2
 8002614:	43da      	mvns	r2, r3
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	4013      	ands	r3, r2
 800261a:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	691b      	ldr	r3, [r3, #16]
 8002620:	220f      	movs	r2, #15
 8002622:	401a      	ands	r2, r3
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	2107      	movs	r1, #7
 8002628:	400b      	ands	r3, r1
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	409a      	lsls	r2, r3
 800262e:	0013      	movs	r3, r2
 8002630:	697a      	ldr	r2, [r7, #20]
 8002632:	4313      	orrs	r3, r2
 8002634:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	08da      	lsrs	r2, r3, #3
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	3208      	adds	r2, #8
 800263e:	0092      	lsls	r2, r2, #2
 8002640:	6979      	ldr	r1, [r7, #20]
 8002642:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	005b      	lsls	r3, r3, #1
 800264e:	2203      	movs	r2, #3
 8002650:	409a      	lsls	r2, r3
 8002652:	0013      	movs	r3, r2
 8002654:	43da      	mvns	r2, r3
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	4013      	ands	r3, r2
 800265a:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	2203      	movs	r2, #3
 8002662:	401a      	ands	r2, r3
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	005b      	lsls	r3, r3, #1
 8002668:	409a      	lsls	r2, r3
 800266a:	0013      	movs	r3, r2
 800266c:	697a      	ldr	r2, [r7, #20]
 800266e:	4313      	orrs	r3, r2
 8002670:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	697a      	ldr	r2, [r7, #20]
 8002676:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	2b01      	cmp	r3, #1
 800267e:	d00b      	beq.n	8002698 <HAL_GPIO_Init+0xd8>
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	2b02      	cmp	r3, #2
 8002686:	d007      	beq.n	8002698 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800268c:	2b11      	cmp	r3, #17
 800268e:	d003      	beq.n	8002698 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	2b12      	cmp	r3, #18
 8002696:	d130      	bne.n	80026fa <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	005b      	lsls	r3, r3, #1
 80026a2:	2203      	movs	r2, #3
 80026a4:	409a      	lsls	r2, r3
 80026a6:	0013      	movs	r3, r2
 80026a8:	43da      	mvns	r2, r3
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	4013      	ands	r3, r2
 80026ae:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	68da      	ldr	r2, [r3, #12]
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	005b      	lsls	r3, r3, #1
 80026b8:	409a      	lsls	r2, r3
 80026ba:	0013      	movs	r3, r2
 80026bc:	697a      	ldr	r2, [r7, #20]
 80026be:	4313      	orrs	r3, r2
 80026c0:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	697a      	ldr	r2, [r7, #20]
 80026c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 80026ce:	2201      	movs	r2, #1
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	409a      	lsls	r2, r3
 80026d4:	0013      	movs	r3, r2
 80026d6:	43da      	mvns	r2, r3
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	4013      	ands	r3, r2
 80026dc:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	091b      	lsrs	r3, r3, #4
 80026e4:	2201      	movs	r2, #1
 80026e6:	401a      	ands	r2, r3
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	409a      	lsls	r2, r3
 80026ec:	0013      	movs	r3, r2
 80026ee:	697a      	ldr	r2, [r7, #20]
 80026f0:	4313      	orrs	r3, r2
 80026f2:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	697a      	ldr	r2, [r7, #20]
 80026f8:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	2b03      	cmp	r3, #3
 8002700:	d017      	beq.n	8002732 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	68db      	ldr	r3, [r3, #12]
 8002706:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	005b      	lsls	r3, r3, #1
 800270c:	2203      	movs	r2, #3
 800270e:	409a      	lsls	r2, r3
 8002710:	0013      	movs	r3, r2
 8002712:	43da      	mvns	r2, r3
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	4013      	ands	r3, r2
 8002718:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	689a      	ldr	r2, [r3, #8]
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	005b      	lsls	r3, r3, #1
 8002722:	409a      	lsls	r2, r3
 8002724:	0013      	movs	r3, r2
 8002726:	697a      	ldr	r2, [r7, #20]
 8002728:	4313      	orrs	r3, r2
 800272a:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	697a      	ldr	r2, [r7, #20]
 8002730:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	685a      	ldr	r2, [r3, #4]
 8002736:	2380      	movs	r3, #128	@ 0x80
 8002738:	055b      	lsls	r3, r3, #21
 800273a:	4013      	ands	r3, r2
 800273c:	d100      	bne.n	8002740 <HAL_GPIO_Init+0x180>
 800273e:	e098      	b.n	8002872 <HAL_GPIO_Init+0x2b2>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8002740:	4a53      	ldr	r2, [pc, #332]	@ (8002890 <HAL_GPIO_Init+0x2d0>)
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	089b      	lsrs	r3, r3, #2
 8002746:	3318      	adds	r3, #24
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	589b      	ldr	r3, [r3, r2]
 800274c:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	2203      	movs	r2, #3
 8002752:	4013      	ands	r3, r2
 8002754:	00db      	lsls	r3, r3, #3
 8002756:	220f      	movs	r2, #15
 8002758:	409a      	lsls	r2, r3
 800275a:	0013      	movs	r3, r2
 800275c:	43da      	mvns	r2, r3
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	4013      	ands	r3, r2
 8002762:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	23a0      	movs	r3, #160	@ 0xa0
 8002768:	05db      	lsls	r3, r3, #23
 800276a:	429a      	cmp	r2, r3
 800276c:	d019      	beq.n	80027a2 <HAL_GPIO_Init+0x1e2>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4a48      	ldr	r2, [pc, #288]	@ (8002894 <HAL_GPIO_Init+0x2d4>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d013      	beq.n	800279e <HAL_GPIO_Init+0x1de>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4a47      	ldr	r2, [pc, #284]	@ (8002898 <HAL_GPIO_Init+0x2d8>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d00d      	beq.n	800279a <HAL_GPIO_Init+0x1da>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4a46      	ldr	r2, [pc, #280]	@ (800289c <HAL_GPIO_Init+0x2dc>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d007      	beq.n	8002796 <HAL_GPIO_Init+0x1d6>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4a45      	ldr	r2, [pc, #276]	@ (80028a0 <HAL_GPIO_Init+0x2e0>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d101      	bne.n	8002792 <HAL_GPIO_Init+0x1d2>
 800278e:	2305      	movs	r3, #5
 8002790:	e008      	b.n	80027a4 <HAL_GPIO_Init+0x1e4>
 8002792:	2306      	movs	r3, #6
 8002794:	e006      	b.n	80027a4 <HAL_GPIO_Init+0x1e4>
 8002796:	2303      	movs	r3, #3
 8002798:	e004      	b.n	80027a4 <HAL_GPIO_Init+0x1e4>
 800279a:	2302      	movs	r3, #2
 800279c:	e002      	b.n	80027a4 <HAL_GPIO_Init+0x1e4>
 800279e:	2301      	movs	r3, #1
 80027a0:	e000      	b.n	80027a4 <HAL_GPIO_Init+0x1e4>
 80027a2:	2300      	movs	r3, #0
 80027a4:	693a      	ldr	r2, [r7, #16]
 80027a6:	2103      	movs	r1, #3
 80027a8:	400a      	ands	r2, r1
 80027aa:	00d2      	lsls	r2, r2, #3
 80027ac:	4093      	lsls	r3, r2
 80027ae:	697a      	ldr	r2, [r7, #20]
 80027b0:	4313      	orrs	r3, r2
 80027b2:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 80027b4:	4936      	ldr	r1, [pc, #216]	@ (8002890 <HAL_GPIO_Init+0x2d0>)
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	089b      	lsrs	r3, r3, #2
 80027ba:	3318      	adds	r3, #24
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	697a      	ldr	r2, [r7, #20]
 80027c0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 80027c2:	4a33      	ldr	r2, [pc, #204]	@ (8002890 <HAL_GPIO_Init+0x2d0>)
 80027c4:	2380      	movs	r3, #128	@ 0x80
 80027c6:	58d3      	ldr	r3, [r2, r3]
 80027c8:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	43da      	mvns	r2, r3
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	4013      	ands	r3, r2
 80027d2:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	685a      	ldr	r2, [r3, #4]
 80027d8:	2380      	movs	r3, #128	@ 0x80
 80027da:	025b      	lsls	r3, r3, #9
 80027dc:	4013      	ands	r3, r2
 80027de:	d003      	beq.n	80027e8 <HAL_GPIO_Init+0x228>
        {
          tmp |= iocurrent;
 80027e0:	697a      	ldr	r2, [r7, #20]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 80027e8:	4929      	ldr	r1, [pc, #164]	@ (8002890 <HAL_GPIO_Init+0x2d0>)
 80027ea:	2280      	movs	r2, #128	@ 0x80
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 80027f0:	4a27      	ldr	r2, [pc, #156]	@ (8002890 <HAL_GPIO_Init+0x2d0>)
 80027f2:	2384      	movs	r3, #132	@ 0x84
 80027f4:	58d3      	ldr	r3, [r2, r3]
 80027f6:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	43da      	mvns	r2, r3
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	4013      	ands	r3, r2
 8002800:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	685a      	ldr	r2, [r3, #4]
 8002806:	2380      	movs	r3, #128	@ 0x80
 8002808:	029b      	lsls	r3, r3, #10
 800280a:	4013      	ands	r3, r2
 800280c:	d003      	beq.n	8002816 <HAL_GPIO_Init+0x256>
        {
          tmp |= iocurrent;
 800280e:	697a      	ldr	r2, [r7, #20]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	4313      	orrs	r3, r2
 8002814:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8002816:	491e      	ldr	r1, [pc, #120]	@ (8002890 <HAL_GPIO_Init+0x2d0>)
 8002818:	2284      	movs	r2, #132	@ 0x84
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 800281e:	4b1c      	ldr	r3, [pc, #112]	@ (8002890 <HAL_GPIO_Init+0x2d0>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	43da      	mvns	r2, r3
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	4013      	ands	r3, r2
 800282c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	685a      	ldr	r2, [r3, #4]
 8002832:	2380      	movs	r3, #128	@ 0x80
 8002834:	035b      	lsls	r3, r3, #13
 8002836:	4013      	ands	r3, r2
 8002838:	d003      	beq.n	8002842 <HAL_GPIO_Init+0x282>
        {
          tmp |= iocurrent;
 800283a:	697a      	ldr	r2, [r7, #20]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	4313      	orrs	r3, r2
 8002840:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8002842:	4b13      	ldr	r3, [pc, #76]	@ (8002890 <HAL_GPIO_Init+0x2d0>)
 8002844:	697a      	ldr	r2, [r7, #20]
 8002846:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8002848:	4b11      	ldr	r3, [pc, #68]	@ (8002890 <HAL_GPIO_Init+0x2d0>)
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	43da      	mvns	r2, r3
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	4013      	ands	r3, r2
 8002856:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	685a      	ldr	r2, [r3, #4]
 800285c:	2380      	movs	r3, #128	@ 0x80
 800285e:	039b      	lsls	r3, r3, #14
 8002860:	4013      	ands	r3, r2
 8002862:	d003      	beq.n	800286c <HAL_GPIO_Init+0x2ac>
        {
          tmp |= iocurrent;
 8002864:	697a      	ldr	r2, [r7, #20]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	4313      	orrs	r3, r2
 800286a:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 800286c:	4b08      	ldr	r3, [pc, #32]	@ (8002890 <HAL_GPIO_Init+0x2d0>)
 800286e:	697a      	ldr	r2, [r7, #20]
 8002870:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	3301      	adds	r3, #1
 8002876:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	40da      	lsrs	r2, r3
 8002880:	1e13      	subs	r3, r2, #0
 8002882:	d000      	beq.n	8002886 <HAL_GPIO_Init+0x2c6>
 8002884:	e6a4      	b.n	80025d0 <HAL_GPIO_Init+0x10>
  }
}
 8002886:	46c0      	nop			@ (mov r8, r8)
 8002888:	46c0      	nop			@ (mov r8, r8)
 800288a:	46bd      	mov	sp, r7
 800288c:	b006      	add	sp, #24
 800288e:	bd80      	pop	{r7, pc}
 8002890:	40021800 	.word	0x40021800
 8002894:	50000400 	.word	0x50000400
 8002898:	50000800 	.word	0x50000800
 800289c:	50000c00 	.word	0x50000c00
 80028a0:	50001400 	.word	0x50001400

080028a4 <HAL_RCC_OscConfig>:
            must adjust the number of CPU wait states in their application (SystemClock_Config() API)
            before calling the HAL_RCC_OscConfig() API to update the HSI48 clock division factor.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b086      	sub	sp, #24
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d101      	bne.n	80028b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e1d0      	b.n	8002c58 <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	2201      	movs	r2, #1
 80028bc:	4013      	ands	r3, r2
 80028be:	d100      	bne.n	80028c2 <HAL_RCC_OscConfig+0x1e>
 80028c0:	e069      	b.n	8002996 <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028c2:	4bc8      	ldr	r3, [pc, #800]	@ (8002be4 <HAL_RCC_OscConfig+0x340>)
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	2238      	movs	r2, #56	@ 0x38
 80028c8:	4013      	ands	r3, r2
 80028ca:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	2b08      	cmp	r3, #8
 80028d0:	d105      	bne.n	80028de <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d15d      	bne.n	8002996 <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e1bc      	b.n	8002c58 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	685a      	ldr	r2, [r3, #4]
 80028e2:	2380      	movs	r3, #128	@ 0x80
 80028e4:	025b      	lsls	r3, r3, #9
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d107      	bne.n	80028fa <HAL_RCC_OscConfig+0x56>
 80028ea:	4bbe      	ldr	r3, [pc, #760]	@ (8002be4 <HAL_RCC_OscConfig+0x340>)
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	4bbd      	ldr	r3, [pc, #756]	@ (8002be4 <HAL_RCC_OscConfig+0x340>)
 80028f0:	2180      	movs	r1, #128	@ 0x80
 80028f2:	0249      	lsls	r1, r1, #9
 80028f4:	430a      	orrs	r2, r1
 80028f6:	601a      	str	r2, [r3, #0]
 80028f8:	e020      	b.n	800293c <HAL_RCC_OscConfig+0x98>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	685a      	ldr	r2, [r3, #4]
 80028fe:	23a0      	movs	r3, #160	@ 0xa0
 8002900:	02db      	lsls	r3, r3, #11
 8002902:	429a      	cmp	r2, r3
 8002904:	d10e      	bne.n	8002924 <HAL_RCC_OscConfig+0x80>
 8002906:	4bb7      	ldr	r3, [pc, #732]	@ (8002be4 <HAL_RCC_OscConfig+0x340>)
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	4bb6      	ldr	r3, [pc, #728]	@ (8002be4 <HAL_RCC_OscConfig+0x340>)
 800290c:	2180      	movs	r1, #128	@ 0x80
 800290e:	02c9      	lsls	r1, r1, #11
 8002910:	430a      	orrs	r2, r1
 8002912:	601a      	str	r2, [r3, #0]
 8002914:	4bb3      	ldr	r3, [pc, #716]	@ (8002be4 <HAL_RCC_OscConfig+0x340>)
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	4bb2      	ldr	r3, [pc, #712]	@ (8002be4 <HAL_RCC_OscConfig+0x340>)
 800291a:	2180      	movs	r1, #128	@ 0x80
 800291c:	0249      	lsls	r1, r1, #9
 800291e:	430a      	orrs	r2, r1
 8002920:	601a      	str	r2, [r3, #0]
 8002922:	e00b      	b.n	800293c <HAL_RCC_OscConfig+0x98>
 8002924:	4baf      	ldr	r3, [pc, #700]	@ (8002be4 <HAL_RCC_OscConfig+0x340>)
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	4bae      	ldr	r3, [pc, #696]	@ (8002be4 <HAL_RCC_OscConfig+0x340>)
 800292a:	49af      	ldr	r1, [pc, #700]	@ (8002be8 <HAL_RCC_OscConfig+0x344>)
 800292c:	400a      	ands	r2, r1
 800292e:	601a      	str	r2, [r3, #0]
 8002930:	4bac      	ldr	r3, [pc, #688]	@ (8002be4 <HAL_RCC_OscConfig+0x340>)
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	4bab      	ldr	r3, [pc, #684]	@ (8002be4 <HAL_RCC_OscConfig+0x340>)
 8002936:	49ad      	ldr	r1, [pc, #692]	@ (8002bec <HAL_RCC_OscConfig+0x348>)
 8002938:	400a      	ands	r2, r1
 800293a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d014      	beq.n	800296e <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002944:	f7fe fb66 	bl	8001014 <HAL_GetTick>
 8002948:	0003      	movs	r3, r0
 800294a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800294c:	e008      	b.n	8002960 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800294e:	f7fe fb61 	bl	8001014 <HAL_GetTick>
 8002952:	0002      	movs	r2, r0
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	1ad3      	subs	r3, r2, r3
 8002958:	2b64      	cmp	r3, #100	@ 0x64
 800295a:	d901      	bls.n	8002960 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 800295c:	2303      	movs	r3, #3
 800295e:	e17b      	b.n	8002c58 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002960:	4ba0      	ldr	r3, [pc, #640]	@ (8002be4 <HAL_RCC_OscConfig+0x340>)
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	2380      	movs	r3, #128	@ 0x80
 8002966:	029b      	lsls	r3, r3, #10
 8002968:	4013      	ands	r3, r2
 800296a:	d0f0      	beq.n	800294e <HAL_RCC_OscConfig+0xaa>
 800296c:	e013      	b.n	8002996 <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800296e:	f7fe fb51 	bl	8001014 <HAL_GetTick>
 8002972:	0003      	movs	r3, r0
 8002974:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002976:	e008      	b.n	800298a <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002978:	f7fe fb4c 	bl	8001014 <HAL_GetTick>
 800297c:	0002      	movs	r2, r0
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	2b64      	cmp	r3, #100	@ 0x64
 8002984:	d901      	bls.n	800298a <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	e166      	b.n	8002c58 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800298a:	4b96      	ldr	r3, [pc, #600]	@ (8002be4 <HAL_RCC_OscConfig+0x340>)
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	2380      	movs	r3, #128	@ 0x80
 8002990:	029b      	lsls	r3, r3, #10
 8002992:	4013      	ands	r3, r2
 8002994:	d1f0      	bne.n	8002978 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	2202      	movs	r2, #2
 800299c:	4013      	ands	r3, r2
 800299e:	d100      	bne.n	80029a2 <HAL_RCC_OscConfig+0xfe>
 80029a0:	e086      	b.n	8002ab0 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029a2:	4b90      	ldr	r3, [pc, #576]	@ (8002be4 <HAL_RCC_OscConfig+0x340>)
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	2238      	movs	r2, #56	@ 0x38
 80029a8:	4013      	ands	r3, r2
 80029aa:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d12f      	bne.n	8002a12 <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	68db      	ldr	r3, [r3, #12]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d101      	bne.n	80029be <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e14c      	b.n	8002c58 <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029be:	4b89      	ldr	r3, [pc, #548]	@ (8002be4 <HAL_RCC_OscConfig+0x340>)
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	4a8b      	ldr	r2, [pc, #556]	@ (8002bf0 <HAL_RCC_OscConfig+0x34c>)
 80029c4:	4013      	ands	r3, r2
 80029c6:	0019      	movs	r1, r3
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	695b      	ldr	r3, [r3, #20]
 80029cc:	021a      	lsls	r2, r3, #8
 80029ce:	4b85      	ldr	r3, [pc, #532]	@ (8002be4 <HAL_RCC_OscConfig+0x340>)
 80029d0:	430a      	orrs	r2, r1
 80029d2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d112      	bne.n	8002a00 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80029da:	4b82      	ldr	r3, [pc, #520]	@ (8002be4 <HAL_RCC_OscConfig+0x340>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a85      	ldr	r2, [pc, #532]	@ (8002bf4 <HAL_RCC_OscConfig+0x350>)
 80029e0:	4013      	ands	r3, r2
 80029e2:	0019      	movs	r1, r3
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	691a      	ldr	r2, [r3, #16]
 80029e8:	4b7e      	ldr	r3, [pc, #504]	@ (8002be4 <HAL_RCC_OscConfig+0x340>)
 80029ea:	430a      	orrs	r2, r1
 80029ec:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80029ee:	4b7d      	ldr	r3, [pc, #500]	@ (8002be4 <HAL_RCC_OscConfig+0x340>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	0adb      	lsrs	r3, r3, #11
 80029f4:	2207      	movs	r2, #7
 80029f6:	4013      	ands	r3, r2
 80029f8:	4a7f      	ldr	r2, [pc, #508]	@ (8002bf8 <HAL_RCC_OscConfig+0x354>)
 80029fa:	40da      	lsrs	r2, r3
 80029fc:	4b7f      	ldr	r3, [pc, #508]	@ (8002bfc <HAL_RCC_OscConfig+0x358>)
 80029fe:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002a00:	4b7f      	ldr	r3, [pc, #508]	@ (8002c00 <HAL_RCC_OscConfig+0x35c>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	0018      	movs	r0, r3
 8002a06:	f7fe faa9 	bl	8000f5c <HAL_InitTick>
 8002a0a:	1e03      	subs	r3, r0, #0
 8002a0c:	d050      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e122      	b.n	8002c58 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	68db      	ldr	r3, [r3, #12]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d030      	beq.n	8002a7c <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002a1a:	4b72      	ldr	r3, [pc, #456]	@ (8002be4 <HAL_RCC_OscConfig+0x340>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a75      	ldr	r2, [pc, #468]	@ (8002bf4 <HAL_RCC_OscConfig+0x350>)
 8002a20:	4013      	ands	r3, r2
 8002a22:	0019      	movs	r1, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	691a      	ldr	r2, [r3, #16]
 8002a28:	4b6e      	ldr	r3, [pc, #440]	@ (8002be4 <HAL_RCC_OscConfig+0x340>)
 8002a2a:	430a      	orrs	r2, r1
 8002a2c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 8002a2e:	4b6d      	ldr	r3, [pc, #436]	@ (8002be4 <HAL_RCC_OscConfig+0x340>)
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	4b6c      	ldr	r3, [pc, #432]	@ (8002be4 <HAL_RCC_OscConfig+0x340>)
 8002a34:	2180      	movs	r1, #128	@ 0x80
 8002a36:	0049      	lsls	r1, r1, #1
 8002a38:	430a      	orrs	r2, r1
 8002a3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a3c:	f7fe faea 	bl	8001014 <HAL_GetTick>
 8002a40:	0003      	movs	r3, r0
 8002a42:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a44:	e008      	b.n	8002a58 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002a46:	f7fe fae5 	bl	8001014 <HAL_GetTick>
 8002a4a:	0002      	movs	r2, r0
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	d901      	bls.n	8002a58 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002a54:	2303      	movs	r3, #3
 8002a56:	e0ff      	b.n	8002c58 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a58:	4b62      	ldr	r3, [pc, #392]	@ (8002be4 <HAL_RCC_OscConfig+0x340>)
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	2380      	movs	r3, #128	@ 0x80
 8002a5e:	00db      	lsls	r3, r3, #3
 8002a60:	4013      	ands	r3, r2
 8002a62:	d0f0      	beq.n	8002a46 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a64:	4b5f      	ldr	r3, [pc, #380]	@ (8002be4 <HAL_RCC_OscConfig+0x340>)
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	4a61      	ldr	r2, [pc, #388]	@ (8002bf0 <HAL_RCC_OscConfig+0x34c>)
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	0019      	movs	r1, r3
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	695b      	ldr	r3, [r3, #20]
 8002a72:	021a      	lsls	r2, r3, #8
 8002a74:	4b5b      	ldr	r3, [pc, #364]	@ (8002be4 <HAL_RCC_OscConfig+0x340>)
 8002a76:	430a      	orrs	r2, r1
 8002a78:	605a      	str	r2, [r3, #4]
 8002a7a:	e019      	b.n	8002ab0 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8002a7c:	4b59      	ldr	r3, [pc, #356]	@ (8002be4 <HAL_RCC_OscConfig+0x340>)
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	4b58      	ldr	r3, [pc, #352]	@ (8002be4 <HAL_RCC_OscConfig+0x340>)
 8002a82:	4960      	ldr	r1, [pc, #384]	@ (8002c04 <HAL_RCC_OscConfig+0x360>)
 8002a84:	400a      	ands	r2, r1
 8002a86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a88:	f7fe fac4 	bl	8001014 <HAL_GetTick>
 8002a8c:	0003      	movs	r3, r0
 8002a8e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a90:	e008      	b.n	8002aa4 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002a92:	f7fe fabf 	bl	8001014 <HAL_GetTick>
 8002a96:	0002      	movs	r2, r0
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	2b02      	cmp	r3, #2
 8002a9e:	d901      	bls.n	8002aa4 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	e0d9      	b.n	8002c58 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002aa4:	4b4f      	ldr	r3, [pc, #316]	@ (8002be4 <HAL_RCC_OscConfig+0x340>)
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	2380      	movs	r3, #128	@ 0x80
 8002aaa:	00db      	lsls	r3, r3, #3
 8002aac:	4013      	ands	r3, r2
 8002aae:	d1f0      	bne.n	8002a92 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	2208      	movs	r2, #8
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	d042      	beq.n	8002b40 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8002aba:	4b4a      	ldr	r3, [pc, #296]	@ (8002be4 <HAL_RCC_OscConfig+0x340>)
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	2238      	movs	r2, #56	@ 0x38
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	2b18      	cmp	r3, #24
 8002ac4:	d105      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	699b      	ldr	r3, [r3, #24]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d138      	bne.n	8002b40 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e0c2      	b.n	8002c58 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	699b      	ldr	r3, [r3, #24]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d019      	beq.n	8002b0e <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002ada:	4b42      	ldr	r3, [pc, #264]	@ (8002be4 <HAL_RCC_OscConfig+0x340>)
 8002adc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002ade:	4b41      	ldr	r3, [pc, #260]	@ (8002be4 <HAL_RCC_OscConfig+0x340>)
 8002ae0:	2101      	movs	r1, #1
 8002ae2:	430a      	orrs	r2, r1
 8002ae4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ae6:	f7fe fa95 	bl	8001014 <HAL_GetTick>
 8002aea:	0003      	movs	r3, r0
 8002aec:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8002aee:	e008      	b.n	8002b02 <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002af0:	f7fe fa90 	bl	8001014 <HAL_GetTick>
 8002af4:	0002      	movs	r2, r0
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	2b02      	cmp	r3, #2
 8002afc:	d901      	bls.n	8002b02 <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	e0aa      	b.n	8002c58 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8002b02:	4b38      	ldr	r3, [pc, #224]	@ (8002be4 <HAL_RCC_OscConfig+0x340>)
 8002b04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b06:	2202      	movs	r2, #2
 8002b08:	4013      	ands	r3, r2
 8002b0a:	d0f1      	beq.n	8002af0 <HAL_RCC_OscConfig+0x24c>
 8002b0c:	e018      	b.n	8002b40 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002b0e:	4b35      	ldr	r3, [pc, #212]	@ (8002be4 <HAL_RCC_OscConfig+0x340>)
 8002b10:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002b12:	4b34      	ldr	r3, [pc, #208]	@ (8002be4 <HAL_RCC_OscConfig+0x340>)
 8002b14:	2101      	movs	r1, #1
 8002b16:	438a      	bics	r2, r1
 8002b18:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b1a:	f7fe fa7b 	bl	8001014 <HAL_GetTick>
 8002b1e:	0003      	movs	r3, r0
 8002b20:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8002b22:	e008      	b.n	8002b36 <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002b24:	f7fe fa76 	bl	8001014 <HAL_GetTick>
 8002b28:	0002      	movs	r2, r0
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	d901      	bls.n	8002b36 <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	e090      	b.n	8002c58 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8002b36:	4b2b      	ldr	r3, [pc, #172]	@ (8002be4 <HAL_RCC_OscConfig+0x340>)
 8002b38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b3a:	2202      	movs	r2, #2
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	d1f1      	bne.n	8002b24 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	2204      	movs	r2, #4
 8002b46:	4013      	ands	r3, r2
 8002b48:	d100      	bne.n	8002b4c <HAL_RCC_OscConfig+0x2a8>
 8002b4a:	e084      	b.n	8002c56 <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b4c:	230f      	movs	r3, #15
 8002b4e:	18fb      	adds	r3, r7, r3
 8002b50:	2200      	movs	r2, #0
 8002b52:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8002b54:	4b23      	ldr	r3, [pc, #140]	@ (8002be4 <HAL_RCC_OscConfig+0x340>)
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	2238      	movs	r2, #56	@ 0x38
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	2b20      	cmp	r3, #32
 8002b5e:	d106      	bne.n	8002b6e <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d000      	beq.n	8002b6a <HAL_RCC_OscConfig+0x2c6>
 8002b68:	e075      	b.n	8002c56 <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e074      	b.n	8002c58 <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d106      	bne.n	8002b84 <HAL_RCC_OscConfig+0x2e0>
 8002b76:	4b1b      	ldr	r3, [pc, #108]	@ (8002be4 <HAL_RCC_OscConfig+0x340>)
 8002b78:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002b7a:	4b1a      	ldr	r3, [pc, #104]	@ (8002be4 <HAL_RCC_OscConfig+0x340>)
 8002b7c:	2101      	movs	r1, #1
 8002b7e:	430a      	orrs	r2, r1
 8002b80:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002b82:	e01c      	b.n	8002bbe <HAL_RCC_OscConfig+0x31a>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	2b05      	cmp	r3, #5
 8002b8a:	d10c      	bne.n	8002ba6 <HAL_RCC_OscConfig+0x302>
 8002b8c:	4b15      	ldr	r3, [pc, #84]	@ (8002be4 <HAL_RCC_OscConfig+0x340>)
 8002b8e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002b90:	4b14      	ldr	r3, [pc, #80]	@ (8002be4 <HAL_RCC_OscConfig+0x340>)
 8002b92:	2104      	movs	r1, #4
 8002b94:	430a      	orrs	r2, r1
 8002b96:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002b98:	4b12      	ldr	r3, [pc, #72]	@ (8002be4 <HAL_RCC_OscConfig+0x340>)
 8002b9a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002b9c:	4b11      	ldr	r3, [pc, #68]	@ (8002be4 <HAL_RCC_OscConfig+0x340>)
 8002b9e:	2101      	movs	r1, #1
 8002ba0:	430a      	orrs	r2, r1
 8002ba2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002ba4:	e00b      	b.n	8002bbe <HAL_RCC_OscConfig+0x31a>
 8002ba6:	4b0f      	ldr	r3, [pc, #60]	@ (8002be4 <HAL_RCC_OscConfig+0x340>)
 8002ba8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002baa:	4b0e      	ldr	r3, [pc, #56]	@ (8002be4 <HAL_RCC_OscConfig+0x340>)
 8002bac:	2101      	movs	r1, #1
 8002bae:	438a      	bics	r2, r1
 8002bb0:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002bb2:	4b0c      	ldr	r3, [pc, #48]	@ (8002be4 <HAL_RCC_OscConfig+0x340>)
 8002bb4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002bb6:	4b0b      	ldr	r3, [pc, #44]	@ (8002be4 <HAL_RCC_OscConfig+0x340>)
 8002bb8:	2104      	movs	r1, #4
 8002bba:	438a      	bics	r2, r1
 8002bbc:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d028      	beq.n	8002c18 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bc6:	f7fe fa25 	bl	8001014 <HAL_GetTick>
 8002bca:	0003      	movs	r3, r0
 8002bcc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002bce:	e01d      	b.n	8002c0c <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bd0:	f7fe fa20 	bl	8001014 <HAL_GetTick>
 8002bd4:	0002      	movs	r2, r0
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	4a0b      	ldr	r2, [pc, #44]	@ (8002c08 <HAL_RCC_OscConfig+0x364>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d915      	bls.n	8002c0c <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8002be0:	2303      	movs	r3, #3
 8002be2:	e039      	b.n	8002c58 <HAL_RCC_OscConfig+0x3b4>
 8002be4:	40021000 	.word	0x40021000
 8002be8:	fffeffff 	.word	0xfffeffff
 8002bec:	fffbffff 	.word	0xfffbffff
 8002bf0:	ffff80ff 	.word	0xffff80ff
 8002bf4:	ffffc7ff 	.word	0xffffc7ff
 8002bf8:	02dc6c00 	.word	0x02dc6c00
 8002bfc:	20000004 	.word	0x20000004
 8002c00:	20000008 	.word	0x20000008
 8002c04:	fffffeff 	.word	0xfffffeff
 8002c08:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002c0c:	4b14      	ldr	r3, [pc, #80]	@ (8002c60 <HAL_RCC_OscConfig+0x3bc>)
 8002c0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c10:	2202      	movs	r2, #2
 8002c12:	4013      	ands	r3, r2
 8002c14:	d0dc      	beq.n	8002bd0 <HAL_RCC_OscConfig+0x32c>
 8002c16:	e013      	b.n	8002c40 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c18:	f7fe f9fc 	bl	8001014 <HAL_GetTick>
 8002c1c:	0003      	movs	r3, r0
 8002c1e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8002c20:	e009      	b.n	8002c36 <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c22:	f7fe f9f7 	bl	8001014 <HAL_GetTick>
 8002c26:	0002      	movs	r2, r0
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	4a0d      	ldr	r2, [pc, #52]	@ (8002c64 <HAL_RCC_OscConfig+0x3c0>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d901      	bls.n	8002c36 <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	e010      	b.n	8002c58 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8002c36:	4b0a      	ldr	r3, [pc, #40]	@ (8002c60 <HAL_RCC_OscConfig+0x3bc>)
 8002c38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c3a:	2202      	movs	r2, #2
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	d1f0      	bne.n	8002c22 <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002c40:	230f      	movs	r3, #15
 8002c42:	18fb      	adds	r3, r7, r3
 8002c44:	781b      	ldrb	r3, [r3, #0]
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d105      	bne.n	8002c56 <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002c4a:	4b05      	ldr	r3, [pc, #20]	@ (8002c60 <HAL_RCC_OscConfig+0x3bc>)
 8002c4c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002c4e:	4b04      	ldr	r3, [pc, #16]	@ (8002c60 <HAL_RCC_OscConfig+0x3bc>)
 8002c50:	4905      	ldr	r1, [pc, #20]	@ (8002c68 <HAL_RCC_OscConfig+0x3c4>)
 8002c52:	400a      	ands	r2, r1
 8002c54:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
      }
    }
  }
#endif /* RCC_CR_HSIUSB48ON */
  return HAL_OK;
 8002c56:	2300      	movs	r3, #0
}
 8002c58:	0018      	movs	r0, r3
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	b006      	add	sp, #24
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	40021000 	.word	0x40021000
 8002c64:	00001388 	.word	0x00001388
 8002c68:	efffffff 	.word	0xefffffff

08002c6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b084      	sub	sp, #16
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
 8002c74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d101      	bne.n	8002c80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e0df      	b.n	8002e40 <HAL_RCC_ClockConfig+0x1d4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c80:	4b71      	ldr	r3, [pc, #452]	@ (8002e48 <HAL_RCC_ClockConfig+0x1dc>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	2207      	movs	r2, #7
 8002c86:	4013      	ands	r3, r2
 8002c88:	683a      	ldr	r2, [r7, #0]
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d91e      	bls.n	8002ccc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c8e:	4b6e      	ldr	r3, [pc, #440]	@ (8002e48 <HAL_RCC_ClockConfig+0x1dc>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	2207      	movs	r2, #7
 8002c94:	4393      	bics	r3, r2
 8002c96:	0019      	movs	r1, r3
 8002c98:	4b6b      	ldr	r3, [pc, #428]	@ (8002e48 <HAL_RCC_ClockConfig+0x1dc>)
 8002c9a:	683a      	ldr	r2, [r7, #0]
 8002c9c:	430a      	orrs	r2, r1
 8002c9e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002ca0:	f7fe f9b8 	bl	8001014 <HAL_GetTick>
 8002ca4:	0003      	movs	r3, r0
 8002ca6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002ca8:	e009      	b.n	8002cbe <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002caa:	f7fe f9b3 	bl	8001014 <HAL_GetTick>
 8002cae:	0002      	movs	r2, r0
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	4a65      	ldr	r2, [pc, #404]	@ (8002e4c <HAL_RCC_ClockConfig+0x1e0>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d901      	bls.n	8002cbe <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e0c0      	b.n	8002e40 <HAL_RCC_ClockConfig+0x1d4>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002cbe:	4b62      	ldr	r3, [pc, #392]	@ (8002e48 <HAL_RCC_ClockConfig+0x1dc>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	2207      	movs	r2, #7
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	683a      	ldr	r2, [r7, #0]
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d1ee      	bne.n	8002caa <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	2202      	movs	r2, #2
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	d017      	beq.n	8002d06 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	2204      	movs	r2, #4
 8002cdc:	4013      	ands	r3, r2
 8002cde:	d008      	beq.n	8002cf2 <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002ce0:	4b5b      	ldr	r3, [pc, #364]	@ (8002e50 <HAL_RCC_ClockConfig+0x1e4>)
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	4a5b      	ldr	r2, [pc, #364]	@ (8002e54 <HAL_RCC_ClockConfig+0x1e8>)
 8002ce6:	401a      	ands	r2, r3
 8002ce8:	4b59      	ldr	r3, [pc, #356]	@ (8002e50 <HAL_RCC_ClockConfig+0x1e4>)
 8002cea:	21b0      	movs	r1, #176	@ 0xb0
 8002cec:	0109      	lsls	r1, r1, #4
 8002cee:	430a      	orrs	r2, r1
 8002cf0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cf2:	4b57      	ldr	r3, [pc, #348]	@ (8002e50 <HAL_RCC_ClockConfig+0x1e4>)
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	4a58      	ldr	r2, [pc, #352]	@ (8002e58 <HAL_RCC_ClockConfig+0x1ec>)
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	0019      	movs	r1, r3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	68da      	ldr	r2, [r3, #12]
 8002d00:	4b53      	ldr	r3, [pc, #332]	@ (8002e50 <HAL_RCC_ClockConfig+0x1e4>)
 8002d02:	430a      	orrs	r2, r1
 8002d04:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	d04b      	beq.n	8002da8 <HAL_RCC_ClockConfig+0x13c>
#if defined(RCC_CR_SYSDIV)
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
#endif /* RCC_CR_SYSDIV */

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d107      	bne.n	8002d28 <HAL_RCC_ClockConfig+0xbc>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d18:	4b4d      	ldr	r3, [pc, #308]	@ (8002e50 <HAL_RCC_ClockConfig+0x1e4>)
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	2380      	movs	r3, #128	@ 0x80
 8002d1e:	029b      	lsls	r3, r3, #10
 8002d20:	4013      	ands	r3, r2
 8002d22:	d11f      	bne.n	8002d64 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	e08b      	b.n	8002e40 <HAL_RCC_ClockConfig+0x1d4>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d107      	bne.n	8002d40 <HAL_RCC_ClockConfig+0xd4>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d30:	4b47      	ldr	r3, [pc, #284]	@ (8002e50 <HAL_RCC_ClockConfig+0x1e4>)
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	2380      	movs	r3, #128	@ 0x80
 8002d36:	00db      	lsls	r3, r3, #3
 8002d38:	4013      	ands	r3, r2
 8002d3a:	d113      	bne.n	8002d64 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e07f      	b.n	8002e40 <HAL_RCC_ClockConfig+0x1d4>
        return HAL_ERROR;
      }
    }
#endif /* RCC_HSI48_SUPPORT */
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	2b03      	cmp	r3, #3
 8002d46:	d106      	bne.n	8002d56 <HAL_RCC_ClockConfig+0xea>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8002d48:	4b41      	ldr	r3, [pc, #260]	@ (8002e50 <HAL_RCC_ClockConfig+0x1e4>)
 8002d4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d4c:	2202      	movs	r2, #2
 8002d4e:	4013      	ands	r3, r2
 8002d50:	d108      	bne.n	8002d64 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e074      	b.n	8002e40 <HAL_RCC_ClockConfig+0x1d4>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002d56:	4b3e      	ldr	r3, [pc, #248]	@ (8002e50 <HAL_RCC_ClockConfig+0x1e4>)
 8002d58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d5a:	2202      	movs	r2, #2
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	d101      	bne.n	8002d64 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e06d      	b.n	8002e40 <HAL_RCC_ClockConfig+0x1d4>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d64:	4b3a      	ldr	r3, [pc, #232]	@ (8002e50 <HAL_RCC_ClockConfig+0x1e4>)
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	2207      	movs	r2, #7
 8002d6a:	4393      	bics	r3, r2
 8002d6c:	0019      	movs	r1, r3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	685a      	ldr	r2, [r3, #4]
 8002d72:	4b37      	ldr	r3, [pc, #220]	@ (8002e50 <HAL_RCC_ClockConfig+0x1e4>)
 8002d74:	430a      	orrs	r2, r1
 8002d76:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d78:	f7fe f94c 	bl	8001014 <HAL_GetTick>
 8002d7c:	0003      	movs	r3, r0
 8002d7e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d80:	e009      	b.n	8002d96 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002d82:	f7fe f947 	bl	8001014 <HAL_GetTick>
 8002d86:	0002      	movs	r2, r0
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	4a2f      	ldr	r2, [pc, #188]	@ (8002e4c <HAL_RCC_ClockConfig+0x1e0>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d901      	bls.n	8002d96 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	e054      	b.n	8002e40 <HAL_RCC_ClockConfig+0x1d4>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d96:	4b2e      	ldr	r3, [pc, #184]	@ (8002e50 <HAL_RCC_ClockConfig+0x1e4>)
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	2238      	movs	r2, #56	@ 0x38
 8002d9c:	401a      	ands	r2, r3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	00db      	lsls	r3, r3, #3
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d1ec      	bne.n	8002d82 <HAL_RCC_ClockConfig+0x116>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002da8:	4b27      	ldr	r3, [pc, #156]	@ (8002e48 <HAL_RCC_ClockConfig+0x1dc>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	2207      	movs	r2, #7
 8002dae:	4013      	ands	r3, r2
 8002db0:	683a      	ldr	r2, [r7, #0]
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d21e      	bcs.n	8002df4 <HAL_RCC_ClockConfig+0x188>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002db6:	4b24      	ldr	r3, [pc, #144]	@ (8002e48 <HAL_RCC_ClockConfig+0x1dc>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	2207      	movs	r2, #7
 8002dbc:	4393      	bics	r3, r2
 8002dbe:	0019      	movs	r1, r3
 8002dc0:	4b21      	ldr	r3, [pc, #132]	@ (8002e48 <HAL_RCC_ClockConfig+0x1dc>)
 8002dc2:	683a      	ldr	r2, [r7, #0]
 8002dc4:	430a      	orrs	r2, r1
 8002dc6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002dc8:	f7fe f924 	bl	8001014 <HAL_GetTick>
 8002dcc:	0003      	movs	r3, r0
 8002dce:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002dd0:	e009      	b.n	8002de6 <HAL_RCC_ClockConfig+0x17a>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002dd2:	f7fe f91f 	bl	8001014 <HAL_GetTick>
 8002dd6:	0002      	movs	r2, r0
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	1ad3      	subs	r3, r2, r3
 8002ddc:	4a1b      	ldr	r2, [pc, #108]	@ (8002e4c <HAL_RCC_ClockConfig+0x1e0>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d901      	bls.n	8002de6 <HAL_RCC_ClockConfig+0x17a>
      {
        return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e02c      	b.n	8002e40 <HAL_RCC_ClockConfig+0x1d4>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002de6:	4b18      	ldr	r3, [pc, #96]	@ (8002e48 <HAL_RCC_ClockConfig+0x1dc>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	2207      	movs	r2, #7
 8002dec:	4013      	ands	r3, r2
 8002dee:	683a      	ldr	r2, [r7, #0]
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d1ee      	bne.n	8002dd2 <HAL_RCC_ClockConfig+0x166>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	2204      	movs	r2, #4
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	d009      	beq.n	8002e12 <HAL_RCC_ClockConfig+0x1a6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002dfe:	4b14      	ldr	r3, [pc, #80]	@ (8002e50 <HAL_RCC_ClockConfig+0x1e4>)
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	4a16      	ldr	r2, [pc, #88]	@ (8002e5c <HAL_RCC_ClockConfig+0x1f0>)
 8002e04:	4013      	ands	r3, r2
 8002e06:	0019      	movs	r1, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	691a      	ldr	r2, [r3, #16]
 8002e0c:	4b10      	ldr	r3, [pc, #64]	@ (8002e50 <HAL_RCC_ClockConfig+0x1e4>)
 8002e0e:	430a      	orrs	r2, r1
 8002e10:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8002e12:	f000 f82b 	bl	8002e6c <HAL_RCC_GetSysClockFreq>
 8002e16:	0001      	movs	r1, r0
 8002e18:	4b0d      	ldr	r3, [pc, #52]	@ (8002e50 <HAL_RCC_ClockConfig+0x1e4>)
 8002e1a:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002e1c:	0a1b      	lsrs	r3, r3, #8
 8002e1e:	220f      	movs	r2, #15
 8002e20:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8002e22:	4b0f      	ldr	r3, [pc, #60]	@ (8002e60 <HAL_RCC_ClockConfig+0x1f4>)
 8002e24:	0092      	lsls	r2, r2, #2
 8002e26:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002e28:	221f      	movs	r2, #31
 8002e2a:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8002e2c:	000a      	movs	r2, r1
 8002e2e:	40da      	lsrs	r2, r3
 8002e30:	4b0c      	ldr	r3, [pc, #48]	@ (8002e64 <HAL_RCC_ClockConfig+0x1f8>)
 8002e32:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002e34:	4b0c      	ldr	r3, [pc, #48]	@ (8002e68 <HAL_RCC_ClockConfig+0x1fc>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	0018      	movs	r0, r3
 8002e3a:	f7fe f88f 	bl	8000f5c <HAL_InitTick>
 8002e3e:	0003      	movs	r3, r0
}
 8002e40:	0018      	movs	r0, r3
 8002e42:	46bd      	mov	sp, r7
 8002e44:	b004      	add	sp, #16
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	40022000 	.word	0x40022000
 8002e4c:	00001388 	.word	0x00001388
 8002e50:	40021000 	.word	0x40021000
 8002e54:	ffff84ff 	.word	0xffff84ff
 8002e58:	fffff0ff 	.word	0xfffff0ff
 8002e5c:	ffff8fff 	.word	0xffff8fff
 8002e60:	080040ec 	.word	0x080040ec
 8002e64:	20000004 	.word	0x20000004
 8002e68:	20000008 	.word	0x20000008

08002e6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b082      	sub	sp, #8
 8002e70:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002e72:	4b1c      	ldr	r3, [pc, #112]	@ (8002ee4 <HAL_RCC_GetSysClockFreq+0x78>)
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	2238      	movs	r2, #56	@ 0x38
 8002e78:	4013      	ands	r3, r2
 8002e7a:	d10f      	bne.n	8002e9c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002e7c:	4b19      	ldr	r3, [pc, #100]	@ (8002ee4 <HAL_RCC_GetSysClockFreq+0x78>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	0adb      	lsrs	r3, r3, #11
 8002e82:	2207      	movs	r2, #7
 8002e84:	4013      	ands	r3, r2
 8002e86:	2201      	movs	r2, #1
 8002e88:	409a      	lsls	r2, r3
 8002e8a:	0013      	movs	r3, r2
 8002e8c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002e8e:	6839      	ldr	r1, [r7, #0]
 8002e90:	4815      	ldr	r0, [pc, #84]	@ (8002ee8 <HAL_RCC_GetSysClockFreq+0x7c>)
 8002e92:	f7fd f939 	bl	8000108 <__udivsi3>
 8002e96:	0003      	movs	r3, r0
 8002e98:	607b      	str	r3, [r7, #4]
 8002e9a:	e01e      	b.n	8002eda <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002e9c:	4b11      	ldr	r3, [pc, #68]	@ (8002ee4 <HAL_RCC_GetSysClockFreq+0x78>)
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	2238      	movs	r2, #56	@ 0x38
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	2b08      	cmp	r3, #8
 8002ea6:	d102      	bne.n	8002eae <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002ea8:	4b10      	ldr	r3, [pc, #64]	@ (8002eec <HAL_RCC_GetSysClockFreq+0x80>)
 8002eaa:	607b      	str	r3, [r7, #4]
 8002eac:	e015      	b.n	8002eda <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8002eae:	4b0d      	ldr	r3, [pc, #52]	@ (8002ee4 <HAL_RCC_GetSysClockFreq+0x78>)
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	2238      	movs	r2, #56	@ 0x38
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	2b20      	cmp	r3, #32
 8002eb8:	d103      	bne.n	8002ec2 <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002eba:	2380      	movs	r3, #128	@ 0x80
 8002ebc:	021b      	lsls	r3, r3, #8
 8002ebe:	607b      	str	r3, [r7, #4]
 8002ec0:	e00b      	b.n	8002eda <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8002ec2:	4b08      	ldr	r3, [pc, #32]	@ (8002ee4 <HAL_RCC_GetSysClockFreq+0x78>)
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	2238      	movs	r2, #56	@ 0x38
 8002ec8:	4013      	ands	r3, r2
 8002eca:	2b18      	cmp	r3, #24
 8002ecc:	d103      	bne.n	8002ed6 <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002ece:	23fa      	movs	r3, #250	@ 0xfa
 8002ed0:	01db      	lsls	r3, r3, #7
 8002ed2:	607b      	str	r3, [r7, #4]
 8002ed4:	e001      	b.n	8002eda <HAL_RCC_GetSysClockFreq+0x6e>
    sysclockfreq = HSI48_VALUE;
  }
#endif /* RCC_HSI48_SUPPORT */
  else
  {
    sysclockfreq = 0U;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	607b      	str	r3, [r7, #4]
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
 8002eda:	687b      	ldr	r3, [r7, #4]
}
 8002edc:	0018      	movs	r0, r3
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	b002      	add	sp, #8
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	40021000 	.word	0x40021000
 8002ee8:	02dc6c00 	.word	0x02dc6c00
 8002eec:	007a1200 	.word	0x007a1200

08002ef0 <HAL_RCCEx_PeriphCLKConfig>:
  * @note (*) not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b086      	sub	sp, #24
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002ef8:	2313      	movs	r3, #19
 8002efa:	18fb      	adds	r3, r7, r3
 8002efc:	2200      	movs	r2, #0
 8002efe:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002f00:	2312      	movs	r3, #18
 8002f02:	18fb      	adds	r3, r7, r3
 8002f04:	2200      	movs	r2, #0
 8002f06:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	2240      	movs	r2, #64	@ 0x40
 8002f0e:	4013      	ands	r3, r2
 8002f10:	d100      	bne.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x24>
 8002f12:	e079      	b.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f14:	2011      	movs	r0, #17
 8002f16:	183b      	adds	r3, r7, r0
 8002f18:	2200      	movs	r2, #0
 8002f1a:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f1c:	4b63      	ldr	r3, [pc, #396]	@ (80030ac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002f1e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002f20:	2380      	movs	r3, #128	@ 0x80
 8002f22:	055b      	lsls	r3, r3, #21
 8002f24:	4013      	ands	r3, r2
 8002f26:	d110      	bne.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f28:	4b60      	ldr	r3, [pc, #384]	@ (80030ac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002f2a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002f2c:	4b5f      	ldr	r3, [pc, #380]	@ (80030ac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002f2e:	2180      	movs	r1, #128	@ 0x80
 8002f30:	0549      	lsls	r1, r1, #21
 8002f32:	430a      	orrs	r2, r1
 8002f34:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002f36:	4b5d      	ldr	r3, [pc, #372]	@ (80030ac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002f38:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002f3a:	2380      	movs	r3, #128	@ 0x80
 8002f3c:	055b      	lsls	r3, r3, #21
 8002f3e:	4013      	ands	r3, r2
 8002f40:	60bb      	str	r3, [r7, #8]
 8002f42:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f44:	183b      	adds	r3, r7, r0
 8002f46:	2201      	movs	r2, #1
 8002f48:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 8002f4a:	4b58      	ldr	r3, [pc, #352]	@ (80030ac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002f4c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002f4e:	23c0      	movs	r3, #192	@ 0xc0
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	4013      	ands	r3, r2
 8002f54:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d019      	beq.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	699b      	ldr	r3, [r3, #24]
 8002f60:	697a      	ldr	r2, [r7, #20]
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d014      	beq.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 8002f66:	4b51      	ldr	r3, [pc, #324]	@ (80030ac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002f68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f6a:	4a51      	ldr	r2, [pc, #324]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002f70:	4b4e      	ldr	r3, [pc, #312]	@ (80030ac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002f72:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002f74:	4b4d      	ldr	r3, [pc, #308]	@ (80030ac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002f76:	2180      	movs	r1, #128	@ 0x80
 8002f78:	0249      	lsls	r1, r1, #9
 8002f7a:	430a      	orrs	r2, r1
 8002f7c:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002f7e:	4b4b      	ldr	r3, [pc, #300]	@ (80030ac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002f80:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002f82:	4b4a      	ldr	r3, [pc, #296]	@ (80030ac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002f84:	494b      	ldr	r1, [pc, #300]	@ (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002f86:	400a      	ands	r2, r1
 8002f88:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 8002f8a:	4b48      	ldr	r3, [pc, #288]	@ (80030ac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002f8c:	697a      	ldr	r2, [r7, #20]
 8002f8e:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	2201      	movs	r2, #1
 8002f94:	4013      	ands	r3, r2
 8002f96:	d016      	beq.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f98:	f7fe f83c 	bl	8001014 <HAL_GetTick>
 8002f9c:	0003      	movs	r3, r0
 8002f9e:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002fa0:	e00c      	b.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0xcc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fa2:	f7fe f837 	bl	8001014 <HAL_GetTick>
 8002fa6:	0002      	movs	r2, r0
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	1ad3      	subs	r3, r2, r3
 8002fac:	4a42      	ldr	r2, [pc, #264]	@ (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d904      	bls.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0xcc>
        {
          ret = HAL_TIMEOUT;
 8002fb2:	2313      	movs	r3, #19
 8002fb4:	18fb      	adds	r3, r7, r3
 8002fb6:	2203      	movs	r2, #3
 8002fb8:	701a      	strb	r2, [r3, #0]
          break;
 8002fba:	e004      	b.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002fbc:	4b3b      	ldr	r3, [pc, #236]	@ (80030ac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002fbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fc0:	2202      	movs	r2, #2
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	d0ed      	beq.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    if (ret == HAL_OK)
 8002fc6:	2313      	movs	r3, #19
 8002fc8:	18fb      	adds	r3, r7, r3
 8002fca:	781b      	ldrb	r3, [r3, #0]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d10a      	bne.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0xf6>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002fd0:	4b36      	ldr	r3, [pc, #216]	@ (80030ac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002fd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fd4:	4a36      	ldr	r2, [pc, #216]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	0019      	movs	r1, r3
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	699a      	ldr	r2, [r3, #24]
 8002fde:	4b33      	ldr	r3, [pc, #204]	@ (80030ac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002fe0:	430a      	orrs	r2, r1
 8002fe2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002fe4:	e005      	b.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x102>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fe6:	2312      	movs	r3, #18
 8002fe8:	18fb      	adds	r3, r7, r3
 8002fea:	2213      	movs	r2, #19
 8002fec:	18ba      	adds	r2, r7, r2
 8002fee:	7812      	ldrb	r2, [r2, #0]
 8002ff0:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002ff2:	2311      	movs	r3, #17
 8002ff4:	18fb      	adds	r3, r7, r3
 8002ff6:	781b      	ldrb	r3, [r3, #0]
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d105      	bne.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ffc:	4b2b      	ldr	r3, [pc, #172]	@ (80030ac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002ffe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003000:	4b2a      	ldr	r3, [pc, #168]	@ (80030ac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003002:	492e      	ldr	r1, [pc, #184]	@ (80030bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003004:	400a      	ands	r2, r1
 8003006:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	2201      	movs	r2, #1
 800300e:	4013      	ands	r3, r2
 8003010:	d009      	beq.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003012:	4b26      	ldr	r3, [pc, #152]	@ (80030ac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003014:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003016:	2203      	movs	r2, #3
 8003018:	4393      	bics	r3, r2
 800301a:	0019      	movs	r1, r3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	689a      	ldr	r2, [r3, #8]
 8003020:	4b22      	ldr	r3, [pc, #136]	@ (80030ac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003022:	430a      	orrs	r2, r1
 8003024:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	2202      	movs	r2, #2
 800302c:	4013      	ands	r3, r2
 800302e:	d009      	beq.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003030:	4b1e      	ldr	r3, [pc, #120]	@ (80030ac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003032:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003034:	4a22      	ldr	r2, [pc, #136]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003036:	4013      	ands	r3, r2
 8003038:	0019      	movs	r1, r3
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	68da      	ldr	r2, [r3, #12]
 800303e:	4b1b      	ldr	r3, [pc, #108]	@ (80030ac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003040:	430a      	orrs	r2, r1
 8003042:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	2220      	movs	r2, #32
 800304a:	4013      	ands	r3, r2
 800304c:	d008      	beq.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800304e:	4b17      	ldr	r3, [pc, #92]	@ (80030ac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003050:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	0899      	lsrs	r1, r3, #2
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	695a      	ldr	r2, [r3, #20]
 800305a:	4b14      	ldr	r3, [pc, #80]	@ (80030ac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800305c:	430a      	orrs	r2, r1
 800305e:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_FDCAN1_CONFIG(PeriphClkInit->Fdcan1ClockSelection);

  }
#endif /* FDCAN1 */
  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	2204      	movs	r2, #4
 8003066:	4013      	ands	r3, r2
 8003068:	d009      	beq.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800306a:	4b10      	ldr	r3, [pc, #64]	@ (80030ac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800306c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800306e:	4a15      	ldr	r2, [pc, #84]	@ (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003070:	4013      	ands	r3, r2
 8003072:	0019      	movs	r1, r3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	691a      	ldr	r2, [r3, #16]
 8003078:	4b0c      	ldr	r3, [pc, #48]	@ (80030ac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800307a:	430a      	orrs	r2, r1
 800307c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	2280      	movs	r2, #128	@ 0x80
 8003084:	4013      	ands	r3, r2
 8003086:	d009      	beq.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8003088:	4b08      	ldr	r3, [pc, #32]	@ (80030ac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	22e0      	movs	r2, #224	@ 0xe0
 800308e:	4393      	bics	r3, r2
 8003090:	0019      	movs	r1, r3
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	685a      	ldr	r2, [r3, #4]
 8003096:	4b05      	ldr	r3, [pc, #20]	@ (80030ac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003098:	430a      	orrs	r2, r1
 800309a:	601a      	str	r2, [r3, #0]
  }
  return status;
 800309c:	2312      	movs	r3, #18
 800309e:	18fb      	adds	r3, r7, r3
 80030a0:	781b      	ldrb	r3, [r3, #0]
}
 80030a2:	0018      	movs	r0, r3
 80030a4:	46bd      	mov	sp, r7
 80030a6:	b006      	add	sp, #24
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	46c0      	nop			@ (mov r8, r8)
 80030ac:	40021000 	.word	0x40021000
 80030b0:	fffffcff 	.word	0xfffffcff
 80030b4:	fffeffff 	.word	0xfffeffff
 80030b8:	00001388 	.word	0x00001388
 80030bc:	efffffff 	.word	0xefffffff
 80030c0:	ffffcfff 	.word	0xffffcfff
 80030c4:	ffff3fff 	.word	0xffff3fff

080030c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d101      	bne.n	80030da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e04a      	b.n	8003170 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	223d      	movs	r2, #61	@ 0x3d
 80030de:	5c9b      	ldrb	r3, [r3, r2]
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d107      	bne.n	80030f6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	223c      	movs	r2, #60	@ 0x3c
 80030ea:	2100      	movs	r1, #0
 80030ec:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	0018      	movs	r0, r3
 80030f2:	f7fd fe67 	bl	8000dc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	223d      	movs	r2, #61	@ 0x3d
 80030fa:	2102      	movs	r1, #2
 80030fc:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	3304      	adds	r3, #4
 8003106:	0019      	movs	r1, r3
 8003108:	0010      	movs	r0, r2
 800310a:	f000 faa3 	bl	8003654 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2248      	movs	r2, #72	@ 0x48
 8003112:	2101      	movs	r1, #1
 8003114:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	223e      	movs	r2, #62	@ 0x3e
 800311a:	2101      	movs	r1, #1
 800311c:	5499      	strb	r1, [r3, r2]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	223f      	movs	r2, #63	@ 0x3f
 8003122:	2101      	movs	r1, #1
 8003124:	5499      	strb	r1, [r3, r2]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2240      	movs	r2, #64	@ 0x40
 800312a:	2101      	movs	r1, #1
 800312c:	5499      	strb	r1, [r3, r2]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2241      	movs	r2, #65	@ 0x41
 8003132:	2101      	movs	r1, #1
 8003134:	5499      	strb	r1, [r3, r2]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2242      	movs	r2, #66	@ 0x42
 800313a:	2101      	movs	r1, #1
 800313c:	5499      	strb	r1, [r3, r2]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2243      	movs	r2, #67	@ 0x43
 8003142:	2101      	movs	r1, #1
 8003144:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2244      	movs	r2, #68	@ 0x44
 800314a:	2101      	movs	r1, #1
 800314c:	5499      	strb	r1, [r3, r2]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2245      	movs	r2, #69	@ 0x45
 8003152:	2101      	movs	r1, #1
 8003154:	5499      	strb	r1, [r3, r2]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2246      	movs	r2, #70	@ 0x46
 800315a:	2101      	movs	r1, #1
 800315c:	5499      	strb	r1, [r3, r2]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2247      	movs	r2, #71	@ 0x47
 8003162:	2101      	movs	r1, #1
 8003164:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	223d      	movs	r2, #61	@ 0x3d
 800316a:	2101      	movs	r1, #1
 800316c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800316e:	2300      	movs	r3, #0
}
 8003170:	0018      	movs	r0, r3
 8003172:	46bd      	mov	sp, r7
 8003174:	b002      	add	sp, #8
 8003176:	bd80      	pop	{r7, pc}

08003178 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d101      	bne.n	800318a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e04a      	b.n	8003220 <HAL_TIM_OC_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	223d      	movs	r2, #61	@ 0x3d
 800318e:	5c9b      	ldrb	r3, [r3, r2]
 8003190:	b2db      	uxtb	r3, r3
 8003192:	2b00      	cmp	r3, #0
 8003194:	d107      	bne.n	80031a6 <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	223c      	movs	r2, #60	@ 0x3c
 800319a:	2100      	movs	r1, #0
 800319c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	0018      	movs	r0, r3
 80031a2:	f000 f841 	bl	8003228 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	223d      	movs	r2, #61	@ 0x3d
 80031aa:	2102      	movs	r1, #2
 80031ac:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	3304      	adds	r3, #4
 80031b6:	0019      	movs	r1, r3
 80031b8:	0010      	movs	r0, r2
 80031ba:	f000 fa4b 	bl	8003654 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2248      	movs	r2, #72	@ 0x48
 80031c2:	2101      	movs	r1, #1
 80031c4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	223e      	movs	r2, #62	@ 0x3e
 80031ca:	2101      	movs	r1, #1
 80031cc:	5499      	strb	r1, [r3, r2]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	223f      	movs	r2, #63	@ 0x3f
 80031d2:	2101      	movs	r1, #1
 80031d4:	5499      	strb	r1, [r3, r2]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2240      	movs	r2, #64	@ 0x40
 80031da:	2101      	movs	r1, #1
 80031dc:	5499      	strb	r1, [r3, r2]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2241      	movs	r2, #65	@ 0x41
 80031e2:	2101      	movs	r1, #1
 80031e4:	5499      	strb	r1, [r3, r2]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2242      	movs	r2, #66	@ 0x42
 80031ea:	2101      	movs	r1, #1
 80031ec:	5499      	strb	r1, [r3, r2]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2243      	movs	r2, #67	@ 0x43
 80031f2:	2101      	movs	r1, #1
 80031f4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2244      	movs	r2, #68	@ 0x44
 80031fa:	2101      	movs	r1, #1
 80031fc:	5499      	strb	r1, [r3, r2]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2245      	movs	r2, #69	@ 0x45
 8003202:	2101      	movs	r1, #1
 8003204:	5499      	strb	r1, [r3, r2]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2246      	movs	r2, #70	@ 0x46
 800320a:	2101      	movs	r1, #1
 800320c:	5499      	strb	r1, [r3, r2]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2247      	movs	r2, #71	@ 0x47
 8003212:	2101      	movs	r1, #1
 8003214:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	223d      	movs	r2, #61	@ 0x3d
 800321a:	2101      	movs	r1, #1
 800321c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800321e:	2300      	movs	r3, #0
}
 8003220:	0018      	movs	r0, r3
 8003222:	46bd      	mov	sp, r7
 8003224:	b002      	add	sp, #8
 8003226:	bd80      	pop	{r7, pc}

08003228 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b082      	sub	sp, #8
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8003230:	46c0      	nop			@ (mov r8, r8)
 8003232:	46bd      	mov	sp, r7
 8003234:	b002      	add	sp, #8
 8003236:	bd80      	pop	{r7, pc}

08003238 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b084      	sub	sp, #16
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d108      	bne.n	800325a <HAL_TIM_PWM_Start+0x22>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	223e      	movs	r2, #62	@ 0x3e
 800324c:	5c9b      	ldrb	r3, [r3, r2]
 800324e:	b2db      	uxtb	r3, r3
 8003250:	3b01      	subs	r3, #1
 8003252:	1e5a      	subs	r2, r3, #1
 8003254:	4193      	sbcs	r3, r2
 8003256:	b2db      	uxtb	r3, r3
 8003258:	e037      	b.n	80032ca <HAL_TIM_PWM_Start+0x92>
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	2b04      	cmp	r3, #4
 800325e:	d108      	bne.n	8003272 <HAL_TIM_PWM_Start+0x3a>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	223f      	movs	r2, #63	@ 0x3f
 8003264:	5c9b      	ldrb	r3, [r3, r2]
 8003266:	b2db      	uxtb	r3, r3
 8003268:	3b01      	subs	r3, #1
 800326a:	1e5a      	subs	r2, r3, #1
 800326c:	4193      	sbcs	r3, r2
 800326e:	b2db      	uxtb	r3, r3
 8003270:	e02b      	b.n	80032ca <HAL_TIM_PWM_Start+0x92>
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	2b08      	cmp	r3, #8
 8003276:	d108      	bne.n	800328a <HAL_TIM_PWM_Start+0x52>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2240      	movs	r2, #64	@ 0x40
 800327c:	5c9b      	ldrb	r3, [r3, r2]
 800327e:	b2db      	uxtb	r3, r3
 8003280:	3b01      	subs	r3, #1
 8003282:	1e5a      	subs	r2, r3, #1
 8003284:	4193      	sbcs	r3, r2
 8003286:	b2db      	uxtb	r3, r3
 8003288:	e01f      	b.n	80032ca <HAL_TIM_PWM_Start+0x92>
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	2b0c      	cmp	r3, #12
 800328e:	d108      	bne.n	80032a2 <HAL_TIM_PWM_Start+0x6a>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2241      	movs	r2, #65	@ 0x41
 8003294:	5c9b      	ldrb	r3, [r3, r2]
 8003296:	b2db      	uxtb	r3, r3
 8003298:	3b01      	subs	r3, #1
 800329a:	1e5a      	subs	r2, r3, #1
 800329c:	4193      	sbcs	r3, r2
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	e013      	b.n	80032ca <HAL_TIM_PWM_Start+0x92>
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	2b10      	cmp	r3, #16
 80032a6:	d108      	bne.n	80032ba <HAL_TIM_PWM_Start+0x82>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2242      	movs	r2, #66	@ 0x42
 80032ac:	5c9b      	ldrb	r3, [r3, r2]
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	3b01      	subs	r3, #1
 80032b2:	1e5a      	subs	r2, r3, #1
 80032b4:	4193      	sbcs	r3, r2
 80032b6:	b2db      	uxtb	r3, r3
 80032b8:	e007      	b.n	80032ca <HAL_TIM_PWM_Start+0x92>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2243      	movs	r2, #67	@ 0x43
 80032be:	5c9b      	ldrb	r3, [r3, r2]
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	3b01      	subs	r3, #1
 80032c4:	1e5a      	subs	r2, r3, #1
 80032c6:	4193      	sbcs	r3, r2
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d001      	beq.n	80032d2 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e07b      	b.n	80033ca <HAL_TIM_PWM_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d104      	bne.n	80032e2 <HAL_TIM_PWM_Start+0xaa>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	223e      	movs	r2, #62	@ 0x3e
 80032dc:	2102      	movs	r1, #2
 80032de:	5499      	strb	r1, [r3, r2]
 80032e0:	e023      	b.n	800332a <HAL_TIM_PWM_Start+0xf2>
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	2b04      	cmp	r3, #4
 80032e6:	d104      	bne.n	80032f2 <HAL_TIM_PWM_Start+0xba>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	223f      	movs	r2, #63	@ 0x3f
 80032ec:	2102      	movs	r1, #2
 80032ee:	5499      	strb	r1, [r3, r2]
 80032f0:	e01b      	b.n	800332a <HAL_TIM_PWM_Start+0xf2>
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	2b08      	cmp	r3, #8
 80032f6:	d104      	bne.n	8003302 <HAL_TIM_PWM_Start+0xca>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2240      	movs	r2, #64	@ 0x40
 80032fc:	2102      	movs	r1, #2
 80032fe:	5499      	strb	r1, [r3, r2]
 8003300:	e013      	b.n	800332a <HAL_TIM_PWM_Start+0xf2>
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	2b0c      	cmp	r3, #12
 8003306:	d104      	bne.n	8003312 <HAL_TIM_PWM_Start+0xda>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2241      	movs	r2, #65	@ 0x41
 800330c:	2102      	movs	r1, #2
 800330e:	5499      	strb	r1, [r3, r2]
 8003310:	e00b      	b.n	800332a <HAL_TIM_PWM_Start+0xf2>
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	2b10      	cmp	r3, #16
 8003316:	d104      	bne.n	8003322 <HAL_TIM_PWM_Start+0xea>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2242      	movs	r2, #66	@ 0x42
 800331c:	2102      	movs	r1, #2
 800331e:	5499      	strb	r1, [r3, r2]
 8003320:	e003      	b.n	800332a <HAL_TIM_PWM_Start+0xf2>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2243      	movs	r2, #67	@ 0x43
 8003326:	2102      	movs	r1, #2
 8003328:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	6839      	ldr	r1, [r7, #0]
 8003330:	2201      	movs	r2, #1
 8003332:	0018      	movs	r0, r3
 8003334:	f000 fd38 	bl	8003da8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a25      	ldr	r2, [pc, #148]	@ (80033d4 <HAL_TIM_PWM_Start+0x19c>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d009      	beq.n	8003356 <HAL_TIM_PWM_Start+0x11e>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a24      	ldr	r2, [pc, #144]	@ (80033d8 <HAL_TIM_PWM_Start+0x1a0>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d004      	beq.n	8003356 <HAL_TIM_PWM_Start+0x11e>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a22      	ldr	r2, [pc, #136]	@ (80033dc <HAL_TIM_PWM_Start+0x1a4>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d101      	bne.n	800335a <HAL_TIM_PWM_Start+0x122>
 8003356:	2301      	movs	r3, #1
 8003358:	e000      	b.n	800335c <HAL_TIM_PWM_Start+0x124>
 800335a:	2300      	movs	r3, #0
 800335c:	2b00      	cmp	r3, #0
 800335e:	d008      	beq.n	8003372 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	2180      	movs	r1, #128	@ 0x80
 800336c:	0209      	lsls	r1, r1, #8
 800336e:	430a      	orrs	r2, r1
 8003370:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a17      	ldr	r2, [pc, #92]	@ (80033d4 <HAL_TIM_PWM_Start+0x19c>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d004      	beq.n	8003386 <HAL_TIM_PWM_Start+0x14e>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a17      	ldr	r2, [pc, #92]	@ (80033e0 <HAL_TIM_PWM_Start+0x1a8>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d116      	bne.n	80033b4 <HAL_TIM_PWM_Start+0x17c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	4a15      	ldr	r2, [pc, #84]	@ (80033e4 <HAL_TIM_PWM_Start+0x1ac>)
 800338e:	4013      	ands	r3, r2
 8003390:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2b06      	cmp	r3, #6
 8003396:	d016      	beq.n	80033c6 <HAL_TIM_PWM_Start+0x18e>
 8003398:	68fa      	ldr	r2, [r7, #12]
 800339a:	2380      	movs	r3, #128	@ 0x80
 800339c:	025b      	lsls	r3, r3, #9
 800339e:	429a      	cmp	r2, r3
 80033a0:	d011      	beq.n	80033c6 <HAL_TIM_PWM_Start+0x18e>
    {
      __HAL_TIM_ENABLE(htim);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	2101      	movs	r1, #1
 80033ae:	430a      	orrs	r2, r1
 80033b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033b2:	e008      	b.n	80033c6 <HAL_TIM_PWM_Start+0x18e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	2101      	movs	r1, #1
 80033c0:	430a      	orrs	r2, r1
 80033c2:	601a      	str	r2, [r3, #0]
 80033c4:	e000      	b.n	80033c8 <HAL_TIM_PWM_Start+0x190>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033c6:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80033c8:	2300      	movs	r3, #0
}
 80033ca:	0018      	movs	r0, r3
 80033cc:	46bd      	mov	sp, r7
 80033ce:	b004      	add	sp, #16
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	46c0      	nop			@ (mov r8, r8)
 80033d4:	40012c00 	.word	0x40012c00
 80033d8:	40014400 	.word	0x40014400
 80033dc:	40014800 	.word	0x40014800
 80033e0:	40000400 	.word	0x40000400
 80033e4:	00010007 	.word	0x00010007

080033e8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b086      	sub	sp, #24
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	60f8      	str	r0, [r7, #12]
 80033f0:	60b9      	str	r1, [r7, #8]
 80033f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033f4:	2317      	movs	r3, #23
 80033f6:	18fb      	adds	r3, r7, r3
 80033f8:	2200      	movs	r2, #0
 80033fa:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	223c      	movs	r2, #60	@ 0x3c
 8003400:	5c9b      	ldrb	r3, [r3, r2]
 8003402:	2b01      	cmp	r3, #1
 8003404:	d101      	bne.n	800340a <HAL_TIM_OC_ConfigChannel+0x22>
 8003406:	2302      	movs	r3, #2
 8003408:	e048      	b.n	800349c <HAL_TIM_OC_ConfigChannel+0xb4>
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	223c      	movs	r2, #60	@ 0x3c
 800340e:	2101      	movs	r1, #1
 8003410:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2b14      	cmp	r3, #20
 8003416:	d835      	bhi.n	8003484 <HAL_TIM_OC_ConfigChannel+0x9c>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	009a      	lsls	r2, r3, #2
 800341c:	4b21      	ldr	r3, [pc, #132]	@ (80034a4 <HAL_TIM_OC_ConfigChannel+0xbc>)
 800341e:	18d3      	adds	r3, r2, r3
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	68ba      	ldr	r2, [r7, #8]
 800342a:	0011      	movs	r1, r2
 800342c:	0018      	movs	r0, r3
 800342e:	f000 f983 	bl	8003738 <TIM_OC1_SetConfig>
      break;
 8003432:	e02c      	b.n	800348e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	68ba      	ldr	r2, [r7, #8]
 800343a:	0011      	movs	r1, r2
 800343c:	0018      	movs	r0, r3
 800343e:	f000 f9fb 	bl	8003838 <TIM_OC2_SetConfig>
      break;
 8003442:	e024      	b.n	800348e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	68ba      	ldr	r2, [r7, #8]
 800344a:	0011      	movs	r1, r2
 800344c:	0018      	movs	r0, r3
 800344e:	f000 fa71 	bl	8003934 <TIM_OC3_SetConfig>
      break;
 8003452:	e01c      	b.n	800348e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	68ba      	ldr	r2, [r7, #8]
 800345a:	0011      	movs	r1, r2
 800345c:	0018      	movs	r0, r3
 800345e:	f000 faeb 	bl	8003a38 <TIM_OC4_SetConfig>
      break;
 8003462:	e014      	b.n	800348e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	68ba      	ldr	r2, [r7, #8]
 800346a:	0011      	movs	r1, r2
 800346c:	0018      	movs	r0, r3
 800346e:	f000 fb47 	bl	8003b00 <TIM_OC5_SetConfig>
      break;
 8003472:	e00c      	b.n	800348e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	68ba      	ldr	r2, [r7, #8]
 800347a:	0011      	movs	r1, r2
 800347c:	0018      	movs	r0, r3
 800347e:	f000 fb99 	bl	8003bb4 <TIM_OC6_SetConfig>
      break;
 8003482:	e004      	b.n	800348e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8003484:	2317      	movs	r3, #23
 8003486:	18fb      	adds	r3, r7, r3
 8003488:	2201      	movs	r2, #1
 800348a:	701a      	strb	r2, [r3, #0]
      break;
 800348c:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	223c      	movs	r2, #60	@ 0x3c
 8003492:	2100      	movs	r1, #0
 8003494:	5499      	strb	r1, [r3, r2]

  return status;
 8003496:	2317      	movs	r3, #23
 8003498:	18fb      	adds	r3, r7, r3
 800349a:	781b      	ldrb	r3, [r3, #0]
}
 800349c:	0018      	movs	r0, r3
 800349e:	46bd      	mov	sp, r7
 80034a0:	b006      	add	sp, #24
 80034a2:	bd80      	pop	{r7, pc}
 80034a4:	0800412c 	.word	0x0800412c

080034a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b084      	sub	sp, #16
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80034b2:	230f      	movs	r3, #15
 80034b4:	18fb      	adds	r3, r7, r3
 80034b6:	2200      	movs	r2, #0
 80034b8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	223c      	movs	r2, #60	@ 0x3c
 80034be:	5c9b      	ldrb	r3, [r3, r2]
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d101      	bne.n	80034c8 <HAL_TIM_ConfigClockSource+0x20>
 80034c4:	2302      	movs	r3, #2
 80034c6:	e0bc      	b.n	8003642 <HAL_TIM_ConfigClockSource+0x19a>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	223c      	movs	r2, #60	@ 0x3c
 80034cc:	2101      	movs	r1, #1
 80034ce:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	223d      	movs	r2, #61	@ 0x3d
 80034d4:	2102      	movs	r1, #2
 80034d6:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	4a5a      	ldr	r2, [pc, #360]	@ (800364c <HAL_TIM_ConfigClockSource+0x1a4>)
 80034e4:	4013      	ands	r3, r2
 80034e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	4a59      	ldr	r2, [pc, #356]	@ (8003650 <HAL_TIM_ConfigClockSource+0x1a8>)
 80034ec:	4013      	ands	r3, r2
 80034ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	68ba      	ldr	r2, [r7, #8]
 80034f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	2280      	movs	r2, #128	@ 0x80
 80034fe:	0192      	lsls	r2, r2, #6
 8003500:	4293      	cmp	r3, r2
 8003502:	d040      	beq.n	8003586 <HAL_TIM_ConfigClockSource+0xde>
 8003504:	2280      	movs	r2, #128	@ 0x80
 8003506:	0192      	lsls	r2, r2, #6
 8003508:	4293      	cmp	r3, r2
 800350a:	d900      	bls.n	800350e <HAL_TIM_ConfigClockSource+0x66>
 800350c:	e088      	b.n	8003620 <HAL_TIM_ConfigClockSource+0x178>
 800350e:	2280      	movs	r2, #128	@ 0x80
 8003510:	0152      	lsls	r2, r2, #5
 8003512:	4293      	cmp	r3, r2
 8003514:	d100      	bne.n	8003518 <HAL_TIM_ConfigClockSource+0x70>
 8003516:	e088      	b.n	800362a <HAL_TIM_ConfigClockSource+0x182>
 8003518:	2280      	movs	r2, #128	@ 0x80
 800351a:	0152      	lsls	r2, r2, #5
 800351c:	4293      	cmp	r3, r2
 800351e:	d900      	bls.n	8003522 <HAL_TIM_ConfigClockSource+0x7a>
 8003520:	e07e      	b.n	8003620 <HAL_TIM_ConfigClockSource+0x178>
 8003522:	2b70      	cmp	r3, #112	@ 0x70
 8003524:	d018      	beq.n	8003558 <HAL_TIM_ConfigClockSource+0xb0>
 8003526:	d900      	bls.n	800352a <HAL_TIM_ConfigClockSource+0x82>
 8003528:	e07a      	b.n	8003620 <HAL_TIM_ConfigClockSource+0x178>
 800352a:	2b60      	cmp	r3, #96	@ 0x60
 800352c:	d04f      	beq.n	80035ce <HAL_TIM_ConfigClockSource+0x126>
 800352e:	d900      	bls.n	8003532 <HAL_TIM_ConfigClockSource+0x8a>
 8003530:	e076      	b.n	8003620 <HAL_TIM_ConfigClockSource+0x178>
 8003532:	2b50      	cmp	r3, #80	@ 0x50
 8003534:	d03b      	beq.n	80035ae <HAL_TIM_ConfigClockSource+0x106>
 8003536:	d900      	bls.n	800353a <HAL_TIM_ConfigClockSource+0x92>
 8003538:	e072      	b.n	8003620 <HAL_TIM_ConfigClockSource+0x178>
 800353a:	2b40      	cmp	r3, #64	@ 0x40
 800353c:	d057      	beq.n	80035ee <HAL_TIM_ConfigClockSource+0x146>
 800353e:	d900      	bls.n	8003542 <HAL_TIM_ConfigClockSource+0x9a>
 8003540:	e06e      	b.n	8003620 <HAL_TIM_ConfigClockSource+0x178>
 8003542:	2b30      	cmp	r3, #48	@ 0x30
 8003544:	d063      	beq.n	800360e <HAL_TIM_ConfigClockSource+0x166>
 8003546:	d86b      	bhi.n	8003620 <HAL_TIM_ConfigClockSource+0x178>
 8003548:	2b20      	cmp	r3, #32
 800354a:	d060      	beq.n	800360e <HAL_TIM_ConfigClockSource+0x166>
 800354c:	d868      	bhi.n	8003620 <HAL_TIM_ConfigClockSource+0x178>
 800354e:	2b00      	cmp	r3, #0
 8003550:	d05d      	beq.n	800360e <HAL_TIM_ConfigClockSource+0x166>
 8003552:	2b10      	cmp	r3, #16
 8003554:	d05b      	beq.n	800360e <HAL_TIM_ConfigClockSource+0x166>
 8003556:	e063      	b.n	8003620 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003568:	f000 fbfe 	bl	8003d68 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	2277      	movs	r2, #119	@ 0x77
 8003578:	4313      	orrs	r3, r2
 800357a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	68ba      	ldr	r2, [r7, #8]
 8003582:	609a      	str	r2, [r3, #8]
      break;
 8003584:	e052      	b.n	800362c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003596:	f000 fbe7 	bl	8003d68 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	689a      	ldr	r2, [r3, #8]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	2180      	movs	r1, #128	@ 0x80
 80035a6:	01c9      	lsls	r1, r1, #7
 80035a8:	430a      	orrs	r2, r1
 80035aa:	609a      	str	r2, [r3, #8]
      break;
 80035ac:	e03e      	b.n	800362c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80035ba:	001a      	movs	r2, r3
 80035bc:	f000 fb58 	bl	8003c70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	2150      	movs	r1, #80	@ 0x50
 80035c6:	0018      	movs	r0, r3
 80035c8:	f000 fbb2 	bl	8003d30 <TIM_ITRx_SetConfig>
      break;
 80035cc:	e02e      	b.n	800362c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80035da:	001a      	movs	r2, r3
 80035dc:	f000 fb76 	bl	8003ccc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	2160      	movs	r1, #96	@ 0x60
 80035e6:	0018      	movs	r0, r3
 80035e8:	f000 fba2 	bl	8003d30 <TIM_ITRx_SetConfig>
      break;
 80035ec:	e01e      	b.n	800362c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80035fa:	001a      	movs	r2, r3
 80035fc:	f000 fb38 	bl	8003c70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	2140      	movs	r1, #64	@ 0x40
 8003606:	0018      	movs	r0, r3
 8003608:	f000 fb92 	bl	8003d30 <TIM_ITRx_SetConfig>
      break;
 800360c:	e00e      	b.n	800362c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	0019      	movs	r1, r3
 8003618:	0010      	movs	r0, r2
 800361a:	f000 fb89 	bl	8003d30 <TIM_ITRx_SetConfig>
      break;
 800361e:	e005      	b.n	800362c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003620:	230f      	movs	r3, #15
 8003622:	18fb      	adds	r3, r7, r3
 8003624:	2201      	movs	r2, #1
 8003626:	701a      	strb	r2, [r3, #0]
      break;
 8003628:	e000      	b.n	800362c <HAL_TIM_ConfigClockSource+0x184>
      break;
 800362a:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	223d      	movs	r2, #61	@ 0x3d
 8003630:	2101      	movs	r1, #1
 8003632:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	223c      	movs	r2, #60	@ 0x3c
 8003638:	2100      	movs	r1, #0
 800363a:	5499      	strb	r1, [r3, r2]

  return status;
 800363c:	230f      	movs	r3, #15
 800363e:	18fb      	adds	r3, r7, r3
 8003640:	781b      	ldrb	r3, [r3, #0]
}
 8003642:	0018      	movs	r0, r3
 8003644:	46bd      	mov	sp, r7
 8003646:	b004      	add	sp, #16
 8003648:	bd80      	pop	{r7, pc}
 800364a:	46c0      	nop			@ (mov r8, r8)
 800364c:	ffceff88 	.word	0xffceff88
 8003650:	ffff00ff 	.word	0xffff00ff

08003654 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b084      	sub	sp, #16
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	4a2e      	ldr	r2, [pc, #184]	@ (8003720 <TIM_Base_SetConfig+0xcc>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d003      	beq.n	8003674 <TIM_Base_SetConfig+0x20>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	4a2d      	ldr	r2, [pc, #180]	@ (8003724 <TIM_Base_SetConfig+0xd0>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d108      	bne.n	8003686 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2270      	movs	r2, #112	@ 0x70
 8003678:	4393      	bics	r3, r2
 800367a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	68fa      	ldr	r2, [r7, #12]
 8003682:	4313      	orrs	r3, r2
 8003684:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4a25      	ldr	r2, [pc, #148]	@ (8003720 <TIM_Base_SetConfig+0xcc>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d00f      	beq.n	80036ae <TIM_Base_SetConfig+0x5a>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	4a24      	ldr	r2, [pc, #144]	@ (8003724 <TIM_Base_SetConfig+0xd0>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d00b      	beq.n	80036ae <TIM_Base_SetConfig+0x5a>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	4a23      	ldr	r2, [pc, #140]	@ (8003728 <TIM_Base_SetConfig+0xd4>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d007      	beq.n	80036ae <TIM_Base_SetConfig+0x5a>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	4a22      	ldr	r2, [pc, #136]	@ (800372c <TIM_Base_SetConfig+0xd8>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d003      	beq.n	80036ae <TIM_Base_SetConfig+0x5a>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	4a21      	ldr	r2, [pc, #132]	@ (8003730 <TIM_Base_SetConfig+0xdc>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d108      	bne.n	80036c0 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	4a20      	ldr	r2, [pc, #128]	@ (8003734 <TIM_Base_SetConfig+0xe0>)
 80036b2:	4013      	ands	r3, r2
 80036b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	68db      	ldr	r3, [r3, #12]
 80036ba:	68fa      	ldr	r2, [r7, #12]
 80036bc:	4313      	orrs	r3, r2
 80036be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2280      	movs	r2, #128	@ 0x80
 80036c4:	4393      	bics	r3, r2
 80036c6:	001a      	movs	r2, r3
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	695b      	ldr	r3, [r3, #20]
 80036cc:	4313      	orrs	r3, r2
 80036ce:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	689a      	ldr	r2, [r3, #8]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	4a0f      	ldr	r2, [pc, #60]	@ (8003720 <TIM_Base_SetConfig+0xcc>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d007      	beq.n	80036f8 <TIM_Base_SetConfig+0xa4>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	4a10      	ldr	r2, [pc, #64]	@ (800372c <TIM_Base_SetConfig+0xd8>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d003      	beq.n	80036f8 <TIM_Base_SetConfig+0xa4>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	4a0f      	ldr	r2, [pc, #60]	@ (8003730 <TIM_Base_SetConfig+0xdc>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d103      	bne.n	8003700 <TIM_Base_SetConfig+0xac>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	691a      	ldr	r2, [r3, #16]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	2204      	movs	r2, #4
 8003706:	431a      	orrs	r2, r3
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2201      	movs	r2, #1
 8003710:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	68fa      	ldr	r2, [r7, #12]
 8003716:	601a      	str	r2, [r3, #0]
}
 8003718:	46c0      	nop			@ (mov r8, r8)
 800371a:	46bd      	mov	sp, r7
 800371c:	b004      	add	sp, #16
 800371e:	bd80      	pop	{r7, pc}
 8003720:	40012c00 	.word	0x40012c00
 8003724:	40000400 	.word	0x40000400
 8003728:	40002000 	.word	0x40002000
 800372c:	40014400 	.word	0x40014400
 8003730:	40014800 	.word	0x40014800
 8003734:	fffffcff 	.word	0xfffffcff

08003738 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b086      	sub	sp, #24
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6a1b      	ldr	r3, [r3, #32]
 8003746:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6a1b      	ldr	r3, [r3, #32]
 800374c:	2201      	movs	r2, #1
 800374e:	4393      	bics	r3, r2
 8003750:	001a      	movs	r2, r3
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	699b      	ldr	r3, [r3, #24]
 8003760:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	4a2e      	ldr	r2, [pc, #184]	@ (8003820 <TIM_OC1_SetConfig+0xe8>)
 8003766:	4013      	ands	r3, r2
 8003768:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2203      	movs	r2, #3
 800376e:	4393      	bics	r3, r2
 8003770:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	68fa      	ldr	r2, [r7, #12]
 8003778:	4313      	orrs	r3, r2
 800377a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	2202      	movs	r2, #2
 8003780:	4393      	bics	r3, r2
 8003782:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	697a      	ldr	r2, [r7, #20]
 800378a:	4313      	orrs	r3, r2
 800378c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4a24      	ldr	r2, [pc, #144]	@ (8003824 <TIM_OC1_SetConfig+0xec>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d007      	beq.n	80037a6 <TIM_OC1_SetConfig+0x6e>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4a23      	ldr	r2, [pc, #140]	@ (8003828 <TIM_OC1_SetConfig+0xf0>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d003      	beq.n	80037a6 <TIM_OC1_SetConfig+0x6e>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	4a22      	ldr	r2, [pc, #136]	@ (800382c <TIM_OC1_SetConfig+0xf4>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d10c      	bne.n	80037c0 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	2208      	movs	r2, #8
 80037aa:	4393      	bics	r3, r2
 80037ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	68db      	ldr	r3, [r3, #12]
 80037b2:	697a      	ldr	r2, [r7, #20]
 80037b4:	4313      	orrs	r3, r2
 80037b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	2204      	movs	r2, #4
 80037bc:	4393      	bics	r3, r2
 80037be:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	4a18      	ldr	r2, [pc, #96]	@ (8003824 <TIM_OC1_SetConfig+0xec>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d007      	beq.n	80037d8 <TIM_OC1_SetConfig+0xa0>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	4a17      	ldr	r2, [pc, #92]	@ (8003828 <TIM_OC1_SetConfig+0xf0>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d003      	beq.n	80037d8 <TIM_OC1_SetConfig+0xa0>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	4a16      	ldr	r2, [pc, #88]	@ (800382c <TIM_OC1_SetConfig+0xf4>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d111      	bne.n	80037fc <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	4a15      	ldr	r2, [pc, #84]	@ (8003830 <TIM_OC1_SetConfig+0xf8>)
 80037dc:	4013      	ands	r3, r2
 80037de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	4a14      	ldr	r2, [pc, #80]	@ (8003834 <TIM_OC1_SetConfig+0xfc>)
 80037e4:	4013      	ands	r3, r2
 80037e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	695b      	ldr	r3, [r3, #20]
 80037ec:	693a      	ldr	r2, [r7, #16]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	699b      	ldr	r3, [r3, #24]
 80037f6:	693a      	ldr	r2, [r7, #16]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	693a      	ldr	r2, [r7, #16]
 8003800:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	68fa      	ldr	r2, [r7, #12]
 8003806:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	685a      	ldr	r2, [r3, #4]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	697a      	ldr	r2, [r7, #20]
 8003814:	621a      	str	r2, [r3, #32]
}
 8003816:	46c0      	nop			@ (mov r8, r8)
 8003818:	46bd      	mov	sp, r7
 800381a:	b006      	add	sp, #24
 800381c:	bd80      	pop	{r7, pc}
 800381e:	46c0      	nop			@ (mov r8, r8)
 8003820:	fffeff8f 	.word	0xfffeff8f
 8003824:	40012c00 	.word	0x40012c00
 8003828:	40014400 	.word	0x40014400
 800382c:	40014800 	.word	0x40014800
 8003830:	fffffeff 	.word	0xfffffeff
 8003834:	fffffdff 	.word	0xfffffdff

08003838 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b086      	sub	sp, #24
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6a1b      	ldr	r3, [r3, #32]
 8003846:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6a1b      	ldr	r3, [r3, #32]
 800384c:	2210      	movs	r2, #16
 800384e:	4393      	bics	r3, r2
 8003850:	001a      	movs	r2, r3
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	699b      	ldr	r3, [r3, #24]
 8003860:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	4a2c      	ldr	r2, [pc, #176]	@ (8003918 <TIM_OC2_SetConfig+0xe0>)
 8003866:	4013      	ands	r3, r2
 8003868:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	4a2b      	ldr	r2, [pc, #172]	@ (800391c <TIM_OC2_SetConfig+0xe4>)
 800386e:	4013      	ands	r3, r2
 8003870:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	021b      	lsls	r3, r3, #8
 8003878:	68fa      	ldr	r2, [r7, #12]
 800387a:	4313      	orrs	r3, r2
 800387c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	2220      	movs	r2, #32
 8003882:	4393      	bics	r3, r2
 8003884:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	011b      	lsls	r3, r3, #4
 800388c:	697a      	ldr	r2, [r7, #20]
 800388e:	4313      	orrs	r3, r2
 8003890:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	4a22      	ldr	r2, [pc, #136]	@ (8003920 <TIM_OC2_SetConfig+0xe8>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d10d      	bne.n	80038b6 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	2280      	movs	r2, #128	@ 0x80
 800389e:	4393      	bics	r3, r2
 80038a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	68db      	ldr	r3, [r3, #12]
 80038a6:	011b      	lsls	r3, r3, #4
 80038a8:	697a      	ldr	r2, [r7, #20]
 80038aa:	4313      	orrs	r3, r2
 80038ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	2240      	movs	r2, #64	@ 0x40
 80038b2:	4393      	bics	r3, r2
 80038b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4a19      	ldr	r2, [pc, #100]	@ (8003920 <TIM_OC2_SetConfig+0xe8>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d007      	beq.n	80038ce <TIM_OC2_SetConfig+0x96>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4a18      	ldr	r2, [pc, #96]	@ (8003924 <TIM_OC2_SetConfig+0xec>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d003      	beq.n	80038ce <TIM_OC2_SetConfig+0x96>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4a17      	ldr	r2, [pc, #92]	@ (8003928 <TIM_OC2_SetConfig+0xf0>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d113      	bne.n	80038f6 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	4a16      	ldr	r2, [pc, #88]	@ (800392c <TIM_OC2_SetConfig+0xf4>)
 80038d2:	4013      	ands	r3, r2
 80038d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	4a15      	ldr	r2, [pc, #84]	@ (8003930 <TIM_OC2_SetConfig+0xf8>)
 80038da:	4013      	ands	r3, r2
 80038dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	695b      	ldr	r3, [r3, #20]
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	693a      	ldr	r2, [r7, #16]
 80038e6:	4313      	orrs	r3, r2
 80038e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	699b      	ldr	r3, [r3, #24]
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	693a      	ldr	r2, [r7, #16]
 80038f2:	4313      	orrs	r3, r2
 80038f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	693a      	ldr	r2, [r7, #16]
 80038fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	68fa      	ldr	r2, [r7, #12]
 8003900:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	685a      	ldr	r2, [r3, #4]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	697a      	ldr	r2, [r7, #20]
 800390e:	621a      	str	r2, [r3, #32]
}
 8003910:	46c0      	nop			@ (mov r8, r8)
 8003912:	46bd      	mov	sp, r7
 8003914:	b006      	add	sp, #24
 8003916:	bd80      	pop	{r7, pc}
 8003918:	feff8fff 	.word	0xfeff8fff
 800391c:	fffffcff 	.word	0xfffffcff
 8003920:	40012c00 	.word	0x40012c00
 8003924:	40014400 	.word	0x40014400
 8003928:	40014800 	.word	0x40014800
 800392c:	fffffbff 	.word	0xfffffbff
 8003930:	fffff7ff 	.word	0xfffff7ff

08003934 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b086      	sub	sp, #24
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
 800393c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6a1b      	ldr	r3, [r3, #32]
 8003942:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6a1b      	ldr	r3, [r3, #32]
 8003948:	4a31      	ldr	r2, [pc, #196]	@ (8003a10 <TIM_OC3_SetConfig+0xdc>)
 800394a:	401a      	ands	r2, r3
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	69db      	ldr	r3, [r3, #28]
 800395a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	4a2d      	ldr	r2, [pc, #180]	@ (8003a14 <TIM_OC3_SetConfig+0xe0>)
 8003960:	4013      	ands	r3, r2
 8003962:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2203      	movs	r2, #3
 8003968:	4393      	bics	r3, r2
 800396a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	68fa      	ldr	r2, [r7, #12]
 8003972:	4313      	orrs	r3, r2
 8003974:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	4a27      	ldr	r2, [pc, #156]	@ (8003a18 <TIM_OC3_SetConfig+0xe4>)
 800397a:	4013      	ands	r3, r2
 800397c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	021b      	lsls	r3, r3, #8
 8003984:	697a      	ldr	r2, [r7, #20]
 8003986:	4313      	orrs	r3, r2
 8003988:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	4a23      	ldr	r2, [pc, #140]	@ (8003a1c <TIM_OC3_SetConfig+0xe8>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d10d      	bne.n	80039ae <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	4a22      	ldr	r2, [pc, #136]	@ (8003a20 <TIM_OC3_SetConfig+0xec>)
 8003996:	4013      	ands	r3, r2
 8003998:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	021b      	lsls	r3, r3, #8
 80039a0:	697a      	ldr	r2, [r7, #20]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	4a1e      	ldr	r2, [pc, #120]	@ (8003a24 <TIM_OC3_SetConfig+0xf0>)
 80039aa:	4013      	ands	r3, r2
 80039ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4a1a      	ldr	r2, [pc, #104]	@ (8003a1c <TIM_OC3_SetConfig+0xe8>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d007      	beq.n	80039c6 <TIM_OC3_SetConfig+0x92>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a1b      	ldr	r2, [pc, #108]	@ (8003a28 <TIM_OC3_SetConfig+0xf4>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d003      	beq.n	80039c6 <TIM_OC3_SetConfig+0x92>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4a1a      	ldr	r2, [pc, #104]	@ (8003a2c <TIM_OC3_SetConfig+0xf8>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d113      	bne.n	80039ee <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	4a19      	ldr	r2, [pc, #100]	@ (8003a30 <TIM_OC3_SetConfig+0xfc>)
 80039ca:	4013      	ands	r3, r2
 80039cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	4a18      	ldr	r2, [pc, #96]	@ (8003a34 <TIM_OC3_SetConfig+0x100>)
 80039d2:	4013      	ands	r3, r2
 80039d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	695b      	ldr	r3, [r3, #20]
 80039da:	011b      	lsls	r3, r3, #4
 80039dc:	693a      	ldr	r2, [r7, #16]
 80039de:	4313      	orrs	r3, r2
 80039e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	699b      	ldr	r3, [r3, #24]
 80039e6:	011b      	lsls	r3, r3, #4
 80039e8:	693a      	ldr	r2, [r7, #16]
 80039ea:	4313      	orrs	r3, r2
 80039ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	693a      	ldr	r2, [r7, #16]
 80039f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	68fa      	ldr	r2, [r7, #12]
 80039f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	685a      	ldr	r2, [r3, #4]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	697a      	ldr	r2, [r7, #20]
 8003a06:	621a      	str	r2, [r3, #32]
}
 8003a08:	46c0      	nop			@ (mov r8, r8)
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	b006      	add	sp, #24
 8003a0e:	bd80      	pop	{r7, pc}
 8003a10:	fffffeff 	.word	0xfffffeff
 8003a14:	fffeff8f 	.word	0xfffeff8f
 8003a18:	fffffdff 	.word	0xfffffdff
 8003a1c:	40012c00 	.word	0x40012c00
 8003a20:	fffff7ff 	.word	0xfffff7ff
 8003a24:	fffffbff 	.word	0xfffffbff
 8003a28:	40014400 	.word	0x40014400
 8003a2c:	40014800 	.word	0x40014800
 8003a30:	ffffefff 	.word	0xffffefff
 8003a34:	ffffdfff 	.word	0xffffdfff

08003a38 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b086      	sub	sp, #24
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6a1b      	ldr	r3, [r3, #32]
 8003a46:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6a1b      	ldr	r3, [r3, #32]
 8003a4c:	4a24      	ldr	r2, [pc, #144]	@ (8003ae0 <TIM_OC4_SetConfig+0xa8>)
 8003a4e:	401a      	ands	r2, r3
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	69db      	ldr	r3, [r3, #28]
 8003a5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	4a20      	ldr	r2, [pc, #128]	@ (8003ae4 <TIM_OC4_SetConfig+0xac>)
 8003a64:	4013      	ands	r3, r2
 8003a66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	4a1f      	ldr	r2, [pc, #124]	@ (8003ae8 <TIM_OC4_SetConfig+0xb0>)
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	021b      	lsls	r3, r3, #8
 8003a76:	68fa      	ldr	r2, [r7, #12]
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	4a1b      	ldr	r2, [pc, #108]	@ (8003aec <TIM_OC4_SetConfig+0xb4>)
 8003a80:	4013      	ands	r3, r2
 8003a82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	031b      	lsls	r3, r3, #12
 8003a8a:	693a      	ldr	r2, [r7, #16]
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	4a17      	ldr	r2, [pc, #92]	@ (8003af0 <TIM_OC4_SetConfig+0xb8>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d007      	beq.n	8003aa8 <TIM_OC4_SetConfig+0x70>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	4a16      	ldr	r2, [pc, #88]	@ (8003af4 <TIM_OC4_SetConfig+0xbc>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d003      	beq.n	8003aa8 <TIM_OC4_SetConfig+0x70>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	4a15      	ldr	r2, [pc, #84]	@ (8003af8 <TIM_OC4_SetConfig+0xc0>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d109      	bne.n	8003abc <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	4a14      	ldr	r2, [pc, #80]	@ (8003afc <TIM_OC4_SetConfig+0xc4>)
 8003aac:	4013      	ands	r3, r2
 8003aae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	695b      	ldr	r3, [r3, #20]
 8003ab4:	019b      	lsls	r3, r3, #6
 8003ab6:	697a      	ldr	r2, [r7, #20]
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	697a      	ldr	r2, [r7, #20]
 8003ac0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	68fa      	ldr	r2, [r7, #12]
 8003ac6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	685a      	ldr	r2, [r3, #4]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	693a      	ldr	r2, [r7, #16]
 8003ad4:	621a      	str	r2, [r3, #32]
}
 8003ad6:	46c0      	nop			@ (mov r8, r8)
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	b006      	add	sp, #24
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	46c0      	nop			@ (mov r8, r8)
 8003ae0:	ffffefff 	.word	0xffffefff
 8003ae4:	feff8fff 	.word	0xfeff8fff
 8003ae8:	fffffcff 	.word	0xfffffcff
 8003aec:	ffffdfff 	.word	0xffffdfff
 8003af0:	40012c00 	.word	0x40012c00
 8003af4:	40014400 	.word	0x40014400
 8003af8:	40014800 	.word	0x40014800
 8003afc:	ffffbfff 	.word	0xffffbfff

08003b00 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b086      	sub	sp, #24
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
 8003b08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6a1b      	ldr	r3, [r3, #32]
 8003b0e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6a1b      	ldr	r3, [r3, #32]
 8003b14:	4a21      	ldr	r2, [pc, #132]	@ (8003b9c <TIM_OC5_SetConfig+0x9c>)
 8003b16:	401a      	ands	r2, r3
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	4a1d      	ldr	r2, [pc, #116]	@ (8003ba0 <TIM_OC5_SetConfig+0xa0>)
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	68fa      	ldr	r2, [r7, #12]
 8003b36:	4313      	orrs	r3, r2
 8003b38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	4a19      	ldr	r2, [pc, #100]	@ (8003ba4 <TIM_OC5_SetConfig+0xa4>)
 8003b3e:	4013      	ands	r3, r2
 8003b40:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	041b      	lsls	r3, r3, #16
 8003b48:	693a      	ldr	r2, [r7, #16]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	4a15      	ldr	r2, [pc, #84]	@ (8003ba8 <TIM_OC5_SetConfig+0xa8>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d007      	beq.n	8003b66 <TIM_OC5_SetConfig+0x66>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	4a14      	ldr	r2, [pc, #80]	@ (8003bac <TIM_OC5_SetConfig+0xac>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d003      	beq.n	8003b66 <TIM_OC5_SetConfig+0x66>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	4a13      	ldr	r2, [pc, #76]	@ (8003bb0 <TIM_OC5_SetConfig+0xb0>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d109      	bne.n	8003b7a <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	4a0c      	ldr	r2, [pc, #48]	@ (8003b9c <TIM_OC5_SetConfig+0x9c>)
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	695b      	ldr	r3, [r3, #20]
 8003b72:	021b      	lsls	r3, r3, #8
 8003b74:	697a      	ldr	r2, [r7, #20]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	697a      	ldr	r2, [r7, #20]
 8003b7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	68fa      	ldr	r2, [r7, #12]
 8003b84:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	685a      	ldr	r2, [r3, #4]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	693a      	ldr	r2, [r7, #16]
 8003b92:	621a      	str	r2, [r3, #32]
}
 8003b94:	46c0      	nop			@ (mov r8, r8)
 8003b96:	46bd      	mov	sp, r7
 8003b98:	b006      	add	sp, #24
 8003b9a:	bd80      	pop	{r7, pc}
 8003b9c:	fffeffff 	.word	0xfffeffff
 8003ba0:	fffeff8f 	.word	0xfffeff8f
 8003ba4:	fffdffff 	.word	0xfffdffff
 8003ba8:	40012c00 	.word	0x40012c00
 8003bac:	40014400 	.word	0x40014400
 8003bb0:	40014800 	.word	0x40014800

08003bb4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b086      	sub	sp, #24
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6a1b      	ldr	r3, [r3, #32]
 8003bc2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6a1b      	ldr	r3, [r3, #32]
 8003bc8:	4a22      	ldr	r2, [pc, #136]	@ (8003c54 <TIM_OC6_SetConfig+0xa0>)
 8003bca:	401a      	ands	r2, r3
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	4a1e      	ldr	r2, [pc, #120]	@ (8003c58 <TIM_OC6_SetConfig+0xa4>)
 8003be0:	4013      	ands	r3, r2
 8003be2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	021b      	lsls	r3, r3, #8
 8003bea:	68fa      	ldr	r2, [r7, #12]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	4a1a      	ldr	r2, [pc, #104]	@ (8003c5c <TIM_OC6_SetConfig+0xa8>)
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	051b      	lsls	r3, r3, #20
 8003bfe:	693a      	ldr	r2, [r7, #16]
 8003c00:	4313      	orrs	r3, r2
 8003c02:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	4a16      	ldr	r2, [pc, #88]	@ (8003c60 <TIM_OC6_SetConfig+0xac>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d007      	beq.n	8003c1c <TIM_OC6_SetConfig+0x68>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	4a15      	ldr	r2, [pc, #84]	@ (8003c64 <TIM_OC6_SetConfig+0xb0>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d003      	beq.n	8003c1c <TIM_OC6_SetConfig+0x68>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	4a14      	ldr	r2, [pc, #80]	@ (8003c68 <TIM_OC6_SetConfig+0xb4>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d109      	bne.n	8003c30 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	4a13      	ldr	r2, [pc, #76]	@ (8003c6c <TIM_OC6_SetConfig+0xb8>)
 8003c20:	4013      	ands	r3, r2
 8003c22:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	695b      	ldr	r3, [r3, #20]
 8003c28:	029b      	lsls	r3, r3, #10
 8003c2a:	697a      	ldr	r2, [r7, #20]
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	697a      	ldr	r2, [r7, #20]
 8003c34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	68fa      	ldr	r2, [r7, #12]
 8003c3a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	685a      	ldr	r2, [r3, #4]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	693a      	ldr	r2, [r7, #16]
 8003c48:	621a      	str	r2, [r3, #32]
}
 8003c4a:	46c0      	nop			@ (mov r8, r8)
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	b006      	add	sp, #24
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	46c0      	nop			@ (mov r8, r8)
 8003c54:	ffefffff 	.word	0xffefffff
 8003c58:	feff8fff 	.word	0xfeff8fff
 8003c5c:	ffdfffff 	.word	0xffdfffff
 8003c60:	40012c00 	.word	0x40012c00
 8003c64:	40014400 	.word	0x40014400
 8003c68:	40014800 	.word	0x40014800
 8003c6c:	fffbffff 	.word	0xfffbffff

08003c70 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b086      	sub	sp, #24
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	60f8      	str	r0, [r7, #12]
 8003c78:	60b9      	str	r1, [r7, #8]
 8003c7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	6a1b      	ldr	r3, [r3, #32]
 8003c80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	6a1b      	ldr	r3, [r3, #32]
 8003c86:	2201      	movs	r2, #1
 8003c88:	4393      	bics	r3, r2
 8003c8a:	001a      	movs	r2, r3
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	699b      	ldr	r3, [r3, #24]
 8003c94:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	22f0      	movs	r2, #240	@ 0xf0
 8003c9a:	4393      	bics	r3, r2
 8003c9c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	011b      	lsls	r3, r3, #4
 8003ca2:	693a      	ldr	r2, [r7, #16]
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	220a      	movs	r2, #10
 8003cac:	4393      	bics	r3, r2
 8003cae:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003cb0:	697a      	ldr	r2, [r7, #20]
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	693a      	ldr	r2, [r7, #16]
 8003cbc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	697a      	ldr	r2, [r7, #20]
 8003cc2:	621a      	str	r2, [r3, #32]
}
 8003cc4:	46c0      	nop			@ (mov r8, r8)
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	b006      	add	sp, #24
 8003cca:	bd80      	pop	{r7, pc}

08003ccc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b086      	sub	sp, #24
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	60f8      	str	r0, [r7, #12]
 8003cd4:	60b9      	str	r1, [r7, #8]
 8003cd6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6a1b      	ldr	r3, [r3, #32]
 8003cdc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	6a1b      	ldr	r3, [r3, #32]
 8003ce2:	2210      	movs	r2, #16
 8003ce4:	4393      	bics	r3, r2
 8003ce6:	001a      	movs	r2, r3
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	699b      	ldr	r3, [r3, #24]
 8003cf0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	4a0d      	ldr	r2, [pc, #52]	@ (8003d2c <TIM_TI2_ConfigInputStage+0x60>)
 8003cf6:	4013      	ands	r3, r2
 8003cf8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	031b      	lsls	r3, r3, #12
 8003cfe:	693a      	ldr	r2, [r7, #16]
 8003d00:	4313      	orrs	r3, r2
 8003d02:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	22a0      	movs	r2, #160	@ 0xa0
 8003d08:	4393      	bics	r3, r2
 8003d0a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	011b      	lsls	r3, r3, #4
 8003d10:	697a      	ldr	r2, [r7, #20]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	693a      	ldr	r2, [r7, #16]
 8003d1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	697a      	ldr	r2, [r7, #20]
 8003d20:	621a      	str	r2, [r3, #32]
}
 8003d22:	46c0      	nop			@ (mov r8, r8)
 8003d24:	46bd      	mov	sp, r7
 8003d26:	b006      	add	sp, #24
 8003d28:	bd80      	pop	{r7, pc}
 8003d2a:	46c0      	nop			@ (mov r8, r8)
 8003d2c:	ffff0fff 	.word	0xffff0fff

08003d30 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b084      	sub	sp, #16
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	4a08      	ldr	r2, [pc, #32]	@ (8003d64 <TIM_ITRx_SetConfig+0x34>)
 8003d44:	4013      	ands	r3, r2
 8003d46:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d48:	683a      	ldr	r2, [r7, #0]
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	2207      	movs	r2, #7
 8003d50:	4313      	orrs	r3, r2
 8003d52:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	68fa      	ldr	r2, [r7, #12]
 8003d58:	609a      	str	r2, [r3, #8]
}
 8003d5a:	46c0      	nop			@ (mov r8, r8)
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	b004      	add	sp, #16
 8003d60:	bd80      	pop	{r7, pc}
 8003d62:	46c0      	nop			@ (mov r8, r8)
 8003d64:	ffcfff8f 	.word	0xffcfff8f

08003d68 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b086      	sub	sp, #24
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	60f8      	str	r0, [r7, #12]
 8003d70:	60b9      	str	r1, [r7, #8]
 8003d72:	607a      	str	r2, [r7, #4]
 8003d74:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	4a09      	ldr	r2, [pc, #36]	@ (8003da4 <TIM_ETR_SetConfig+0x3c>)
 8003d80:	4013      	ands	r3, r2
 8003d82:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	021a      	lsls	r2, r3, #8
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	431a      	orrs	r2, r3
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	697a      	ldr	r2, [r7, #20]
 8003d92:	4313      	orrs	r3, r2
 8003d94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	697a      	ldr	r2, [r7, #20]
 8003d9a:	609a      	str	r2, [r3, #8]
}
 8003d9c:	46c0      	nop			@ (mov r8, r8)
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	b006      	add	sp, #24
 8003da2:	bd80      	pop	{r7, pc}
 8003da4:	ffff00ff 	.word	0xffff00ff

08003da8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b086      	sub	sp, #24
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	60f8      	str	r0, [r7, #12]
 8003db0:	60b9      	str	r1, [r7, #8]
 8003db2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	221f      	movs	r2, #31
 8003db8:	4013      	ands	r3, r2
 8003dba:	2201      	movs	r2, #1
 8003dbc:	409a      	lsls	r2, r3
 8003dbe:	0013      	movs	r3, r2
 8003dc0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	6a1b      	ldr	r3, [r3, #32]
 8003dc6:	697a      	ldr	r2, [r7, #20]
 8003dc8:	43d2      	mvns	r2, r2
 8003dca:	401a      	ands	r2, r3
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	6a1a      	ldr	r2, [r3, #32]
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	211f      	movs	r1, #31
 8003dd8:	400b      	ands	r3, r1
 8003dda:	6879      	ldr	r1, [r7, #4]
 8003ddc:	4099      	lsls	r1, r3
 8003dde:	000b      	movs	r3, r1
 8003de0:	431a      	orrs	r2, r3
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	621a      	str	r2, [r3, #32]
}
 8003de6:	46c0      	nop			@ (mov r8, r8)
 8003de8:	46bd      	mov	sp, r7
 8003dea:	b006      	add	sp, #24
 8003dec:	bd80      	pop	{r7, pc}
	...

08003df0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b084      	sub	sp, #16
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	223c      	movs	r2, #60	@ 0x3c
 8003dfe:	5c9b      	ldrb	r3, [r3, r2]
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d101      	bne.n	8003e08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e04:	2302      	movs	r3, #2
 8003e06:	e04a      	b.n	8003e9e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	223c      	movs	r2, #60	@ 0x3c
 8003e0c:	2101      	movs	r1, #1
 8003e0e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	223d      	movs	r2, #61	@ 0x3d
 8003e14:	2102      	movs	r1, #2
 8003e16:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a1e      	ldr	r2, [pc, #120]	@ (8003ea8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d108      	bne.n	8003e44 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	4a1d      	ldr	r2, [pc, #116]	@ (8003eac <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8003e36:	4013      	ands	r3, r2
 8003e38:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	68fa      	ldr	r2, [r7, #12]
 8003e40:	4313      	orrs	r3, r2
 8003e42:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2270      	movs	r2, #112	@ 0x70
 8003e48:	4393      	bics	r3, r2
 8003e4a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	68fa      	ldr	r2, [r7, #12]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	68fa      	ldr	r2, [r7, #12]
 8003e5c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a11      	ldr	r2, [pc, #68]	@ (8003ea8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d004      	beq.n	8003e72 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a10      	ldr	r2, [pc, #64]	@ (8003eb0 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d10c      	bne.n	8003e8c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	2280      	movs	r2, #128	@ 0x80
 8003e76:	4393      	bics	r3, r2
 8003e78:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	68ba      	ldr	r2, [r7, #8]
 8003e80:	4313      	orrs	r3, r2
 8003e82:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	68ba      	ldr	r2, [r7, #8]
 8003e8a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	223d      	movs	r2, #61	@ 0x3d
 8003e90:	2101      	movs	r1, #1
 8003e92:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	223c      	movs	r2, #60	@ 0x3c
 8003e98:	2100      	movs	r1, #0
 8003e9a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e9c:	2300      	movs	r3, #0
}
 8003e9e:	0018      	movs	r0, r3
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	b004      	add	sp, #16
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	46c0      	nop			@ (mov r8, r8)
 8003ea8:	40012c00 	.word	0x40012c00
 8003eac:	ff0fffff 	.word	0xff0fffff
 8003eb0:	40000400 	.word	0x40000400

08003eb4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b084      	sub	sp, #16
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
 8003ebc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	223c      	movs	r2, #60	@ 0x3c
 8003ec6:	5c9b      	ldrb	r3, [r3, r2]
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	d101      	bne.n	8003ed0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003ecc:	2302      	movs	r3, #2
 8003ece:	e06f      	b.n	8003fb0 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	223c      	movs	r2, #60	@ 0x3c
 8003ed4:	2101      	movs	r1, #1
 8003ed6:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	22ff      	movs	r2, #255	@ 0xff
 8003edc:	4393      	bics	r3, r2
 8003ede:	001a      	movs	r2, r3
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	68db      	ldr	r3, [r3, #12]
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	4a33      	ldr	r2, [pc, #204]	@ (8003fb8 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8003eec:	401a      	ands	r2, r3
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	4a30      	ldr	r2, [pc, #192]	@ (8003fbc <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8003efa:	401a      	ands	r2, r3
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	4a2e      	ldr	r2, [pc, #184]	@ (8003fc0 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 8003f08:	401a      	ands	r2, r3
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	4a2b      	ldr	r2, [pc, #172]	@ (8003fc4 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8003f16:	401a      	ands	r2, r3
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	691b      	ldr	r3, [r3, #16]
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	4a29      	ldr	r2, [pc, #164]	@ (8003fc8 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8003f24:	401a      	ands	r2, r3
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	695b      	ldr	r3, [r3, #20]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	4a26      	ldr	r2, [pc, #152]	@ (8003fcc <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8003f32:	401a      	ands	r2, r3
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	4a24      	ldr	r2, [pc, #144]	@ (8003fd0 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8003f40:	401a      	ands	r2, r3
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	699b      	ldr	r3, [r3, #24]
 8003f46:	041b      	lsls	r3, r3, #16
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	4a21      	ldr	r2, [pc, #132]	@ (8003fd4 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8003f50:	401a      	ands	r2, r3
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	69db      	ldr	r3, [r3, #28]
 8003f56:	4313      	orrs	r3, r2
 8003f58:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a1e      	ldr	r2, [pc, #120]	@ (8003fd8 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d11c      	bne.n	8003f9e <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	4a1d      	ldr	r2, [pc, #116]	@ (8003fdc <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8003f68:	401a      	ands	r2, r3
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f6e:	051b      	lsls	r3, r3, #20
 8003f70:	4313      	orrs	r3, r2
 8003f72:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	4a1a      	ldr	r2, [pc, #104]	@ (8003fe0 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8003f78:	401a      	ands	r2, r3
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	6a1b      	ldr	r3, [r3, #32]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	4a17      	ldr	r2, [pc, #92]	@ (8003fe4 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8003f86:	401a      	ands	r2, r3
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	4a15      	ldr	r2, [pc, #84]	@ (8003fe8 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8003f94:	401a      	ands	r2, r3
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	68fa      	ldr	r2, [r7, #12]
 8003fa4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	223c      	movs	r2, #60	@ 0x3c
 8003faa:	2100      	movs	r1, #0
 8003fac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003fae:	2300      	movs	r3, #0
}
 8003fb0:	0018      	movs	r0, r3
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	b004      	add	sp, #16
 8003fb6:	bd80      	pop	{r7, pc}
 8003fb8:	fffffcff 	.word	0xfffffcff
 8003fbc:	fffffbff 	.word	0xfffffbff
 8003fc0:	fffff7ff 	.word	0xfffff7ff
 8003fc4:	ffffefff 	.word	0xffffefff
 8003fc8:	ffffdfff 	.word	0xffffdfff
 8003fcc:	ffffbfff 	.word	0xffffbfff
 8003fd0:	fff0ffff 	.word	0xfff0ffff
 8003fd4:	efffffff 	.word	0xefffffff
 8003fd8:	40012c00 	.word	0x40012c00
 8003fdc:	ff0fffff 	.word	0xff0fffff
 8003fe0:	feffffff 	.word	0xfeffffff
 8003fe4:	fdffffff 	.word	0xfdffffff
 8003fe8:	dfffffff 	.word	0xdfffffff

08003fec <memset>:
 8003fec:	0003      	movs	r3, r0
 8003fee:	1882      	adds	r2, r0, r2
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d100      	bne.n	8003ff6 <memset+0xa>
 8003ff4:	4770      	bx	lr
 8003ff6:	7019      	strb	r1, [r3, #0]
 8003ff8:	3301      	adds	r3, #1
 8003ffa:	e7f9      	b.n	8003ff0 <memset+0x4>

08003ffc <__libc_init_array>:
 8003ffc:	b570      	push	{r4, r5, r6, lr}
 8003ffe:	2600      	movs	r6, #0
 8004000:	4c0c      	ldr	r4, [pc, #48]	@ (8004034 <__libc_init_array+0x38>)
 8004002:	4d0d      	ldr	r5, [pc, #52]	@ (8004038 <__libc_init_array+0x3c>)
 8004004:	1b64      	subs	r4, r4, r5
 8004006:	10a4      	asrs	r4, r4, #2
 8004008:	42a6      	cmp	r6, r4
 800400a:	d109      	bne.n	8004020 <__libc_init_array+0x24>
 800400c:	2600      	movs	r6, #0
 800400e:	f000 f819 	bl	8004044 <_init>
 8004012:	4c0a      	ldr	r4, [pc, #40]	@ (800403c <__libc_init_array+0x40>)
 8004014:	4d0a      	ldr	r5, [pc, #40]	@ (8004040 <__libc_init_array+0x44>)
 8004016:	1b64      	subs	r4, r4, r5
 8004018:	10a4      	asrs	r4, r4, #2
 800401a:	42a6      	cmp	r6, r4
 800401c:	d105      	bne.n	800402a <__libc_init_array+0x2e>
 800401e:	bd70      	pop	{r4, r5, r6, pc}
 8004020:	00b3      	lsls	r3, r6, #2
 8004022:	58eb      	ldr	r3, [r5, r3]
 8004024:	4798      	blx	r3
 8004026:	3601      	adds	r6, #1
 8004028:	e7ee      	b.n	8004008 <__libc_init_array+0xc>
 800402a:	00b3      	lsls	r3, r6, #2
 800402c:	58eb      	ldr	r3, [r5, r3]
 800402e:	4798      	blx	r3
 8004030:	3601      	adds	r6, #1
 8004032:	e7f2      	b.n	800401a <__libc_init_array+0x1e>
 8004034:	08004180 	.word	0x08004180
 8004038:	08004180 	.word	0x08004180
 800403c:	08004184 	.word	0x08004184
 8004040:	08004180 	.word	0x08004180

08004044 <_init>:
 8004044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004046:	46c0      	nop			@ (mov r8, r8)
 8004048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800404a:	bc08      	pop	{r3}
 800404c:	469e      	mov	lr, r3
 800404e:	4770      	bx	lr

08004050 <_fini>:
 8004050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004052:	46c0      	nop			@ (mov r8, r8)
 8004054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004056:	bc08      	pop	{r3}
 8004058:	469e      	mov	lr, r3
 800405a:	4770      	bx	lr
