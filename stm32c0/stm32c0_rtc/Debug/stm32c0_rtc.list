
stm32c0_rtc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047a8  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000420  08004868  08004868  00005868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c88  08004c88  00006060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08004c88  08004c88  00006060  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08004c88  08004c88  00006060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c88  08004c88  00005c88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004c8c  08004c8c  00005c8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08004c90  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000694  20000060  08004cf0  00006060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006f4  08004cf0  000066f4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00006060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cf5a  00000000  00000000  00006088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000403c  00000000  00000000  00022fe2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0000cd6a  00000000  00000000  0002701e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001208  00000000  00000000  00033d88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f47  00000000  00000000  00034f90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000197c7  00000000  00000000  00035ed7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00021b80  00000000  00000000  0004f69e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00092bae  00000000  00000000  0007121e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00103dcc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003498  00000000  00000000  00103e10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000051  00000000  00000000  001072a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000060 	.word	0x20000060
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004850 	.word	0x08004850

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000064 	.word	0x20000064
 8000104:	08004850 	.word	0x08004850

08000108 <strcmp>:
 8000108:	7802      	ldrb	r2, [r0, #0]
 800010a:	780b      	ldrb	r3, [r1, #0]
 800010c:	2a00      	cmp	r2, #0
 800010e:	d003      	beq.n	8000118 <strcmp+0x10>
 8000110:	3001      	adds	r0, #1
 8000112:	3101      	adds	r1, #1
 8000114:	429a      	cmp	r2, r3
 8000116:	d0f7      	beq.n	8000108 <strcmp>
 8000118:	1ad0      	subs	r0, r2, r3
 800011a:	4770      	bx	lr

0800011c <__gnu_thumb1_case_shi>:
 800011c:	b403      	push	{r0, r1}
 800011e:	4671      	mov	r1, lr
 8000120:	0849      	lsrs	r1, r1, #1
 8000122:	0040      	lsls	r0, r0, #1
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	5e09      	ldrsh	r1, [r1, r0]
 8000128:	0049      	lsls	r1, r1, #1
 800012a:	448e      	add	lr, r1
 800012c:	bc03      	pop	{r0, r1}
 800012e:	4770      	bx	lr

08000130 <__udivsi3>:
 8000130:	2200      	movs	r2, #0
 8000132:	0843      	lsrs	r3, r0, #1
 8000134:	428b      	cmp	r3, r1
 8000136:	d374      	bcc.n	8000222 <__udivsi3+0xf2>
 8000138:	0903      	lsrs	r3, r0, #4
 800013a:	428b      	cmp	r3, r1
 800013c:	d35f      	bcc.n	80001fe <__udivsi3+0xce>
 800013e:	0a03      	lsrs	r3, r0, #8
 8000140:	428b      	cmp	r3, r1
 8000142:	d344      	bcc.n	80001ce <__udivsi3+0x9e>
 8000144:	0b03      	lsrs	r3, r0, #12
 8000146:	428b      	cmp	r3, r1
 8000148:	d328      	bcc.n	800019c <__udivsi3+0x6c>
 800014a:	0c03      	lsrs	r3, r0, #16
 800014c:	428b      	cmp	r3, r1
 800014e:	d30d      	bcc.n	800016c <__udivsi3+0x3c>
 8000150:	22ff      	movs	r2, #255	@ 0xff
 8000152:	0209      	lsls	r1, r1, #8
 8000154:	ba12      	rev	r2, r2
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d302      	bcc.n	8000162 <__udivsi3+0x32>
 800015c:	1212      	asrs	r2, r2, #8
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	d065      	beq.n	800022e <__udivsi3+0xfe>
 8000162:	0b03      	lsrs	r3, r0, #12
 8000164:	428b      	cmp	r3, r1
 8000166:	d319      	bcc.n	800019c <__udivsi3+0x6c>
 8000168:	e000      	b.n	800016c <__udivsi3+0x3c>
 800016a:	0a09      	lsrs	r1, r1, #8
 800016c:	0bc3      	lsrs	r3, r0, #15
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x46>
 8000172:	03cb      	lsls	r3, r1, #15
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b83      	lsrs	r3, r0, #14
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x52>
 800017e:	038b      	lsls	r3, r1, #14
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b43      	lsrs	r3, r0, #13
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x5e>
 800018a:	034b      	lsls	r3, r1, #13
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b03      	lsrs	r3, r0, #12
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x6a>
 8000196:	030b      	lsls	r3, r1, #12
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0ac3      	lsrs	r3, r0, #11
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x76>
 80001a2:	02cb      	lsls	r3, r1, #11
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a83      	lsrs	r3, r0, #10
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x82>
 80001ae:	028b      	lsls	r3, r1, #10
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a43      	lsrs	r3, r0, #9
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x8e>
 80001ba:	024b      	lsls	r3, r1, #9
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a03      	lsrs	r3, r0, #8
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x9a>
 80001c6:	020b      	lsls	r3, r1, #8
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	d2cd      	bcs.n	800016a <__udivsi3+0x3a>
 80001ce:	09c3      	lsrs	r3, r0, #7
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xa8>
 80001d4:	01cb      	lsls	r3, r1, #7
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0983      	lsrs	r3, r0, #6
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xb4>
 80001e0:	018b      	lsls	r3, r1, #6
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0943      	lsrs	r3, r0, #5
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xc0>
 80001ec:	014b      	lsls	r3, r1, #5
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0903      	lsrs	r3, r0, #4
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xcc>
 80001f8:	010b      	lsls	r3, r1, #4
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	08c3      	lsrs	r3, r0, #3
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xd8>
 8000204:	00cb      	lsls	r3, r1, #3
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0883      	lsrs	r3, r0, #2
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xe4>
 8000210:	008b      	lsls	r3, r1, #2
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0843      	lsrs	r3, r0, #1
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xf0>
 800021c:	004b      	lsls	r3, r1, #1
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	1a41      	subs	r1, r0, r1
 8000224:	d200      	bcs.n	8000228 <__udivsi3+0xf8>
 8000226:	4601      	mov	r1, r0
 8000228:	4152      	adcs	r2, r2
 800022a:	4610      	mov	r0, r2
 800022c:	4770      	bx	lr
 800022e:	e7ff      	b.n	8000230 <__udivsi3+0x100>
 8000230:	b501      	push	{r0, lr}
 8000232:	2000      	movs	r0, #0
 8000234:	f000 f8f0 	bl	8000418 <__aeabi_idiv0>
 8000238:	bd02      	pop	{r1, pc}
 800023a:	46c0      	nop			@ (mov r8, r8)

0800023c <__aeabi_uidivmod>:
 800023c:	2900      	cmp	r1, #0
 800023e:	d0f7      	beq.n	8000230 <__udivsi3+0x100>
 8000240:	e776      	b.n	8000130 <__udivsi3>
 8000242:	4770      	bx	lr

08000244 <__divsi3>:
 8000244:	4603      	mov	r3, r0
 8000246:	430b      	orrs	r3, r1
 8000248:	d47f      	bmi.n	800034a <__divsi3+0x106>
 800024a:	2200      	movs	r2, #0
 800024c:	0843      	lsrs	r3, r0, #1
 800024e:	428b      	cmp	r3, r1
 8000250:	d374      	bcc.n	800033c <__divsi3+0xf8>
 8000252:	0903      	lsrs	r3, r0, #4
 8000254:	428b      	cmp	r3, r1
 8000256:	d35f      	bcc.n	8000318 <__divsi3+0xd4>
 8000258:	0a03      	lsrs	r3, r0, #8
 800025a:	428b      	cmp	r3, r1
 800025c:	d344      	bcc.n	80002e8 <__divsi3+0xa4>
 800025e:	0b03      	lsrs	r3, r0, #12
 8000260:	428b      	cmp	r3, r1
 8000262:	d328      	bcc.n	80002b6 <__divsi3+0x72>
 8000264:	0c03      	lsrs	r3, r0, #16
 8000266:	428b      	cmp	r3, r1
 8000268:	d30d      	bcc.n	8000286 <__divsi3+0x42>
 800026a:	22ff      	movs	r2, #255	@ 0xff
 800026c:	0209      	lsls	r1, r1, #8
 800026e:	ba12      	rev	r2, r2
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d302      	bcc.n	800027c <__divsi3+0x38>
 8000276:	1212      	asrs	r2, r2, #8
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	d065      	beq.n	8000348 <__divsi3+0x104>
 800027c:	0b03      	lsrs	r3, r0, #12
 800027e:	428b      	cmp	r3, r1
 8000280:	d319      	bcc.n	80002b6 <__divsi3+0x72>
 8000282:	e000      	b.n	8000286 <__divsi3+0x42>
 8000284:	0a09      	lsrs	r1, r1, #8
 8000286:	0bc3      	lsrs	r3, r0, #15
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x4c>
 800028c:	03cb      	lsls	r3, r1, #15
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b83      	lsrs	r3, r0, #14
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x58>
 8000298:	038b      	lsls	r3, r1, #14
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b43      	lsrs	r3, r0, #13
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x64>
 80002a4:	034b      	lsls	r3, r1, #13
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b03      	lsrs	r3, r0, #12
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x70>
 80002b0:	030b      	lsls	r3, r1, #12
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0ac3      	lsrs	r3, r0, #11
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x7c>
 80002bc:	02cb      	lsls	r3, r1, #11
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a83      	lsrs	r3, r0, #10
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x88>
 80002c8:	028b      	lsls	r3, r1, #10
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a43      	lsrs	r3, r0, #9
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x94>
 80002d4:	024b      	lsls	r3, r1, #9
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a03      	lsrs	r3, r0, #8
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0xa0>
 80002e0:	020b      	lsls	r3, r1, #8
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	d2cd      	bcs.n	8000284 <__divsi3+0x40>
 80002e8:	09c3      	lsrs	r3, r0, #7
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xae>
 80002ee:	01cb      	lsls	r3, r1, #7
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0983      	lsrs	r3, r0, #6
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xba>
 80002fa:	018b      	lsls	r3, r1, #6
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0943      	lsrs	r3, r0, #5
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xc6>
 8000306:	014b      	lsls	r3, r1, #5
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0903      	lsrs	r3, r0, #4
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xd2>
 8000312:	010b      	lsls	r3, r1, #4
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	08c3      	lsrs	r3, r0, #3
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xde>
 800031e:	00cb      	lsls	r3, r1, #3
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	0883      	lsrs	r3, r0, #2
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xea>
 800032a:	008b      	lsls	r3, r1, #2
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0843      	lsrs	r3, r0, #1
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xf6>
 8000336:	004b      	lsls	r3, r1, #1
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	1a41      	subs	r1, r0, r1
 800033e:	d200      	bcs.n	8000342 <__divsi3+0xfe>
 8000340:	4601      	mov	r1, r0
 8000342:	4152      	adcs	r2, r2
 8000344:	4610      	mov	r0, r2
 8000346:	4770      	bx	lr
 8000348:	e05d      	b.n	8000406 <__divsi3+0x1c2>
 800034a:	0fca      	lsrs	r2, r1, #31
 800034c:	d000      	beq.n	8000350 <__divsi3+0x10c>
 800034e:	4249      	negs	r1, r1
 8000350:	1003      	asrs	r3, r0, #32
 8000352:	d300      	bcc.n	8000356 <__divsi3+0x112>
 8000354:	4240      	negs	r0, r0
 8000356:	4053      	eors	r3, r2
 8000358:	2200      	movs	r2, #0
 800035a:	469c      	mov	ip, r3
 800035c:	0903      	lsrs	r3, r0, #4
 800035e:	428b      	cmp	r3, r1
 8000360:	d32d      	bcc.n	80003be <__divsi3+0x17a>
 8000362:	0a03      	lsrs	r3, r0, #8
 8000364:	428b      	cmp	r3, r1
 8000366:	d312      	bcc.n	800038e <__divsi3+0x14a>
 8000368:	22fc      	movs	r2, #252	@ 0xfc
 800036a:	0189      	lsls	r1, r1, #6
 800036c:	ba12      	rev	r2, r2
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d30c      	bcc.n	800038e <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d308      	bcc.n	800038e <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	1192      	asrs	r2, r2, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d304      	bcc.n	800038e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	d03a      	beq.n	80003fe <__divsi3+0x1ba>
 8000388:	1192      	asrs	r2, r2, #6
 800038a:	e000      	b.n	800038e <__divsi3+0x14a>
 800038c:	0989      	lsrs	r1, r1, #6
 800038e:	09c3      	lsrs	r3, r0, #7
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x154>
 8000394:	01cb      	lsls	r3, r1, #7
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0983      	lsrs	r3, r0, #6
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x160>
 80003a0:	018b      	lsls	r3, r1, #6
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0943      	lsrs	r3, r0, #5
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x16c>
 80003ac:	014b      	lsls	r3, r1, #5
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0903      	lsrs	r3, r0, #4
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x178>
 80003b8:	010b      	lsls	r3, r1, #4
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	08c3      	lsrs	r3, r0, #3
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x184>
 80003c4:	00cb      	lsls	r3, r1, #3
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	0883      	lsrs	r3, r0, #2
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x190>
 80003d0:	008b      	lsls	r3, r1, #2
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	d2d9      	bcs.n	800038c <__divsi3+0x148>
 80003d8:	0843      	lsrs	r3, r0, #1
 80003da:	428b      	cmp	r3, r1
 80003dc:	d301      	bcc.n	80003e2 <__divsi3+0x19e>
 80003de:	004b      	lsls	r3, r1, #1
 80003e0:	1ac0      	subs	r0, r0, r3
 80003e2:	4152      	adcs	r2, r2
 80003e4:	1a41      	subs	r1, r0, r1
 80003e6:	d200      	bcs.n	80003ea <__divsi3+0x1a6>
 80003e8:	4601      	mov	r1, r0
 80003ea:	4663      	mov	r3, ip
 80003ec:	4152      	adcs	r2, r2
 80003ee:	105b      	asrs	r3, r3, #1
 80003f0:	4610      	mov	r0, r2
 80003f2:	d301      	bcc.n	80003f8 <__divsi3+0x1b4>
 80003f4:	4240      	negs	r0, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d500      	bpl.n	80003fc <__divsi3+0x1b8>
 80003fa:	4249      	negs	r1, r1
 80003fc:	4770      	bx	lr
 80003fe:	4663      	mov	r3, ip
 8000400:	105b      	asrs	r3, r3, #1
 8000402:	d300      	bcc.n	8000406 <__divsi3+0x1c2>
 8000404:	4240      	negs	r0, r0
 8000406:	b501      	push	{r0, lr}
 8000408:	2000      	movs	r0, #0
 800040a:	f000 f805 	bl	8000418 <__aeabi_idiv0>
 800040e:	bd02      	pop	{r1, pc}

08000410 <__aeabi_idivmod>:
 8000410:	2900      	cmp	r1, #0
 8000412:	d0f8      	beq.n	8000406 <__divsi3+0x1c2>
 8000414:	e716      	b.n	8000244 <__divsi3>
 8000416:	4770      	bx	lr

08000418 <__aeabi_idiv0>:
 8000418:	4770      	bx	lr
 800041a:	46c0      	nop			@ (mov r8, r8)

0800041c <ledISR>:


static void infoCli(uint8_t argc, const char **argv);

void ledISR(void *arg)
{
 800041c:	b510      	push	{r4, lr}
  ledToggle(_DEF_CH1);
 800041e:	2000      	movs	r0, #0
 8000420:	f000 fa24 	bl	800086c <ledToggle>
}
 8000424:	bd10      	pop	{r4, pc}
	...

08000428 <infoCli>:
}



void infoCli(uint8_t argc, const char **argv)
{
 8000428:	b5f0      	push	{r4, r5, r6, r7, lr}
 800042a:	46c6      	mov	lr, r8
 800042c:	b500      	push	{lr}
 800042e:	0004      	movs	r4, r0
 8000430:	000d      	movs	r5, r1
  bool ret = false;

  if(argc == 1 && cliIsStr(argv[0],"test"))
 8000432:	2801      	cmp	r0, #1
 8000434:	d009      	beq.n	800044a <infoCli+0x22>
  bool ret = false;
 8000436:	2600      	movs	r6, #0
  {
    cliPrintf("infoCli run test \n");
    ret = true;
  }

  if(argc == 2 && cliIsStr(argv[0],"print"))
 8000438:	2c02      	cmp	r4, #2
 800043a:	d010      	beq.n	800045e <infoCli+0x36>
      cliPrintf("print %d/%d\n",i+1,count);
    }
    ret = true;
  }

  if(argc ==1 && cliIsStr(argv[0],"button"))
 800043c:	2c01      	cmp	r4, #1
 800043e:	d026      	beq.n	800048e <infoCli+0x66>
      delay(100);
    }
    ret = true;
  }

  if(ret == false)
 8000440:	2e00      	cmp	r6, #0
 8000442:	d044      	beq.n	80004ce <infoCli+0xa6>
  {
    cliPrintf("info test\n");
    cliPrintf("info print 0~10\n");
    cliPrintf("info button\n");
  }
}
 8000444:	bc80      	pop	{r7}
 8000446:	46b8      	mov	r8, r7
 8000448:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(argc == 1 && cliIsStr(argv[0],"test"))
 800044a:	4926      	ldr	r1, [pc, #152]	@ (80004e4 <infoCli+0xbc>)
 800044c:	6828      	ldr	r0, [r5, #0]
 800044e:	f000 f94b 	bl	80006e8 <cliIsStr>
 8000452:	1e06      	subs	r6, r0, #0
 8000454:	d0f0      	beq.n	8000438 <infoCli+0x10>
    cliPrintf("infoCli run test \n");
 8000456:	4824      	ldr	r0, [pc, #144]	@ (80004e8 <infoCli+0xc0>)
 8000458:	f000 f918 	bl	800068c <cliPrintf>
    ret = true;
 800045c:	e7ec      	b.n	8000438 <infoCli+0x10>
  if(argc == 2 && cliIsStr(argv[0],"print"))
 800045e:	4923      	ldr	r1, [pc, #140]	@ (80004ec <infoCli+0xc4>)
 8000460:	6828      	ldr	r0, [r5, #0]
 8000462:	f000 f941 	bl	80006e8 <cliIsStr>
 8000466:	4680      	mov	r8, r0
 8000468:	2800      	cmp	r0, #0
 800046a:	d0e7      	beq.n	800043c <infoCli+0x14>
    count = (uint8_t)cliGetData(argv[1]);
 800046c:	6868      	ldr	r0, [r5, #4]
 800046e:	f000 f944 	bl	80006fa <cliGetData>
 8000472:	0007      	movs	r7, r0
    for(int i=0;i<count;i++)
 8000474:	2600      	movs	r6, #0
 8000476:	e004      	b.n	8000482 <infoCli+0x5a>
      cliPrintf("print %d/%d\n",i+1,count);
 8000478:	3601      	adds	r6, #1
 800047a:	481d      	ldr	r0, [pc, #116]	@ (80004f0 <infoCli+0xc8>)
 800047c:	0031      	movs	r1, r6
 800047e:	f000 f905 	bl	800068c <cliPrintf>
    for(int i=0;i<count;i++)
 8000482:	22ff      	movs	r2, #255	@ 0xff
 8000484:	403a      	ands	r2, r7
 8000486:	4296      	cmp	r6, r2
 8000488:	dbf6      	blt.n	8000478 <infoCli+0x50>
    ret = true;
 800048a:	4646      	mov	r6, r8
 800048c:	e7d6      	b.n	800043c <infoCli+0x14>
  if(argc ==1 && cliIsStr(argv[0],"button"))
 800048e:	4919      	ldr	r1, [pc, #100]	@ (80004f4 <infoCli+0xcc>)
 8000490:	6828      	ldr	r0, [r5, #0]
 8000492:	f000 f929 	bl	80006e8 <cliIsStr>
 8000496:	1e05      	subs	r5, r0, #0
 8000498:	d111      	bne.n	80004be <infoCli+0x96>
 800049a:	e7d1      	b.n	8000440 <infoCli+0x18>
        cliPrintf("%d", buttonGetPressed(i));
 800049c:	b2e0      	uxtb	r0, r4
 800049e:	f000 f89f 	bl	80005e0 <buttonGetPressed>
 80004a2:	0001      	movs	r1, r0
 80004a4:	4b14      	ldr	r3, [pc, #80]	@ (80004f8 <infoCli+0xd0>)
 80004a6:	0018      	movs	r0, r3
 80004a8:	f000 f8f0 	bl	800068c <cliPrintf>
      for(int i=0;i<BUTTON_MAX_CH;i++)
 80004ac:	3401      	adds	r4, #1
 80004ae:	2c04      	cmp	r4, #4
 80004b0:	ddf4      	ble.n	800049c <infoCli+0x74>
      cliPrintf("\n");
 80004b2:	4812      	ldr	r0, [pc, #72]	@ (80004fc <infoCli+0xd4>)
 80004b4:	f000 f8ea 	bl	800068c <cliPrintf>
      delay(100);
 80004b8:	2064      	movs	r0, #100	@ 0x64
 80004ba:	f000 fc72 	bl	8000da2 <delay>
    while(cliKeepLoop())
 80004be:	f000 f922 	bl	8000706 <cliKeepLoop>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	d001      	beq.n	80004ca <infoCli+0xa2>
      for(int i=0;i<BUTTON_MAX_CH;i++)
 80004c6:	2400      	movs	r4, #0
 80004c8:	e7f1      	b.n	80004ae <infoCli+0x86>
    ret = true;
 80004ca:	002e      	movs	r6, r5
 80004cc:	e7b8      	b.n	8000440 <infoCli+0x18>
    cliPrintf("info test\n");
 80004ce:	480c      	ldr	r0, [pc, #48]	@ (8000500 <infoCli+0xd8>)
 80004d0:	f000 f8dc 	bl	800068c <cliPrintf>
    cliPrintf("info print 0~10\n");
 80004d4:	480b      	ldr	r0, [pc, #44]	@ (8000504 <infoCli+0xdc>)
 80004d6:	f000 f8d9 	bl	800068c <cliPrintf>
    cliPrintf("info button\n");
 80004da:	480b      	ldr	r0, [pc, #44]	@ (8000508 <infoCli+0xe0>)
 80004dc:	f000 f8d6 	bl	800068c <cliPrintf>
}
 80004e0:	e7b0      	b.n	8000444 <infoCli+0x1c>
 80004e2:	46c0      	nop			@ (mov r8, r8)
 80004e4:	08004868 	.word	0x08004868
 80004e8:	08004870 	.word	0x08004870
 80004ec:	08004884 	.word	0x08004884
 80004f0:	0800488c 	.word	0x0800488c
 80004f4:	0800489c 	.word	0x0800489c
 80004f8:	080048a4 	.word	0x080048a4
 80004fc:	080048a8 	.word	0x080048a8
 8000500:	080048ac 	.word	0x080048ac
 8000504:	080048b8 	.word	0x080048b8
 8000508:	080048cc 	.word	0x080048cc

0800050c <apInit>:
{
 800050c:	b510      	push	{r4, lr}
 800050e:	b084      	sub	sp, #16
  cliInit();
 8000510:	f000 f8a2 	bl	8000658 <cliInit>
  swtimerInit();
 8000514:	f000 fb24 	bl	8000b60 <swtimerInit>
  rtcInit();
 8000518:	f000 f9de 	bl	80008d8 <rtcInit>
  ledInit();
 800051c:	f000 f98e 	bl	800083c <ledInit>
  pwmInit();
 8000520:	f000 f9bc 	bl	800089c <pwmInit>
  adcInit();
 8000524:	f000 f83a 	bl	800059c <adcInit>
  buttonInit();
 8000528:	f000 f858 	bl	80005dc <buttonInit>
  uartInit();
 800052c:	f000 fbb0 	bl	8000c90 <uartInit>
  cliAdd("info", infoCli);
 8000530:	490d      	ldr	r1, [pc, #52]	@ (8000568 <apInit+0x5c>)
 8000532:	480e      	ldr	r0, [pc, #56]	@ (800056c <apInit+0x60>)
 8000534:	f000 f870 	bl	8000618 <cliAdd>
  if(swtimerGetCh(&timer_ch)== true)
 8000538:	200f      	movs	r0, #15
 800053a:	4468      	add	r0, sp
 800053c:	f000 fb2a 	bl	8000b94 <swtimerGetCh>
 8000540:	2800      	cmp	r0, #0
 8000542:	d101      	bne.n	8000548 <apInit+0x3c>
}
 8000544:	b004      	add	sp, #16
 8000546:	bd10      	pop	{r4, pc}
    swtimerSet(timer_ch,
 8000548:	4909      	ldr	r1, [pc, #36]	@ (8000570 <apInit+0x64>)
 800054a:	240f      	movs	r4, #15
 800054c:	446c      	add	r4, sp
 800054e:	7820      	ldrb	r0, [r4, #0]
 8000550:	23fa      	movs	r3, #250	@ 0xfa
 8000552:	005b      	lsls	r3, r3, #1
 8000554:	9300      	str	r3, [sp, #0]
 8000556:	2300      	movs	r3, #0
 8000558:	2200      	movs	r2, #0
 800055a:	f000 fb29 	bl	8000bb0 <swtimerSet>
    swtimerStart(timer_ch);
 800055e:	7820      	ldrb	r0, [r4, #0]
 8000560:	f000 fb3e 	bl	8000be0 <swtimerStart>
}
 8000564:	e7ee      	b.n	8000544 <apInit+0x38>
 8000566:	46c0      	nop			@ (mov r8, r8)
 8000568:	08000429 	.word	0x08000429
 800056c:	080048dc 	.word	0x080048dc
 8000570:	0800041d 	.word	0x0800041d

08000574 <apMain>:
{
 8000574:	b510      	push	{r4, lr}
  ledSetDuty(_DEF_CH1, 100);
 8000576:	2164      	movs	r1, #100	@ 0x64
 8000578:	2000      	movs	r0, #0
 800057a:	f000 f987 	bl	800088c <ledSetDuty>
  uint32_t pre_time = 0;
 800057e:	2400      	movs	r4, #0
 8000580:	e004      	b.n	800058c <apMain+0x18>
      pre_time = millis();
 8000582:	f000 fc12 	bl	8000daa <millis>
 8000586:	0004      	movs	r4, r0
    cliMain();
 8000588:	f000 f8c8 	bl	800071c <cliMain>
    if(millis()-pre_time >= 500)
 800058c:	f000 fc0d 	bl	8000daa <millis>
 8000590:	1b00      	subs	r0, r0, r4
 8000592:	22fa      	movs	r2, #250	@ 0xfa
 8000594:	0052      	lsls	r2, r2, #1
 8000596:	4290      	cmp	r0, r2
 8000598:	d2f3      	bcs.n	8000582 <apMain+0xe>
 800059a:	e7f5      	b.n	8000588 <apMain+0x14>

0800059c <adcInit>:

uint16_t adc_data[3];
//uint32_t adc_time;

bool adcInit(void)
{
 800059c:	b510      	push	{r4, lr}
  HAL_ADCEx_Calibration_Start(&hadc1);
 800059e:	4c05      	ldr	r4, [pc, #20]	@ (80005b4 <adcInit+0x18>)
 80005a0:	0020      	movs	r0, r4
 80005a2:	f001 fc2b 	bl	8001dfc <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1,(uint32_t *)&adc_data,3);
 80005a6:	4904      	ldr	r1, [pc, #16]	@ (80005b8 <adcInit+0x1c>)
 80005a8:	2203      	movs	r2, #3
 80005aa:	0020      	movs	r0, r4
 80005ac:	f001 fb82 	bl	8001cb4 <HAL_ADC_Start_DMA>

  return true;
}
 80005b0:	2001      	movs	r0, #1
 80005b2:	bd10      	pop	{r4, pc}
 80005b4:	20000540 	.word	0x20000540
 80005b8:	2000007c 	.word	0x2000007c

080005bc <adcRead>:
uint16_t adcRead(uint8_t ch)
{
  uint16_t ret = 0;


  ret = adc_data[ch];
 80005bc:	4b01      	ldr	r3, [pc, #4]	@ (80005c4 <adcRead+0x8>)
 80005be:	0040      	lsls	r0, r0, #1
 80005c0:	5ac0      	ldrh	r0, [r0, r3]


  return ret;

}
 80005c2:	4770      	bx	lr
 80005c4:	2000007c 	.word	0x2000007c

080005c8 <adcReadVoltage>:
uint32_t adcReadVoltage(uint8_t ch)
{
 80005c8:	b510      	push	{r4, lr}

  uint32_t ret;
  uint32_t adc_data;
  adc_data = adcRead(ch);
 80005ca:	f7ff fff7 	bl	80005bc <adcRead>


  ret = (330 *adc_data)/ 4096;
 80005ce:	0083      	lsls	r3, r0, #2
 80005d0:	1818      	adds	r0, r3, r0
 80005d2:	0143      	lsls	r3, r0, #5
 80005d4:	18c0      	adds	r0, r0, r3
 80005d6:	0040      	lsls	r0, r0, #1
 80005d8:	0b00      	lsrs	r0, r0, #12

  return ret;
}
 80005da:	bd10      	pop	{r4, pc}

080005dc <buttonInit>:


bool buttonInit(void)
{
  return true;
}
 80005dc:	2001      	movs	r0, #1
 80005de:	4770      	bx	lr

080005e0 <buttonGetPressed>:

bool buttonGetPressed(uint8_t ch)
{
 80005e0:	b510      	push	{r4, lr}
 80005e2:	0004      	movs	r4, r0
  bool ret = false;
  uint32_t adc_voltage;

  if(ch>=BUTTON_MAX_CH)
 80005e4:	2804      	cmp	r0, #4
 80005e6:	d901      	bls.n	80005ec <buttonGetPressed+0xc>
    return false;
 80005e8:	2000      	movs	r0, #0
      ret = true;
  }


  return ret;
}
 80005ea:	bd10      	pop	{r4, pc}
  adc_voltage = adcReadVoltage(adc_ch);
 80005ec:	2000      	movs	r0, #0
 80005ee:	f7ff ffeb 	bl	80005c8 <adcReadVoltage>
  if(adc_voltage >= button_adc[ch].adc_min && adc_voltage <= button_adc[ch].adc_max)
 80005f2:	4b08      	ldr	r3, [pc, #32]	@ (8000614 <buttonGetPressed+0x34>)
 80005f4:	00a2      	lsls	r2, r4, #2
 80005f6:	5ad3      	ldrh	r3, [r2, r3]
 80005f8:	4283      	cmp	r3, r0
 80005fa:	d806      	bhi.n	800060a <buttonGetPressed+0x2a>
 80005fc:	4b05      	ldr	r3, [pc, #20]	@ (8000614 <buttonGetPressed+0x34>)
 80005fe:	189b      	adds	r3, r3, r2
 8000600:	885b      	ldrh	r3, [r3, #2]
 8000602:	4283      	cmp	r3, r0
 8000604:	d203      	bcs.n	800060e <buttonGetPressed+0x2e>
  bool ret = false;
 8000606:	2000      	movs	r0, #0
 8000608:	e7ef      	b.n	80005ea <buttonGetPressed+0xa>
 800060a:	2000      	movs	r0, #0
 800060c:	e7ed      	b.n	80005ea <buttonGetPressed+0xa>
      ret = true;
 800060e:	2001      	movs	r0, #1
 8000610:	e7eb      	b.n	80005ea <buttonGetPressed+0xa>
 8000612:	46c0      	nop			@ (mov r8, r8)
 8000614:	080049dc 	.word	0x080049dc

08000618 <cliAdd>:
  cliAdd("help",cliHelp);
  return true;
}

bool cliAdd(const char *cmd_str, void (*cmd_func)(uint8_t argc, const char **argv))
{
 8000618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800061a:	0003      	movs	r3, r0
 800061c:	000d      	movs	r5, r1
   if(cli_cmd_count >=CLI_CMD_LIST_MAX)
 800061e:	4a0c      	ldr	r2, [pc, #48]	@ (8000650 <cliAdd+0x38>)
 8000620:	7814      	ldrb	r4, [r2, #0]
 8000622:	2c07      	cmp	r4, #7
 8000624:	d901      	bls.n	800062a <cliAdd+0x12>
     return false;
 8000626:	2000      	movs	r0, #0
  strncpy(cli_cmd_func[cli_cmd_count].cmd_str,cmd_str,8);
  cli_cmd_func[cli_cmd_count].cmd_func = cmd_func;
  cli_cmd_count++;

  return true;
}
 8000628:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  strncpy(cli_cmd_func[cli_cmd_count].cmd_str,cmd_str,8);
 800062a:	0066      	lsls	r6, r4, #1
 800062c:	1930      	adds	r0, r6, r4
 800062e:	0080      	lsls	r0, r0, #2
 8000630:	4f08      	ldr	r7, [pc, #32]	@ (8000654 <cliAdd+0x3c>)
 8000632:	19c0      	adds	r0, r0, r7
 8000634:	2208      	movs	r2, #8
 8000636:	0019      	movs	r1, r3
 8000638:	f003 fc52 	bl	8003ee0 <strncpy>
  cli_cmd_func[cli_cmd_count].cmd_func = cmd_func;
 800063c:	1936      	adds	r6, r6, r4
 800063e:	00b6      	lsls	r6, r6, #2
 8000640:	19bf      	adds	r7, r7, r6
 8000642:	60bd      	str	r5, [r7, #8]
  cli_cmd_count++;
 8000644:	4b02      	ldr	r3, [pc, #8]	@ (8000650 <cliAdd+0x38>)
 8000646:	3401      	adds	r4, #1
 8000648:	701c      	strb	r4, [r3, #0]
  return true;
 800064a:	2001      	movs	r0, #1
 800064c:	e7ec      	b.n	8000628 <cliAdd+0x10>
 800064e:	46c0      	nop			@ (mov r8, r8)
 8000650:	200000e4 	.word	0x200000e4
 8000654:	20000084 	.word	0x20000084

08000658 <cliInit>:
{
 8000658:	b510      	push	{r4, lr}
  for(int i=0;i<CLI_CMD_LIST_MAX;i++)
 800065a:	2200      	movs	r2, #0
 800065c:	e007      	b.n	800066e <cliInit+0x16>
    cli_cmd_func[i].cmd_func = NULL;
 800065e:	4b08      	ldr	r3, [pc, #32]	@ (8000680 <cliInit+0x28>)
 8000660:	0051      	lsls	r1, r2, #1
 8000662:	1889      	adds	r1, r1, r2
 8000664:	0088      	lsls	r0, r1, #2
 8000666:	181b      	adds	r3, r3, r0
 8000668:	2100      	movs	r1, #0
 800066a:	6099      	str	r1, [r3, #8]
  for(int i=0;i<CLI_CMD_LIST_MAX;i++)
 800066c:	3201      	adds	r2, #1
 800066e:	2a07      	cmp	r2, #7
 8000670:	ddf5      	ble.n	800065e <cliInit+0x6>
  cliAdd("help",cliHelp);
 8000672:	4904      	ldr	r1, [pc, #16]	@ (8000684 <cliInit+0x2c>)
 8000674:	4804      	ldr	r0, [pc, #16]	@ (8000688 <cliInit+0x30>)
 8000676:	f7ff ffcf 	bl	8000618 <cliAdd>
}
 800067a:	2001      	movs	r0, #1
 800067c:	bd10      	pop	{r4, pc}
 800067e:	46c0      	nop			@ (mov r8, r8)
 8000680:	20000084 	.word	0x20000084
 8000684:	080006a9 	.word	0x080006a9
 8000688:	080048e4 	.word	0x080048e4

0800068c <cliPrintf>:
  cliPrintf("------------------------\n");
}


void cliPrintf(const char *fmt, ...)
{
 800068c:	b40f      	push	{r0, r1, r2, r3}
 800068e:	b500      	push	{lr}
 8000690:	b083      	sub	sp, #12
 8000692:	aa04      	add	r2, sp, #16
 8000694:	ca02      	ldmia	r2!, {r1}
  va_list arg;

  va_start(arg,fmt);
 8000696:	9201      	str	r2, [sp, #4]
  uartVPrintf(cli_ch,fmt,arg);
 8000698:	2000      	movs	r0, #0
 800069a:	f000 fb6e 	bl	8000d7a <uartVPrintf>
  va_end(arg);
}
 800069e:	b003      	add	sp, #12
 80006a0:	bc08      	pop	{r3}
 80006a2:	b004      	add	sp, #16
 80006a4:	4718      	bx	r3
	...

080006a8 <cliHelp>:
{
 80006a8:	b510      	push	{r4, lr}
  cliPrintf("------------------------\n");
 80006aa:	480b      	ldr	r0, [pc, #44]	@ (80006d8 <cliHelp+0x30>)
 80006ac:	f7ff ffee 	bl	800068c <cliPrintf>
  for(int i=0;i<cli_cmd_count;i++)
 80006b0:	2400      	movs	r4, #0
 80006b2:	e008      	b.n	80006c6 <cliHelp+0x1e>
    cliPrintf("%s\n",cli_cmd_func[i].cmd_str);
 80006b4:	0063      	lsls	r3, r4, #1
 80006b6:	191b      	adds	r3, r3, r4
 80006b8:	0099      	lsls	r1, r3, #2
 80006ba:	4b08      	ldr	r3, [pc, #32]	@ (80006dc <cliHelp+0x34>)
 80006bc:	18c9      	adds	r1, r1, r3
 80006be:	4808      	ldr	r0, [pc, #32]	@ (80006e0 <cliHelp+0x38>)
 80006c0:	f7ff ffe4 	bl	800068c <cliPrintf>
  for(int i=0;i<cli_cmd_count;i++)
 80006c4:	3401      	adds	r4, #1
 80006c6:	4b07      	ldr	r3, [pc, #28]	@ (80006e4 <cliHelp+0x3c>)
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	42a3      	cmp	r3, r4
 80006cc:	dcf2      	bgt.n	80006b4 <cliHelp+0xc>
  cliPrintf("------------------------\n");
 80006ce:	4802      	ldr	r0, [pc, #8]	@ (80006d8 <cliHelp+0x30>)
 80006d0:	f7ff ffdc 	bl	800068c <cliPrintf>
}
 80006d4:	bd10      	pop	{r4, pc}
 80006d6:	46c0      	nop			@ (mov r8, r8)
 80006d8:	080048ec 	.word	0x080048ec
 80006dc:	20000084 	.word	0x20000084
 80006e0:	08004908 	.word	0x08004908
 80006e4:	200000e4 	.word	0x200000e4

080006e8 <cliIsStr>:

bool cliIsStr(const char *p_arg , const char *p_str)
{
 80006e8:	b510      	push	{r4, lr}
  if(strcmp(p_arg,p_str)==0)
 80006ea:	f7ff fd0d 	bl	8000108 <strcmp>
 80006ee:	2800      	cmp	r0, #0
 80006f0:	d101      	bne.n	80006f6 <cliIsStr+0xe>
    return true;
 80006f2:	3001      	adds	r0, #1
  else
    return false;
}
 80006f4:	bd10      	pop	{r4, pc}
    return false;
 80006f6:	2000      	movs	r0, #0
 80006f8:	e7fc      	b.n	80006f4 <cliIsStr+0xc>

080006fa <cliGetData>:

int32_t cliGetData(const char *p_arg)
{
 80006fa:	b510      	push	{r4, lr}
  int32_t ret;
  ret = (int32_t)strtoul(p_arg,(char **)NULL, 0);
 80006fc:	2200      	movs	r2, #0
 80006fe:	2100      	movs	r1, #0
 8000700:	f003 fba0 	bl	8003e44 <strtoul>

  return ret;
}
 8000704:	bd10      	pop	{r4, pc}

08000706 <cliKeepLoop>:

bool cliKeepLoop(void)
{
 8000706:	b510      	push	{r4, lr}
  if(uartAvailable(cli_ch) == 0)
 8000708:	2000      	movs	r0, #0
 800070a:	f000 fae3 	bl	8000cd4 <uartAvailable>
 800070e:	2800      	cmp	r0, #0
 8000710:	d101      	bne.n	8000716 <cliKeepLoop+0x10>
    return true;
 8000712:	3001      	adds	r0, #1
  else
    return false;
}
 8000714:	bd10      	pop	{r4, pc}
    return false;
 8000716:	2000      	movs	r0, #0
 8000718:	e7fc      	b.n	8000714 <cliKeepLoop+0xe>
	...

0800071c <cliMain>:


bool cliMain(void)
{
 800071c:	b530      	push	{r4, r5, lr}
 800071e:	b083      	sub	sp, #12
  bool ret = false;
  if(uartAvailable(cli_ch) > 0)
 8000720:	2000      	movs	r0, #0
 8000722:	f000 fad7 	bl	8000cd4 <uartAvailable>
 8000726:	2800      	cmp	r0, #0
 8000728:	d103      	bne.n	8000732 <cliMain+0x16>
  bool ret = false;
 800072a:	2400      	movs	r4, #0

          uartWrite(cli_ch, &rx_data , 1);
        }
      }
  return ret;
}
 800072c:	0020      	movs	r0, r4
 800072e:	b003      	add	sp, #12
 8000730:	bd30      	pop	{r4, r5, pc}
        rx_data = uartRead(cli_ch);
 8000732:	2000      	movs	r0, #0
 8000734:	f000 faf0 	bl	8000d18 <uartRead>
 8000738:	466a      	mov	r2, sp
 800073a:	70d0      	strb	r0, [r2, #3]
        if(rx_data == '\r')
 800073c:	280d      	cmp	r0, #13
 800073e:	d007      	beq.n	8000750 <cliMain+0x34>
        else if(rx_data ==0x08)
 8000740:	2808      	cmp	r0, #8
 8000742:	d049      	beq.n	80007d8 <cliMain+0xbc>
        else if (cli_buf_index < (128-1))
 8000744:	4b32      	ldr	r3, [pc, #200]	@ (8000810 <cliMain+0xf4>)
 8000746:	881b      	ldrh	r3, [r3, #0]
 8000748:	2b7e      	cmp	r3, #126	@ 0x7e
 800074a:	d954      	bls.n	80007f6 <cliMain+0xda>
  bool ret = false;
 800074c:	2400      	movs	r4, #0
 800074e:	e7ed      	b.n	800072c <cliMain+0x10>
          cli_buf[cli_buf_index] = 0;
 8000750:	4b2f      	ldr	r3, [pc, #188]	@ (8000810 <cliMain+0xf4>)
 8000752:	881a      	ldrh	r2, [r3, #0]
 8000754:	4c2f      	ldr	r4, [pc, #188]	@ (8000814 <cliMain+0xf8>)
 8000756:	2500      	movs	r5, #0
 8000758:	54a5      	strb	r5, [r4, r2]
          cli_buf_index = 0;
 800075a:	801d      	strh	r5, [r3, #0]
          uartPrintf(cli_ch,"\r\n");
 800075c:	492e      	ldr	r1, [pc, #184]	@ (8000818 <cliMain+0xfc>)
 800075e:	2000      	movs	r0, #0
 8000760:	f000 faf2 	bl	8000d48 <uartPrintf>
          char *str_ptr = cli_buf;
 8000764:	9401      	str	r4, [sp, #4]
          cli_argc = 0;
 8000766:	4b2d      	ldr	r3, [pc, #180]	@ (800081c <cliMain+0x100>)
 8000768:	801d      	strh	r5, [r3, #0]
          while((tok = strtok_r(str_ptr," ",&str_ptr)) != NULL)
 800076a:	e006      	b.n	800077a <cliMain+0x5e>
            cli_argv[cli_argc] = tok;
 800076c:	492b      	ldr	r1, [pc, #172]	@ (800081c <cliMain+0x100>)
 800076e:	880b      	ldrh	r3, [r1, #0]
 8000770:	4a2b      	ldr	r2, [pc, #172]	@ (8000820 <cliMain+0x104>)
 8000772:	009c      	lsls	r4, r3, #2
 8000774:	50a0      	str	r0, [r4, r2]
            cli_argc++;
 8000776:	3301      	adds	r3, #1
 8000778:	800b      	strh	r3, [r1, #0]
          while((tok = strtok_r(str_ptr," ",&str_ptr)) != NULL)
 800077a:	492a      	ldr	r1, [pc, #168]	@ (8000824 <cliMain+0x108>)
 800077c:	9801      	ldr	r0, [sp, #4]
 800077e:	aa01      	add	r2, sp, #4
 8000780:	f003 fbee 	bl	8003f60 <strtok_r>
 8000784:	2800      	cmp	r0, #0
 8000786:	d1f1      	bne.n	800076c <cliMain+0x50>
          for(int i=0;i<cli_cmd_count;i++)
 8000788:	2400      	movs	r4, #0
 800078a:	e000      	b.n	800078e <cliMain+0x72>
 800078c:	3401      	adds	r4, #1
 800078e:	4b26      	ldr	r3, [pc, #152]	@ (8000828 <cliMain+0x10c>)
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	42a3      	cmp	r3, r4
 8000794:	dd1a      	ble.n	80007cc <cliMain+0xb0>
            if(strcmp(cli_argv[0], cli_cmd_func[i].cmd_str) ==0 )
 8000796:	4b22      	ldr	r3, [pc, #136]	@ (8000820 <cliMain+0x104>)
 8000798:	6818      	ldr	r0, [r3, #0]
 800079a:	0061      	lsls	r1, r4, #1
 800079c:	1909      	adds	r1, r1, r4
 800079e:	0089      	lsls	r1, r1, #2
 80007a0:	4b22      	ldr	r3, [pc, #136]	@ (800082c <cliMain+0x110>)
 80007a2:	18c9      	adds	r1, r1, r3
 80007a4:	f7ff fcb0 	bl	8000108 <strcmp>
 80007a8:	2800      	cmp	r0, #0
 80007aa:	d1ef      	bne.n	800078c <cliMain+0x70>
              if(cli_cmd_func[i].cmd_func != NULL)
 80007ac:	4b1f      	ldr	r3, [pc, #124]	@ (800082c <cliMain+0x110>)
 80007ae:	0062      	lsls	r2, r4, #1
 80007b0:	1912      	adds	r2, r2, r4
 80007b2:	0092      	lsls	r2, r2, #2
 80007b4:	189b      	adds	r3, r3, r2
 80007b6:	689b      	ldr	r3, [r3, #8]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d0e7      	beq.n	800078c <cliMain+0x70>
                cli_cmd_func[i].cmd_func(cli_argc - 1, (const char **)&cli_argv[1]);
 80007bc:	491c      	ldr	r1, [pc, #112]	@ (8000830 <cliMain+0x114>)
 80007be:	4a17      	ldr	r2, [pc, #92]	@ (800081c <cliMain+0x100>)
 80007c0:	8810      	ldrh	r0, [r2, #0]
 80007c2:	3801      	subs	r0, #1
 80007c4:	b2c0      	uxtb	r0, r0
 80007c6:	4798      	blx	r3
                ret = true;
 80007c8:	2401      	movs	r4, #1
                break;
 80007ca:	e000      	b.n	80007ce <cliMain+0xb2>
  bool ret = false;
 80007cc:	2400      	movs	r4, #0
          uartPrintf(cli_ch,"cli# ");
 80007ce:	4919      	ldr	r1, [pc, #100]	@ (8000834 <cliMain+0x118>)
 80007d0:	2000      	movs	r0, #0
 80007d2:	f000 fab9 	bl	8000d48 <uartPrintf>
 80007d6:	e7a9      	b.n	800072c <cliMain+0x10>
          if(cli_buf_index>0)
 80007d8:	4b0d      	ldr	r3, [pc, #52]	@ (8000810 <cliMain+0xf4>)
 80007da:	881b      	ldrh	r3, [r3, #0]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d101      	bne.n	80007e4 <cliMain+0xc8>
  bool ret = false;
 80007e0:	2400      	movs	r4, #0
 80007e2:	e7a3      	b.n	800072c <cliMain+0x10>
            cli_buf_index--;
 80007e4:	4a0a      	ldr	r2, [pc, #40]	@ (8000810 <cliMain+0xf4>)
 80007e6:	3b01      	subs	r3, #1
 80007e8:	8013      	strh	r3, [r2, #0]
            uartPrintf(cli_ch,"\b \b");
 80007ea:	4913      	ldr	r1, [pc, #76]	@ (8000838 <cliMain+0x11c>)
 80007ec:	2000      	movs	r0, #0
 80007ee:	f000 faab 	bl	8000d48 <uartPrintf>
  bool ret = false;
 80007f2:	2400      	movs	r4, #0
 80007f4:	e79a      	b.n	800072c <cliMain+0x10>
          cli_buf[cli_buf_index] = rx_data;
 80007f6:	4a07      	ldr	r2, [pc, #28]	@ (8000814 <cliMain+0xf8>)
 80007f8:	54d0      	strb	r0, [r2, r3]
          cli_buf_index++;
 80007fa:	4a05      	ldr	r2, [pc, #20]	@ (8000810 <cliMain+0xf4>)
 80007fc:	3301      	adds	r3, #1
 80007fe:	8013      	strh	r3, [r2, #0]
          uartWrite(cli_ch, &rx_data , 1);
 8000800:	2201      	movs	r2, #1
 8000802:	466b      	mov	r3, sp
 8000804:	1cd9      	adds	r1, r3, #3
 8000806:	2000      	movs	r0, #0
 8000808:	f000 fa50 	bl	8000cac <uartWrite>
  bool ret = false;
 800080c:	2400      	movs	r4, #0
 800080e:	e78d      	b.n	800072c <cliMain+0x10>
 8000810:	2000010a 	.word	0x2000010a
 8000814:	2000010c 	.word	0x2000010c
 8000818:	0800490c 	.word	0x0800490c
 800081c:	20000108 	.word	0x20000108
 8000820:	200000e8 	.word	0x200000e8
 8000824:	08004914 	.word	0x08004914
 8000828:	200000e4 	.word	0x200000e4
 800082c:	20000084 	.word	0x20000084
 8000830:	200000ec 	.word	0x200000ec
 8000834:	08004910 	.word	0x08004910
 8000838:	08004918 	.word	0x08004918

0800083c <ledInit>:


bool ledInit(void)
{
  return true;
}
 800083c:	2001      	movs	r0, #1
 800083e:	4770      	bx	lr

08000840 <ledOn>:
void ledOn(uint8_t ch)
{
 8000840:	b510      	push	{r4, lr}
  switch(ch)
 8000842:	2800      	cmp	r0, #0
 8000844:	d000      	beq.n	8000848 <ledOn+0x8>
    case _DEF_CH1:
     pwmWrite(_DEF_CH1,100 - led_duty[_DEF_CH1]);
      break;
  }

}
 8000846:	bd10      	pop	{r4, pc}
     pwmWrite(_DEF_CH1,100 - led_duty[_DEF_CH1]);
 8000848:	4b03      	ldr	r3, [pc, #12]	@ (8000858 <ledOn+0x18>)
 800084a:	881b      	ldrh	r3, [r3, #0]
 800084c:	2164      	movs	r1, #100	@ 0x64
 800084e:	1ac9      	subs	r1, r1, r3
 8000850:	b289      	uxth	r1, r1
 8000852:	f000 f82d 	bl	80008b0 <pwmWrite>
}
 8000856:	e7f6      	b.n	8000846 <ledOn+0x6>
 8000858:	20000000 	.word	0x20000000

0800085c <ledOff>:
void ledOff(uint8_t ch)
{
 800085c:	b510      	push	{r4, lr}
  switch(ch)
 800085e:	2800      	cmp	r0, #0
 8000860:	d000      	beq.n	8000864 <ledOff+0x8>
    case _DEF_CH1:
      pwmWrite(_DEF_CH1,100);
      break;
  }

}
 8000862:	bd10      	pop	{r4, pc}
      pwmWrite(_DEF_CH1,100);
 8000864:	2164      	movs	r1, #100	@ 0x64
 8000866:	f000 f823 	bl	80008b0 <pwmWrite>
}
 800086a:	e7fa      	b.n	8000862 <ledOff+0x6>

0800086c <ledToggle>:
void ledToggle(uint8_t ch)
{
 800086c:	b510      	push	{r4, lr}
  switch(ch)
 800086e:	2800      	cmp	r0, #0
 8000870:	d000      	beq.n	8000874 <ledToggle+0x8>
      else
        ledOff(_DEF_CH1);
      break;
  }

}
 8000872:	bd10      	pop	{r4, pc}
      if(pwmRead(_DEF_CH1) == 100 )
 8000874:	f000 f824 	bl	80008c0 <pwmRead>
 8000878:	2864      	cmp	r0, #100	@ 0x64
 800087a:	d003      	beq.n	8000884 <ledToggle+0x18>
        ledOff(_DEF_CH1);
 800087c:	2000      	movs	r0, #0
 800087e:	f7ff ffed 	bl	800085c <ledOff>
}
 8000882:	e7f6      	b.n	8000872 <ledToggle+0x6>
        ledOn(_DEF_CH1);
 8000884:	2000      	movs	r0, #0
 8000886:	f7ff ffdb 	bl	8000840 <ledOn>
 800088a:	e7f2      	b.n	8000872 <ledToggle+0x6>

0800088c <ledSetDuty>:

void ledSetDuty(uint8_t ch,uint16_t duty_data)
{
  switch(ch)
 800088c:	2800      	cmp	r0, #0
 800088e:	d102      	bne.n	8000896 <ledSetDuty+0xa>
    {
      case _DEF_CH1:
        led_duty[ch] = duty_data;
 8000890:	4b01      	ldr	r3, [pc, #4]	@ (8000898 <ledSetDuty+0xc>)
 8000892:	0040      	lsls	r0, r0, #1
 8000894:	52c1      	strh	r1, [r0, r3]
        break;
    }
}
 8000896:	4770      	bx	lr
 8000898:	20000000 	.word	0x20000000

0800089c <pwmInit>:




bool pwmInit(void)
{
 800089c:	b510      	push	{r4, lr}
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800089e:	4803      	ldr	r0, [pc, #12]	@ (80008ac <pwmInit+0x10>)
 80008a0:	2100      	movs	r1, #0
 80008a2:	f002 fc3f 	bl	8003124 <HAL_TIM_PWM_Start>

  return true;
}
 80008a6:	2001      	movs	r0, #1
 80008a8:	bd10      	pop	{r4, pc}
 80008aa:	46c0      	nop			@ (mov r8, r8)
 80008ac:	20000470 	.word	0x20000470

080008b0 <pwmWrite>:
void pwmWrite(uint8_t ch,uint16_t duty)
{
  switch(ch)
 80008b0:	2800      	cmp	r0, #0
 80008b2:	d102      	bne.n	80008ba <pwmWrite+0xa>
  {
    case _DEF_CH1:
      htim1.Instance->CCR1 = duty;
 80008b4:	4b01      	ldr	r3, [pc, #4]	@ (80008bc <pwmWrite+0xc>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	6359      	str	r1, [r3, #52]	@ 0x34
      break;
  }

}
 80008ba:	4770      	bx	lr
 80008bc:	20000470 	.word	0x20000470

080008c0 <pwmRead>:
uint16_t pwmRead(uint8_t ch)
{
  uint16_t pwm_data = 0;

  switch(ch)
 80008c0:	2800      	cmp	r0, #0
 80008c2:	d104      	bne.n	80008ce <pwmRead+0xe>
    {
      case _DEF_CH1:
        pwm_data = htim1.Instance->CCR1;
 80008c4:	4b03      	ldr	r3, [pc, #12]	@ (80008d4 <pwmRead+0x14>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 80008ca:	b280      	uxth	r0, r0
        break;
    }

  return pwm_data;
}
 80008cc:	4770      	bx	lr
  uint16_t pwm_data = 0;
 80008ce:	2000      	movs	r0, #0
 80008d0:	e7fc      	b.n	80008cc <pwmRead+0xc>
 80008d2:	46c0      	nop			@ (mov r8, r8)
 80008d4:	20000470 	.word	0x20000470

080008d8 <rtcInit>:




bool rtcInit(void)
{
 80008d8:	b510      	push	{r4, lr}
  cliAdd("rtc",rtcCli);
 80008da:	4903      	ldr	r1, [pc, #12]	@ (80008e8 <rtcInit+0x10>)
 80008dc:	4803      	ldr	r0, [pc, #12]	@ (80008ec <rtcInit+0x14>)
 80008de:	f7ff fe9b 	bl	8000618 <cliAdd>
  return true;
}
 80008e2:	2001      	movs	r0, #1
 80008e4:	bd10      	pop	{r4, pc}
 80008e6:	46c0      	nop			@ (mov r8, r8)
 80008e8:	08000a19 	.word	0x08000a19
 80008ec:	0800491c 	.word	0x0800491c

080008f0 <rtcGetInfo>:



bool rtcGetInfo(rtc_info_t *rtc_info)
{
 80008f0:	b510      	push	{r4, lr}
 80008f2:	b086      	sub	sp, #24
 80008f4:	0004      	movs	r4, r0
  RTC_TimeTypeDef sTime = {0};
 80008f6:	2214      	movs	r2, #20
 80008f8:	2100      	movs	r1, #0
 80008fa:	a801      	add	r0, sp, #4
 80008fc:	f003 fae8 	bl	8003ed0 <memset>
  RTC_DateTypeDef sDate = {0};
 8000900:	2300      	movs	r3, #0
 8000902:	9300      	str	r3, [sp, #0]


  if (HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000904:	4812      	ldr	r0, [pc, #72]	@ (8000950 <rtcGetInfo+0x60>)
 8000906:	2200      	movs	r2, #0
 8000908:	a901      	add	r1, sp, #4
 800090a:	f001 ff63 	bl	80027d4 <HAL_RTC_GetTime>
 800090e:	2800      	cmp	r0, #0
 8000910:	d002      	beq.n	8000918 <rtcGetInfo+0x28>
    return false;
 8000912:	2000      	movs	r0, #0
  rtc_info->date.month = sDate.Month;
  rtc_info->date.day = sDate.Date;

  return true;

}
 8000914:	b006      	add	sp, #24
 8000916:	bd10      	pop	{r4, pc}
  if (HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000918:	480d      	ldr	r0, [pc, #52]	@ (8000950 <rtcGetInfo+0x60>)
 800091a:	2200      	movs	r2, #0
 800091c:	4669      	mov	r1, sp
 800091e:	f001 ff85 	bl	800282c <HAL_RTC_GetDate>
 8000922:	2800      	cmp	r0, #0
 8000924:	d111      	bne.n	800094a <rtcGetInfo+0x5a>
  rtc_info->time.hours = sTime.Hours;
 8000926:	ab01      	add	r3, sp, #4
 8000928:	781a      	ldrb	r2, [r3, #0]
 800092a:	7022      	strb	r2, [r4, #0]
  rtc_info->time.minutes = sTime.Minutes;
 800092c:	785a      	ldrb	r2, [r3, #1]
 800092e:	7062      	strb	r2, [r4, #1]
  rtc_info->time.seconds = sTime.Seconds;
 8000930:	789b      	ldrb	r3, [r3, #2]
 8000932:	70a3      	strb	r3, [r4, #2]
  rtc_info->date.year = sDate.Year;
 8000934:	466b      	mov	r3, sp
 8000936:	78db      	ldrb	r3, [r3, #3]
 8000938:	70e3      	strb	r3, [r4, #3]
  rtc_info->date.month = sDate.Month;
 800093a:	466b      	mov	r3, sp
 800093c:	785b      	ldrb	r3, [r3, #1]
 800093e:	7123      	strb	r3, [r4, #4]
  rtc_info->date.day = sDate.Date;
 8000940:	466b      	mov	r3, sp
 8000942:	789b      	ldrb	r3, [r3, #2]
 8000944:	7163      	strb	r3, [r4, #5]
  return true;
 8000946:	3001      	adds	r0, #1
 8000948:	e7e4      	b.n	8000914 <rtcGetInfo+0x24>
    return false;
 800094a:	2000      	movs	r0, #0
 800094c:	e7e2      	b.n	8000914 <rtcGetInfo+0x24>
 800094e:	46c0      	nop			@ (mov r8, r8)
 8000950:	200004bc 	.word	0x200004bc

08000954 <rtcSetTime>:
  return true;
}


bool rtcSetTime(rtc_time_t *rtc_time)
{
 8000954:	b510      	push	{r4, lr}
 8000956:	b086      	sub	sp, #24
 8000958:	0004      	movs	r4, r0
  RTC_TimeTypeDef sTime = {0};
 800095a:	2214      	movs	r2, #20
 800095c:	2100      	movs	r1, #0
 800095e:	a801      	add	r0, sp, #4
 8000960:	f003 fab6 	bl	8003ed0 <memset>
  RTC_DateTypeDef sDate = {0};
 8000964:	2300      	movs	r3, #0
 8000966:	9300      	str	r3, [sp, #0]


  if (HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000968:	4811      	ldr	r0, [pc, #68]	@ (80009b0 <rtcSetTime+0x5c>)
 800096a:	2200      	movs	r2, #0
 800096c:	a901      	add	r1, sp, #4
 800096e:	f001 ff31 	bl	80027d4 <HAL_RTC_GetTime>
 8000972:	2800      	cmp	r0, #0
 8000974:	d002      	beq.n	800097c <rtcSetTime+0x28>
    return false;
 8000976:	2000      	movs	r0, #0
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
      return false;

  return true;

}
 8000978:	b006      	add	sp, #24
 800097a:	bd10      	pop	{r4, pc}
  if (HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800097c:	480c      	ldr	r0, [pc, #48]	@ (80009b0 <rtcSetTime+0x5c>)
 800097e:	2200      	movs	r2, #0
 8000980:	4669      	mov	r1, sp
 8000982:	f001 ff53 	bl	800282c <HAL_RTC_GetDate>
 8000986:	2800      	cmp	r0, #0
 8000988:	d001      	beq.n	800098e <rtcSetTime+0x3a>
    return false;
 800098a:	2000      	movs	r0, #0
 800098c:	e7f4      	b.n	8000978 <rtcSetTime+0x24>
  sTime.Hours = rtc_time->hours;
 800098e:	7823      	ldrb	r3, [r4, #0]
 8000990:	a901      	add	r1, sp, #4
 8000992:	700b      	strb	r3, [r1, #0]
  sTime.Minutes = rtc_time->minutes;
 8000994:	7863      	ldrb	r3, [r4, #1]
 8000996:	704b      	strb	r3, [r1, #1]
  sTime.Seconds = rtc_time->seconds;
 8000998:	78a3      	ldrb	r3, [r4, #2]
 800099a:	708b      	strb	r3, [r1, #2]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800099c:	4804      	ldr	r0, [pc, #16]	@ (80009b0 <rtcSetTime+0x5c>)
 800099e:	2200      	movs	r2, #0
 80009a0:	f001 fe54 	bl	800264c <HAL_RTC_SetTime>
 80009a4:	2800      	cmp	r0, #0
 80009a6:	d101      	bne.n	80009ac <rtcSetTime+0x58>
  return true;
 80009a8:	3001      	adds	r0, #1
 80009aa:	e7e5      	b.n	8000978 <rtcSetTime+0x24>
      return false;
 80009ac:	2000      	movs	r0, #0
 80009ae:	e7e3      	b.n	8000978 <rtcSetTime+0x24>
 80009b0:	200004bc 	.word	0x200004bc

080009b4 <rtcSetDate>:
bool rtcSetDate(rtc_date_t *rtc_date)
{
 80009b4:	b510      	push	{r4, lr}
 80009b6:	b086      	sub	sp, #24
 80009b8:	0004      	movs	r4, r0
  RTC_TimeTypeDef sTime = {0};
 80009ba:	2214      	movs	r2, #20
 80009bc:	2100      	movs	r1, #0
 80009be:	a801      	add	r0, sp, #4
 80009c0:	f003 fa86 	bl	8003ed0 <memset>
   RTC_DateTypeDef sDate = {0};
 80009c4:	2300      	movs	r3, #0
 80009c6:	9300      	str	r3, [sp, #0]


   if (HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80009c8:	4812      	ldr	r0, [pc, #72]	@ (8000a14 <rtcSetDate+0x60>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	a901      	add	r1, sp, #4
 80009ce:	f001 ff01 	bl	80027d4 <HAL_RTC_GetTime>
 80009d2:	2800      	cmp	r0, #0
 80009d4:	d002      	beq.n	80009dc <rtcSetDate+0x28>
     return false;
 80009d6:	2000      	movs	r0, #0

   if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
        return false;

   return true;
}
 80009d8:	b006      	add	sp, #24
 80009da:	bd10      	pop	{r4, pc}
   if (HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80009dc:	480d      	ldr	r0, [pc, #52]	@ (8000a14 <rtcSetDate+0x60>)
 80009de:	2200      	movs	r2, #0
 80009e0:	4669      	mov	r1, sp
 80009e2:	f001 ff23 	bl	800282c <HAL_RTC_GetDate>
 80009e6:	2800      	cmp	r0, #0
 80009e8:	d001      	beq.n	80009ee <rtcSetDate+0x3a>
     return false;
 80009ea:	2000      	movs	r0, #0
 80009ec:	e7f4      	b.n	80009d8 <rtcSetDate+0x24>
   sDate.Year = rtc_date->year;
 80009ee:	7823      	ldrb	r3, [r4, #0]
 80009f0:	466a      	mov	r2, sp
 80009f2:	70d3      	strb	r3, [r2, #3]
   sDate.Month = rtc_date->month;
 80009f4:	7863      	ldrb	r3, [r4, #1]
 80009f6:	7053      	strb	r3, [r2, #1]
   sDate.Date = rtc_date->day;
 80009f8:	78a3      	ldrb	r3, [r4, #2]
 80009fa:	7093      	strb	r3, [r2, #2]
   if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80009fc:	4805      	ldr	r0, [pc, #20]	@ (8000a14 <rtcSetDate+0x60>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	4669      	mov	r1, sp
 8000a02:	f001 fe89 	bl	8002718 <HAL_RTC_SetDate>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	d101      	bne.n	8000a0e <rtcSetDate+0x5a>
   return true;
 8000a0a:	3001      	adds	r0, #1
 8000a0c:	e7e4      	b.n	80009d8 <rtcSetDate+0x24>
        return false;
 8000a0e:	2000      	movs	r0, #0
 8000a10:	e7e2      	b.n	80009d8 <rtcSetDate+0x24>
 8000a12:	46c0      	nop			@ (mov r8, r8)
 8000a14:	200004bc 	.word	0x200004bc

08000a18 <rtcCli>:



void rtcCli(uint8_t argc,const char **argv)
{
 8000a18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a1a:	46c6      	mov	lr, r8
 8000a1c:	b500      	push	{lr}
 8000a1e:	b086      	sub	sp, #24
 8000a20:	0004      	movs	r4, r0
 8000a22:	000e      	movs	r6, r1
  bool ret = false;

  if(argc == 2 && cliIsStr(argv[0], "get") && cliIsStr(argv[1], "info"))
 8000a24:	2802      	cmp	r0, #2
 8000a26:	d009      	beq.n	8000a3c <rtcCli+0x24>
  bool ret = false;
 8000a28:	2700      	movs	r7, #0
      delay(1000);
    }
    ret = true;
  }

  if(argc == 5 && cliIsStr(argv[0],"set") &&cliIsStr(argv[1], "time"))
 8000a2a:	2c05      	cmp	r4, #5
 8000a2c:	d030      	beq.n	8000a90 <rtcCli+0x78>

    ret = true;
  }


  if(ret == false)
 8000a2e:	2f00      	cmp	r7, #0
 8000a30:	d100      	bne.n	8000a34 <rtcCli+0x1c>
 8000a32:	e074      	b.n	8000b1e <rtcCli+0x106>
    cliPrintf("rtc get info\n");
    cliPrintf("rtc set time [h] [m] [s]\n");
    cliPrintf("rtc set date [y] [m] [d]\n");
  }

}
 8000a34:	b006      	add	sp, #24
 8000a36:	bc80      	pop	{r7}
 8000a38:	46b8      	mov	r8, r7
 8000a3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(argc == 2 && cliIsStr(argv[0], "get") && cliIsStr(argv[1], "info"))
 8000a3c:	493d      	ldr	r1, [pc, #244]	@ (8000b34 <rtcCli+0x11c>)
 8000a3e:	6830      	ldr	r0, [r6, #0]
 8000a40:	f7ff fe52 	bl	80006e8 <cliIsStr>
 8000a44:	1e07      	subs	r7, r0, #0
 8000a46:	d0f0      	beq.n	8000a2a <rtcCli+0x12>
 8000a48:	493b      	ldr	r1, [pc, #236]	@ (8000b38 <rtcCli+0x120>)
 8000a4a:	6870      	ldr	r0, [r6, #4]
 8000a4c:	f7ff fe4c 	bl	80006e8 <cliIsStr>
 8000a50:	1e07      	subs	r7, r0, #0
 8000a52:	d118      	bne.n	8000a86 <rtcCli+0x6e>
 8000a54:	e7e9      	b.n	8000a2a <rtcCli+0x12>
      rtcGetInfo(&rtc_info);
 8000a56:	ad04      	add	r5, sp, #16
 8000a58:	0028      	movs	r0, r5
 8000a5a:	f7ff ff49 	bl	80008f0 <rtcGetInfo>
                rtc_info.date.year,
 8000a5e:	78e9      	ldrb	r1, [r5, #3]
                rtc_info.date.month,
 8000a60:	792a      	ldrb	r2, [r5, #4]
                rtc_info.date.day,
 8000a62:	796b      	ldrb	r3, [r5, #5]
                rtc_info.time.hours,
 8000a64:	7828      	ldrb	r0, [r5, #0]
 8000a66:	4684      	mov	ip, r0
                rtc_info.time.minutes,
 8000a68:	7868      	ldrb	r0, [r5, #1]
 8000a6a:	4680      	mov	r8, r0
                rtc_info.time.seconds);
 8000a6c:	78ad      	ldrb	r5, [r5, #2]
      cliPrintf("Y:%02d M:%02d D:%02d, H:%02d M:%02d S:%02d\n",
 8000a6e:	4833      	ldr	r0, [pc, #204]	@ (8000b3c <rtcCli+0x124>)
 8000a70:	9502      	str	r5, [sp, #8]
 8000a72:	4645      	mov	r5, r8
 8000a74:	9501      	str	r5, [sp, #4]
 8000a76:	4665      	mov	r5, ip
 8000a78:	9500      	str	r5, [sp, #0]
 8000a7a:	f7ff fe07 	bl	800068c <cliPrintf>
      delay(1000);
 8000a7e:	20fa      	movs	r0, #250	@ 0xfa
 8000a80:	0080      	lsls	r0, r0, #2
 8000a82:	f000 f98e 	bl	8000da2 <delay>
    while(cliKeepLoop())
 8000a86:	f7ff fe3e 	bl	8000706 <cliKeepLoop>
 8000a8a:	2800      	cmp	r0, #0
 8000a8c:	d1e3      	bne.n	8000a56 <rtcCli+0x3e>
 8000a8e:	e7cc      	b.n	8000a2a <rtcCli+0x12>
  if(argc == 5 && cliIsStr(argv[0],"set") &&cliIsStr(argv[1], "time"))
 8000a90:	492b      	ldr	r1, [pc, #172]	@ (8000b40 <rtcCli+0x128>)
 8000a92:	6830      	ldr	r0, [r6, #0]
 8000a94:	f7ff fe28 	bl	80006e8 <cliIsStr>
 8000a98:	2800      	cmp	r0, #0
 8000a9a:	d122      	bne.n	8000ae2 <rtcCli+0xca>
  if(argc == 5 && cliIsStr(argv[0],"set") &&cliIsStr(argv[1], "date"))
 8000a9c:	4928      	ldr	r1, [pc, #160]	@ (8000b40 <rtcCli+0x128>)
 8000a9e:	6830      	ldr	r0, [r6, #0]
 8000aa0:	f7ff fe22 	bl	80006e8 <cliIsStr>
 8000aa4:	2800      	cmp	r0, #0
 8000aa6:	d0c2      	beq.n	8000a2e <rtcCli+0x16>
 8000aa8:	4926      	ldr	r1, [pc, #152]	@ (8000b44 <rtcCli+0x12c>)
 8000aaa:	6870      	ldr	r0, [r6, #4]
 8000aac:	f7ff fe1c 	bl	80006e8 <cliIsStr>
 8000ab0:	2800      	cmp	r0, #0
 8000ab2:	d0bc      	beq.n	8000a2e <rtcCli+0x16>
     rtc_date.year = cliGetData(argv[2]);
 8000ab4:	68b0      	ldr	r0, [r6, #8]
 8000ab6:	f7ff fe20 	bl	80006fa <cliGetData>
 8000aba:	ac04      	add	r4, sp, #16
 8000abc:	7020      	strb	r0, [r4, #0]
     rtc_date.month = cliGetData(argv[3]);
 8000abe:	68f0      	ldr	r0, [r6, #12]
 8000ac0:	f7ff fe1b 	bl	80006fa <cliGetData>
 8000ac4:	7060      	strb	r0, [r4, #1]
     rtc_date.day = cliGetData(argv[4]);
 8000ac6:	6930      	ldr	r0, [r6, #16]
 8000ac8:	f7ff fe17 	bl	80006fa <cliGetData>
 8000acc:	70a0      	strb	r0, [r4, #2]
     rtcSetDate(&rtc_date);
 8000ace:	0020      	movs	r0, r4
 8000ad0:	f7ff ff70 	bl	80009b4 <rtcSetDate>
               rtc_date.year,
 8000ad4:	7821      	ldrb	r1, [r4, #0]
               rtc_date.month,
 8000ad6:	7862      	ldrb	r2, [r4, #1]
               rtc_date.day);
 8000ad8:	78a3      	ldrb	r3, [r4, #2]
     cliPrintf("Y:%02d M:%02d S:%02d\n",
 8000ada:	481b      	ldr	r0, [pc, #108]	@ (8000b48 <rtcCli+0x130>)
 8000adc:	f7ff fdd6 	bl	800068c <cliPrintf>
  if(ret == false)
 8000ae0:	e7a8      	b.n	8000a34 <rtcCli+0x1c>
  if(argc == 5 && cliIsStr(argv[0],"set") &&cliIsStr(argv[1], "time"))
 8000ae2:	491a      	ldr	r1, [pc, #104]	@ (8000b4c <rtcCli+0x134>)
 8000ae4:	6870      	ldr	r0, [r6, #4]
 8000ae6:	f7ff fdff 	bl	80006e8 <cliIsStr>
 8000aea:	1e04      	subs	r4, r0, #0
 8000aec:	d0d6      	beq.n	8000a9c <rtcCli+0x84>
     rtc_time.hours = cliGetData(argv[2]);
 8000aee:	68b0      	ldr	r0, [r6, #8]
 8000af0:	f7ff fe03 	bl	80006fa <cliGetData>
 8000af4:	ad04      	add	r5, sp, #16
 8000af6:	7028      	strb	r0, [r5, #0]
     rtc_time.minutes = cliGetData(argv[3]);
 8000af8:	68f0      	ldr	r0, [r6, #12]
 8000afa:	f7ff fdfe 	bl	80006fa <cliGetData>
 8000afe:	7068      	strb	r0, [r5, #1]
     rtc_time.seconds = cliGetData(argv[4]);
 8000b00:	6930      	ldr	r0, [r6, #16]
 8000b02:	f7ff fdfa 	bl	80006fa <cliGetData>
 8000b06:	70a8      	strb	r0, [r5, #2]
     rtcSetTime(&rtc_time);
 8000b08:	0028      	movs	r0, r5
 8000b0a:	f7ff ff23 	bl	8000954 <rtcSetTime>
               rtc_time.hours,
 8000b0e:	7829      	ldrb	r1, [r5, #0]
               rtc_time.minutes,
 8000b10:	786a      	ldrb	r2, [r5, #1]
               rtc_time.seconds);
 8000b12:	78ab      	ldrb	r3, [r5, #2]
     cliPrintf("H:%02d M:%02d S:%02d\n",
 8000b14:	480e      	ldr	r0, [pc, #56]	@ (8000b50 <rtcCli+0x138>)
 8000b16:	f7ff fdb9 	bl	800068c <cliPrintf>
    ret = true;
 8000b1a:	0027      	movs	r7, r4
 8000b1c:	e7be      	b.n	8000a9c <rtcCli+0x84>
    cliPrintf("rtc get info\n");
 8000b1e:	480d      	ldr	r0, [pc, #52]	@ (8000b54 <rtcCli+0x13c>)
 8000b20:	f7ff fdb4 	bl	800068c <cliPrintf>
    cliPrintf("rtc set time [h] [m] [s]\n");
 8000b24:	480c      	ldr	r0, [pc, #48]	@ (8000b58 <rtcCli+0x140>)
 8000b26:	f7ff fdb1 	bl	800068c <cliPrintf>
    cliPrintf("rtc set date [y] [m] [d]\n");
 8000b2a:	480c      	ldr	r0, [pc, #48]	@ (8000b5c <rtcCli+0x144>)
 8000b2c:	f7ff fdae 	bl	800068c <cliPrintf>
}
 8000b30:	e780      	b.n	8000a34 <rtcCli+0x1c>
 8000b32:	46c0      	nop			@ (mov r8, r8)
 8000b34:	08004920 	.word	0x08004920
 8000b38:	080048dc 	.word	0x080048dc
 8000b3c:	08004924 	.word	0x08004924
 8000b40:	08004950 	.word	0x08004950
 8000b44:	08004974 	.word	0x08004974
 8000b48:	0800497c 	.word	0x0800497c
 8000b4c:	08004954 	.word	0x08004954
 8000b50:	0800495c 	.word	0x0800495c
 8000b54:	08004994 	.word	0x08004994
 8000b58:	080049a4 	.word	0x080049a4
 8000b5c:	080049c0 	.word	0x080049c0

08000b60 <swtimerInit>:




bool swtimerInit(void)
{
 8000b60:	b510      	push	{r4, lr}
  for(int i=0;i<SWTIMER_MAX_CH;i++)
 8000b62:	2200      	movs	r2, #0
 8000b64:	e00a      	b.n	8000b7c <swtimerInit+0x1c>
  {
    swtimer_tbl[i].enable = false;
 8000b66:	4b09      	ldr	r3, [pc, #36]	@ (8000b8c <swtimerInit+0x2c>)
 8000b68:	0091      	lsls	r1, r2, #2
 8000b6a:	1888      	adds	r0, r1, r2
 8000b6c:	0084      	lsls	r4, r0, #2
 8000b6e:	2000      	movs	r0, #0
 8000b70:	54e0      	strb	r0, [r4, r3]
    swtimer_tbl[i].counter = 0;
 8000b72:	191b      	adds	r3, r3, r4
 8000b74:	6058      	str	r0, [r3, #4]
    swtimer_tbl[i].func = NULL;
 8000b76:	60d8      	str	r0, [r3, #12]
    swtimer_tbl[i].func_arg = NULL;
 8000b78:	6118      	str	r0, [r3, #16]
  for(int i=0;i<SWTIMER_MAX_CH;i++)
 8000b7a:	3201      	adds	r2, #1
 8000b7c:	2a07      	cmp	r2, #7
 8000b7e:	ddf2      	ble.n	8000b66 <swtimerInit+0x6>

  }
  HAL_TIM_Base_Start_IT(&htim14);
 8000b80:	4803      	ldr	r0, [pc, #12]	@ (8000b90 <swtimerInit+0x30>)
 8000b82:	f001 ffc3 	bl	8002b0c <HAL_TIM_Base_Start_IT>

  return true;
}
 8000b86:	2001      	movs	r0, #1
 8000b88:	bd10      	pop	{r4, pc}
 8000b8a:	46c0      	nop			@ (mov r8, r8)
 8000b8c:	2000018c 	.word	0x2000018c
 8000b90:	20000424 	.word	0x20000424

08000b94 <swtimerGetCh>:

bool swtimerGetCh(uint8_t *p_ch)
{
  if(swtimer_count >= SWTIMER_MAX_CH)
 8000b94:	4b05      	ldr	r3, [pc, #20]	@ (8000bac <swtimerGetCh+0x18>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	2b07      	cmp	r3, #7
 8000b9a:	d805      	bhi.n	8000ba8 <swtimerGetCh+0x14>
    return false;

  *p_ch  = swtimer_count;
 8000b9c:	7003      	strb	r3, [r0, #0]

  swtimer_count++;
 8000b9e:	4a03      	ldr	r2, [pc, #12]	@ (8000bac <swtimerGetCh+0x18>)
 8000ba0:	3301      	adds	r3, #1
 8000ba2:	7013      	strb	r3, [r2, #0]

  return true;
 8000ba4:	2001      	movs	r0, #1
}
 8000ba6:	4770      	bx	lr
    return false;
 8000ba8:	2000      	movs	r0, #0
 8000baa:	e7fc      	b.n	8000ba6 <swtimerGetCh+0x12>
 8000bac:	2000022c 	.word	0x2000022c

08000bb0 <swtimerSet>:
bool swtimerSet(uint8_t ch,
                void (*func)(void *arg),
                void *func_arg,
                SwtimerMode_t mode,
                uint32_t time_ms)
{
 8000bb0:	b570      	push	{r4, r5, r6, lr}
  if(ch >= SWTIMER_MAX_CH)
 8000bb2:	2807      	cmp	r0, #7
 8000bb4:	d810      	bhi.n	8000bd8 <swtimerSet+0x28>
     return false;

  swtimer_tbl[ch].func = func;
 8000bb6:	4e09      	ldr	r6, [pc, #36]	@ (8000bdc <swtimerSet+0x2c>)
 8000bb8:	0085      	lsls	r5, r0, #2
 8000bba:	182c      	adds	r4, r5, r0
 8000bbc:	00a4      	lsls	r4, r4, #2
 8000bbe:	1934      	adds	r4, r6, r4
 8000bc0:	60e1      	str	r1, [r4, #12]
  swtimer_tbl[ch].func_arg =func_arg;
 8000bc2:	6122      	str	r2, [r4, #16]
  swtimer_tbl[ch].mode = mode;
 8000bc4:	7063      	strb	r3, [r4, #1]
  swtimer_tbl[ch].counter = 0;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	6063      	str	r3, [r4, #4]
  swtimer_tbl[ch].reload = time_ms;
 8000bca:	9a04      	ldr	r2, [sp, #16]
 8000bcc:	60a2      	str	r2, [r4, #8]
  swtimer_tbl[ch].enable = false;
 8000bce:	182d      	adds	r5, r5, r0
 8000bd0:	00ad      	lsls	r5, r5, #2
 8000bd2:	55ab      	strb	r3, [r5, r6]


  return true;
 8000bd4:	2001      	movs	r0, #1
}
 8000bd6:	bd70      	pop	{r4, r5, r6, pc}
     return false;
 8000bd8:	2000      	movs	r0, #0
 8000bda:	e7fc      	b.n	8000bd6 <swtimerSet+0x26>
 8000bdc:	2000018c 	.word	0x2000018c

08000be0 <swtimerStart>:


bool swtimerStart(uint8_t ch)
{
 8000be0:	b510      	push	{r4, lr}
  if(swtimer_count >= SWTIMER_MAX_CH)
 8000be2:	4b09      	ldr	r3, [pc, #36]	@ (8000c08 <swtimerStart+0x28>)
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	2b07      	cmp	r3, #7
 8000be8:	d80c      	bhi.n	8000c04 <swtimerStart+0x24>
     return false;

  swtimer_tbl[ch].counter = 0;
 8000bea:	4908      	ldr	r1, [pc, #32]	@ (8000c0c <swtimerStart+0x2c>)
 8000bec:	0083      	lsls	r3, r0, #2
 8000bee:	181a      	adds	r2, r3, r0
 8000bf0:	0092      	lsls	r2, r2, #2
 8000bf2:	188a      	adds	r2, r1, r2
 8000bf4:	2400      	movs	r4, #0
 8000bf6:	6054      	str	r4, [r2, #4]
  swtimer_tbl[ch].enable = true;
 8000bf8:	181b      	adds	r3, r3, r0
 8000bfa:	009b      	lsls	r3, r3, #2
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	545a      	strb	r2, [r3, r1]

  return true;
 8000c00:	2001      	movs	r0, #1
}
 8000c02:	bd10      	pop	{r4, pc}
     return false;
 8000c04:	2000      	movs	r0, #0
 8000c06:	e7fc      	b.n	8000c02 <swtimerStart+0x22>
 8000c08:	2000022c 	.word	0x2000022c
 8000c0c:	2000018c 	.word	0x2000018c

08000c10 <swtimerISR>:
   return true;
}


void swtimerISR(void)
{
 8000c10:	b510      	push	{r4, lr}
  for(int i=0;i<swtimer_count;i++)
 8000c12:	2400      	movs	r4, #0
 8000c14:	e000      	b.n	8000c18 <swtimerISR+0x8>
 8000c16:	3401      	adds	r4, #1
 8000c18:	4b16      	ldr	r3, [pc, #88]	@ (8000c74 <swtimerISR+0x64>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	42a3      	cmp	r3, r4
 8000c1e:	dd28      	ble.n	8000c72 <swtimerISR+0x62>
  {
    if(swtimer_tbl[i].enable == true)
 8000c20:	4a15      	ldr	r2, [pc, #84]	@ (8000c78 <swtimerISR+0x68>)
 8000c22:	00a3      	lsls	r3, r4, #2
 8000c24:	191b      	adds	r3, r3, r4
 8000c26:	0099      	lsls	r1, r3, #2
 8000c28:	5c8b      	ldrb	r3, [r1, r2]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d0f3      	beq.n	8000c16 <swtimerISR+0x6>
    {
      swtimer_tbl[i].counter++;
 8000c2e:	0013      	movs	r3, r2
 8000c30:	185b      	adds	r3, r3, r1
 8000c32:	685a      	ldr	r2, [r3, #4]
 8000c34:	3201      	adds	r2, #1
 8000c36:	605a      	str	r2, [r3, #4]
      if(swtimer_tbl[i].counter >= swtimer_tbl[i].reload)
 8000c38:	689b      	ldr	r3, [r3, #8]
 8000c3a:	429a      	cmp	r2, r3
 8000c3c:	d3eb      	bcc.n	8000c16 <swtimerISR+0x6>
      {
        if(swtimer_tbl[i].func != NULL)
 8000c3e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c78 <swtimerISR+0x68>)
 8000c40:	185b      	adds	r3, r3, r1
 8000c42:	68d9      	ldr	r1, [r3, #12]
 8000c44:	2900      	cmp	r1, #0
 8000c46:	d006      	beq.n	8000c56 <swtimerISR+0x46>
        {
          swtimer_tbl[i].func(swtimer_tbl[i].func_arg);
 8000c48:	4b0b      	ldr	r3, [pc, #44]	@ (8000c78 <swtimerISR+0x68>)
 8000c4a:	00a2      	lsls	r2, r4, #2
 8000c4c:	1912      	adds	r2, r2, r4
 8000c4e:	0090      	lsls	r0, r2, #2
 8000c50:	181b      	adds	r3, r3, r0
 8000c52:	6918      	ldr	r0, [r3, #16]
 8000c54:	4788      	blx	r1
        }
        swtimer_tbl[i].counter = 0;
 8000c56:	4b08      	ldr	r3, [pc, #32]	@ (8000c78 <swtimerISR+0x68>)
 8000c58:	00a2      	lsls	r2, r4, #2
 8000c5a:	1912      	adds	r2, r2, r4
 8000c5c:	0091      	lsls	r1, r2, #2
 8000c5e:	185b      	adds	r3, r3, r1
 8000c60:	2200      	movs	r2, #0
 8000c62:	605a      	str	r2, [r3, #4]
        if(swtimer_tbl[i].mode == SWTIMER_ONETIME)
 8000c64:	785b      	ldrb	r3, [r3, #1]
 8000c66:	2b01      	cmp	r3, #1
 8000c68:	d1d5      	bne.n	8000c16 <swtimerISR+0x6>
        {
          swtimer_tbl[i].enable = false;
 8000c6a:	4a03      	ldr	r2, [pc, #12]	@ (8000c78 <swtimerISR+0x68>)
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	548b      	strb	r3, [r1, r2]
 8000c70:	e7d1      	b.n	8000c16 <swtimerISR+0x6>
        }
      }
    }
  }

}
 8000c72:	bd10      	pop	{r4, pc}
 8000c74:	2000022c 	.word	0x2000022c
 8000c78:	2000018c 	.word	0x2000018c

08000c7c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c7c:	b510      	push	{r4, lr}
  //1ms 호출 됨
  if(htim == &htim14)
 8000c7e:	4b03      	ldr	r3, [pc, #12]	@ (8000c8c <HAL_TIM_PeriodElapsedCallback+0x10>)
 8000c80:	4283      	cmp	r3, r0
 8000c82:	d000      	beq.n	8000c86 <HAL_TIM_PeriodElapsedCallback+0xa>
  {
    swtimerISR();
  }
  return;

}
 8000c84:	bd10      	pop	{r4, pc}
    swtimerISR();
 8000c86:	f7ff ffc3 	bl	8000c10 <swtimerISR>
  return;
 8000c8a:	e7fb      	b.n	8000c84 <HAL_TIM_PeriodElapsedCallback+0x8>
 8000c8c:	20000424 	.word	0x20000424

08000c90 <uartInit>:
static uint16_t q_out = 0;
static uint8_t q_buf[UART_Q_BUF_MAX];


bool     uartInit(void)
{
 8000c90:	b510      	push	{r4, lr}
  HAL_UART_Receive_DMA(&huart1, &q_buf[0] , UART_Q_BUF_MAX);
 8000c92:	2280      	movs	r2, #128	@ 0x80
 8000c94:	4903      	ldr	r1, [pc, #12]	@ (8000ca4 <uartInit+0x14>)
 8000c96:	4804      	ldr	r0, [pc, #16]	@ (8000ca8 <uartInit+0x18>)
 8000c98:	0052      	lsls	r2, r2, #1
 8000c9a:	f002 ff83 	bl	8003ba4 <HAL_UART_Receive_DMA>
  return true;
}
 8000c9e:	2001      	movs	r0, #1
 8000ca0:	bd10      	pop	{r4, pc}
 8000ca2:	46c0      	nop			@ (mov r8, r8)
 8000ca4:	20000230 	.word	0x20000230
 8000ca8:	20000390 	.word	0x20000390

08000cac <uartWrite>:

uint32_t uartWrite(uint8_t ch,uint8_t* p_data,uint32_t length)
{
 8000cac:	b510      	push	{r4, lr}
 8000cae:	0014      	movs	r4, r2
  uint32_t ret = 0;
  HAL_StatusTypeDef hal_ret;


  switch(ch)
 8000cb0:	2800      	cmp	r0, #0
 8000cb2:	d001      	beq.n	8000cb8 <uartWrite+0xc>
  uint32_t ret = 0;
 8000cb4:	2000      	movs	r0, #0
      }
      break;
  }

  return ret;
}
 8000cb6:	bd10      	pop	{r4, pc}
      hal_ret = HAL_UART_Transmit(&huart1, p_data, length, 100);
 8000cb8:	b292      	uxth	r2, r2
 8000cba:	4805      	ldr	r0, [pc, #20]	@ (8000cd0 <uartWrite+0x24>)
 8000cbc:	2364      	movs	r3, #100	@ 0x64
 8000cbe:	f002 fdf6 	bl	80038ae <HAL_UART_Transmit>
      if(hal_ret == HAL_OK)
 8000cc2:	2800      	cmp	r0, #0
 8000cc4:	d001      	beq.n	8000cca <uartWrite+0x1e>
  uint32_t ret = 0;
 8000cc6:	2000      	movs	r0, #0
 8000cc8:	e7f5      	b.n	8000cb6 <uartWrite+0xa>
        ret = length;
 8000cca:	0020      	movs	r0, r4
  return ret;
 8000ccc:	e7f3      	b.n	8000cb6 <uartWrite+0xa>
 8000cce:	46c0      	nop			@ (mov r8, r8)
 8000cd0:	20000390 	.word	0x20000390

08000cd4 <uartAvailable>:

uint32_t uartAvailable(uint8_t ch)
{
  uint32_t ret = 0;

  switch(ch)
 8000cd4:	2800      	cmp	r0, #0
 8000cd6:	d116      	bne.n	8000d06 <uartAvailable+0x32>
  {
    case _DEF_CH1:
      q_in = (UART_Q_BUF_MAX - huart1.hdmarx->Instance->CNDTR) % UART_Q_BUF_MAX;
 8000cd8:	4b0c      	ldr	r3, [pc, #48]	@ (8000d0c <uartAvailable+0x38>)
 8000cda:	2280      	movs	r2, #128	@ 0x80
 8000cdc:	589b      	ldr	r3, [r3, r2]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	685a      	ldr	r2, [r3, #4]
 8000ce2:	b292      	uxth	r2, r2
 8000ce4:	4252      	negs	r2, r2
 8000ce6:	23ff      	movs	r3, #255	@ 0xff
 8000ce8:	4013      	ands	r3, r2
 8000cea:	4a09      	ldr	r2, [pc, #36]	@ (8000d10 <uartAvailable+0x3c>)
 8000cec:	8013      	strh	r3, [r2, #0]
      ret = (UART_Q_BUF_MAX + q_in - q_out) % UART_Q_BUF_MAX;
 8000cee:	3301      	adds	r3, #1
 8000cf0:	33ff      	adds	r3, #255	@ 0xff
 8000cf2:	4a08      	ldr	r2, [pc, #32]	@ (8000d14 <uartAvailable+0x40>)
 8000cf4:	8812      	ldrh	r2, [r2, #0]
 8000cf6:	1a9b      	subs	r3, r3, r2
 8000cf8:	17da      	asrs	r2, r3, #31
 8000cfa:	0e12      	lsrs	r2, r2, #24
 8000cfc:	189b      	adds	r3, r3, r2
 8000cfe:	30ff      	adds	r0, #255	@ 0xff
 8000d00:	4018      	ands	r0, r3
 8000d02:	1a80      	subs	r0, r0, r2
      break;
  }

  return ret;
}
 8000d04:	4770      	bx	lr
  uint32_t ret = 0;
 8000d06:	2000      	movs	r0, #0
  return ret;
 8000d08:	e7fc      	b.n	8000d04 <uartAvailable+0x30>
 8000d0a:	46c0      	nop			@ (mov r8, r8)
 8000d0c:	20000390 	.word	0x20000390
 8000d10:	20000332 	.word	0x20000332
 8000d14:	20000330 	.word	0x20000330

08000d18 <uartRead>:

uint8_t  uartRead(uint8_t ch)
{
  uint8_t ret = 0;

  switch(ch)
 8000d18:	2800      	cmp	r0, #0
 8000d1a:	d10d      	bne.n	8000d38 <uartRead+0x20>
  {
    case _DEF_CH1:
      if( q_out != q_in)
 8000d1c:	4b07      	ldr	r3, [pc, #28]	@ (8000d3c <uartRead+0x24>)
 8000d1e:	881b      	ldrh	r3, [r3, #0]
 8000d20:	4a07      	ldr	r2, [pc, #28]	@ (8000d40 <uartRead+0x28>)
 8000d22:	8812      	ldrh	r2, [r2, #0]
 8000d24:	4293      	cmp	r3, r2
 8000d26:	d008      	beq.n	8000d3a <uartRead+0x22>
      {
        ret = q_buf[q_out];
 8000d28:	4a06      	ldr	r2, [pc, #24]	@ (8000d44 <uartRead+0x2c>)
 8000d2a:	5cd0      	ldrb	r0, [r2, r3]
        q_out = (q_out+1) % UART_Q_BUF_MAX;
 8000d2c:	3301      	adds	r3, #1
 8000d2e:	22ff      	movs	r2, #255	@ 0xff
 8000d30:	4013      	ands	r3, r2
 8000d32:	4a02      	ldr	r2, [pc, #8]	@ (8000d3c <uartRead+0x24>)
 8000d34:	8013      	strh	r3, [r2, #0]
 8000d36:	e000      	b.n	8000d3a <uartRead+0x22>
  uint8_t ret = 0;
 8000d38:	2000      	movs	r0, #0
      break;
  }


  return ret;
}
 8000d3a:	4770      	bx	lr
 8000d3c:	20000330 	.word	0x20000330
 8000d40:	20000332 	.word	0x20000332
 8000d44:	20000230 	.word	0x20000230

08000d48 <uartPrintf>:


uint32_t uartPrintf(uint8_t ch,const char *fmt, ...)
{
 8000d48:	b40e      	push	{r1, r2, r3}
 8000d4a:	b510      	push	{r4, lr}
 8000d4c:	b0c3      	sub	sp, #268	@ 0x10c
 8000d4e:	0004      	movs	r4, r0
 8000d50:	ab45      	add	r3, sp, #276	@ 0x114
 8000d52:	cb04      	ldmia	r3!, {r2}
  uint32_t ret = 0;
  va_list arg;
  char print_buf[256];

  va_start(arg,fmt);
 8000d54:	9341      	str	r3, [sp, #260]	@ 0x104

  int len;
  len = vsnprintf(print_buf,256,fmt,arg);
 8000d56:	2180      	movs	r1, #128	@ 0x80
 8000d58:	0049      	lsls	r1, r1, #1
 8000d5a:	a801      	add	r0, sp, #4
 8000d5c:	f003 f8ac 	bl	8003eb8 <vsniprintf>
 8000d60:	1e02      	subs	r2, r0, #0

  va_end(arg);

  if(len>0)
 8000d62:	dc05      	bgt.n	8000d70 <uartPrintf+0x28>
  uint32_t ret = 0;
 8000d64:	2000      	movs	r0, #0
  {
    ret = uartWrite(ch,(uint8_t *)print_buf,len);
  }

  return ret;
}
 8000d66:	b043      	add	sp, #268	@ 0x10c
 8000d68:	bc10      	pop	{r4}
 8000d6a:	bc08      	pop	{r3}
 8000d6c:	b003      	add	sp, #12
 8000d6e:	4718      	bx	r3
    ret = uartWrite(ch,(uint8_t *)print_buf,len);
 8000d70:	a901      	add	r1, sp, #4
 8000d72:	0020      	movs	r0, r4
 8000d74:	f7ff ff9a 	bl	8000cac <uartWrite>
 8000d78:	e7f5      	b.n	8000d66 <uartPrintf+0x1e>

08000d7a <uartVPrintf>:


uint32_t uartVPrintf(uint8_t ch,const char *fmt, va_list arg)
{
 8000d7a:	b510      	push	{r4, lr}
 8000d7c:	b0c0      	sub	sp, #256	@ 0x100
 8000d7e:	0004      	movs	r4, r0
 8000d80:	0013      	movs	r3, r2
  uint32_t ret = 0;
  char print_buf[256];

  int len;
  len = vsnprintf(print_buf,256,fmt,arg);
 8000d82:	2080      	movs	r0, #128	@ 0x80
 8000d84:	000a      	movs	r2, r1
 8000d86:	0041      	lsls	r1, r0, #1
 8000d88:	4668      	mov	r0, sp
 8000d8a:	f003 f895 	bl	8003eb8 <vsniprintf>
 8000d8e:	1e02      	subs	r2, r0, #0

  if(len>0)
 8000d90:	dc02      	bgt.n	8000d98 <uartVPrintf+0x1e>
  uint32_t ret = 0;
 8000d92:	2000      	movs	r0, #0
  {
    ret = uartWrite(ch,(uint8_t *)print_buf,len);
  }

  return ret;
}
 8000d94:	b040      	add	sp, #256	@ 0x100
 8000d96:	bd10      	pop	{r4, pc}
    ret = uartWrite(ch,(uint8_t *)print_buf,len);
 8000d98:	4669      	mov	r1, sp
 8000d9a:	0020      	movs	r0, r4
 8000d9c:	f7ff ff86 	bl	8000cac <uartWrite>
 8000da0:	e7f8      	b.n	8000d94 <uartVPrintf+0x1a>

08000da2 <delay>:
#include "utils.h"



void delay(uint32_t time_ms)
{
 8000da2:	b510      	push	{r4, lr}
  HAL_Delay(time_ms);
 8000da4:	f000 fc5a 	bl	800165c <HAL_Delay>
}
 8000da8:	bd10      	pop	{r4, pc}

08000daa <millis>:

uint32_t millis(void)
{
 8000daa:	b510      	push	{r4, lr}
  return HAL_GetTick();
 8000dac:	f000 fc50 	bl	8001650 <HAL_GetTick>
}
 8000db0:	bd10      	pop	{r4, pc}
	...

08000db4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000db4:	b082      	sub	sp, #8

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000db6:	4a05      	ldr	r2, [pc, #20]	@ (8000dcc <MX_DMA_Init+0x18>)
 8000db8:	6b91      	ldr	r1, [r2, #56]	@ 0x38
 8000dba:	2301      	movs	r3, #1
 8000dbc:	4319      	orrs	r1, r3
 8000dbe:	6391      	str	r1, [r2, #56]	@ 0x38
 8000dc0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8000dc2:	4013      	ands	r3, r2
 8000dc4:	9301      	str	r3, [sp, #4]
 8000dc6:	9b01      	ldr	r3, [sp, #4]

}
 8000dc8:	b002      	add	sp, #8
 8000dca:	4770      	bx	lr
 8000dcc:	40021000 	.word	0x40021000

08000dd0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dd0:	b084      	sub	sp, #16
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dd2:	4b0d      	ldr	r3, [pc, #52]	@ (8000e08 <MX_GPIO_Init+0x38>)
 8000dd4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000dd6:	2204      	movs	r2, #4
 8000dd8:	4311      	orrs	r1, r2
 8000dda:	6359      	str	r1, [r3, #52]	@ 0x34
 8000ddc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000dde:	400a      	ands	r2, r1
 8000de0:	9201      	str	r2, [sp, #4]
 8000de2:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000de6:	2201      	movs	r2, #1
 8000de8:	4311      	orrs	r1, r2
 8000dea:	6359      	str	r1, [r3, #52]	@ 0x34
 8000dec:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000dee:	400a      	ands	r2, r1
 8000df0:	9202      	str	r2, [sp, #8]
 8000df2:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000df4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000df6:	2202      	movs	r2, #2
 8000df8:	4311      	orrs	r1, r2
 8000dfa:	6359      	str	r1, [r3, #52]	@ 0x34
 8000dfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000dfe:	401a      	ands	r2, r3
 8000e00:	9203      	str	r2, [sp, #12]
 8000e02:	9b03      	ldr	r3, [sp, #12]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000e04:	b004      	add	sp, #16
 8000e06:	4770      	bx	lr
 8000e08:	40021000 	.word	0x40021000

08000e0c <Error_Handler>:
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e0c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e0e:	e7fe      	b.n	8000e0e <Error_Handler+0x2>

08000e10 <MX_TIM1_Init>:
{
 8000e10:	b500      	push	{lr}
 8000e12:	b09d      	sub	sp, #116	@ 0x74
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e14:	2210      	movs	r2, #16
 8000e16:	2100      	movs	r1, #0
 8000e18:	a818      	add	r0, sp, #96	@ 0x60
 8000e1a:	f003 f859 	bl	8003ed0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e1e:	220c      	movs	r2, #12
 8000e20:	2100      	movs	r1, #0
 8000e22:	a815      	add	r0, sp, #84	@ 0x54
 8000e24:	f003 f854 	bl	8003ed0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e28:	221c      	movs	r2, #28
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	a80e      	add	r0, sp, #56	@ 0x38
 8000e2e:	f003 f84f 	bl	8003ed0 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e32:	2234      	movs	r2, #52	@ 0x34
 8000e34:	2100      	movs	r1, #0
 8000e36:	a801      	add	r0, sp, #4
 8000e38:	f003 f84a 	bl	8003ed0 <memset>
  htim1.Instance = TIM1;
 8000e3c:	4830      	ldr	r0, [pc, #192]	@ (8000f00 <MX_TIM1_Init+0xf0>)
 8000e3e:	4b31      	ldr	r3, [pc, #196]	@ (8000f04 <MX_TIM1_Init+0xf4>)
 8000e40:	6003      	str	r3, [r0, #0]
  htim1.Init.Prescaler = 47;
 8000e42:	232f      	movs	r3, #47	@ 0x2f
 8000e44:	6043      	str	r3, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e46:	2300      	movs	r3, #0
 8000e48:	6083      	str	r3, [r0, #8]
  htim1.Init.Period = 99;
 8000e4a:	2263      	movs	r2, #99	@ 0x63
 8000e4c:	60c2      	str	r2, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e4e:	6103      	str	r3, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e50:	6143      	str	r3, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e52:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e54:	f001 ff8a 	bl	8002d6c <HAL_TIM_Base_Init>
 8000e58:	2800      	cmp	r0, #0
 8000e5a:	d144      	bne.n	8000ee6 <MX_TIM1_Init+0xd6>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e5c:	2380      	movs	r3, #128	@ 0x80
 8000e5e:	015b      	lsls	r3, r3, #5
 8000e60:	9318      	str	r3, [sp, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000e62:	4827      	ldr	r0, [pc, #156]	@ (8000f00 <MX_TIM1_Init+0xf0>)
 8000e64:	a918      	add	r1, sp, #96	@ 0x60
 8000e66:	f002 f8cb 	bl	8003000 <HAL_TIM_ConfigClockSource>
 8000e6a:	2800      	cmp	r0, #0
 8000e6c:	d13d      	bne.n	8000eea <MX_TIM1_Init+0xda>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000e6e:	4824      	ldr	r0, [pc, #144]	@ (8000f00 <MX_TIM1_Init+0xf0>)
 8000e70:	f001 ffac 	bl	8002dcc <HAL_TIM_PWM_Init>
 8000e74:	2800      	cmp	r0, #0
 8000e76:	d13a      	bne.n	8000eee <MX_TIM1_Init+0xde>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	9315      	str	r3, [sp, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000e7c:	9316      	str	r3, [sp, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e7e:	9317      	str	r3, [sp, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e80:	481f      	ldr	r0, [pc, #124]	@ (8000f00 <MX_TIM1_Init+0xf0>)
 8000e82:	a915      	add	r1, sp, #84	@ 0x54
 8000e84:	f002 f9e0 	bl	8003248 <HAL_TIMEx_MasterConfigSynchronization>
 8000e88:	2800      	cmp	r0, #0
 8000e8a:	d132      	bne.n	8000ef2 <MX_TIM1_Init+0xe2>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e8c:	2360      	movs	r3, #96	@ 0x60
 8000e8e:	930e      	str	r3, [sp, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000e90:	2300      	movs	r3, #0
 8000e92:	930f      	str	r3, [sp, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e94:	9310      	str	r3, [sp, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e96:	9311      	str	r3, [sp, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e98:	9312      	str	r3, [sp, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e9a:	9313      	str	r3, [sp, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e9c:	9314      	str	r3, [sp, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e9e:	4818      	ldr	r0, [pc, #96]	@ (8000f00 <MX_TIM1_Init+0xf0>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	a90e      	add	r1, sp, #56	@ 0x38
 8000ea4:	f001 fffe 	bl	8002ea4 <HAL_TIM_PWM_ConfigChannel>
 8000ea8:	2800      	cmp	r0, #0
 8000eaa:	d124      	bne.n	8000ef6 <MX_TIM1_Init+0xe6>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000eac:	2300      	movs	r3, #0
 8000eae:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000eb0:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000eb2:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000eb4:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000eb6:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000eb8:	2280      	movs	r2, #128	@ 0x80
 8000eba:	0192      	lsls	r2, r2, #6
 8000ebc:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000ebe:	9307      	str	r3, [sp, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000ec0:	9308      	str	r3, [sp, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000ec2:	9309      	str	r3, [sp, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000ec4:	2280      	movs	r2, #128	@ 0x80
 8000ec6:	0492      	lsls	r2, r2, #18
 8000ec8:	920a      	str	r2, [sp, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000eca:	930b      	str	r3, [sp, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000ecc:	930c      	str	r3, [sp, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ece:	930d      	str	r3, [sp, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ed0:	480b      	ldr	r0, [pc, #44]	@ (8000f00 <MX_TIM1_Init+0xf0>)
 8000ed2:	a901      	add	r1, sp, #4
 8000ed4:	f002 f9f0 	bl	80032b8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ed8:	2800      	cmp	r0, #0
 8000eda:	d10e      	bne.n	8000efa <MX_TIM1_Init+0xea>
  HAL_TIM_MspPostInit(&htim1);
 8000edc:	4808      	ldr	r0, [pc, #32]	@ (8000f00 <MX_TIM1_Init+0xf0>)
 8000ede:	f000 fa8d 	bl	80013fc <HAL_TIM_MspPostInit>
}
 8000ee2:	b01d      	add	sp, #116	@ 0x74
 8000ee4:	bd00      	pop	{pc}
    Error_Handler();
 8000ee6:	f7ff ff91 	bl	8000e0c <Error_Handler>
    Error_Handler();
 8000eea:	f7ff ff8f 	bl	8000e0c <Error_Handler>
    Error_Handler();
 8000eee:	f7ff ff8d 	bl	8000e0c <Error_Handler>
    Error_Handler();
 8000ef2:	f7ff ff8b 	bl	8000e0c <Error_Handler>
    Error_Handler();
 8000ef6:	f7ff ff89 	bl	8000e0c <Error_Handler>
    Error_Handler();
 8000efa:	f7ff ff87 	bl	8000e0c <Error_Handler>
 8000efe:	46c0      	nop			@ (mov r8, r8)
 8000f00:	20000470 	.word	0x20000470
 8000f04:	40012c00 	.word	0x40012c00

08000f08 <MX_ADC1_Init>:
{
 8000f08:	b500      	push	{lr}
 8000f0a:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f0c:	220c      	movs	r2, #12
 8000f0e:	2100      	movs	r1, #0
 8000f10:	a801      	add	r0, sp, #4
 8000f12:	f002 ffdd 	bl	8003ed0 <memset>
  hadc1.Instance = ADC1;
 8000f16:	4828      	ldr	r0, [pc, #160]	@ (8000fb8 <MX_ADC1_Init+0xb0>)
 8000f18:	4b28      	ldr	r3, [pc, #160]	@ (8000fbc <MX_ADC1_Init+0xb4>)
 8000f1a:	6003      	str	r3, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000f1c:	2380      	movs	r3, #128	@ 0x80
 8000f1e:	05db      	lsls	r3, r3, #23
 8000f20:	6043      	str	r3, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f22:	2300      	movs	r3, #0
 8000f24:	6083      	str	r3, [r0, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f26:	60c3      	str	r3, [r0, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000f28:	2280      	movs	r2, #128	@ 0x80
 8000f2a:	0392      	lsls	r2, r2, #14
 8000f2c:	6102      	str	r2, [r0, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f2e:	2204      	movs	r2, #4
 8000f30:	6142      	str	r2, [r0, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f32:	7603      	strb	r3, [r0, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000f34:	7643      	strb	r3, [r0, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000f36:	3a03      	subs	r2, #3
 8000f38:	7682      	strb	r2, [r0, #26]
  hadc1.Init.NbrOfConversion = 3;
 8000f3a:	2103      	movs	r1, #3
 8000f3c:	61c1      	str	r1, [r0, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f3e:	6243      	str	r3, [r0, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f40:	6283      	str	r3, [r0, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000f42:	3129      	adds	r1, #41	@ 0x29
 8000f44:	5442      	strb	r2, [r0, r1]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f46:	6303      	str	r3, [r0, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8000f48:	3925      	subs	r1, #37	@ 0x25
 8000f4a:	6341      	str	r1, [r0, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000f4c:	6383      	str	r3, [r0, #56]	@ 0x38
  hadc1.Init.OversamplingMode = ENABLE;
 8000f4e:	3135      	adds	r1, #53	@ 0x35
 8000f50:	5442      	strb	r2, [r0, r1]
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_8;
 8000f52:	3207      	adds	r2, #7
 8000f54:	6402      	str	r2, [r0, #64]	@ 0x40
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_3;
 8000f56:	3258      	adds	r2, #88	@ 0x58
 8000f58:	6442      	str	r2, [r0, #68]	@ 0x44
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8000f5a:	6483      	str	r3, [r0, #72]	@ 0x48
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000f5c:	64c3      	str	r3, [r0, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f5e:	f000 fb8f 	bl	8001680 <HAL_ADC_Init>
 8000f62:	2800      	cmp	r0, #0
 8000f64:	d120      	bne.n	8000fa8 <MX_ADC1_Init+0xa0>
  sConfig.Channel = ADC_CHANNEL_4;
 8000f66:	4b16      	ldr	r3, [pc, #88]	@ (8000fc0 <MX_ADC1_Init+0xb8>)
 8000f68:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000f6e:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f70:	4811      	ldr	r0, [pc, #68]	@ (8000fb8 <MX_ADC1_Init+0xb0>)
 8000f72:	a901      	add	r1, sp, #4
 8000f74:	f000 fcfa 	bl	800196c <HAL_ADC_ConfigChannel>
 8000f78:	2800      	cmp	r0, #0
 8000f7a:	d117      	bne.n	8000fac <MX_ADC1_Init+0xa4>
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000f7c:	4b11      	ldr	r3, [pc, #68]	@ (8000fc4 <MX_ADC1_Init+0xbc>)
 8000f7e:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000f80:	2304      	movs	r3, #4
 8000f82:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f84:	480c      	ldr	r0, [pc, #48]	@ (8000fb8 <MX_ADC1_Init+0xb0>)
 8000f86:	a901      	add	r1, sp, #4
 8000f88:	f000 fcf0 	bl	800196c <HAL_ADC_ConfigChannel>
 8000f8c:	2800      	cmp	r0, #0
 8000f8e:	d10f      	bne.n	8000fb0 <MX_ADC1_Init+0xa8>
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000f90:	4b0d      	ldr	r3, [pc, #52]	@ (8000fc8 <MX_ADC1_Init+0xc0>)
 8000f92:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000f94:	2308      	movs	r3, #8
 8000f96:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f98:	4807      	ldr	r0, [pc, #28]	@ (8000fb8 <MX_ADC1_Init+0xb0>)
 8000f9a:	a901      	add	r1, sp, #4
 8000f9c:	f000 fce6 	bl	800196c <HAL_ADC_ConfigChannel>
 8000fa0:	2800      	cmp	r0, #0
 8000fa2:	d107      	bne.n	8000fb4 <MX_ADC1_Init+0xac>
}
 8000fa4:	b005      	add	sp, #20
 8000fa6:	bd00      	pop	{pc}
    Error_Handler();
 8000fa8:	f7ff ff30 	bl	8000e0c <Error_Handler>
    Error_Handler();
 8000fac:	f7ff ff2e 	bl	8000e0c <Error_Handler>
    Error_Handler();
 8000fb0:	f7ff ff2c 	bl	8000e0c <Error_Handler>
    Error_Handler();
 8000fb4:	f7ff ff2a 	bl	8000e0c <Error_Handler>
 8000fb8:	20000540 	.word	0x20000540
 8000fbc:	40012400 	.word	0x40012400
 8000fc0:	10000010 	.word	0x10000010
 8000fc4:	a4000200 	.word	0xa4000200
 8000fc8:	a8000400 	.word	0xa8000400

08000fcc <MX_USART1_UART_Init>:
{
 8000fcc:	b510      	push	{r4, lr}
  huart1.Instance = USART1;
 8000fce:	4817      	ldr	r0, [pc, #92]	@ (800102c <MX_USART1_UART_Init+0x60>)
 8000fd0:	4b17      	ldr	r3, [pc, #92]	@ (8001030 <MX_USART1_UART_Init+0x64>)
 8000fd2:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8000fd4:	23e1      	movs	r3, #225	@ 0xe1
 8000fd6:	025b      	lsls	r3, r3, #9
 8000fd8:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000fde:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000fe0:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000fe2:	220c      	movs	r2, #12
 8000fe4:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fe6:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fe8:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fea:	6203      	str	r3, [r0, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000fec:	6243      	str	r3, [r0, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fee:	6283      	str	r3, [r0, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ff0:	f002 fd46 	bl	8003a80 <HAL_UART_Init>
 8000ff4:	2800      	cmp	r0, #0
 8000ff6:	d111      	bne.n	800101c <MX_USART1_UART_Init+0x50>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ff8:	480c      	ldr	r0, [pc, #48]	@ (800102c <MX_USART1_UART_Init+0x60>)
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	f002 fe4c 	bl	8003c98 <HAL_UARTEx_SetTxFifoThreshold>
 8001000:	2800      	cmp	r0, #0
 8001002:	d10d      	bne.n	8001020 <MX_USART1_UART_Init+0x54>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001004:	4809      	ldr	r0, [pc, #36]	@ (800102c <MX_USART1_UART_Init+0x60>)
 8001006:	2100      	movs	r1, #0
 8001008:	f002 fe6c 	bl	8003ce4 <HAL_UARTEx_SetRxFifoThreshold>
 800100c:	2800      	cmp	r0, #0
 800100e:	d109      	bne.n	8001024 <MX_USART1_UART_Init+0x58>
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001010:	4806      	ldr	r0, [pc, #24]	@ (800102c <MX_USART1_UART_Init+0x60>)
 8001012:	f002 fe21 	bl	8003c58 <HAL_UARTEx_DisableFifoMode>
 8001016:	2800      	cmp	r0, #0
 8001018:	d106      	bne.n	8001028 <MX_USART1_UART_Init+0x5c>
}
 800101a:	bd10      	pop	{r4, pc}
    Error_Handler();
 800101c:	f7ff fef6 	bl	8000e0c <Error_Handler>
    Error_Handler();
 8001020:	f7ff fef4 	bl	8000e0c <Error_Handler>
    Error_Handler();
 8001024:	f7ff fef2 	bl	8000e0c <Error_Handler>
    Error_Handler();
 8001028:	f7ff fef0 	bl	8000e0c <Error_Handler>
 800102c:	20000390 	.word	0x20000390
 8001030:	40013800 	.word	0x40013800

08001034 <MX_TIM14_Init>:
{
 8001034:	b510      	push	{r4, lr}
  htim14.Instance = TIM14;
 8001036:	4809      	ldr	r0, [pc, #36]	@ (800105c <MX_TIM14_Init+0x28>)
 8001038:	4b09      	ldr	r3, [pc, #36]	@ (8001060 <MX_TIM14_Init+0x2c>)
 800103a:	6003      	str	r3, [r0, #0]
  htim14.Init.Prescaler = 47;
 800103c:	232f      	movs	r3, #47	@ 0x2f
 800103e:	6043      	str	r3, [r0, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001040:	2300      	movs	r3, #0
 8001042:	6083      	str	r3, [r0, #8]
  htim14.Init.Period = 999;
 8001044:	4a07      	ldr	r2, [pc, #28]	@ (8001064 <MX_TIM14_Init+0x30>)
 8001046:	60c2      	str	r2, [r0, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001048:	6103      	str	r3, [r0, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800104a:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800104c:	f001 fe8e 	bl	8002d6c <HAL_TIM_Base_Init>
 8001050:	2800      	cmp	r0, #0
 8001052:	d100      	bne.n	8001056 <MX_TIM14_Init+0x22>
}
 8001054:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001056:	f7ff fed9 	bl	8000e0c <Error_Handler>
 800105a:	46c0      	nop			@ (mov r8, r8)
 800105c:	20000424 	.word	0x20000424
 8001060:	40002000 	.word	0x40002000
 8001064:	000003e7 	.word	0x000003e7

08001068 <MX_RTC_Init>:
{
 8001068:	b500      	push	{lr}
 800106a:	b087      	sub	sp, #28
  RTC_TimeTypeDef sTime = {0};
 800106c:	2214      	movs	r2, #20
 800106e:	2100      	movs	r1, #0
 8001070:	a801      	add	r0, sp, #4
 8001072:	f002 ff2d 	bl	8003ed0 <memset>
  RTC_DateTypeDef sDate = {0};
 8001076:	2300      	movs	r3, #0
 8001078:	9300      	str	r3, [sp, #0]
  hrtc.Instance = RTC;
 800107a:	481b      	ldr	r0, [pc, #108]	@ (80010e8 <MX_RTC_Init+0x80>)
 800107c:	4a1b      	ldr	r2, [pc, #108]	@ (80010ec <MX_RTC_Init+0x84>)
 800107e:	6002      	str	r2, [r0, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001080:	6043      	str	r3, [r0, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001082:	227f      	movs	r2, #127	@ 0x7f
 8001084:	6082      	str	r2, [r0, #8]
  hrtc.Init.SynchPrediv = 255;
 8001086:	3280      	adds	r2, #128	@ 0x80
 8001088:	60c2      	str	r2, [r0, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800108a:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800108c:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800108e:	6183      	str	r3, [r0, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001090:	2280      	movs	r2, #128	@ 0x80
 8001092:	05d2      	lsls	r2, r2, #23
 8001094:	61c2      	str	r2, [r0, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001096:	6203      	str	r3, [r0, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001098:	f001 fa7a 	bl	8002590 <HAL_RTC_Init>
 800109c:	2800      	cmp	r0, #0
 800109e:	d11d      	bne.n	80010dc <MX_RTC_Init+0x74>
  sTime.Hours = 0;
 80010a0:	a901      	add	r1, sp, #4
 80010a2:	2300      	movs	r3, #0
 80010a4:	700b      	strb	r3, [r1, #0]
  sTime.Minutes = 0;
 80010a6:	704b      	strb	r3, [r1, #1]
  sTime.Seconds = 0;
 80010a8:	708b      	strb	r3, [r1, #2]
  sTime.SubSeconds = 0;
 80010aa:	604b      	str	r3, [r1, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80010ac:	60cb      	str	r3, [r1, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80010ae:	610b      	str	r3, [r1, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80010b0:	480d      	ldr	r0, [pc, #52]	@ (80010e8 <MX_RTC_Init+0x80>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	f001 faca 	bl	800264c <HAL_RTC_SetTime>
 80010b8:	2800      	cmp	r0, #0
 80010ba:	d111      	bne.n	80010e0 <MX_RTC_Init+0x78>
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80010bc:	2301      	movs	r3, #1
 80010be:	466a      	mov	r2, sp
 80010c0:	7013      	strb	r3, [r2, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80010c2:	7053      	strb	r3, [r2, #1]
  sDate.Date = 1;
 80010c4:	7093      	strb	r3, [r2, #2]
  sDate.Year = 0;
 80010c6:	2300      	movs	r3, #0
 80010c8:	70d3      	strb	r3, [r2, #3]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80010ca:	4807      	ldr	r0, [pc, #28]	@ (80010e8 <MX_RTC_Init+0x80>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	4669      	mov	r1, sp
 80010d0:	f001 fb22 	bl	8002718 <HAL_RTC_SetDate>
 80010d4:	2800      	cmp	r0, #0
 80010d6:	d105      	bne.n	80010e4 <MX_RTC_Init+0x7c>
}
 80010d8:	b007      	add	sp, #28
 80010da:	bd00      	pop	{pc}
    Error_Handler();
 80010dc:	f7ff fe96 	bl	8000e0c <Error_Handler>
    Error_Handler();
 80010e0:	f7ff fe94 	bl	8000e0c <Error_Handler>
    Error_Handler();
 80010e4:	f7ff fe92 	bl	8000e0c <Error_Handler>
 80010e8:	200004bc 	.word	0x200004bc
 80010ec:	40002800 	.word	0x40002800

080010f0 <SystemClock_Config>:
{
 80010f0:	b510      	push	{r4, lr}
  * @rmtoll FLASH_ACR    FLASH_ACR_PRFTEN        LL_FLASH_EnablePrefetch
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_EnablePrefetch(void)
{
  SET_BIT(FLASH->ACR, FLASH_ACR_PRFTEN);
 80010f2:	492d      	ldr	r1, [pc, #180]	@ (80011a8 <SystemClock_Config+0xb8>)
 80010f4:	680b      	ldr	r3, [r1, #0]
 80010f6:	2280      	movs	r2, #128	@ 0x80
 80010f8:	0052      	lsls	r2, r2, #1
 80010fa:	4313      	orrs	r3, r2
 80010fc:	600b      	str	r3, [r1, #0]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80010fe:	680b      	ldr	r3, [r1, #0]
 8001100:	2007      	movs	r0, #7
 8001102:	4383      	bics	r3, r0
 8001104:	3806      	subs	r0, #6
 8001106:	4303      	orrs	r3, r0
 8001108:	600b      	str	r3, [r1, #0]
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800110a:	4b28      	ldr	r3, [pc, #160]	@ (80011ac <SystemClock_Config+0xbc>)
 800110c:	6819      	ldr	r1, [r3, #0]
 800110e:	430a      	orrs	r2, r1
 8001110:	601a      	str	r2, [r3, #0]
}
 8001112:	e001      	b.n	8001118 <SystemClock_Config+0x28>
  while(LL_RCC_HSI_IsReady() != 1)
 8001114:	2b01      	cmp	r3, #1
 8001116:	d009      	beq.n	800112c <SystemClock_Config+0x3c>
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001118:	4b24      	ldr	r3, [pc, #144]	@ (80011ac <SystemClock_Config+0xbc>)
 800111a:	6819      	ldr	r1, [r3, #0]
 800111c:	2280      	movs	r2, #128	@ 0x80
 800111e:	00d2      	lsls	r2, r2, #3
 8001120:	000b      	movs	r3, r1
 8001122:	4013      	ands	r3, r2
 8001124:	4211      	tst	r1, r2
 8001126:	d0f5      	beq.n	8001114 <SystemClock_Config+0x24>
 8001128:	2301      	movs	r3, #1
 800112a:	e7f3      	b.n	8001114 <SystemClock_Config+0x24>
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800112c:	4a1f      	ldr	r2, [pc, #124]	@ (80011ac <SystemClock_Config+0xbc>)
 800112e:	6850      	ldr	r0, [r2, #4]
 8001130:	491f      	ldr	r1, [pc, #124]	@ (80011b0 <SystemClock_Config+0xc0>)
 8001132:	4008      	ands	r0, r1
 8001134:	2180      	movs	r1, #128	@ 0x80
 8001136:	01c9      	lsls	r1, r1, #7
 8001138:	4301      	orrs	r1, r0
 800113a:	6051      	str	r1, [r2, #4]
  *         @arg @ref LL_RCC_HSI_DIV_128
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetHSIDiv(uint32_t HSIDiv)
{
  MODIFY_REG(RCC->CR, RCC_CR_HSIDIV, HSIDiv);
 800113c:	6811      	ldr	r1, [r2, #0]
 800113e:	481d      	ldr	r0, [pc, #116]	@ (80011b4 <SystemClock_Config+0xc4>)
 8001140:	4001      	ands	r1, r0
 8001142:	6011      	str	r1, [r2, #0]
  SET_BIT(RCC->CSR1, RCC_CSR1_LSEBYP);
 8001144:	6dd1      	ldr	r1, [r2, #92]	@ 0x5c
 8001146:	2004      	movs	r0, #4
 8001148:	4301      	orrs	r1, r0
 800114a:	65d1      	str	r1, [r2, #92]	@ 0x5c
  SET_BIT(RCC->CSR1, RCC_CSR1_LSEON);
 800114c:	6dd1      	ldr	r1, [r2, #92]	@ 0x5c
 800114e:	3803      	subs	r0, #3
 8001150:	4301      	orrs	r1, r0
 8001152:	65d1      	str	r1, [r2, #92]	@ 0x5c
}
 8001154:	e001      	b.n	800115a <SystemClock_Config+0x6a>
  while(LL_RCC_LSE_IsReady() != 1)
 8001156:	2801      	cmp	r0, #1
 8001158:	d008      	beq.n	800116c <SystemClock_Config+0x7c>
  return ((READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == (RCC_CSR1_LSERDY)) ? 1UL : 0UL);
 800115a:	4a14      	ldr	r2, [pc, #80]	@ (80011ac <SystemClock_Config+0xbc>)
 800115c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800115e:	2102      	movs	r1, #2
 8001160:	0008      	movs	r0, r1
 8001162:	4010      	ands	r0, r2
 8001164:	4211      	tst	r1, r2
 8001166:	d0f6      	beq.n	8001156 <SystemClock_Config+0x66>
 8001168:	0018      	movs	r0, r3
 800116a:	e7f4      	b.n	8001156 <SystemClock_Config+0x66>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800116c:	4b0f      	ldr	r3, [pc, #60]	@ (80011ac <SystemClock_Config+0xbc>)
 800116e:	689a      	ldr	r2, [r3, #8]
 8001170:	4911      	ldr	r1, [pc, #68]	@ (80011b8 <SystemClock_Config+0xc8>)
 8001172:	400a      	ands	r2, r1
 8001174:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001176:	689a      	ldr	r2, [r3, #8]
 8001178:	2107      	movs	r1, #7
 800117a:	438a      	bics	r2, r1
 800117c:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800117e:	4b0b      	ldr	r3, [pc, #44]	@ (80011ac <SystemClock_Config+0xbc>)
 8001180:	689b      	ldr	r3, [r3, #8]
 8001182:	2238      	movs	r2, #56	@ 0x38
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8001184:	421a      	tst	r2, r3
 8001186:	d1fa      	bne.n	800117e <SystemClock_Config+0x8e>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, Prescaler);
 8001188:	4a08      	ldr	r2, [pc, #32]	@ (80011ac <SystemClock_Config+0xbc>)
 800118a:	6893      	ldr	r3, [r2, #8]
 800118c:	490b      	ldr	r1, [pc, #44]	@ (80011bc <SystemClock_Config+0xcc>)
 800118e:	400b      	ands	r3, r1
 8001190:	6093      	str	r3, [r2, #8]
  LL_SetSystemCoreClock(48000000);
 8001192:	480b      	ldr	r0, [pc, #44]	@ (80011c0 <SystemClock_Config+0xd0>)
 8001194:	f002 fdce 	bl	8003d34 <LL_SetSystemCoreClock>
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8001198:	2000      	movs	r0, #0
 800119a:	f000 fa0d 	bl	80015b8 <HAL_InitTick>
 800119e:	2800      	cmp	r0, #0
 80011a0:	d100      	bne.n	80011a4 <SystemClock_Config+0xb4>
}
 80011a2:	bd10      	pop	{r4, pc}
    Error_Handler();
 80011a4:	f7ff fe32 	bl	8000e0c <Error_Handler>
 80011a8:	40022000 	.word	0x40022000
 80011ac:	40021000 	.word	0x40021000
 80011b0:	ffff80ff 	.word	0xffff80ff
 80011b4:	ffffc7ff 	.word	0xffffc7ff
 80011b8:	fffff0ff 	.word	0xfffff0ff
 80011bc:	ffff8fff 	.word	0xffff8fff
 80011c0:	02dc6c00 	.word	0x02dc6c00

080011c4 <main>:
{
 80011c4:	b510      	push	{r4, lr}
  HAL_Init();
 80011c6:	f000 fa23 	bl	8001610 <HAL_Init>
  SystemClock_Config();
 80011ca:	f7ff ff91 	bl	80010f0 <SystemClock_Config>
  MX_GPIO_Init();
 80011ce:	f7ff fdff 	bl	8000dd0 <MX_GPIO_Init>
  MX_DMA_Init();
 80011d2:	f7ff fdef 	bl	8000db4 <MX_DMA_Init>
  MX_TIM1_Init();
 80011d6:	f7ff fe1b 	bl	8000e10 <MX_TIM1_Init>
  MX_ADC1_Init();
 80011da:	f7ff fe95 	bl	8000f08 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 80011de:	f7ff fef5 	bl	8000fcc <MX_USART1_UART_Init>
  MX_TIM14_Init();
 80011e2:	f7ff ff27 	bl	8001034 <MX_TIM14_Init>
  MX_RTC_Init();
 80011e6:	f7ff ff3f 	bl	8001068 <MX_RTC_Init>
  apInit();
 80011ea:	f7ff f98f 	bl	800050c <apInit>
  apMain();
 80011ee:	f7ff f9c1 	bl	8000574 <apMain>
  while (1)
 80011f2:	e7fe      	b.n	80011f2 <main+0x2e>

080011f4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011f4:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001220 <HAL_MspInit+0x2c>)
 80011f8:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80011fa:	2201      	movs	r2, #1
 80011fc:	4311      	orrs	r1, r2
 80011fe:	6419      	str	r1, [r3, #64]	@ 0x40
 8001200:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8001202:	400a      	ands	r2, r1
 8001204:	9200      	str	r2, [sp, #0]
 8001206:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001208:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800120a:	2180      	movs	r1, #128	@ 0x80
 800120c:	0549      	lsls	r1, r1, #21
 800120e:	430a      	orrs	r2, r1
 8001210:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001212:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001214:	400b      	ands	r3, r1
 8001216:	9301      	str	r3, [sp, #4]
 8001218:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800121a:	b002      	add	sp, #8
 800121c:	4770      	bx	lr
 800121e:	46c0      	nop			@ (mov r8, r8)
 8001220:	40021000 	.word	0x40021000

08001224 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001224:	b510      	push	{r4, lr}
 8001226:	b088      	sub	sp, #32
 8001228:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800122a:	2214      	movs	r2, #20
 800122c:	2100      	movs	r1, #0
 800122e:	a803      	add	r0, sp, #12
 8001230:	f002 fe4e 	bl	8003ed0 <memset>
  if(hadc->Instance==ADC1)
 8001234:	6822      	ldr	r2, [r4, #0]
 8001236:	4b20      	ldr	r3, [pc, #128]	@ (80012b8 <HAL_ADC_MspInit+0x94>)
 8001238:	429a      	cmp	r2, r3
 800123a:	d001      	beq.n	8001240 <HAL_ADC_MspInit+0x1c>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800123c:	b008      	add	sp, #32
 800123e:	bd10      	pop	{r4, pc}
  *         @arg @ref LL_RCC_ADC_CLKSOURCE_HSIKER
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetADCClockSource(uint32_t ADCxSource)
{
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8001240:	4b1e      	ldr	r3, [pc, #120]	@ (80012bc <HAL_ADC_MspInit+0x98>)
 8001242:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001244:	0092      	lsls	r2, r2, #2
 8001246:	0892      	lsrs	r2, r2, #2
 8001248:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_ADC_CLK_ENABLE();
 800124a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800124c:	2180      	movs	r1, #128	@ 0x80
 800124e:	0349      	lsls	r1, r1, #13
 8001250:	430a      	orrs	r2, r1
 8001252:	641a      	str	r2, [r3, #64]	@ 0x40
 8001254:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001256:	400a      	ands	r2, r1
 8001258:	9201      	str	r2, [sp, #4]
 800125a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800125c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800125e:	2201      	movs	r2, #1
 8001260:	4311      	orrs	r1, r2
 8001262:	6359      	str	r1, [r3, #52]	@ 0x34
 8001264:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001266:	401a      	ands	r2, r3
 8001268:	9202      	str	r2, [sp, #8]
 800126a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800126c:	2310      	movs	r3, #16
 800126e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001270:	3b0d      	subs	r3, #13
 8001272:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001274:	20a0      	movs	r0, #160	@ 0xa0
 8001276:	a903      	add	r1, sp, #12
 8001278:	05c0      	lsls	r0, r0, #23
 800127a:	f000 ffd9 	bl	8002230 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 800127e:	4810      	ldr	r0, [pc, #64]	@ (80012c0 <HAL_ADC_MspInit+0x9c>)
 8001280:	4b10      	ldr	r3, [pc, #64]	@ (80012c4 <HAL_ADC_MspInit+0xa0>)
 8001282:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001284:	2305      	movs	r3, #5
 8001286:	6043      	str	r3, [r0, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001288:	2300      	movs	r3, #0
 800128a:	6083      	str	r3, [r0, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800128c:	60c3      	str	r3, [r0, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800128e:	2280      	movs	r2, #128	@ 0x80
 8001290:	6102      	str	r2, [r0, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001292:	3280      	adds	r2, #128	@ 0x80
 8001294:	6142      	str	r2, [r0, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001296:	2280      	movs	r2, #128	@ 0x80
 8001298:	00d2      	lsls	r2, r2, #3
 800129a:	6182      	str	r2, [r0, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800129c:	2220      	movs	r2, #32
 800129e:	61c2      	str	r2, [r0, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80012a0:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80012a2:	f000 ff1d 	bl	80020e0 <HAL_DMA_Init>
 80012a6:	2800      	cmp	r0, #0
 80012a8:	d103      	bne.n	80012b2 <HAL_ADC_MspInit+0x8e>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80012aa:	4b05      	ldr	r3, [pc, #20]	@ (80012c0 <HAL_ADC_MspInit+0x9c>)
 80012ac:	6523      	str	r3, [r4, #80]	@ 0x50
 80012ae:	629c      	str	r4, [r3, #40]	@ 0x28
}
 80012b0:	e7c4      	b.n	800123c <HAL_ADC_MspInit+0x18>
      Error_Handler();
 80012b2:	f7ff fdab 	bl	8000e0c <Error_Handler>
 80012b6:	e7f8      	b.n	80012aa <HAL_ADC_MspInit+0x86>
 80012b8:	40012400 	.word	0x40012400
 80012bc:	40021000 	.word	0x40021000
 80012c0:	200004e4 	.word	0x200004e4
 80012c4:	40020008 	.word	0x40020008

080012c8 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80012c8:	b082      	sub	sp, #8
  if(hrtc->Instance==RTC)
 80012ca:	6802      	ldr	r2, [r0, #0]
 80012cc:	4b2e      	ldr	r3, [pc, #184]	@ (8001388 <HAL_RTC_MspInit+0xc0>)
 80012ce:	429a      	cmp	r2, r3
 80012d0:	d001      	beq.n	80012d6 <HAL_RTC_MspInit+0xe>

    /* USER CODE END RTC_MspInit 1 */

  }

}
 80012d2:	b002      	add	sp, #8
 80012d4:	4770      	bx	lr
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_HSE_DIV32
  */
__STATIC_INLINE uint32_t LL_RCC_GetRTCClockSource(void)
{
  return (uint32_t)(READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL));
 80012d6:	4b2d      	ldr	r3, [pc, #180]	@ (800138c <HAL_RTC_MspInit+0xc4>)
 80012d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012da:	22c0      	movs	r2, #192	@ 0xc0
 80012dc:	0092      	lsls	r2, r2, #2
 80012de:	4013      	ands	r3, r2
  if(LL_RCC_GetRTCClockSource() != LL_RCC_RTC_CLKSOURCE_LSE)
 80012e0:	2280      	movs	r2, #128	@ 0x80
 80012e2:	0052      	lsls	r2, r2, #1
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d038      	beq.n	800135a <HAL_RTC_MspInit+0x92>
  * @note (*) peripheral not available on all devices
  * @retval State of Periphs (1 or 0).
  */
__STATIC_INLINE uint32_t LL_APB1_GRP1_IsEnabledClock(uint32_t Periphs)
{
  return ((READ_BIT(RCC->APBENR1, Periphs) == (Periphs)) ? 1UL : 0UL);
 80012e8:	4b28      	ldr	r3, [pc, #160]	@ (800138c <HAL_RTC_MspInit+0xc4>)
 80012ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80012ec:	00db      	lsls	r3, r3, #3
 80012ee:	d41d      	bmi.n	800132c <HAL_RTC_MspInit+0x64>
  SET_BIT(RCC->APBENR1, Periphs);
 80012f0:	4b26      	ldr	r3, [pc, #152]	@ (800138c <HAL_RTC_MspInit+0xc4>)
 80012f2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80012f4:	2180      	movs	r1, #128	@ 0x80
 80012f6:	0549      	lsls	r1, r1, #21
 80012f8:	430a      	orrs	r2, r1
 80012fa:	63da      	str	r2, [r3, #60]	@ 0x3c
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 80012fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80012fe:	400b      	ands	r3, r1
 8001300:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001302:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001304:	2001      	movs	r0, #1
  * @rmtoll CSR1         RTCRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
  SET_BIT(RCC->CSR1, RCC_CSR1_RTCRST);
 8001306:	4b21      	ldr	r3, [pc, #132]	@ (800138c <HAL_RTC_MspInit+0xc4>)
 8001308:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 800130a:	2280      	movs	r2, #128	@ 0x80
 800130c:	0252      	lsls	r2, r2, #9
 800130e:	430a      	orrs	r2, r1
 8001310:	65da      	str	r2, [r3, #92]	@ 0x5c
  * @rmtoll CSR1         RTCRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
  CLEAR_BIT(RCC->CSR1, RCC_CSR1_RTCRST);
 8001312:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001314:	491e      	ldr	r1, [pc, #120]	@ (8001390 <HAL_RTC_MspInit+0xc8>)
 8001316:	400a      	ands	r2, r1
 8001318:	65da      	str	r2, [r3, #92]	@ 0x5c
  SET_BIT(RCC->CSR1, RCC_CSR1_LSEBYP);
 800131a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800131c:	2104      	movs	r1, #4
 800131e:	430a      	orrs	r2, r1
 8001320:	65da      	str	r2, [r3, #92]	@ 0x5c
  SET_BIT(RCC->CSR1, RCC_CSR1_LSEON);
 8001322:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001324:	3903      	subs	r1, #3
 8001326:	430a      	orrs	r2, r1
 8001328:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800132a:	e003      	b.n	8001334 <HAL_RTC_MspInit+0x6c>
    FlagStatus pwrclkchanged = RESET;
 800132c:	2000      	movs	r0, #0
 800132e:	e7ea      	b.n	8001306 <HAL_RTC_MspInit+0x3e>
    while(LL_RCC_LSE_IsReady() != 1)
 8001330:	2901      	cmp	r1, #1
 8001332:	d008      	beq.n	8001346 <HAL_RTC_MspInit+0x7e>
  return ((READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == (RCC_CSR1_LSERDY)) ? 1UL : 0UL);
 8001334:	4b15      	ldr	r3, [pc, #84]	@ (800138c <HAL_RTC_MspInit+0xc4>)
 8001336:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001338:	2202      	movs	r2, #2
 800133a:	0011      	movs	r1, r2
 800133c:	4019      	ands	r1, r3
 800133e:	421a      	tst	r2, r3
 8001340:	d0f6      	beq.n	8001330 <HAL_RTC_MspInit+0x68>
 8001342:	2101      	movs	r1, #1
 8001344:	e7f4      	b.n	8001330 <HAL_RTC_MspInit+0x68>
  MODIFY_REG(RCC->CSR1, RCC_CSR1_RTCSEL, Source);
 8001346:	4911      	ldr	r1, [pc, #68]	@ (800138c <HAL_RTC_MspInit+0xc4>)
 8001348:	6dca      	ldr	r2, [r1, #92]	@ 0x5c
 800134a:	4b12      	ldr	r3, [pc, #72]	@ (8001394 <HAL_RTC_MspInit+0xcc>)
 800134c:	401a      	ands	r2, r3
 800134e:	2380      	movs	r3, #128	@ 0x80
 8001350:	005b      	lsls	r3, r3, #1
 8001352:	4313      	orrs	r3, r2
 8001354:	65cb      	str	r3, [r1, #92]	@ 0x5c
    if (pwrclkchanged == SET)
 8001356:	2801      	cmp	r0, #1
 8001358:	d00f      	beq.n	800137a <HAL_RTC_MspInit+0xb2>
    __HAL_RCC_RTC_ENABLE();
 800135a:	4b0c      	ldr	r3, [pc, #48]	@ (800138c <HAL_RTC_MspInit+0xc4>)
 800135c:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 800135e:	2280      	movs	r2, #128	@ 0x80
 8001360:	0212      	lsls	r2, r2, #8
 8001362:	430a      	orrs	r2, r1
 8001364:	65da      	str	r2, [r3, #92]	@ 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001366:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001368:	2180      	movs	r1, #128	@ 0x80
 800136a:	00c9      	lsls	r1, r1, #3
 800136c:	430a      	orrs	r2, r1
 800136e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001370:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001372:	400b      	ands	r3, r1
 8001374:	9300      	str	r3, [sp, #0]
 8001376:	9b00      	ldr	r3, [sp, #0]
}
 8001378:	e7ab      	b.n	80012d2 <HAL_RTC_MspInit+0xa>
  * @note (*) peripheral not available on all devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APBENR1, Periphs);
 800137a:	000a      	movs	r2, r1
 800137c:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
 800137e:	4906      	ldr	r1, [pc, #24]	@ (8001398 <HAL_RTC_MspInit+0xd0>)
 8001380:	400b      	ands	r3, r1
 8001382:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8001384:	e7e9      	b.n	800135a <HAL_RTC_MspInit+0x92>
 8001386:	46c0      	nop			@ (mov r8, r8)
 8001388:	40002800 	.word	0x40002800
 800138c:	40021000 	.word	0x40021000
 8001390:	fffeffff 	.word	0xfffeffff
 8001394:	fffffcff 	.word	0xfffffcff
 8001398:	efffffff 	.word	0xefffffff

0800139c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800139c:	b500      	push	{lr}
 800139e:	b083      	sub	sp, #12
  if(htim_base->Instance==TIM1)
 80013a0:	6803      	ldr	r3, [r0, #0]
 80013a2:	4a13      	ldr	r2, [pc, #76]	@ (80013f0 <HAL_TIM_Base_MspInit+0x54>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d004      	beq.n	80013b2 <HAL_TIM_Base_MspInit+0x16>
    __HAL_RCC_TIM1_CLK_ENABLE();
    /* USER CODE BEGIN TIM1_MspInit 1 */

    /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM14)
 80013a8:	4a12      	ldr	r2, [pc, #72]	@ (80013f4 <HAL_TIM_Base_MspInit+0x58>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d00c      	beq.n	80013c8 <HAL_TIM_Base_MspInit+0x2c>
    /* USER CODE BEGIN TIM14_MspInit 1 */

    /* USER CODE END TIM14_MspInit 1 */
  }

}
 80013ae:	b003      	add	sp, #12
 80013b0:	bd00      	pop	{pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 80013b2:	4b11      	ldr	r3, [pc, #68]	@ (80013f8 <HAL_TIM_Base_MspInit+0x5c>)
 80013b4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80013b6:	2180      	movs	r1, #128	@ 0x80
 80013b8:	0109      	lsls	r1, r1, #4
 80013ba:	430a      	orrs	r2, r1
 80013bc:	641a      	str	r2, [r3, #64]	@ 0x40
 80013be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013c0:	400b      	ands	r3, r1
 80013c2:	9300      	str	r3, [sp, #0]
 80013c4:	9b00      	ldr	r3, [sp, #0]
 80013c6:	e7f2      	b.n	80013ae <HAL_TIM_Base_MspInit+0x12>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80013c8:	4b0b      	ldr	r3, [pc, #44]	@ (80013f8 <HAL_TIM_Base_MspInit+0x5c>)
 80013ca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80013cc:	2180      	movs	r1, #128	@ 0x80
 80013ce:	0209      	lsls	r1, r1, #8
 80013d0:	430a      	orrs	r2, r1
 80013d2:	641a      	str	r2, [r3, #64]	@ 0x40
 80013d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013d6:	400b      	ands	r3, r1
 80013d8:	9301      	str	r3, [sp, #4]
 80013da:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM14_IRQn, 3, 0);
 80013dc:	2200      	movs	r2, #0
 80013de:	2103      	movs	r1, #3
 80013e0:	2013      	movs	r0, #19
 80013e2:	f000 fe15 	bl	8002010 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 80013e6:	2013      	movs	r0, #19
 80013e8:	f000 fe16 	bl	8002018 <HAL_NVIC_EnableIRQ>
}
 80013ec:	e7df      	b.n	80013ae <HAL_TIM_Base_MspInit+0x12>
 80013ee:	46c0      	nop			@ (mov r8, r8)
 80013f0:	40012c00 	.word	0x40012c00
 80013f4:	40002000 	.word	0x40002000
 80013f8:	40021000 	.word	0x40021000

080013fc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80013fc:	b510      	push	{r4, lr}
 80013fe:	b086      	sub	sp, #24
 8001400:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001402:	2214      	movs	r2, #20
 8001404:	2100      	movs	r1, #0
 8001406:	a801      	add	r0, sp, #4
 8001408:	f002 fd62 	bl	8003ed0 <memset>
  if(htim->Instance==TIM1)
 800140c:	6822      	ldr	r2, [r4, #0]
 800140e:	4b0d      	ldr	r3, [pc, #52]	@ (8001444 <HAL_TIM_MspPostInit+0x48>)
 8001410:	429a      	cmp	r2, r3
 8001412:	d001      	beq.n	8001418 <HAL_TIM_MspPostInit+0x1c>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001414:	b006      	add	sp, #24
 8001416:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001418:	4a0b      	ldr	r2, [pc, #44]	@ (8001448 <HAL_TIM_MspPostInit+0x4c>)
 800141a:	6b51      	ldr	r1, [r2, #52]	@ 0x34
 800141c:	2301      	movs	r3, #1
 800141e:	4319      	orrs	r1, r3
 8001420:	6351      	str	r1, [r2, #52]	@ 0x34
 8001422:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001424:	4013      	ands	r3, r2
 8001426:	9300      	str	r3, [sp, #0]
 8001428:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800142a:	2320      	movs	r3, #32
 800142c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142e:	3b1e      	subs	r3, #30
 8001430:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM1;
 8001432:	3303      	adds	r3, #3
 8001434:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001436:	20a0      	movs	r0, #160	@ 0xa0
 8001438:	a901      	add	r1, sp, #4
 800143a:	05c0      	lsls	r0, r0, #23
 800143c:	f000 fef8 	bl	8002230 <HAL_GPIO_Init>
}
 8001440:	e7e8      	b.n	8001414 <HAL_TIM_MspPostInit+0x18>
 8001442:	46c0      	nop			@ (mov r8, r8)
 8001444:	40012c00 	.word	0x40012c00
 8001448:	40021000 	.word	0x40021000

0800144c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800144c:	b510      	push	{r4, lr}
 800144e:	b088      	sub	sp, #32
 8001450:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001452:	2214      	movs	r2, #20
 8001454:	2100      	movs	r1, #0
 8001456:	a803      	add	r0, sp, #12
 8001458:	f002 fd3a 	bl	8003ed0 <memset>
  if(huart->Instance==USART1)
 800145c:	6822      	ldr	r2, [r4, #0]
 800145e:	4b1e      	ldr	r3, [pc, #120]	@ (80014d8 <HAL_UART_MspInit+0x8c>)
 8001460:	429a      	cmp	r2, r3
 8001462:	d001      	beq.n	8001468 <HAL_UART_MspInit+0x1c>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001464:	b008      	add	sp, #32
 8001466:	bd10      	pop	{r4, pc}
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 8001468:	4b1c      	ldr	r3, [pc, #112]	@ (80014dc <HAL_UART_MspInit+0x90>)
 800146a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800146c:	2103      	movs	r1, #3
 800146e:	438a      	bics	r2, r1
 8001470:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_USART1_CLK_ENABLE();
 8001472:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001474:	2180      	movs	r1, #128	@ 0x80
 8001476:	01c9      	lsls	r1, r1, #7
 8001478:	430a      	orrs	r2, r1
 800147a:	641a      	str	r2, [r3, #64]	@ 0x40
 800147c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800147e:	400a      	ands	r2, r1
 8001480:	9201      	str	r2, [sp, #4]
 8001482:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001484:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001486:	2202      	movs	r2, #2
 8001488:	4311      	orrs	r1, r2
 800148a:	6359      	str	r1, [r3, #52]	@ 0x34
 800148c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800148e:	4013      	ands	r3, r2
 8001490:	9302      	str	r3, [sp, #8]
 8001492:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001494:	23c0      	movs	r3, #192	@ 0xc0
 8001496:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001498:	9204      	str	r2, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800149a:	a903      	add	r1, sp, #12
 800149c:	4810      	ldr	r0, [pc, #64]	@ (80014e0 <HAL_UART_MspInit+0x94>)
 800149e:	f000 fec7 	bl	8002230 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel2;
 80014a2:	4810      	ldr	r0, [pc, #64]	@ (80014e4 <HAL_UART_MspInit+0x98>)
 80014a4:	4b10      	ldr	r3, [pc, #64]	@ (80014e8 <HAL_UART_MspInit+0x9c>)
 80014a6:	6003      	str	r3, [r0, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80014a8:	2332      	movs	r3, #50	@ 0x32
 80014aa:	6043      	str	r3, [r0, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014ac:	2300      	movs	r3, #0
 80014ae:	6083      	str	r3, [r0, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014b0:	60c3      	str	r3, [r0, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80014b2:	2280      	movs	r2, #128	@ 0x80
 80014b4:	6102      	str	r2, [r0, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014b6:	6143      	str	r3, [r0, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014b8:	6183      	str	r3, [r0, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80014ba:	3a60      	subs	r2, #96	@ 0x60
 80014bc:	61c2      	str	r2, [r0, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80014be:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80014c0:	f000 fe0e 	bl	80020e0 <HAL_DMA_Init>
 80014c4:	2800      	cmp	r0, #0
 80014c6:	d104      	bne.n	80014d2 <HAL_UART_MspInit+0x86>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80014c8:	4b06      	ldr	r3, [pc, #24]	@ (80014e4 <HAL_UART_MspInit+0x98>)
 80014ca:	2280      	movs	r2, #128	@ 0x80
 80014cc:	50a3      	str	r3, [r4, r2]
 80014ce:	629c      	str	r4, [r3, #40]	@ 0x28
}
 80014d0:	e7c8      	b.n	8001464 <HAL_UART_MspInit+0x18>
      Error_Handler();
 80014d2:	f7ff fc9b 	bl	8000e0c <Error_Handler>
 80014d6:	e7f7      	b.n	80014c8 <HAL_UART_MspInit+0x7c>
 80014d8:	40013800 	.word	0x40013800
 80014dc:	40021000 	.word	0x40021000
 80014e0:	50000400 	.word	0x50000400
 80014e4:	20000334 	.word	0x20000334
 80014e8:	4002001c 	.word	0x4002001c

080014ec <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014ec:	e7fe      	b.n	80014ec <NMI_Handler>

080014ee <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014ee:	e7fe      	b.n	80014ee <HardFault_Handler>

080014f0 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80014f0:	4770      	bx	lr

080014f2 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014f2:	4770      	bx	lr

080014f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014f4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014f6:	f000 f89f 	bl	8001638 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014fa:	bd10      	pop	{r4, pc}

080014fc <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 80014fc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80014fe:	4802      	ldr	r0, [pc, #8]	@ (8001508 <TIM14_IRQHandler+0xc>)
 8001500:	f001 fb3e 	bl	8002b80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8001504:	bd10      	pop	{r4, pc}
 8001506:	46c0      	nop			@ (mov r8, r8)
 8001508:	20000424 	.word	0x20000424

0800150c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800150c:	b510      	push	{r4, lr}
 800150e:	0003      	movs	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001510:	4a0c      	ldr	r2, [pc, #48]	@ (8001544 <_sbrk+0x38>)
 8001512:	490d      	ldr	r1, [pc, #52]	@ (8001548 <_sbrk+0x3c>)
 8001514:	1a52      	subs	r2, r2, r1
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001516:	490d      	ldr	r1, [pc, #52]	@ (800154c <_sbrk+0x40>)
 8001518:	6809      	ldr	r1, [r1, #0]
 800151a:	2900      	cmp	r1, #0
 800151c:	d007      	beq.n	800152e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800151e:	490b      	ldr	r1, [pc, #44]	@ (800154c <_sbrk+0x40>)
 8001520:	6808      	ldr	r0, [r1, #0]
 8001522:	18c3      	adds	r3, r0, r3
 8001524:	4293      	cmp	r3, r2
 8001526:	d806      	bhi.n	8001536 <_sbrk+0x2a>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001528:	4a08      	ldr	r2, [pc, #32]	@ (800154c <_sbrk+0x40>)
 800152a:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 800152c:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 800152e:	4907      	ldr	r1, [pc, #28]	@ (800154c <_sbrk+0x40>)
 8001530:	4807      	ldr	r0, [pc, #28]	@ (8001550 <_sbrk+0x44>)
 8001532:	6008      	str	r0, [r1, #0]
 8001534:	e7f3      	b.n	800151e <_sbrk+0x12>
    errno = ENOMEM;
 8001536:	f002 fd19 	bl	8003f6c <__errno>
 800153a:	230c      	movs	r3, #12
 800153c:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800153e:	2001      	movs	r0, #1
 8001540:	4240      	negs	r0, r0
 8001542:	e7f3      	b.n	800152c <_sbrk+0x20>
 8001544:	20003000 	.word	0x20003000
 8001548:	00000400 	.word	0x00000400
 800154c:	200005a4 	.word	0x200005a4
 8001550:	200006f8 	.word	0x200006f8

08001554 <SystemInit>:
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001554:	4b02      	ldr	r3, [pc, #8]	@ (8001560 <SystemInit+0xc>)
 8001556:	2280      	movs	r2, #128	@ 0x80
 8001558:	0512      	lsls	r2, r2, #20
 800155a:	609a      	str	r2, [r3, #8]
#endif
}
 800155c:	4770      	bx	lr
 800155e:	46c0      	nop			@ (mov r8, r8)
 8001560:	e000ed00 	.word	0xe000ed00

08001564 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001564:	480d      	ldr	r0, [pc, #52]	@ (800159c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001566:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001568:	f7ff fff4 	bl	8001554 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800156c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800156e:	e003      	b.n	8001578 <LoopCopyDataInit>

08001570 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001570:	4b0b      	ldr	r3, [pc, #44]	@ (80015a0 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8001572:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001574:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001576:	3104      	adds	r1, #4

08001578 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001578:	480a      	ldr	r0, [pc, #40]	@ (80015a4 <LoopForever+0xa>)
  ldr r3, =_edata
 800157a:	4b0b      	ldr	r3, [pc, #44]	@ (80015a8 <LoopForever+0xe>)
  adds r2, r0, r1
 800157c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800157e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001580:	d3f6      	bcc.n	8001570 <CopyDataInit>
  ldr r2, =_sbss
 8001582:	4a0a      	ldr	r2, [pc, #40]	@ (80015ac <LoopForever+0x12>)
  b LoopFillZerobss
 8001584:	e002      	b.n	800158c <LoopFillZerobss>

08001586 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001586:	2300      	movs	r3, #0
  str  r3, [r2]
 8001588:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800158a:	3204      	adds	r2, #4

0800158c <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 800158c:	4b08      	ldr	r3, [pc, #32]	@ (80015b0 <LoopForever+0x16>)
  cmp r2, r3
 800158e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001590:	d3f9      	bcc.n	8001586 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8001592:	f002 fcf1 	bl	8003f78 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001596:	f7ff fe15 	bl	80011c4 <main>

0800159a <LoopForever>:

LoopForever:
    b LoopForever
 800159a:	e7fe      	b.n	800159a <LoopForever>
  ldr   r0, =_estack
 800159c:	20003000 	.word	0x20003000
  ldr r3, =_sidata
 80015a0:	08004c90 	.word	0x08004c90
  ldr r0, =_sdata
 80015a4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80015a8:	20000060 	.word	0x20000060
  ldr r2, =_sbss
 80015ac:	20000060 	.word	0x20000060
  ldr r3, = _ebss
 80015b0:	200006f4 	.word	0x200006f4

080015b4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015b4:	e7fe      	b.n	80015b4 <ADC1_IRQHandler>
	...

080015b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015b8:	b510      	push	{r4, lr}
 80015ba:	0004      	movs	r4, r0
  HAL_StatusTypeDef  status = HAL_OK;

  if ((uint32_t)uwTickFreq != 0UL)
 80015bc:	4b11      	ldr	r3, [pc, #68]	@ (8001604 <HAL_InitTick+0x4c>)
 80015be:	7819      	ldrb	r1, [r3, #0]
 80015c0:	2900      	cmp	r1, #0
 80015c2:	d101      	bne.n	80015c8 <HAL_InitTick+0x10>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 80015c4:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 80015c6:	bd10      	pop	{r4, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 80015c8:	20fa      	movs	r0, #250	@ 0xfa
 80015ca:	0080      	lsls	r0, r0, #2
 80015cc:	f7fe fdb0 	bl	8000130 <__udivsi3>
 80015d0:	0001      	movs	r1, r0
 80015d2:	4b0d      	ldr	r3, [pc, #52]	@ (8001608 <HAL_InitTick+0x50>)
 80015d4:	6818      	ldr	r0, [r3, #0]
 80015d6:	f7fe fdab 	bl	8000130 <__udivsi3>
 80015da:	f000 fd29 	bl	8002030 <HAL_SYSTICK_Config>
 80015de:	2800      	cmp	r0, #0
 80015e0:	d10d      	bne.n	80015fe <HAL_InitTick+0x46>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015e2:	2c03      	cmp	r4, #3
 80015e4:	d901      	bls.n	80015ea <HAL_InitTick+0x32>
        status = HAL_ERROR;
 80015e6:	2001      	movs	r0, #1
 80015e8:	e7ed      	b.n	80015c6 <HAL_InitTick+0xe>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015ea:	3001      	adds	r0, #1
 80015ec:	2200      	movs	r2, #0
 80015ee:	0021      	movs	r1, r4
 80015f0:	4240      	negs	r0, r0
 80015f2:	f000 fd0d 	bl	8002010 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015f6:	4b05      	ldr	r3, [pc, #20]	@ (800160c <HAL_InitTick+0x54>)
 80015f8:	601c      	str	r4, [r3, #0]
  HAL_StatusTypeDef  status = HAL_OK;
 80015fa:	2000      	movs	r0, #0
 80015fc:	e7e3      	b.n	80015c6 <HAL_InitTick+0xe>
      status = HAL_ERROR;
 80015fe:	2001      	movs	r0, #1
 8001600:	e7e1      	b.n	80015c6 <HAL_InitTick+0xe>
 8001602:	46c0      	nop			@ (mov r8, r8)
 8001604:	20000008 	.word	0x20000008
 8001608:	20000004 	.word	0x20000004
 800160c:	2000000c 	.word	0x2000000c

08001610 <HAL_Init>:
{
 8001610:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001612:	4a08      	ldr	r2, [pc, #32]	@ (8001634 <HAL_Init+0x24>)
 8001614:	6811      	ldr	r1, [r2, #0]
 8001616:	2380      	movs	r3, #128	@ 0x80
 8001618:	005b      	lsls	r3, r3, #1
 800161a:	430b      	orrs	r3, r1
 800161c:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800161e:	2000      	movs	r0, #0
 8001620:	f7ff ffca 	bl	80015b8 <HAL_InitTick>
 8001624:	1e04      	subs	r4, r0, #0
 8001626:	d002      	beq.n	800162e <HAL_Init+0x1e>
    status = HAL_ERROR;
 8001628:	2401      	movs	r4, #1
}
 800162a:	0020      	movs	r0, r4
 800162c:	bd10      	pop	{r4, pc}
    HAL_MspInit();
 800162e:	f7ff fde1 	bl	80011f4 <HAL_MspInit>
 8001632:	e7fa      	b.n	800162a <HAL_Init+0x1a>
 8001634:	40022000 	.word	0x40022000

08001638 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8001638:	4b03      	ldr	r3, [pc, #12]	@ (8001648 <HAL_IncTick+0x10>)
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	4a03      	ldr	r2, [pc, #12]	@ (800164c <HAL_IncTick+0x14>)
 800163e:	6811      	ldr	r1, [r2, #0]
 8001640:	185b      	adds	r3, r3, r1
 8001642:	6013      	str	r3, [r2, #0]
}
 8001644:	4770      	bx	lr
 8001646:	46c0      	nop			@ (mov r8, r8)
 8001648:	20000008 	.word	0x20000008
 800164c:	200005a8 	.word	0x200005a8

08001650 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001650:	4b01      	ldr	r3, [pc, #4]	@ (8001658 <HAL_GetTick+0x8>)
 8001652:	6818      	ldr	r0, [r3, #0]
}
 8001654:	4770      	bx	lr
 8001656:	46c0      	nop			@ (mov r8, r8)
 8001658:	200005a8 	.word	0x200005a8

0800165c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800165c:	b570      	push	{r4, r5, r6, lr}
 800165e:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001660:	f7ff fff6 	bl	8001650 <HAL_GetTick>
 8001664:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001666:	1c63      	adds	r3, r4, #1
 8001668:	d002      	beq.n	8001670 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800166a:	4b04      	ldr	r3, [pc, #16]	@ (800167c <HAL_Delay+0x20>)
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	18e4      	adds	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001670:	f7ff ffee 	bl	8001650 <HAL_GetTick>
 8001674:	1b40      	subs	r0, r0, r5
 8001676:	42a0      	cmp	r0, r4
 8001678:	d3fa      	bcc.n	8001670 <HAL_Delay+0x14>
  {
  }
}
 800167a:	bd70      	pop	{r4, r5, r6, pc}
 800167c:	20000008 	.word	0x20000008

08001680 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001680:	b530      	push	{r4, r5, lr}
 8001682:	b083      	sub	sp, #12
 8001684:	0004      	movs	r4, r0
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR1 = 0UL;
  uint32_t tmpCFGR2 = 0UL;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001686:	2300      	movs	r3, #0
 8001688:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 800168a:	2800      	cmp	r0, #0
 800168c:	d100      	bne.n	8001690 <HAL_ADC_Init+0x10>
 800168e:	e105      	b.n	800189c <HAL_ADC_Init+0x21c>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001690:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8001692:	2b00      	cmp	r3, #0
 8001694:	d012      	beq.n	80016bc <HAL_ADC_Init+0x3c>

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001696:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001698:	689a      	ldr	r2, [r3, #8]
 800169a:	00d2      	lsls	r2, r2, #3
 800169c:	d41b      	bmi.n	80016d6 <HAL_ADC_Init+0x56>
  MODIFY_REG(ADCx->CR,
 800169e:	6899      	ldr	r1, [r3, #8]
 80016a0:	4a7f      	ldr	r2, [pc, #508]	@ (80018a0 <HAL_ADC_Init+0x220>)
 80016a2:	4011      	ands	r1, r2
 80016a4:	2280      	movs	r2, #128	@ 0x80
 80016a6:	0552      	lsls	r2, r2, #21
 80016a8:	430a      	orrs	r2, r1
 80016aa:	609a      	str	r2, [r3, #8]
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80016ac:	4b7d      	ldr	r3, [pc, #500]	@ (80018a4 <HAL_ADC_Init+0x224>)
 80016ae:	6818      	ldr	r0, [r3, #0]
 80016b0:	497d      	ldr	r1, [pc, #500]	@ (80018a8 <HAL_ADC_Init+0x228>)
 80016b2:	f7fe fd3d 	bl	8000130 <__udivsi3>
 80016b6:	0040      	lsls	r0, r0, #1
 80016b8:	9001      	str	r0, [sp, #4]
    while (wait_loop_index != 0UL)
 80016ba:	e009      	b.n	80016d0 <HAL_ADC_Init+0x50>
    HAL_ADC_MspInit(hadc);
 80016bc:	f7ff fdb2 	bl	8001224 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80016c0:	2300      	movs	r3, #0
 80016c2:	65e3      	str	r3, [r4, #92]	@ 0x5c
    hadc->Lock = HAL_UNLOCKED;
 80016c4:	2254      	movs	r2, #84	@ 0x54
 80016c6:	54a3      	strb	r3, [r4, r2]
 80016c8:	e7e5      	b.n	8001696 <HAL_ADC_Init+0x16>
    {
      wait_loop_index--;
 80016ca:	9b01      	ldr	r3, [sp, #4]
 80016cc:	3b01      	subs	r3, #1
 80016ce:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80016d0:	9b01      	ldr	r3, [sp, #4]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d1f9      	bne.n	80016ca <HAL_ADC_Init+0x4a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80016d6:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80016d8:	689a      	ldr	r2, [r3, #8]
 80016da:	00d2      	lsls	r2, r2, #3
 80016dc:	d500      	bpl.n	80016e0 <HAL_ADC_Init+0x60>
 80016de:	e09d      	b.n	800181c <HAL_ADC_Init+0x19c>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016e0:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 80016e2:	2110      	movs	r1, #16
 80016e4:	430a      	orrs	r2, r1
 80016e6:	65a2      	str	r2, [r4, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016e8:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80016ea:	390f      	subs	r1, #15
 80016ec:	430a      	orrs	r2, r1
 80016ee:	65e2      	str	r2, [r4, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80016f0:	2001      	movs	r0, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80016f2:	689a      	ldr	r2, [r3, #8]
 80016f4:	2104      	movs	r1, #4
 80016f6:	000d      	movs	r5, r1
 80016f8:	4015      	ands	r5, r2
 80016fa:	4211      	tst	r1, r2
 80016fc:	d000      	beq.n	8001700 <HAL_ADC_Init+0x80>
 80016fe:	2501      	movs	r5, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001700:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8001702:	06d2      	lsls	r2, r2, #27
 8001704:	d500      	bpl.n	8001708 <HAL_ADC_Init+0x88>
 8001706:	e0c2      	b.n	800188e <HAL_ADC_Init+0x20e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001708:	2d00      	cmp	r5, #0
 800170a:	d000      	beq.n	800170e <HAL_ADC_Init+0x8e>
 800170c:	e0bf      	b.n	800188e <HAL_ADC_Init+0x20e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800170e:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8001710:	4966      	ldr	r1, [pc, #408]	@ (80018ac <HAL_ADC_Init+0x22c>)
 8001712:	400a      	ands	r2, r1
 8001714:	3106      	adds	r1, #6
 8001716:	31ff      	adds	r1, #255	@ 0xff
 8001718:	430a      	orrs	r2, r1
 800171a:	65a2      	str	r2, [r4, #88]	@ 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800171c:	689a      	ldr	r2, [r3, #8]
 800171e:	07d2      	lsls	r2, r2, #31
 8001720:	d452      	bmi.n	80017c8 <HAL_ADC_Init+0x148>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths: temperature sensor, Vref             */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001722:	68a2      	ldr	r2, [r4, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001724:	7e21      	ldrb	r1, [r4, #24]
 8001726:	0389      	lsls	r1, r1, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001728:	430a      	orrs	r2, r1
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800172a:	7e61      	ldrb	r1, [r4, #25]
 800172c:	03c9      	lsls	r1, r1, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800172e:	430a      	orrs	r2, r1
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001730:	7ea5      	ldrb	r5, [r4, #26]
 8001732:	0369      	lsls	r1, r5, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001734:	430a      	orrs	r2, r1
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001736:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8001738:	2900      	cmp	r1, #0
 800173a:	d001      	beq.n	8001740 <HAL_ADC_Init+0xc0>
 800173c:	2180      	movs	r1, #128	@ 0x80
 800173e:	0149      	lsls	r1, r1, #5
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001740:	430a      	orrs	r2, r1
                   hadc->Init.DataAlign                                           |
 8001742:	68e1      	ldr	r1, [r4, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001744:	430a      	orrs	r2, r1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001746:	6921      	ldr	r1, [r4, #16]
 8001748:	2900      	cmp	r1, #0
 800174a:	db69      	blt.n	8001820 <HAL_ADC_Init+0x1a0>
 800174c:	2180      	movs	r1, #128	@ 0x80
 800174e:	0389      	lsls	r1, r1, #14
                   hadc->Init.DataAlign                                           |
 8001750:	430a      	orrs	r2, r1
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001752:	212c      	movs	r1, #44	@ 0x2c
 8001754:	5c61      	ldrb	r1, [r4, r1]
 8001756:	0049      	lsls	r1, r1, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001758:	430a      	orrs	r2, r1

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800175a:	2120      	movs	r1, #32
 800175c:	5c61      	ldrb	r1, [r4, r1]
 800175e:	2901      	cmp	r1, #1
 8001760:	d061      	beq.n	8001826 <HAL_ADC_Init+0x1a6>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001762:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8001764:	2900      	cmp	r1, #0
 8001766:	d005      	beq.n	8001774 <HAL_ADC_Init+0xf4>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001768:	25e0      	movs	r5, #224	@ 0xe0
 800176a:	006d      	lsls	r5, r5, #1
 800176c:	4029      	ands	r1, r5
                     hadc->Init.ExternalTrigConvEdge);
 800176e:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001770:	4329      	orrs	r1, r5
 8001772:	430a      	orrs	r2, r1
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001774:	68d9      	ldr	r1, [r3, #12]
 8001776:	4d4e      	ldr	r5, [pc, #312]	@ (80018b0 <HAL_ADC_Init+0x230>)
 8001778:	4029      	ands	r1, r5
 800177a:	430a      	orrs	r2, r1
 800177c:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800177e:	6863      	ldr	r3, [r4, #4]
 8001780:	0f9b      	lsrs	r3, r3, #30
 8001782:	079b      	lsls	r3, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8001784:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001786:	431a      	orrs	r2, r3
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001788:	213c      	movs	r1, #60	@ 0x3c
 800178a:	5c61      	ldrb	r1, [r4, r1]
 800178c:	2901      	cmp	r1, #1
 800178e:	d059      	beq.n	8001844 <HAL_ADC_Init+0x1c4>
                     hadc->Init.Oversampling.RightBitShift |
                     hadc->Init.Oversampling.TriggeredMode
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8001790:	6821      	ldr	r1, [r4, #0]
 8001792:	690b      	ldr	r3, [r1, #16]
 8001794:	4d47      	ldr	r5, [pc, #284]	@ (80018b4 <HAL_ADC_Init+0x234>)
 8001796:	402b      	ands	r3, r5
 8001798:	4313      	orrs	r3, r2
 800179a:	610b      	str	r3, [r1, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800179c:	6863      	ldr	r3, [r4, #4]
 800179e:	22c0      	movs	r2, #192	@ 0xc0
 80017a0:	0612      	lsls	r2, r2, #24
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d010      	beq.n	80017c8 <HAL_ADC_Init+0x148>
 80017a6:	2280      	movs	r2, #128	@ 0x80
 80017a8:	05d2      	lsls	r2, r2, #23
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d00c      	beq.n	80017c8 <HAL_ADC_Init+0x148>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80017ae:	2280      	movs	r2, #128	@ 0x80
 80017b0:	0612      	lsls	r2, r2, #24
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d008      	beq.n	80017c8 <HAL_ADC_Init+0x148>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80017b6:	4940      	ldr	r1, [pc, #256]	@ (80018b8 <HAL_ADC_Init+0x238>)
 80017b8:	680a      	ldr	r2, [r1, #0]
 80017ba:	4d40      	ldr	r5, [pc, #256]	@ (80018bc <HAL_ADC_Init+0x23c>)
 80017bc:	402a      	ands	r2, r5
 80017be:	25f0      	movs	r5, #240	@ 0xf0
 80017c0:	03ad      	lsls	r5, r5, #14
 80017c2:	402b      	ands	r3, r5
 80017c4:	4313      	orrs	r3, r2
 80017c6:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80017c8:	6821      	ldr	r1, [r4, #0]
 80017ca:	6b63      	ldr	r3, [r4, #52]	@ 0x34
  MODIFY_REG(ADCx->SMPR,
 80017cc:	694a      	ldr	r2, [r1, #20]
 80017ce:	2507      	movs	r5, #7
 80017d0:	43aa      	bics	r2, r5
 80017d2:	4313      	orrs	r3, r2
 80017d4:	614b      	str	r3, [r1, #20]
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80017d6:	6821      	ldr	r1, [r4, #0]
 80017d8:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80017da:	694b      	ldr	r3, [r1, #20]
 80017dc:	3569      	adds	r5, #105	@ 0x69
 80017de:	43ab      	bics	r3, r5
 80017e0:	0112      	lsls	r2, r2, #4
 80017e2:	4313      	orrs	r3, r2
 80017e4:	614b      	str	r3, [r1, #20]
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80017e6:	6923      	ldr	r3, [r4, #16]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d135      	bne.n	8001858 <HAL_ADC_Init+0x1d8>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80017ec:	6822      	ldr	r2, [r4, #0]
 80017ee:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80017f0:	3b10      	subs	r3, #16
 80017f2:	430b      	orrs	r3, r1
 80017f4:	6293      	str	r3, [r2, #40]	@ 0x28
    {
      /* Nothing to do */
    }
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80017f6:	6823      	ldr	r3, [r4, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80017f8:	695a      	ldr	r2, [r3, #20]
 80017fa:	2307      	movs	r3, #7
 80017fc:	4013      	ands	r3, r2
        == hadc->Init.SamplingTimeCommon1)
 80017fe:	6b62      	ldr	r2, [r4, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001800:	429a      	cmp	r2, r3
 8001802:	d03b      	beq.n	800187c <HAL_ADC_Init+0x1fc>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001804:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001806:	2212      	movs	r2, #18
 8001808:	4393      	bics	r3, r2
 800180a:	3a02      	subs	r2, #2
 800180c:	4313      	orrs	r3, r2
 800180e:	65a3      	str	r3, [r4, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001810:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8001812:	3a0f      	subs	r2, #15
 8001814:	4313      	orrs	r3, r2
 8001816:	65e3      	str	r3, [r4, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8001818:	2001      	movs	r0, #1
 800181a:	e03d      	b.n	8001898 <HAL_ADC_Init+0x218>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800181c:	2000      	movs	r0, #0
 800181e:	e768      	b.n	80016f2 <HAL_ADC_Init+0x72>
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001820:	0049      	lsls	r1, r1, #1
 8001822:	0849      	lsrs	r1, r1, #1
 8001824:	e794      	b.n	8001750 <HAL_ADC_Init+0xd0>
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001826:	2d00      	cmp	r5, #0
 8001828:	d103      	bne.n	8001832 <HAL_ADC_Init+0x1b2>
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800182a:	2180      	movs	r1, #128	@ 0x80
 800182c:	0249      	lsls	r1, r1, #9
 800182e:	430a      	orrs	r2, r1
 8001830:	e797      	b.n	8001762 <HAL_ADC_Init+0xe2>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001832:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8001834:	2520      	movs	r5, #32
 8001836:	4329      	orrs	r1, r5
 8001838:	65a1      	str	r1, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800183a:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 800183c:	3d1f      	subs	r5, #31
 800183e:	4329      	orrs	r1, r5
 8001840:	65e1      	str	r1, [r4, #92]	@ 0x5c
 8001842:	e78e      	b.n	8001762 <HAL_ADC_Init+0xe2>
                     hadc->Init.Oversampling.Ratio         |
 8001844:	6c21      	ldr	r1, [r4, #64]	@ 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001846:	430b      	orrs	r3, r1
                     hadc->Init.Oversampling.RightBitShift |
 8001848:	6c61      	ldr	r1, [r4, #68]	@ 0x44
                     hadc->Init.Oversampling.Ratio         |
 800184a:	430b      	orrs	r3, r1
                     hadc->Init.Oversampling.TriggeredMode
 800184c:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
                     hadc->Init.Oversampling.RightBitShift |
 800184e:	430b      	orrs	r3, r1
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8001850:	4313      	orrs	r3, r2
 8001852:	2201      	movs	r2, #1
 8001854:	431a      	orrs	r2, r3
 8001856:	e79b      	b.n	8001790 <HAL_ADC_Init+0x110>
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001858:	2280      	movs	r2, #128	@ 0x80
 800185a:	0392      	lsls	r2, r2, #14
 800185c:	4293      	cmp	r3, r2
 800185e:	d1ca      	bne.n	80017f6 <HAL_ADC_Init+0x176>
      MODIFY_REG(hadc->Instance->CHSELR,
 8001860:	6821      	ldr	r1, [r4, #0]
 8001862:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 8001864:	69e3      	ldr	r3, [r4, #28]
 8001866:	3b01      	subs	r3, #1
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	221c      	movs	r2, #28
 800186c:	401a      	ands	r2, r3
 800186e:	2310      	movs	r3, #16
 8001870:	425b      	negs	r3, r3
 8001872:	4093      	lsls	r3, r2
 8001874:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8001876:	4313      	orrs	r3, r2
 8001878:	628b      	str	r3, [r1, #40]	@ 0x28
 800187a:	e7bc      	b.n	80017f6 <HAL_ADC_Init+0x176>
      ADC_CLEAR_ERRORCODE(hadc);
 800187c:	2300      	movs	r3, #0
 800187e:	65e3      	str	r3, [r4, #92]	@ 0x5c
      ADC_STATE_CLR_SET(hadc->State,
 8001880:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001882:	2203      	movs	r2, #3
 8001884:	4393      	bics	r3, r2
 8001886:	3a02      	subs	r2, #2
 8001888:	4313      	orrs	r3, r2
 800188a:	65a3      	str	r3, [r4, #88]	@ 0x58
 800188c:	e004      	b.n	8001898 <HAL_ADC_Init+0x218>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800188e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001890:	2210      	movs	r2, #16
 8001892:	4313      	orrs	r3, r2
 8001894:	65a3      	str	r3, [r4, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001896:	2001      	movs	r0, #1
  }

  /* Return function status */
  return tmp_hal_status;
}
 8001898:	b003      	add	sp, #12
 800189a:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 800189c:	2001      	movs	r0, #1
 800189e:	e7fb      	b.n	8001898 <HAL_ADC_Init+0x218>
 80018a0:	6fffffe8 	.word	0x6fffffe8
 80018a4:	20000004 	.word	0x20000004
 80018a8:	00030d40 	.word	0x00030d40
 80018ac:	fffffefd 	.word	0xfffffefd
 80018b0:	ffde0201 	.word	0xffde0201
 80018b4:	1ffffc02 	.word	0x1ffffc02
 80018b8:	40012708 	.word	0x40012708
 80018bc:	ffc3ffff 	.word	0xffc3ffff

080018c0 <HAL_ADC_ConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80018c0:	4770      	bx	lr

080018c2 <HAL_ADC_ConvHalfCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80018c2:	4770      	bx	lr

080018c4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80018c4:	b510      	push	{r4, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80018c6:	6a80      	ldr	r0, [r0, #40]	@ 0x28

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80018c8:	f7ff fffb 	bl	80018c2 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80018cc:	bd10      	pop	{r4, pc}

080018ce <HAL_ADC_ErrorCallback>:
}
 80018ce:	4770      	bx	lr

080018d0 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80018d0:	b510      	push	{r4, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80018d2:	6a80      	ldr	r0, [r0, #40]	@ 0x28

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80018d4:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 80018d6:	2240      	movs	r2, #64	@ 0x40
 80018d8:	4313      	orrs	r3, r2
 80018da:	6583      	str	r3, [r0, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80018dc:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 80018de:	3a3c      	subs	r2, #60	@ 0x3c
 80018e0:	4313      	orrs	r3, r2
 80018e2:	65c3      	str	r3, [r0, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80018e4:	f7ff fff3 	bl	80018ce <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80018e8:	bd10      	pop	{r4, pc}
	...

080018ec <ADC_DMAConvCplt>:
{
 80018ec:	b510      	push	{r4, lr}
 80018ee:	0003      	movs	r3, r0
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80018f0:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80018f2:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 80018f4:	2150      	movs	r1, #80	@ 0x50
 80018f6:	4211      	tst	r1, r2
 80018f8:	d12a      	bne.n	8001950 <ADC_DMAConvCplt+0x64>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80018fa:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 80018fc:	2380      	movs	r3, #128	@ 0x80
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	4313      	orrs	r3, r2
 8001902:	6583      	str	r3, [r0, #88]	@ 0x58
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001904:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8001906:	68d9      	ldr	r1, [r3, #12]
 8001908:	22c0      	movs	r2, #192	@ 0xc0
 800190a:	0112      	lsls	r2, r2, #4
 800190c:	4211      	tst	r1, r2
 800190e:	d113      	bne.n	8001938 <ADC_DMAConvCplt+0x4c>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8001910:	7e82      	ldrb	r2, [r0, #26]
 8001912:	2a00      	cmp	r2, #0
 8001914:	d110      	bne.n	8001938 <ADC_DMAConvCplt+0x4c>
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	0712      	lsls	r2, r2, #28
 800191a:	d50d      	bpl.n	8001938 <ADC_DMAConvCplt+0x4c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800191c:	689a      	ldr	r2, [r3, #8]
 800191e:	0752      	lsls	r2, r2, #29
 8001920:	d40d      	bmi.n	800193e <ADC_DMAConvCplt+0x52>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001922:	685a      	ldr	r2, [r3, #4]
 8001924:	210c      	movs	r1, #12
 8001926:	438a      	bics	r2, r1
 8001928:	605a      	str	r2, [r3, #4]
          ADC_STATE_CLR_SET(hadc->State,
 800192a:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 800192c:	4a0e      	ldr	r2, [pc, #56]	@ (8001968 <ADC_DMAConvCplt+0x7c>)
 800192e:	4013      	ands	r3, r2
 8001930:	3204      	adds	r2, #4
 8001932:	32ff      	adds	r2, #255	@ 0xff
 8001934:	4313      	orrs	r3, r2
 8001936:	6583      	str	r3, [r0, #88]	@ 0x58
    HAL_ADC_ConvCpltCallback(hadc);
 8001938:	f7ff ffc2 	bl	80018c0 <HAL_ADC_ConvCpltCallback>
}
 800193c:	bd10      	pop	{r4, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800193e:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8001940:	2220      	movs	r2, #32
 8001942:	4313      	orrs	r3, r2
 8001944:	6583      	str	r3, [r0, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001946:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 8001948:	3a1f      	subs	r2, #31
 800194a:	4313      	orrs	r3, r2
 800194c:	65c3      	str	r3, [r0, #92]	@ 0x5c
 800194e:	e7f3      	b.n	8001938 <ADC_DMAConvCplt+0x4c>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001950:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 8001952:	06d2      	lsls	r2, r2, #27
 8001954:	d404      	bmi.n	8001960 <ADC_DMAConvCplt+0x74>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001956:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8001958:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800195a:	0018      	movs	r0, r3
 800195c:	4790      	blx	r2
}
 800195e:	e7ed      	b.n	800193c <ADC_DMAConvCplt+0x50>
      HAL_ADC_ErrorCallback(hadc);
 8001960:	f7ff ffb5 	bl	80018ce <HAL_ADC_ErrorCallback>
 8001964:	e7ea      	b.n	800193c <ADC_DMAConvCplt+0x50>
 8001966:	46c0      	nop			@ (mov r8, r8)
 8001968:	fffffefe 	.word	0xfffffefe

0800196c <HAL_ADC_ConfigChannel>:
{
 800196c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800196e:	b083      	sub	sp, #12
 8001970:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0UL;
 8001972:	2300      	movs	r3, #0
 8001974:	9301      	str	r3, [sp, #4]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001976:	6905      	ldr	r5, [r0, #16]
  __HAL_LOCK(hadc);
 8001978:	3354      	adds	r3, #84	@ 0x54
 800197a:	5cc3      	ldrb	r3, [r0, r3]
 800197c:	2b01      	cmp	r3, #1
 800197e:	d100      	bne.n	8001982 <HAL_ADC_ConfigChannel+0x16>
 8001980:	e121      	b.n	8001bc6 <HAL_ADC_ConfigChannel+0x25a>
 8001982:	2354      	movs	r3, #84	@ 0x54
 8001984:	2201      	movs	r2, #1
 8001986:	54c2      	strb	r2, [r0, r3]
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001988:	6800      	ldr	r0, [r0, #0]
 800198a:	6883      	ldr	r3, [r0, #8]
 800198c:	3203      	adds	r2, #3
 800198e:	0016      	movs	r6, r2
 8001990:	401e      	ands	r6, r3
 8001992:	421a      	tst	r2, r3
 8001994:	d009      	beq.n	80019aa <HAL_ADC_ConfigChannel+0x3e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001996:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001998:	321c      	adds	r2, #28
 800199a:	4313      	orrs	r3, r2
 800199c:	65a3      	str	r3, [r4, #88]	@ 0x58
    tmp_hal_status = HAL_ERROR;
 800199e:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 80019a0:	2354      	movs	r3, #84	@ 0x54
 80019a2:	2200      	movs	r2, #0
 80019a4:	54e2      	strb	r2, [r4, r3]
}
 80019a6:	b003      	add	sp, #12
 80019a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (sConfig->Rank != ADC_RANK_NONE)
 80019aa:	684b      	ldr	r3, [r1, #4]
 80019ac:	2b02      	cmp	r3, #2
 80019ae:	d100      	bne.n	80019b2 <HAL_ADC_ConfigChannel+0x46>
 80019b0:	e0d5      	b.n	8001b5e <HAL_ADC_ConfigChannel+0x1f2>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80019b2:	2280      	movs	r2, #128	@ 0x80
 80019b4:	0612      	lsls	r2, r2, #24
 80019b6:	4295      	cmp	r5, r2
 80019b8:	d025      	beq.n	8001a06 <HAL_ADC_ConfigChannel+0x9a>
 80019ba:	4a84      	ldr	r2, [pc, #528]	@ (8001bcc <HAL_ADC_ConfigChannel+0x260>)
 80019bc:	4295      	cmp	r5, r2
 80019be:	d022      	beq.n	8001a06 <HAL_ADC_ConfigChannel+0x9a>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80019c0:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 80019c2:	271f      	movs	r7, #31
 80019c4:	401f      	ands	r7, r3
 80019c6:	250f      	movs	r5, #15
 80019c8:	40bd      	lsls	r5, r7
 80019ca:	43aa      	bics	r2, r5
 80019cc:	680b      	ldr	r3, [r1, #0]
 80019ce:	025d      	lsls	r5, r3, #9
 80019d0:	d12f      	bne.n	8001a32 <HAL_ADC_ConfigChannel+0xc6>
 80019d2:	0e9b      	lsrs	r3, r3, #26
 80019d4:	261f      	movs	r6, #31
 80019d6:	401e      	ands	r6, r3
 80019d8:	40be      	lsls	r6, r7
 80019da:	4332      	orrs	r2, r6
 80019dc:	6622      	str	r2, [r4, #96]	@ 0x60
        if (((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80019de:	684d      	ldr	r5, [r1, #4]
 80019e0:	08ab      	lsrs	r3, r5, #2
 80019e2:	3301      	adds	r3, #1
 80019e4:	69e2      	ldr	r2, [r4, #28]
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d813      	bhi.n	8001a12 <HAL_ADC_ConfigChannel+0xa6>
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80019ea:	680e      	ldr	r6, [r1, #0]
  MODIFY_REG(ADCx->CHSELR,
 80019ec:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 80019ee:	231f      	movs	r3, #31
 80019f0:	401d      	ands	r5, r3
 80019f2:	3b10      	subs	r3, #16
 80019f4:	001f      	movs	r7, r3
 80019f6:	40af      	lsls	r7, r5
 80019f8:	43ba      	bics	r2, r7
 80019fa:	0eb6      	lsrs	r6, r6, #26
 80019fc:	4033      	ands	r3, r6
 80019fe:	40ab      	lsls	r3, r5
 8001a00:	4313      	orrs	r3, r2
 8001a02:	6283      	str	r3, [r0, #40]	@ 0x28
}
 8001a04:	e005      	b.n	8001a12 <HAL_ADC_ConfigChannel+0xa6>
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 8001a06:	680b      	ldr	r3, [r1, #0]
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001a08:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 8001a0a:	025b      	lsls	r3, r3, #9
 8001a0c:	0a5b      	lsrs	r3, r3, #9
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	6283      	str	r3, [r0, #40]	@ 0x28
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001a12:	6820      	ldr	r0, [r4, #0]
 8001a14:	680b      	ldr	r3, [r1, #0]
 8001a16:	688d      	ldr	r5, [r1, #8]
  MODIFY_REG(ADCx->SMPR,
 8001a18:	6942      	ldr	r2, [r0, #20]
 8001a1a:	021b      	lsls	r3, r3, #8
 8001a1c:	439a      	bics	r2, r3
 8001a1e:	402b      	ands	r3, r5
 8001a20:	4d6b      	ldr	r5, [pc, #428]	@ (8001bd0 <HAL_ADC_ConfigChannel+0x264>)
 8001a22:	402b      	ands	r3, r5
 8001a24:	4313      	orrs	r3, r2
 8001a26:	6143      	str	r3, [r0, #20]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001a28:	680b      	ldr	r3, [r1, #0]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	db5f      	blt.n	8001aee <HAL_ADC_ConfigChannel+0x182>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a2e:	2000      	movs	r0, #0
 8001a30:	e7b6      	b.n	80019a0 <HAL_ADC_ConfigChannel+0x34>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001a32:	07dd      	lsls	r5, r3, #31
 8001a34:	d4d0      	bmi.n	80019d8 <HAL_ADC_ConfigChannel+0x6c>
 8001a36:	079d      	lsls	r5, r3, #30
 8001a38:	d42f      	bmi.n	8001a9a <HAL_ADC_ConfigChannel+0x12e>
 8001a3a:	075d      	lsls	r5, r3, #29
 8001a3c:	d42f      	bmi.n	8001a9e <HAL_ADC_ConfigChannel+0x132>
 8001a3e:	071d      	lsls	r5, r3, #28
 8001a40:	d42f      	bmi.n	8001aa2 <HAL_ADC_ConfigChannel+0x136>
 8001a42:	06dd      	lsls	r5, r3, #27
 8001a44:	d42f      	bmi.n	8001aa6 <HAL_ADC_ConfigChannel+0x13a>
 8001a46:	069d      	lsls	r5, r3, #26
 8001a48:	d42f      	bmi.n	8001aaa <HAL_ADC_ConfigChannel+0x13e>
 8001a4a:	065d      	lsls	r5, r3, #25
 8001a4c:	d42f      	bmi.n	8001aae <HAL_ADC_ConfigChannel+0x142>
 8001a4e:	061d      	lsls	r5, r3, #24
 8001a50:	d42f      	bmi.n	8001ab2 <HAL_ADC_ConfigChannel+0x146>
 8001a52:	05dd      	lsls	r5, r3, #23
 8001a54:	d42f      	bmi.n	8001ab6 <HAL_ADC_ConfigChannel+0x14a>
 8001a56:	059d      	lsls	r5, r3, #22
 8001a58:	d42f      	bmi.n	8001aba <HAL_ADC_ConfigChannel+0x14e>
 8001a5a:	055d      	lsls	r5, r3, #21
 8001a5c:	d42f      	bmi.n	8001abe <HAL_ADC_ConfigChannel+0x152>
 8001a5e:	051d      	lsls	r5, r3, #20
 8001a60:	d42f      	bmi.n	8001ac2 <HAL_ADC_ConfigChannel+0x156>
 8001a62:	04dd      	lsls	r5, r3, #19
 8001a64:	d42f      	bmi.n	8001ac6 <HAL_ADC_ConfigChannel+0x15a>
 8001a66:	049d      	lsls	r5, r3, #18
 8001a68:	d42f      	bmi.n	8001aca <HAL_ADC_ConfigChannel+0x15e>
 8001a6a:	045d      	lsls	r5, r3, #17
 8001a6c:	d42f      	bmi.n	8001ace <HAL_ADC_ConfigChannel+0x162>
 8001a6e:	041d      	lsls	r5, r3, #16
 8001a70:	d42f      	bmi.n	8001ad2 <HAL_ADC_ConfigChannel+0x166>
 8001a72:	03dd      	lsls	r5, r3, #15
 8001a74:	d42f      	bmi.n	8001ad6 <HAL_ADC_ConfigChannel+0x16a>
 8001a76:	039d      	lsls	r5, r3, #14
 8001a78:	d42f      	bmi.n	8001ada <HAL_ADC_ConfigChannel+0x16e>
 8001a7a:	035d      	lsls	r5, r3, #13
 8001a7c:	d42f      	bmi.n	8001ade <HAL_ADC_ConfigChannel+0x172>
 8001a7e:	031d      	lsls	r5, r3, #12
 8001a80:	d42f      	bmi.n	8001ae2 <HAL_ADC_ConfigChannel+0x176>
 8001a82:	02dd      	lsls	r5, r3, #11
 8001a84:	d42f      	bmi.n	8001ae6 <HAL_ADC_ConfigChannel+0x17a>
 8001a86:	029d      	lsls	r5, r3, #10
 8001a88:	d42f      	bmi.n	8001aea <HAL_ADC_ConfigChannel+0x17e>
 8001a8a:	2580      	movs	r5, #128	@ 0x80
 8001a8c:	03ed      	lsls	r5, r5, #15
 8001a8e:	001e      	movs	r6, r3
 8001a90:	402e      	ands	r6, r5
 8001a92:	422b      	tst	r3, r5
 8001a94:	d0a0      	beq.n	80019d8 <HAL_ADC_ConfigChannel+0x6c>
 8001a96:	2616      	movs	r6, #22
 8001a98:	e79e      	b.n	80019d8 <HAL_ADC_ConfigChannel+0x6c>
 8001a9a:	2601      	movs	r6, #1
 8001a9c:	e79c      	b.n	80019d8 <HAL_ADC_ConfigChannel+0x6c>
 8001a9e:	2602      	movs	r6, #2
 8001aa0:	e79a      	b.n	80019d8 <HAL_ADC_ConfigChannel+0x6c>
 8001aa2:	2603      	movs	r6, #3
 8001aa4:	e798      	b.n	80019d8 <HAL_ADC_ConfigChannel+0x6c>
 8001aa6:	2604      	movs	r6, #4
 8001aa8:	e796      	b.n	80019d8 <HAL_ADC_ConfigChannel+0x6c>
 8001aaa:	2605      	movs	r6, #5
 8001aac:	e794      	b.n	80019d8 <HAL_ADC_ConfigChannel+0x6c>
 8001aae:	2606      	movs	r6, #6
 8001ab0:	e792      	b.n	80019d8 <HAL_ADC_ConfigChannel+0x6c>
 8001ab2:	2607      	movs	r6, #7
 8001ab4:	e790      	b.n	80019d8 <HAL_ADC_ConfigChannel+0x6c>
 8001ab6:	2608      	movs	r6, #8
 8001ab8:	e78e      	b.n	80019d8 <HAL_ADC_ConfigChannel+0x6c>
 8001aba:	2609      	movs	r6, #9
 8001abc:	e78c      	b.n	80019d8 <HAL_ADC_ConfigChannel+0x6c>
 8001abe:	260a      	movs	r6, #10
 8001ac0:	e78a      	b.n	80019d8 <HAL_ADC_ConfigChannel+0x6c>
 8001ac2:	260b      	movs	r6, #11
 8001ac4:	e788      	b.n	80019d8 <HAL_ADC_ConfigChannel+0x6c>
 8001ac6:	260c      	movs	r6, #12
 8001ac8:	e786      	b.n	80019d8 <HAL_ADC_ConfigChannel+0x6c>
 8001aca:	260d      	movs	r6, #13
 8001acc:	e784      	b.n	80019d8 <HAL_ADC_ConfigChannel+0x6c>
 8001ace:	260e      	movs	r6, #14
 8001ad0:	e782      	b.n	80019d8 <HAL_ADC_ConfigChannel+0x6c>
 8001ad2:	260f      	movs	r6, #15
 8001ad4:	e780      	b.n	80019d8 <HAL_ADC_ConfigChannel+0x6c>
 8001ad6:	2610      	movs	r6, #16
 8001ad8:	e77e      	b.n	80019d8 <HAL_ADC_ConfigChannel+0x6c>
 8001ada:	2611      	movs	r6, #17
 8001adc:	e77c      	b.n	80019d8 <HAL_ADC_ConfigChannel+0x6c>
 8001ade:	2612      	movs	r6, #18
 8001ae0:	e77a      	b.n	80019d8 <HAL_ADC_ConfigChannel+0x6c>
 8001ae2:	2613      	movs	r6, #19
 8001ae4:	e778      	b.n	80019d8 <HAL_ADC_ConfigChannel+0x6c>
 8001ae6:	2614      	movs	r6, #20
 8001ae8:	e776      	b.n	80019d8 <HAL_ADC_ConfigChannel+0x6c>
 8001aea:	2615      	movs	r6, #21
 8001aec:	e774      	b.n	80019d8 <HAL_ADC_ConfigChannel+0x6c>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN));
 8001aee:	4a39      	ldr	r2, [pc, #228]	@ (8001bd4 <HAL_ADC_ConfigChannel+0x268>)
 8001af0:	6811      	ldr	r1, [r2, #0]
 8001af2:	22c0      	movs	r2, #192	@ 0xc0
 8001af4:	0412      	lsls	r2, r2, #16
 8001af6:	400a      	ands	r2, r1
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001af8:	4837      	ldr	r0, [pc, #220]	@ (8001bd8 <HAL_ADC_ConfigChannel+0x26c>)
 8001afa:	4283      	cmp	r3, r0
 8001afc:	d004      	beq.n	8001b08 <HAL_ADC_ConfigChannel+0x19c>
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001afe:	4837      	ldr	r0, [pc, #220]	@ (8001bdc <HAL_ADC_ConfigChannel+0x270>)
 8001b00:	4283      	cmp	r3, r0
 8001b02:	d01f      	beq.n	8001b44 <HAL_ADC_ConfigChannel+0x1d8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b04:	2000      	movs	r0, #0
 8001b06:	e74b      	b.n	80019a0 <HAL_ADC_ConfigChannel+0x34>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001b08:	0208      	lsls	r0, r1, #8
 8001b0a:	d4f8      	bmi.n	8001afe <HAL_ADC_ConfigChannel+0x192>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001b0c:	2380      	movs	r3, #128	@ 0x80
 8001b0e:	041b      	lsls	r3, r3, #16
 8001b10:	4313      	orrs	r3, r2
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 8001b12:	4930      	ldr	r1, [pc, #192]	@ (8001bd4 <HAL_ADC_ConfigChannel+0x268>)
 8001b14:	680a      	ldr	r2, [r1, #0]
 8001b16:	4832      	ldr	r0, [pc, #200]	@ (8001be0 <HAL_ADC_ConfigChannel+0x274>)
 8001b18:	4002      	ands	r2, r0
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	600b      	str	r3, [r1, #0]
          wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 8001b1e:	4b31      	ldr	r3, [pc, #196]	@ (8001be4 <HAL_ADC_ConfigChannel+0x278>)
 8001b20:	6818      	ldr	r0, [r3, #0]
 8001b22:	4931      	ldr	r1, [pc, #196]	@ (8001be8 <HAL_ADC_ConfigChannel+0x27c>)
 8001b24:	f7fe fb04 	bl	8000130 <__udivsi3>
 8001b28:	0043      	lsls	r3, r0, #1
 8001b2a:	181b      	adds	r3, r3, r0
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	3301      	adds	r3, #1
 8001b30:	9301      	str	r3, [sp, #4]
          while (wait_loop_index != 0UL)
 8001b32:	e002      	b.n	8001b3a <HAL_ADC_ConfigChannel+0x1ce>
            wait_loop_index--;
 8001b34:	9b01      	ldr	r3, [sp, #4]
 8001b36:	3b01      	subs	r3, #1
 8001b38:	9301      	str	r3, [sp, #4]
          while (wait_loop_index != 0UL)
 8001b3a:	9b01      	ldr	r3, [sp, #4]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d1f9      	bne.n	8001b34 <HAL_ADC_ConfigChannel+0x1c8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b40:	2000      	movs	r0, #0
 8001b42:	e72d      	b.n	80019a0 <HAL_ADC_ConfigChannel+0x34>
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001b44:	0249      	lsls	r1, r1, #9
 8001b46:	d43c      	bmi.n	8001bc2 <HAL_ADC_ConfigChannel+0x256>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001b48:	2380      	movs	r3, #128	@ 0x80
 8001b4a:	03db      	lsls	r3, r3, #15
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	4921      	ldr	r1, [pc, #132]	@ (8001bd4 <HAL_ADC_ConfigChannel+0x268>)
 8001b50:	680a      	ldr	r2, [r1, #0]
 8001b52:	4823      	ldr	r0, [pc, #140]	@ (8001be0 <HAL_ADC_ConfigChannel+0x274>)
 8001b54:	4002      	ands	r2, r0
 8001b56:	4313      	orrs	r3, r2
 8001b58:	600b      	str	r3, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b5a:	2000      	movs	r0, #0
}
 8001b5c:	e720      	b.n	80019a0 <HAL_ADC_ConfigChannel+0x34>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001b5e:	2380      	movs	r3, #128	@ 0x80
 8001b60:	061b      	lsls	r3, r3, #24
 8001b62:	429d      	cmp	r5, r3
 8001b64:	d002      	beq.n	8001b6c <HAL_ADC_ConfigChannel+0x200>
 8001b66:	4b19      	ldr	r3, [pc, #100]	@ (8001bcc <HAL_ADC_ConfigChannel+0x260>)
 8001b68:	429d      	cmp	r5, r3
 8001b6a:	d105      	bne.n	8001b78 <HAL_ADC_ConfigChannel+0x20c>
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 8001b6c:	680b      	ldr	r3, [r1, #0]
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001b6e:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 8001b70:	025b      	lsls	r3, r3, #9
 8001b72:	0a5b      	lsrs	r3, r3, #9
 8001b74:	439a      	bics	r2, r3
 8001b76:	6282      	str	r2, [r0, #40]	@ 0x28
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001b78:	680b      	ldr	r3, [r1, #0]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	db01      	blt.n	8001b82 <HAL_ADC_ConfigChannel+0x216>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b7e:	2000      	movs	r0, #0
 8001b80:	e70e      	b.n	80019a0 <HAL_ADC_ConfigChannel+0x34>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN));
 8001b82:	4a14      	ldr	r2, [pc, #80]	@ (8001bd4 <HAL_ADC_ConfigChannel+0x268>)
 8001b84:	6812      	ldr	r2, [r2, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b86:	4914      	ldr	r1, [pc, #80]	@ (8001bd8 <HAL_ADC_ConfigChannel+0x26c>)
 8001b88:	428b      	cmp	r3, r1
 8001b8a:	d004      	beq.n	8001b96 <HAL_ADC_ConfigChannel+0x22a>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001b8c:	4913      	ldr	r1, [pc, #76]	@ (8001bdc <HAL_ADC_ConfigChannel+0x270>)
 8001b8e:	428b      	cmp	r3, r1
 8001b90:	d00c      	beq.n	8001bac <HAL_ADC_ConfigChannel+0x240>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b92:	2000      	movs	r0, #0
 8001b94:	e704      	b.n	80019a0 <HAL_ADC_ConfigChannel+0x34>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001b96:	2380      	movs	r3, #128	@ 0x80
 8001b98:	03db      	lsls	r3, r3, #15
 8001b9a:	401a      	ands	r2, r3
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 8001b9c:	490d      	ldr	r1, [pc, #52]	@ (8001bd4 <HAL_ADC_ConfigChannel+0x268>)
 8001b9e:	680b      	ldr	r3, [r1, #0]
 8001ba0:	480f      	ldr	r0, [pc, #60]	@ (8001be0 <HAL_ADC_ConfigChannel+0x274>)
 8001ba2:	4003      	ands	r3, r0
 8001ba4:	431a      	orrs	r2, r3
 8001ba6:	600a      	str	r2, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ba8:	2000      	movs	r0, #0
}
 8001baa:	e6f9      	b.n	80019a0 <HAL_ADC_ConfigChannel+0x34>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001bac:	2380      	movs	r3, #128	@ 0x80
 8001bae:	041b      	lsls	r3, r3, #16
 8001bb0:	401a      	ands	r2, r3
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 8001bb2:	4908      	ldr	r1, [pc, #32]	@ (8001bd4 <HAL_ADC_ConfigChannel+0x268>)
 8001bb4:	680b      	ldr	r3, [r1, #0]
 8001bb6:	480a      	ldr	r0, [pc, #40]	@ (8001be0 <HAL_ADC_ConfigChannel+0x274>)
 8001bb8:	4003      	ands	r3, r0
 8001bba:	431a      	orrs	r2, r3
 8001bbc:	600a      	str	r2, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bbe:	2000      	movs	r0, #0
}
 8001bc0:	e6ee      	b.n	80019a0 <HAL_ADC_ConfigChannel+0x34>
 8001bc2:	2000      	movs	r0, #0
 8001bc4:	e6ec      	b.n	80019a0 <HAL_ADC_ConfigChannel+0x34>
  __HAL_LOCK(hadc);
 8001bc6:	2002      	movs	r0, #2
 8001bc8:	e6ed      	b.n	80019a6 <HAL_ADC_ConfigChannel+0x3a>
 8001bca:	46c0      	nop			@ (mov r8, r8)
 8001bcc:	80000004 	.word	0x80000004
 8001bd0:	7fffff00 	.word	0x7fffff00
 8001bd4:	40012708 	.word	0x40012708
 8001bd8:	a4000200 	.word	0xa4000200
 8001bdc:	a8000400 	.word	0xa8000400
 8001be0:	ff3fffff 	.word	0xff3fffff
 8001be4:	20000004 	.word	0x20000004
 8001be8:	00030d40 	.word	0x00030d40

08001bec <ADC_Enable>:
{
 8001bec:	b530      	push	{r4, r5, lr}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0UL;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	9301      	str	r3, [sp, #4]
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001bf6:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001bf8:	689a      	ldr	r2, [r3, #8]
 8001bfa:	07d2      	lsls	r2, r2, #31
 8001bfc:	d44d      	bmi.n	8001c9a <ADC_Enable+0xae>
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001bfe:	6899      	ldr	r1, [r3, #8]
 8001c00:	4a27      	ldr	r2, [pc, #156]	@ (8001ca0 <ADC_Enable+0xb4>)
 8001c02:	4211      	tst	r1, r2
 8001c04:	d111      	bne.n	8001c2a <ADC_Enable+0x3e>
  MODIFY_REG(ADCx->CR,
 8001c06:	689a      	ldr	r2, [r3, #8]
 8001c08:	4926      	ldr	r1, [pc, #152]	@ (8001ca4 <ADC_Enable+0xb8>)
 8001c0a:	400a      	ands	r2, r1
 8001c0c:	2101      	movs	r1, #1
 8001c0e:	430a      	orrs	r2, r1
 8001c10:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN));
 8001c12:	4b25      	ldr	r3, [pc, #148]	@ (8001ca8 <ADC_Enable+0xbc>)
 8001c14:	681b      	ldr	r3, [r3, #0]
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8001c16:	021b      	lsls	r3, r3, #8
 8001c18:	d517      	bpl.n	8001c4a <ADC_Enable+0x5e>
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c1a:	4b24      	ldr	r3, [pc, #144]	@ (8001cac <ADC_Enable+0xc0>)
 8001c1c:	6818      	ldr	r0, [r3, #0]
 8001c1e:	4924      	ldr	r1, [pc, #144]	@ (8001cb0 <ADC_Enable+0xc4>)
 8001c20:	f7fe fa86 	bl	8000130 <__udivsi3>
 8001c24:	3001      	adds	r0, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8001c26:	9001      	str	r0, [sp, #4]
      while (wait_loop_index != 0UL)
 8001c28:	e00c      	b.n	8001c44 <ADC_Enable+0x58>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c2a:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8001c2c:	2210      	movs	r2, #16
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	6583      	str	r3, [r0, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c32:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 8001c34:	3a0f      	subs	r2, #15
 8001c36:	4313      	orrs	r3, r2
 8001c38:	65c3      	str	r3, [r0, #92]	@ 0x5c
      return HAL_ERROR;
 8001c3a:	2001      	movs	r0, #1
 8001c3c:	e02e      	b.n	8001c9c <ADC_Enable+0xb0>
        wait_loop_index--;
 8001c3e:	9b01      	ldr	r3, [sp, #4]
 8001c40:	3b01      	subs	r3, #1
 8001c42:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 8001c44:	9b01      	ldr	r3, [sp, #4]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d1f9      	bne.n	8001c3e <ADC_Enable+0x52>
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001c4a:	7e63      	ldrb	r3, [r4, #25]
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d101      	bne.n	8001c54 <ADC_Enable+0x68>
  return HAL_OK;
 8001c50:	2000      	movs	r0, #0
 8001c52:	e023      	b.n	8001c9c <ADC_Enable+0xb0>
      tickstart = HAL_GetTick();
 8001c54:	f7ff fcfc 	bl	8001650 <HAL_GetTick>
 8001c58:	0005      	movs	r5, r0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001c5a:	e004      	b.n	8001c66 <ADC_Enable+0x7a>
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001c5c:	f7ff fcf8 	bl	8001650 <HAL_GetTick>
 8001c60:	1b40      	subs	r0, r0, r5
 8001c62:	2802      	cmp	r0, #2
 8001c64:	d80d      	bhi.n	8001c82 <ADC_Enable+0x96>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001c66:	6823      	ldr	r3, [r4, #0]
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	07d2      	lsls	r2, r2, #31
 8001c6c:	d413      	bmi.n	8001c96 <ADC_Enable+0xaa>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001c6e:	689a      	ldr	r2, [r3, #8]
 8001c70:	07d2      	lsls	r2, r2, #31
 8001c72:	d4f3      	bmi.n	8001c5c <ADC_Enable+0x70>
  MODIFY_REG(ADCx->CR,
 8001c74:	689a      	ldr	r2, [r3, #8]
 8001c76:	490b      	ldr	r1, [pc, #44]	@ (8001ca4 <ADC_Enable+0xb8>)
 8001c78:	400a      	ands	r2, r1
 8001c7a:	2101      	movs	r1, #1
 8001c7c:	430a      	orrs	r2, r1
 8001c7e:	609a      	str	r2, [r3, #8]
}
 8001c80:	e7ec      	b.n	8001c5c <ADC_Enable+0x70>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c82:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001c84:	2210      	movs	r2, #16
 8001c86:	4313      	orrs	r3, r2
 8001c88:	65a3      	str	r3, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c8a:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8001c8c:	3a0f      	subs	r2, #15
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	65e3      	str	r3, [r4, #92]	@ 0x5c
          return HAL_ERROR;
 8001c92:	2001      	movs	r0, #1
 8001c94:	e002      	b.n	8001c9c <ADC_Enable+0xb0>
  return HAL_OK;
 8001c96:	2000      	movs	r0, #0
 8001c98:	e000      	b.n	8001c9c <ADC_Enable+0xb0>
 8001c9a:	2000      	movs	r0, #0
}
 8001c9c:	b003      	add	sp, #12
 8001c9e:	bd30      	pop	{r4, r5, pc}
 8001ca0:	80000017 	.word	0x80000017
 8001ca4:	7fffffe8 	.word	0x7fffffe8
 8001ca8:	40012708 	.word	0x40012708
 8001cac:	20000004 	.word	0x20000004
 8001cb0:	00030d40 	.word	0x00030d40

08001cb4 <HAL_ADC_Start_DMA>:
{
 8001cb4:	b570      	push	{r4, r5, r6, lr}
 8001cb6:	0004      	movs	r4, r0
 8001cb8:	000d      	movs	r5, r1
 8001cba:	0016      	movs	r6, r2
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001cbc:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001cbe:	6893      	ldr	r3, [r2, #8]
 8001cc0:	075b      	lsls	r3, r3, #29
 8001cc2:	d447      	bmi.n	8001d54 <HAL_ADC_Start_DMA+0xa0>
    __HAL_LOCK(hadc);
 8001cc4:	2354      	movs	r3, #84	@ 0x54
 8001cc6:	5cc3      	ldrb	r3, [r0, r3]
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d045      	beq.n	8001d58 <HAL_ADC_Start_DMA+0xa4>
 8001ccc:	2301      	movs	r3, #1
 8001cce:	2154      	movs	r1, #84	@ 0x54
 8001cd0:	5443      	strb	r3, [r0, r1]
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 8001cd2:	68d1      	ldr	r1, [r2, #12]
 8001cd4:	420b      	tst	r3, r1
 8001cd6:	d10d      	bne.n	8001cf4 <HAL_ADC_Start_DMA+0x40>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001cd8:	6893      	ldr	r3, [r2, #8]
 8001cda:	07db      	lsls	r3, r3, #31
 8001cdc:	d505      	bpl.n	8001cea <HAL_ADC_Start_DMA+0x36>
  MODIFY_REG(ADCx->CR,
 8001cde:	6893      	ldr	r3, [r2, #8]
 8001ce0:	491e      	ldr	r1, [pc, #120]	@ (8001d5c <HAL_ADC_Start_DMA+0xa8>)
 8001ce2:	400b      	ands	r3, r1
 8001ce4:	2102      	movs	r1, #2
 8001ce6:	430b      	orrs	r3, r1
 8001ce8:	6093      	str	r3, [r2, #8]
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8001cea:	6822      	ldr	r2, [r4, #0]
 8001cec:	68d3      	ldr	r3, [r2, #12]
 8001cee:	2101      	movs	r1, #1
 8001cf0:	430b      	orrs	r3, r1
 8001cf2:	60d3      	str	r3, [r2, #12]
    tmp_hal_status = ADC_Enable(hadc);
 8001cf4:	0020      	movs	r0, r4
 8001cf6:	f7ff ff79 	bl	8001bec <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8001cfa:	2800      	cmp	r0, #0
 8001cfc:	d12b      	bne.n	8001d56 <HAL_ADC_Start_DMA+0xa2>
      ADC_STATE_CLR_SET(hadc->State,
 8001cfe:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8001d00:	4b17      	ldr	r3, [pc, #92]	@ (8001d60 <HAL_ADC_Start_DMA+0xac>)
 8001d02:	401a      	ands	r2, r3
 8001d04:	2380      	movs	r3, #128	@ 0x80
 8001d06:	005b      	lsls	r3, r3, #1
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	65a3      	str	r3, [r4, #88]	@ 0x58
      ADC_CLEAR_ERRORCODE(hadc);
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	65e3      	str	r3, [r4, #92]	@ 0x5c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001d10:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8001d12:	4914      	ldr	r1, [pc, #80]	@ (8001d64 <HAL_ADC_Start_DMA+0xb0>)
 8001d14:	62d1      	str	r1, [r2, #44]	@ 0x2c
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001d16:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8001d18:	4913      	ldr	r1, [pc, #76]	@ (8001d68 <HAL_ADC_Start_DMA+0xb4>)
 8001d1a:	6311      	str	r1, [r2, #48]	@ 0x30
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001d1c:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8001d1e:	4913      	ldr	r1, [pc, #76]	@ (8001d6c <HAL_ADC_Start_DMA+0xb8>)
 8001d20:	6351      	str	r1, [r2, #52]	@ 0x34
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001d22:	6822      	ldr	r2, [r4, #0]
 8001d24:	211c      	movs	r1, #28
 8001d26:	6011      	str	r1, [r2, #0]
      __HAL_UNLOCK(hadc);
 8001d28:	2254      	movs	r2, #84	@ 0x54
 8001d2a:	54a3      	strb	r3, [r4, r2]
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001d2c:	6822      	ldr	r2, [r4, #0]
 8001d2e:	6853      	ldr	r3, [r2, #4]
 8001d30:	390c      	subs	r1, #12
 8001d32:	430b      	orrs	r3, r1
 8001d34:	6053      	str	r3, [r2, #4]
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001d36:	6821      	ldr	r1, [r4, #0]
 8001d38:	3140      	adds	r1, #64	@ 0x40
 8001d3a:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 8001d3c:	0033      	movs	r3, r6
 8001d3e:	002a      	movs	r2, r5
 8001d40:	f000 fa26 	bl	8002190 <HAL_DMA_Start_IT>
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001d44:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8001d46:	6893      	ldr	r3, [r2, #8]
 8001d48:	4904      	ldr	r1, [pc, #16]	@ (8001d5c <HAL_ADC_Start_DMA+0xa8>)
 8001d4a:	400b      	ands	r3, r1
 8001d4c:	2104      	movs	r1, #4
 8001d4e:	430b      	orrs	r3, r1
 8001d50:	6093      	str	r3, [r2, #8]
}
 8001d52:	e000      	b.n	8001d56 <HAL_ADC_Start_DMA+0xa2>
    tmp_hal_status = HAL_BUSY;
 8001d54:	2002      	movs	r0, #2
}
 8001d56:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LOCK(hadc);
 8001d58:	2002      	movs	r0, #2
 8001d5a:	e7fc      	b.n	8001d56 <HAL_ADC_Start_DMA+0xa2>
 8001d5c:	7fffffe8 	.word	0x7fffffe8
 8001d60:	fffff0fe 	.word	0xfffff0fe
 8001d64:	080018ed 	.word	0x080018ed
 8001d68:	080018c5 	.word	0x080018c5
 8001d6c:	080018d1 	.word	0x080018d1

08001d70 <ADC_Disable>:
{
 8001d70:	b570      	push	{r4, r5, r6, lr}
 8001d72:	0004      	movs	r4, r0
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8001d74:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001d76:	689a      	ldr	r2, [r3, #8]
 8001d78:	2102      	movs	r1, #2
 8001d7a:	0008      	movs	r0, r1
 8001d7c:	4010      	ands	r0, r2
 8001d7e:	4211      	tst	r1, r2
 8001d80:	d000      	beq.n	8001d84 <ADC_Disable+0x14>
 8001d82:	2001      	movs	r0, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001d84:	689a      	ldr	r2, [r3, #8]
 8001d86:	07d2      	lsls	r2, r2, #31
 8001d88:	d531      	bpl.n	8001dee <ADC_Disable+0x7e>
      && (tmp_adc_is_disable_on_going == 0UL)
 8001d8a:	2800      	cmp	r0, #0
 8001d8c:	d131      	bne.n	8001df2 <ADC_Disable+0x82>
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8001d8e:	6899      	ldr	r1, [r3, #8]
 8001d90:	2205      	movs	r2, #5
 8001d92:	400a      	ands	r2, r1
 8001d94:	2a01      	cmp	r2, #1
 8001d96:	d009      	beq.n	8001dac <ADC_Disable+0x3c>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d98:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001d9a:	2210      	movs	r2, #16
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	65a3      	str	r3, [r4, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001da0:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8001da2:	3a0f      	subs	r2, #15
 8001da4:	4313      	orrs	r3, r2
 8001da6:	65e3      	str	r3, [r4, #92]	@ 0x5c
      return HAL_ERROR;
 8001da8:	2001      	movs	r0, #1
 8001daa:	e021      	b.n	8001df0 <ADC_Disable+0x80>
  MODIFY_REG(ADCx->CR,
 8001dac:	689a      	ldr	r2, [r3, #8]
 8001dae:	4912      	ldr	r1, [pc, #72]	@ (8001df8 <ADC_Disable+0x88>)
 8001db0:	400a      	ands	r2, r1
 8001db2:	2102      	movs	r1, #2
 8001db4:	430a      	orrs	r2, r1
 8001db6:	609a      	str	r2, [r3, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8001db8:	6823      	ldr	r3, [r4, #0]
 8001dba:	2203      	movs	r2, #3
 8001dbc:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8001dbe:	f7ff fc47 	bl	8001650 <HAL_GetTick>
 8001dc2:	0005      	movs	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001dc4:	6823      	ldr	r3, [r4, #0]
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	07db      	lsls	r3, r3, #31
 8001dca:	d50e      	bpl.n	8001dea <ADC_Disable+0x7a>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001dcc:	f7ff fc40 	bl	8001650 <HAL_GetTick>
 8001dd0:	1b40      	subs	r0, r0, r5
 8001dd2:	2802      	cmp	r0, #2
 8001dd4:	d9f6      	bls.n	8001dc4 <ADC_Disable+0x54>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dd6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001dd8:	2210      	movs	r2, #16
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	65a3      	str	r3, [r4, #88]	@ 0x58
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dde:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8001de0:	3a0f      	subs	r2, #15
 8001de2:	4313      	orrs	r3, r2
 8001de4:	65e3      	str	r3, [r4, #92]	@ 0x5c
        return HAL_ERROR;
 8001de6:	2001      	movs	r0, #1
 8001de8:	e002      	b.n	8001df0 <ADC_Disable+0x80>
  return HAL_OK;
 8001dea:	2000      	movs	r0, #0
 8001dec:	e000      	b.n	8001df0 <ADC_Disable+0x80>
 8001dee:	2000      	movs	r0, #0
}
 8001df0:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8001df2:	2000      	movs	r0, #0
 8001df4:	e7fc      	b.n	8001df0 <ADC_Disable+0x80>
 8001df6:	46c0      	nop			@ (mov r8, r8)
 8001df8:	7fffffe8 	.word	0x7fffffe8

08001dfc <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8001dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	0004      	movs	r4, r0
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8001e02:	2300      	movs	r3, #0
 8001e04:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e06:	3354      	adds	r3, #84	@ 0x54
 8001e08:	5cc3      	ldrb	r3, [r0, r3]
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d100      	bne.n	8001e10 <HAL_ADCEx_Calibration_Start+0x14>
 8001e0e:	e0a6      	b.n	8001f5e <HAL_ADCEx_Calibration_Start+0x162>
 8001e10:	2601      	movs	r6, #1
 8001e12:	2354      	movs	r3, #84	@ 0x54
 8001e14:	54c6      	strb	r6, [r0, r3]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8001e16:	f7ff ffab 	bl	8001d70 <ADC_Disable>
 8001e1a:	0005      	movs	r5, r0

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e1c:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001e1e:	689a      	ldr	r2, [r3, #8]
 8001e20:	0031      	movs	r1, r6
 8001e22:	4011      	ands	r1, r2
 8001e24:	4216      	tst	r6, r2
 8001e26:	d009      	beq.n	8001e3c <HAL_ADCEx_Calibration_Start+0x40>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e28:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001e2a:	2210      	movs	r2, #16
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	65a3      	str	r3, [r4, #88]	@ 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e30:	2354      	movs	r3, #84	@ 0x54
 8001e32:	2200      	movs	r2, #0
 8001e34:	54e2      	strb	r2, [r4, r3]

  /* Return function status */
  return tmp_hal_status;
}
 8001e36:	0028      	movs	r0, r5
 8001e38:	b003      	add	sp, #12
 8001e3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ADC_STATE_CLR_SET(hadc->State,
 8001e3c:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8001e3e:	4849      	ldr	r0, [pc, #292]	@ (8001f64 <HAL_ADCEx_Calibration_Start+0x168>)
 8001e40:	4002      	ands	r2, r0
 8001e42:	3006      	adds	r0, #6
 8001e44:	30ff      	adds	r0, #255	@ 0xff
 8001e46:	4302      	orrs	r2, r0
 8001e48:	65a2      	str	r2, [r4, #88]	@ 0x58
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8001e4a:	68de      	ldr	r6, [r3, #12]
 8001e4c:	4a46      	ldr	r2, [pc, #280]	@ (8001f68 <HAL_ADCEx_Calibration_Start+0x16c>)
 8001e4e:	4016      	ands	r6, r2
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8001e50:	68da      	ldr	r2, [r3, #12]
 8001e52:	4846      	ldr	r0, [pc, #280]	@ (8001f6c <HAL_ADCEx_Calibration_Start+0x170>)
 8001e54:	4002      	ands	r2, r0
 8001e56:	60da      	str	r2, [r3, #12]
  uint32_t calibration_factor_accumulated = 0;
 8001e58:	0008      	movs	r0, r1
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8001e5a:	e006      	b.n	8001e6a <HAL_ADCEx_Calibration_Start+0x6e>
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8001e5c:	22b4      	movs	r2, #180	@ 0xb4
 8001e5e:	589a      	ldr	r2, [r3, r2]
 8001e60:	237f      	movs	r3, #127	@ 0x7f
 8001e62:	4013      	ands	r3, r2
      calibration_factor_accumulated += (LL_ADC_GetCalibrationFactor(hadc->Instance) + 1UL);
 8001e64:	3301      	adds	r3, #1
 8001e66:	18c0      	adds	r0, r0, r3
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8001e68:	3101      	adds	r1, #1
 8001e6a:	2907      	cmp	r1, #7
 8001e6c:	d81d      	bhi.n	8001eaa <HAL_ADCEx_Calibration_Start+0xae>
      LL_ADC_StartCalibration(hadc->Instance);
 8001e6e:	6827      	ldr	r7, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8001e70:	68ba      	ldr	r2, [r7, #8]
 8001e72:	4b3f      	ldr	r3, [pc, #252]	@ (8001f70 <HAL_ADCEx_Calibration_Start+0x174>)
 8001e74:	401a      	ands	r2, r3
 8001e76:	3318      	adds	r3, #24
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	60bb      	str	r3, [r7, #8]
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8001e7c:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8001e7e:	689a      	ldr	r2, [r3, #8]
 8001e80:	2a00      	cmp	r2, #0
 8001e82:	daeb      	bge.n	8001e5c <HAL_ADCEx_Calibration_Start+0x60>
        wait_loop_index++;
 8001e84:	9b01      	ldr	r3, [sp, #4]
 8001e86:	3301      	adds	r3, #1
 8001e88:	9301      	str	r3, [sp, #4]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8001e8a:	9a01      	ldr	r2, [sp, #4]
 8001e8c:	23ae      	movs	r3, #174	@ 0xae
 8001e8e:	029b      	lsls	r3, r3, #10
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d3f3      	bcc.n	8001e7c <HAL_ADCEx_Calibration_Start+0x80>
          ADC_STATE_CLR_SET(hadc->State,
 8001e94:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001e96:	2212      	movs	r2, #18
 8001e98:	4393      	bics	r3, r2
 8001e9a:	3a02      	subs	r2, #2
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	65a3      	str	r3, [r4, #88]	@ 0x58
          __HAL_UNLOCK(hadc);
 8001ea0:	2354      	movs	r3, #84	@ 0x54
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	54e2      	strb	r2, [r4, r3]
          return HAL_ERROR;
 8001ea6:	2501      	movs	r5, #1
 8001ea8:	e7c5      	b.n	8001e36 <HAL_ADCEx_Calibration_Start+0x3a>
    calibration_factor_accumulated += (calibration_index / 2UL);
 8001eaa:	084b      	lsrs	r3, r1, #1
 8001eac:	1818      	adds	r0, r3, r0
    calibration_factor_accumulated /= calibration_index;
 8001eae:	f7fe f93f 	bl	8000130 <__udivsi3>
    LL_ADC_Enable(hadc->Instance);
 8001eb2:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8001eb4:	6893      	ldr	r3, [r2, #8]
 8001eb6:	492e      	ldr	r1, [pc, #184]	@ (8001f70 <HAL_ADCEx_Calibration_Start+0x174>)
 8001eb8:	400b      	ands	r3, r1
 8001eba:	2101      	movs	r1, #1
 8001ebc:	430b      	orrs	r3, r1
 8001ebe:	6093      	str	r3, [r2, #8]
    if (LL_ADC_GetClock(hadc->Instance) == LL_ADC_CLOCK_ASYNC)
 8001ec0:	6822      	ldr	r2, [r4, #0]
  return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_CKMODE));
 8001ec2:	6911      	ldr	r1, [r2, #16]
 8001ec4:	2380      	movs	r3, #128	@ 0x80
 8001ec6:	05db      	lsls	r3, r3, #23
 8001ec8:	4299      	cmp	r1, r3
 8001eca:	d217      	bcs.n	8001efc <HAL_ADCEx_Calibration_Start+0x100>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_PRESC));
 8001ecc:	4b29      	ldr	r3, [pc, #164]	@ (8001f74 <HAL_ADCEx_Calibration_Start+0x178>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	21f0      	movs	r1, #240	@ 0xf0
 8001ed2:	0389      	lsls	r1, r1, #14
 8001ed4:	400b      	ands	r3, r1
      if (adc_clk_async_presc >= LL_ADC_CLOCK_ASYNC_DIV16)
 8001ed6:	21e0      	movs	r1, #224	@ 0xe0
 8001ed8:	0349      	lsls	r1, r1, #13
 8001eda:	428b      	cmp	r3, r1
 8001edc:	d30e      	bcc.n	8001efc <HAL_ADCEx_Calibration_Start+0x100>
        delay_cpu_cycles = (1UL << ((adc_clk_async_presc >> ADC_CCR_PRESC_Pos) - 3UL));
 8001ede:	0c9b      	lsrs	r3, r3, #18
 8001ee0:	3b03      	subs	r3, #3
 8001ee2:	2101      	movs	r1, #1
 8001ee4:	4099      	lsls	r1, r3
 8001ee6:	9100      	str	r1, [sp, #0]
        delay_cpu_cycles >>= 1UL;
 8001ee8:	9b00      	ldr	r3, [sp, #0]
 8001eea:	085b      	lsrs	r3, r3, #1
 8001eec:	9300      	str	r3, [sp, #0]
        while (delay_cpu_cycles != 0UL)
 8001eee:	e002      	b.n	8001ef6 <HAL_ADCEx_Calibration_Start+0xfa>
          delay_cpu_cycles--;
 8001ef0:	9b00      	ldr	r3, [sp, #0]
 8001ef2:	3b01      	subs	r3, #1
 8001ef4:	9300      	str	r3, [sp, #0]
        while (delay_cpu_cycles != 0UL)
 8001ef6:	9b00      	ldr	r3, [sp, #0]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d1f9      	bne.n	8001ef0 <HAL_ADCEx_Calibration_Start+0xf4>
  MODIFY_REG(ADCx->CALFACT,
 8001efc:	21b4      	movs	r1, #180	@ 0xb4
 8001efe:	5853      	ldr	r3, [r2, r1]
 8001f00:	277f      	movs	r7, #127	@ 0x7f
 8001f02:	43bb      	bics	r3, r7
 8001f04:	4318      	orrs	r0, r3
 8001f06:	5050      	str	r0, [r2, r1]
    LL_ADC_Disable(hadc->Instance);
 8001f08:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8001f0a:	6893      	ldr	r3, [r2, #8]
 8001f0c:	4918      	ldr	r1, [pc, #96]	@ (8001f70 <HAL_ADCEx_Calibration_Start+0x174>)
 8001f0e:	400b      	ands	r3, r1
 8001f10:	2102      	movs	r1, #2
 8001f12:	430b      	orrs	r3, r1
 8001f14:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8001f16:	f7ff fb9b 	bl	8001650 <HAL_GetTick>
 8001f1a:	0007      	movs	r7, r0
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001f1c:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001f1e:	689a      	ldr	r2, [r3, #8]
 8001f20:	07d2      	lsls	r2, r2, #31
 8001f22:	d409      	bmi.n	8001f38 <HAL_ADCEx_Calibration_Start+0x13c>
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8001f24:	68da      	ldr	r2, [r3, #12]
 8001f26:	4332      	orrs	r2, r6
 8001f28:	60da      	str	r2, [r3, #12]
    ADC_STATE_CLR_SET(hadc->State,
 8001f2a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001f2c:	2203      	movs	r2, #3
 8001f2e:	4393      	bics	r3, r2
 8001f30:	3a02      	subs	r2, #2
 8001f32:	4313      	orrs	r3, r2
 8001f34:	65a3      	str	r3, [r4, #88]	@ 0x58
 8001f36:	e77b      	b.n	8001e30 <HAL_ADCEx_Calibration_Start+0x34>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001f38:	f7ff fb8a 	bl	8001650 <HAL_GetTick>
 8001f3c:	1bc0      	subs	r0, r0, r7
 8001f3e:	2802      	cmp	r0, #2
 8001f40:	d9ec      	bls.n	8001f1c <HAL_ADCEx_Calibration_Start+0x120>
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001f42:	6823      	ldr	r3, [r4, #0]
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	07db      	lsls	r3, r3, #31
 8001f48:	d5e8      	bpl.n	8001f1c <HAL_ADCEx_Calibration_Start+0x120>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f4a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001f4c:	2210      	movs	r2, #16
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	65a3      	str	r3, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f52:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8001f54:	3a0f      	subs	r2, #15
 8001f56:	4313      	orrs	r3, r2
 8001f58:	65e3      	str	r3, [r4, #92]	@ 0x5c
          return HAL_ERROR;
 8001f5a:	2501      	movs	r5, #1
 8001f5c:	e76b      	b.n	8001e36 <HAL_ADCEx_Calibration_Start+0x3a>
  __HAL_LOCK(hadc);
 8001f5e:	2502      	movs	r5, #2
 8001f60:	e769      	b.n	8001e36 <HAL_ADCEx_Calibration_Start+0x3a>
 8001f62:	46c0      	nop			@ (mov r8, r8)
 8001f64:	fffffefd 	.word	0xfffffefd
 8001f68:	00008003 	.word	0x00008003
 8001f6c:	ffff7ffc 	.word	0xffff7ffc
 8001f70:	7fffffe8 	.word	0x7fffffe8
 8001f74:	40012708 	.word	0x40012708

08001f78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f78:	b570      	push	{r4, r5, r6, lr}
  if ((int32_t)(IRQn) >= 0)
 8001f7a:	2800      	cmp	r0, #0
 8001f7c:	db11      	blt.n	8001fa2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f7e:	0883      	lsrs	r3, r0, #2
 8001f80:	4d13      	ldr	r5, [pc, #76]	@ (8001fd0 <__NVIC_SetPriority+0x58>)
 8001f82:	33c0      	adds	r3, #192	@ 0xc0
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	595c      	ldr	r4, [r3, r5]
 8001f88:	2203      	movs	r2, #3
 8001f8a:	4010      	ands	r0, r2
 8001f8c:	00c0      	lsls	r0, r0, #3
 8001f8e:	32fc      	adds	r2, #252	@ 0xfc
 8001f90:	0016      	movs	r6, r2
 8001f92:	4086      	lsls	r6, r0
 8001f94:	43b4      	bics	r4, r6
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001f96:	0189      	lsls	r1, r1, #6
 8001f98:	400a      	ands	r2, r1
 8001f9a:	4082      	lsls	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f9c:	4322      	orrs	r2, r4
 8001f9e:	515a      	str	r2, [r3, r5]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001fa0:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001fa2:	230f      	movs	r3, #15
 8001fa4:	4003      	ands	r3, r0
 8001fa6:	3b08      	subs	r3, #8
 8001fa8:	089b      	lsrs	r3, r3, #2
 8001faa:	3306      	adds	r3, #6
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	4a09      	ldr	r2, [pc, #36]	@ (8001fd4 <__NVIC_SetPriority+0x5c>)
 8001fb0:	4694      	mov	ip, r2
 8001fb2:	4463      	add	r3, ip
 8001fb4:	685c      	ldr	r4, [r3, #4]
 8001fb6:	2203      	movs	r2, #3
 8001fb8:	4010      	ands	r0, r2
 8001fba:	00c0      	lsls	r0, r0, #3
 8001fbc:	32fc      	adds	r2, #252	@ 0xfc
 8001fbe:	0015      	movs	r5, r2
 8001fc0:	4085      	lsls	r5, r0
 8001fc2:	43ac      	bics	r4, r5
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001fc4:	0189      	lsls	r1, r1, #6
 8001fc6:	400a      	ands	r2, r1
 8001fc8:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001fca:	4322      	orrs	r2, r4
 8001fcc:	605a      	str	r2, [r3, #4]
}
 8001fce:	e7e7      	b.n	8001fa0 <__NVIC_SetPriority+0x28>
 8001fd0:	e000e100 	.word	0xe000e100
 8001fd4:	e000ed00 	.word	0xe000ed00

08001fd8 <SysTick_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fd8:	3801      	subs	r0, #1
 8001fda:	2380      	movs	r3, #128	@ 0x80
 8001fdc:	045b      	lsls	r3, r3, #17
 8001fde:	4298      	cmp	r0, r3
 8001fe0:	d20f      	bcs.n	8002002 <SysTick_Config+0x2a>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fe2:	4a09      	ldr	r2, [pc, #36]	@ (8002008 <SysTick_Config+0x30>)
 8001fe4:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001fe6:	4809      	ldr	r0, [pc, #36]	@ (800200c <SysTick_Config+0x34>)
 8001fe8:	6a03      	ldr	r3, [r0, #32]
 8001fea:	021b      	lsls	r3, r3, #8
 8001fec:	0a1b      	lsrs	r3, r3, #8
 8001fee:	21c0      	movs	r1, #192	@ 0xc0
 8001ff0:	0609      	lsls	r1, r1, #24
 8001ff2:	430b      	orrs	r3, r1
 8001ff4:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ffa:	3307      	adds	r3, #7
 8001ffc:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ffe:	2000      	movs	r0, #0
}
 8002000:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002002:	2001      	movs	r0, #1
 8002004:	e7fc      	b.n	8002000 <SysTick_Config+0x28>
 8002006:	46c0      	nop			@ (mov r8, r8)
 8002008:	e000e010 	.word	0xe000e010
 800200c:	e000ed00 	.word	0xe000ed00

08002010 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002010:	b510      	push	{r4, lr}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8002012:	f7ff ffb1 	bl	8001f78 <__NVIC_SetPriority>
}
 8002016:	bd10      	pop	{r4, pc}

08002018 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002018:	2800      	cmp	r0, #0
 800201a:	db05      	blt.n	8002028 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800201c:	221f      	movs	r2, #31
 800201e:	4002      	ands	r2, r0
 8002020:	2301      	movs	r3, #1
 8002022:	4093      	lsls	r3, r2
 8002024:	4a01      	ldr	r2, [pc, #4]	@ (800202c <HAL_NVIC_EnableIRQ+0x14>)
 8002026:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002028:	4770      	bx	lr
 800202a:	46c0      	nop			@ (mov r8, r8)
 800202c:	e000e100 	.word	0xe000e100

08002030 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002030:	b510      	push	{r4, lr}
  return SysTick_Config(TicksNumb);
 8002032:	f7ff ffd1 	bl	8001fd8 <SysTick_Config>
}
 8002036:	bd10      	pop	{r4, pc}

08002038 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002038:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800203a:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 800203c:	6cc5      	ldr	r5, [r0, #76]	@ 0x4c
 800203e:	6065      	str	r5, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002040:	6d04      	ldr	r4, [r0, #80]	@ 0x50
 8002042:	2c00      	cmp	r4, #0
 8002044:	d002      	beq.n	800204c <DMA_SetConfig+0x14>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002046:	6d44      	ldr	r4, [r0, #84]	@ 0x54
 8002048:	6d85      	ldr	r5, [r0, #88]	@ 0x58
 800204a:	6065      	str	r5, [r4, #4]
  }

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 800204c:	4f0b      	ldr	r7, [pc, #44]	@ (800207c <DMA_SetConfig+0x44>)
 800204e:	687c      	ldr	r4, [r7, #4]
 8002050:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 8002052:	261c      	movs	r6, #28
 8002054:	402e      	ands	r6, r5
 8002056:	2501      	movs	r5, #1
 8002058:	40b5      	lsls	r5, r6
 800205a:	432c      	orrs	r4, r5
 800205c:	607c      	str	r4, [r7, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800205e:	6804      	ldr	r4, [r0, #0]
 8002060:	6063      	str	r3, [r4, #4]

  /* Peripheral to Memory */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002062:	6883      	ldr	r3, [r0, #8]
 8002064:	2b10      	cmp	r3, #16
 8002066:	d004      	beq.n	8002072 <DMA_SetConfig+0x3a>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8002068:	6803      	ldr	r3, [r0, #0]
 800206a:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 800206c:	6803      	ldr	r3, [r0, #0]
 800206e:	60da      	str	r2, [r3, #12]
  }
}
 8002070:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->Instance->CPAR = DstAddress;
 8002072:	6803      	ldr	r3, [r0, #0]
 8002074:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8002076:	6803      	ldr	r3, [r0, #0]
 8002078:	60d9      	str	r1, [r3, #12]
 800207a:	e7f9      	b.n	8002070 <DMA_SetConfig+0x38>
 800207c:	40020000 	.word	0x40020000

08002080 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002080:	b510      	push	{r4, lr}
 8002082:	0004      	movs	r4, r0
  uint32_t channel_number;

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002084:	6803      	ldr	r3, [r0, #0]
 8002086:	20ff      	movs	r0, #255	@ 0xff
 8002088:	4018      	ands	r0, r3
 800208a:	3808      	subs	r0, #8
 800208c:	2114      	movs	r1, #20
 800208e:	f7fe f84f 	bl	8000130 <__udivsi3>
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
                                                             ((hdma->ChannelIndex >> 2U) * \
 8002092:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002094:	089b      	lsrs	r3, r3, #2
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
 8002096:	4a06      	ldr	r2, [pc, #24]	@ (80020b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x30>)
 8002098:	4694      	mov	ip, r2
 800209a:	4463      	add	r3, ip
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	6463      	str	r3, [r4, #68]	@ 0x44
                                                              ((uint32_t)DMAMUX1_Channel1 - \
                                                               (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80020a0:	4b04      	ldr	r3, [pc, #16]	@ (80020b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x34>)
 80020a2:	64a3      	str	r3, [r4, #72]	@ 0x48
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 80020a4:	231c      	movs	r3, #28
 80020a6:	4018      	ands	r0, r3
 80020a8:	3b1b      	subs	r3, #27
 80020aa:	4083      	lsls	r3, r0
 80020ac:	64e3      	str	r3, [r4, #76]	@ 0x4c
}
 80020ae:	bd10      	pop	{r4, pc}
 80020b0:	10008200 	.word	0x10008200
 80020b4:	40020880 	.word	0x40020880

080020b8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80020b8:	6842      	ldr	r2, [r0, #4]
 80020ba:	23ff      	movs	r3, #255	@ 0xff
 80020bc:	4013      	ands	r3, r2

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + \
 80020be:	4a06      	ldr	r2, [pc, #24]	@ (80020d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x20>)
 80020c0:	189a      	adds	r2, r3, r2
 80020c2:	0092      	lsls	r2, r2, #2
 80020c4:	6502      	str	r2, [r0, #80]	@ 0x50
                                                                    ((request - 1U) * 4U)));

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80020c6:	4a05      	ldr	r2, [pc, #20]	@ (80020dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x24>)
 80020c8:	6542      	str	r2, [r0, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to 4, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80020ca:	3b01      	subs	r3, #1
 80020cc:	2203      	movs	r2, #3
 80020ce:	401a      	ands	r2, r3
 80020d0:	2301      	movs	r3, #1
 80020d2:	4093      	lsls	r3, r2
 80020d4:	6583      	str	r3, [r0, #88]	@ 0x58
}
 80020d6:	4770      	bx	lr
 80020d8:	1000823f 	.word	0x1000823f
 80020dc:	40020940 	.word	0x40020940

080020e0 <HAL_DMA_Init>:
{
 80020e0:	b570      	push	{r4, r5, r6, lr}
 80020e2:	1e04      	subs	r4, r0, #0
  if (hdma == NULL)
 80020e4:	d04d      	beq.n	8002182 <HAL_DMA_Init+0xa2>
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 80020e6:	6805      	ldr	r5, [r0, #0]
 80020e8:	4b27      	ldr	r3, [pc, #156]	@ (8002188 <HAL_DMA_Init+0xa8>)
 80020ea:	18e8      	adds	r0, r5, r3
 80020ec:	2114      	movs	r1, #20
 80020ee:	f7fe f81f 	bl	8000130 <__udivsi3>
                                                                                (uint32_t)DMA1_Channel1)) << 2U;
 80020f2:	0080      	lsls	r0, r0, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 80020f4:	6420      	str	r0, [r4, #64]	@ 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 80020f6:	2325      	movs	r3, #37	@ 0x25
 80020f8:	2202      	movs	r2, #2
 80020fa:	54e2      	strb	r2, [r4, r3]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80020fc:	682b      	ldr	r3, [r5, #0]
 80020fe:	4a23      	ldr	r2, [pc, #140]	@ (800218c <HAL_DMA_Init+0xac>)
 8002100:	4013      	ands	r3, r2
 8002102:	602b      	str	r3, [r5, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8002104:	6821      	ldr	r1, [r4, #0]
 8002106:	680a      	ldr	r2, [r1, #0]
 8002108:	68a3      	ldr	r3, [r4, #8]
 800210a:	68e0      	ldr	r0, [r4, #12]
 800210c:	4303      	orrs	r3, r0
 800210e:	6920      	ldr	r0, [r4, #16]
 8002110:	4303      	orrs	r3, r0
 8002112:	6960      	ldr	r0, [r4, #20]
 8002114:	4303      	orrs	r3, r0
 8002116:	69a0      	ldr	r0, [r4, #24]
 8002118:	4303      	orrs	r3, r0
 800211a:	69e0      	ldr	r0, [r4, #28]
 800211c:	4303      	orrs	r3, r0
 800211e:	6a20      	ldr	r0, [r4, #32]
 8002120:	4303      	orrs	r3, r0
 8002122:	4313      	orrs	r3, r2
 8002124:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002126:	0020      	movs	r0, r4
 8002128:	f7ff ffaa 	bl	8002080 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800212c:	68a2      	ldr	r2, [r4, #8]
 800212e:	2380      	movs	r3, #128	@ 0x80
 8002130:	01db      	lsls	r3, r3, #7
 8002132:	429a      	cmp	r2, r3
 8002134:	d018      	beq.n	8002168 <HAL_DMA_Init+0x88>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002136:	6861      	ldr	r1, [r4, #4]
 8002138:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800213a:	23ff      	movs	r3, #255	@ 0xff
 800213c:	400b      	ands	r3, r1
 800213e:	6013      	str	r3, [r2, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002140:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8002142:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
 8002144:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request > 0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002146:	6863      	ldr	r3, [r4, #4]
 8002148:	3b01      	subs	r3, #1
 800214a:	2b03      	cmp	r3, #3
 800214c:	d90f      	bls.n	800216e <HAL_DMA_Init+0x8e>
    hdma->DMAmuxRequestGen = 0U;
 800214e:	2300      	movs	r3, #0
 8002150:	6523      	str	r3, [r4, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8002152:	6563      	str	r3, [r4, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002154:	65a3      	str	r3, [r4, #88]	@ 0x58
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002156:	2300      	movs	r3, #0
 8002158:	63e3      	str	r3, [r4, #60]	@ 0x3c
  hdma->State  = HAL_DMA_STATE_READY;
 800215a:	2225      	movs	r2, #37	@ 0x25
 800215c:	2101      	movs	r1, #1
 800215e:	54a1      	strb	r1, [r4, r2]
  __HAL_UNLOCK(hdma);
 8002160:	3a01      	subs	r2, #1
 8002162:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 8002164:	2000      	movs	r0, #0
}
 8002166:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002168:	2300      	movs	r3, #0
 800216a:	6063      	str	r3, [r4, #4]
 800216c:	e7e3      	b.n	8002136 <HAL_DMA_Init+0x56>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800216e:	0020      	movs	r0, r4
 8002170:	f7ff ffa2 	bl	80020b8 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002174:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8002176:	2200      	movs	r2, #0
 8002178:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800217a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800217c:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800217e:	605a      	str	r2, [r3, #4]
 8002180:	e7e9      	b.n	8002156 <HAL_DMA_Init+0x76>
    return HAL_ERROR;
 8002182:	2001      	movs	r0, #1
 8002184:	e7ef      	b.n	8002166 <HAL_DMA_Init+0x86>
 8002186:	46c0      	nop			@ (mov r8, r8)
 8002188:	bffdfff8 	.word	0xbffdfff8
 800218c:	ffff800f 	.word	0xffff800f

08002190 <HAL_DMA_Start_IT>:
{
 8002190:	b570      	push	{r4, r5, r6, lr}
 8002192:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 8002194:	2024      	movs	r0, #36	@ 0x24
 8002196:	5c20      	ldrb	r0, [r4, r0]
 8002198:	2801      	cmp	r0, #1
 800219a:	d046      	beq.n	800222a <HAL_DMA_Start_IT+0x9a>
 800219c:	2024      	movs	r0, #36	@ 0x24
 800219e:	2501      	movs	r5, #1
 80021a0:	5425      	strb	r5, [r4, r0]
  if (HAL_DMA_STATE_READY == hdma->State)
 80021a2:	3001      	adds	r0, #1
 80021a4:	5c20      	ldrb	r0, [r4, r0]
 80021a6:	2801      	cmp	r0, #1
 80021a8:	d007      	beq.n	80021ba <HAL_DMA_Start_IT+0x2a>
    __HAL_UNLOCK(hdma);
 80021aa:	2324      	movs	r3, #36	@ 0x24
 80021ac:	2200      	movs	r2, #0
 80021ae:	54e2      	strb	r2, [r4, r3]
    status = HAL_BUSY;
 80021b0:	2002      	movs	r0, #2
  __HAL_UNLOCK(hdma);
 80021b2:	2324      	movs	r3, #36	@ 0x24
 80021b4:	2200      	movs	r2, #0
 80021b6:	54e2      	strb	r2, [r4, r3]
}
 80021b8:	bd70      	pop	{r4, r5, r6, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 80021ba:	3024      	adds	r0, #36	@ 0x24
 80021bc:	3501      	adds	r5, #1
 80021be:	5425      	strb	r5, [r4, r0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021c0:	2000      	movs	r0, #0
 80021c2:	63e0      	str	r0, [r4, #60]	@ 0x3c
    __HAL_DMA_DISABLE(hdma);
 80021c4:	6825      	ldr	r5, [r4, #0]
 80021c6:	6828      	ldr	r0, [r5, #0]
 80021c8:	2601      	movs	r6, #1
 80021ca:	43b0      	bics	r0, r6
 80021cc:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80021ce:	0020      	movs	r0, r4
 80021d0:	f7ff ff32 	bl	8002038 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 80021d4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d01c      	beq.n	8002214 <HAL_DMA_Start_IT+0x84>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021da:	6822      	ldr	r2, [r4, #0]
 80021dc:	6813      	ldr	r3, [r2, #0]
 80021de:	210e      	movs	r1, #14
 80021e0:	430b      	orrs	r3, r1
 80021e2:	6013      	str	r3, [r2, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80021e4:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 80021e6:	6813      	ldr	r3, [r2, #0]
 80021e8:	03db      	lsls	r3, r3, #15
 80021ea:	d504      	bpl.n	80021f6 <HAL_DMA_Start_IT+0x66>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80021ec:	6811      	ldr	r1, [r2, #0]
 80021ee:	2380      	movs	r3, #128	@ 0x80
 80021f0:	005b      	lsls	r3, r3, #1
 80021f2:	430b      	orrs	r3, r1
 80021f4:	6013      	str	r3, [r2, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 80021f6:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d004      	beq.n	8002206 <HAL_DMA_Start_IT+0x76>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80021fc:	6819      	ldr	r1, [r3, #0]
 80021fe:	2280      	movs	r2, #128	@ 0x80
 8002200:	0052      	lsls	r2, r2, #1
 8002202:	430a      	orrs	r2, r1
 8002204:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 8002206:	6822      	ldr	r2, [r4, #0]
 8002208:	6813      	ldr	r3, [r2, #0]
 800220a:	2101      	movs	r1, #1
 800220c:	430b      	orrs	r3, r1
 800220e:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002210:	2000      	movs	r0, #0
 8002212:	e7ce      	b.n	80021b2 <HAL_DMA_Start_IT+0x22>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002214:	6822      	ldr	r2, [r4, #0]
 8002216:	6813      	ldr	r3, [r2, #0]
 8002218:	2104      	movs	r1, #4
 800221a:	438b      	bics	r3, r1
 800221c:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800221e:	6822      	ldr	r2, [r4, #0]
 8002220:	6813      	ldr	r3, [r2, #0]
 8002222:	3106      	adds	r1, #6
 8002224:	430b      	orrs	r3, r1
 8002226:	6013      	str	r3, [r2, #0]
 8002228:	e7dc      	b.n	80021e4 <HAL_DMA_Start_IT+0x54>
  __HAL_LOCK(hdma);
 800222a:	2002      	movs	r0, #2
 800222c:	e7c4      	b.n	80021b8 <HAL_DMA_Start_IT+0x28>
	...

08002230 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8002230:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002232:	46d6      	mov	lr, sl
 8002234:	464f      	mov	r7, r9
 8002236:	4646      	mov	r6, r8
 8002238:	b5c0      	push	{r6, r7, lr}
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 800223a:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800223c:	e03b      	b.n	80022b6 <HAL_GPIO_Init+0x86>
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        tmp = EXTI->EXTICR[position >> 2U];
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 800223e:	2505      	movs	r5, #5
 8002240:	e000      	b.n	8002244 <HAL_GPIO_Init+0x14>
 8002242:	2500      	movs	r5, #0
 8002244:	40a5      	lsls	r5, r4
 8002246:	002c      	movs	r4, r5
 8002248:	433c      	orrs	r4, r7
        EXTI->EXTICR[position >> 2U] = tmp;
 800224a:	4d63      	ldr	r5, [pc, #396]	@ (80023d8 <HAL_GPIO_Init+0x1a8>)
 800224c:	3218      	adds	r2, #24
 800224e:	0092      	lsls	r2, r2, #2
 8002250:	5154      	str	r4, [r2, r5]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8002252:	2280      	movs	r2, #128	@ 0x80
 8002254:	58af      	ldr	r7, [r5, r2]
        tmp &= ~((uint32_t)iocurrent);
 8002256:	464a      	mov	r2, r9
 8002258:	43d2      	mvns	r2, r2
 800225a:	003d      	movs	r5, r7
 800225c:	464c      	mov	r4, r9
 800225e:	43a5      	bics	r5, r4
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002260:	684c      	ldr	r4, [r1, #4]
 8002262:	03e4      	lsls	r4, r4, #15
 8002264:	d502      	bpl.n	800226c <HAL_GPIO_Init+0x3c>
        {
          tmp |= iocurrent;
 8002266:	003d      	movs	r5, r7
 8002268:	464c      	mov	r4, r9
 800226a:	4325      	orrs	r5, r4
        }
        EXTI->IMR1 = tmp;
 800226c:	4c5a      	ldr	r4, [pc, #360]	@ (80023d8 <HAL_GPIO_Init+0x1a8>)
 800226e:	2780      	movs	r7, #128	@ 0x80
 8002270:	51e5      	str	r5, [r4, r7]

        tmp = EXTI->EMR1;
 8002272:	2584      	movs	r5, #132	@ 0x84
 8002274:	5967      	ldr	r7, [r4, r5]
        tmp &= ~((uint32_t)iocurrent);
 8002276:	003d      	movs	r5, r7
 8002278:	4015      	ands	r5, r2
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800227a:	684c      	ldr	r4, [r1, #4]
 800227c:	03a4      	lsls	r4, r4, #14
 800227e:	d502      	bpl.n	8002286 <HAL_GPIO_Init+0x56>
        {
          tmp |= iocurrent;
 8002280:	003d      	movs	r5, r7
 8002282:	464c      	mov	r4, r9
 8002284:	4325      	orrs	r5, r4
        }
        EXTI->EMR1 = tmp;
 8002286:	4c54      	ldr	r4, [pc, #336]	@ (80023d8 <HAL_GPIO_Init+0x1a8>)
 8002288:	2784      	movs	r7, #132	@ 0x84
 800228a:	51e5      	str	r5, [r4, r7]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 800228c:	6827      	ldr	r7, [r4, #0]
        tmp &= ~((uint32_t)iocurrent);
 800228e:	003d      	movs	r5, r7
 8002290:	4015      	ands	r5, r2
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002292:	684c      	ldr	r4, [r1, #4]
 8002294:	02e4      	lsls	r4, r4, #11
 8002296:	d502      	bpl.n	800229e <HAL_GPIO_Init+0x6e>
        {
          tmp |= iocurrent;
 8002298:	003d      	movs	r5, r7
 800229a:	464c      	mov	r4, r9
 800229c:	4325      	orrs	r5, r4
        }
        EXTI->RTSR1 = tmp;
 800229e:	4c4e      	ldr	r4, [pc, #312]	@ (80023d8 <HAL_GPIO_Init+0x1a8>)
 80022a0:	6025      	str	r5, [r4, #0]

        tmp = EXTI->FTSR1;
 80022a2:	6865      	ldr	r5, [r4, #4]
        tmp &= ~((uint32_t)iocurrent);
 80022a4:	402a      	ands	r2, r5
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022a6:	684c      	ldr	r4, [r1, #4]
 80022a8:	02a4      	lsls	r4, r4, #10
 80022aa:	d501      	bpl.n	80022b0 <HAL_GPIO_Init+0x80>
        {
          tmp |= iocurrent;
 80022ac:	464a      	mov	r2, r9
 80022ae:	432a      	orrs	r2, r5
        }
        EXTI->FTSR1 = tmp;
 80022b0:	4c49      	ldr	r4, [pc, #292]	@ (80023d8 <HAL_GPIO_Init+0x1a8>)
 80022b2:	6062      	str	r2, [r4, #4]
      }
    }

    position++;
 80022b4:	3301      	adds	r3, #1
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80022b6:	680c      	ldr	r4, [r1, #0]
 80022b8:	0022      	movs	r2, r4
 80022ba:	40da      	lsrs	r2, r3
 80022bc:	d100      	bne.n	80022c0 <HAL_GPIO_Init+0x90>
 80022be:	e086      	b.n	80023ce <HAL_GPIO_Init+0x19e>
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80022c0:	2201      	movs	r2, #1
 80022c2:	409a      	lsls	r2, r3
 80022c4:	0026      	movs	r6, r4
 80022c6:	4016      	ands	r6, r2
 80022c8:	46b1      	mov	r9, r6
    if (iocurrent != 0U)
 80022ca:	4214      	tst	r4, r2
 80022cc:	d0f2      	beq.n	80022b4 <HAL_GPIO_Init+0x84>
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022ce:	684c      	ldr	r4, [r1, #4]
 80022d0:	2c02      	cmp	r4, #2
 80022d2:	d001      	beq.n	80022d8 <HAL_GPIO_Init+0xa8>
 80022d4:	2c12      	cmp	r4, #18
 80022d6:	d118      	bne.n	800230a <HAL_GPIO_Init+0xda>
        tmp = GPIOx->AFR[position >> 3U];
 80022d8:	08dd      	lsrs	r5, r3, #3
 80022da:	3508      	adds	r5, #8
 80022dc:	00ad      	lsls	r5, r5, #2
 80022de:	582c      	ldr	r4, [r5, r0]
 80022e0:	46a4      	mov	ip, r4
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 80022e2:	2707      	movs	r7, #7
 80022e4:	401f      	ands	r7, r3
 80022e6:	00bf      	lsls	r7, r7, #2
 80022e8:	240f      	movs	r4, #15
 80022ea:	46a2      	mov	sl, r4
 80022ec:	0026      	movs	r6, r4
 80022ee:	40be      	lsls	r6, r7
 80022f0:	46b0      	mov	r8, r6
 80022f2:	4666      	mov	r6, ip
 80022f4:	4644      	mov	r4, r8
 80022f6:	43a6      	bics	r6, r4
 80022f8:	46b4      	mov	ip, r6
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80022fa:	690c      	ldr	r4, [r1, #16]
 80022fc:	4656      	mov	r6, sl
 80022fe:	4026      	ands	r6, r4
 8002300:	0034      	movs	r4, r6
 8002302:	40bc      	lsls	r4, r7
 8002304:	4666      	mov	r6, ip
 8002306:	4334      	orrs	r4, r6
        GPIOx->AFR[position >> 3U] = tmp;
 8002308:	502c      	str	r4, [r5, r0]
      tmp = GPIOx->MODER;
 800230a:	6804      	ldr	r4, [r0, #0]
 800230c:	46a4      	mov	ip, r4
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 800230e:	005d      	lsls	r5, r3, #1
 8002310:	2403      	movs	r4, #3
 8002312:	46a2      	mov	sl, r4
 8002314:	0027      	movs	r7, r4
 8002316:	40af      	lsls	r7, r5
 8002318:	46b8      	mov	r8, r7
 800231a:	43ff      	mvns	r7, r7
 800231c:	4666      	mov	r6, ip
 800231e:	4644      	mov	r4, r8
 8002320:	43a6      	bics	r6, r4
 8002322:	46b4      	mov	ip, r6
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8002324:	684c      	ldr	r4, [r1, #4]
 8002326:	4656      	mov	r6, sl
 8002328:	4026      	ands	r6, r4
 800232a:	0034      	movs	r4, r6
 800232c:	40ac      	lsls	r4, r5
 800232e:	4666      	mov	r6, ip
 8002330:	4334      	orrs	r4, r6
      GPIOx->MODER = tmp;
 8002332:	6004      	str	r4, [r0, #0]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002334:	684c      	ldr	r4, [r1, #4]
 8002336:	1e66      	subs	r6, r4, #1
 8002338:	2e01      	cmp	r6, #1
 800233a:	d903      	bls.n	8002344 <HAL_GPIO_Init+0x114>
 800233c:	2c11      	cmp	r4, #17
 800233e:	d001      	beq.n	8002344 <HAL_GPIO_Init+0x114>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002340:	2c12      	cmp	r4, #18
 8002342:	d112      	bne.n	800236a <HAL_GPIO_Init+0x13a>
        tmp = GPIOx->OSPEEDR;
 8002344:	6884      	ldr	r4, [r0, #8]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002346:	403c      	ands	r4, r7
 8002348:	46a4      	mov	ip, r4
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800234a:	68cc      	ldr	r4, [r1, #12]
 800234c:	40ac      	lsls	r4, r5
 800234e:	4666      	mov	r6, ip
 8002350:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = tmp;
 8002352:	6084      	str	r4, [r0, #8]
        tmp = GPIOx->OTYPER;
 8002354:	6844      	ldr	r4, [r0, #4]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002356:	4394      	bics	r4, r2
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002358:	684a      	ldr	r2, [r1, #4]
 800235a:	0912      	lsrs	r2, r2, #4
 800235c:	4694      	mov	ip, r2
 800235e:	2201      	movs	r2, #1
 8002360:	4666      	mov	r6, ip
 8002362:	4032      	ands	r2, r6
 8002364:	409a      	lsls	r2, r3
 8002366:	4322      	orrs	r2, r4
        GPIOx->OTYPER = tmp;
 8002368:	6042      	str	r2, [r0, #4]
      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800236a:	684a      	ldr	r2, [r1, #4]
 800236c:	2a03      	cmp	r2, #3
 800236e:	d005      	beq.n	800237c <HAL_GPIO_Init+0x14c>
        tmp = GPIOx->PUPDR;
 8002370:	68c4      	ldr	r4, [r0, #12]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8002372:	403c      	ands	r4, r7
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8002374:	688a      	ldr	r2, [r1, #8]
 8002376:	40aa      	lsls	r2, r5
 8002378:	4322      	orrs	r2, r4
        GPIOx->PUPDR = tmp;
 800237a:	60c2      	str	r2, [r0, #12]
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800237c:	684a      	ldr	r2, [r1, #4]
 800237e:	00d2      	lsls	r2, r2, #3
 8002380:	d598      	bpl.n	80022b4 <HAL_GPIO_Init+0x84>
        tmp = EXTI->EXTICR[position >> 2U];
 8002382:	089a      	lsrs	r2, r3, #2
 8002384:	0014      	movs	r4, r2
 8002386:	3418      	adds	r4, #24
 8002388:	00a4      	lsls	r4, r4, #2
 800238a:	4d13      	ldr	r5, [pc, #76]	@ (80023d8 <HAL_GPIO_Init+0x1a8>)
 800238c:	5967      	ldr	r7, [r4, r5]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 800238e:	2403      	movs	r4, #3
 8002390:	401c      	ands	r4, r3
 8002392:	00e4      	lsls	r4, r4, #3
 8002394:	250f      	movs	r5, #15
 8002396:	40a5      	lsls	r5, r4
 8002398:	43af      	bics	r7, r5
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 800239a:	25a0      	movs	r5, #160	@ 0xa0
 800239c:	05ed      	lsls	r5, r5, #23
 800239e:	42a8      	cmp	r0, r5
 80023a0:	d100      	bne.n	80023a4 <HAL_GPIO_Init+0x174>
 80023a2:	e74e      	b.n	8002242 <HAL_GPIO_Init+0x12>
 80023a4:	4d0d      	ldr	r5, [pc, #52]	@ (80023dc <HAL_GPIO_Init+0x1ac>)
 80023a6:	42a8      	cmp	r0, r5
 80023a8:	d00b      	beq.n	80023c2 <HAL_GPIO_Init+0x192>
 80023aa:	4d0d      	ldr	r5, [pc, #52]	@ (80023e0 <HAL_GPIO_Init+0x1b0>)
 80023ac:	42a8      	cmp	r0, r5
 80023ae:	d00a      	beq.n	80023c6 <HAL_GPIO_Init+0x196>
 80023b0:	4d0c      	ldr	r5, [pc, #48]	@ (80023e4 <HAL_GPIO_Init+0x1b4>)
 80023b2:	42a8      	cmp	r0, r5
 80023b4:	d009      	beq.n	80023ca <HAL_GPIO_Init+0x19a>
 80023b6:	4d0c      	ldr	r5, [pc, #48]	@ (80023e8 <HAL_GPIO_Init+0x1b8>)
 80023b8:	42a8      	cmp	r0, r5
 80023ba:	d100      	bne.n	80023be <HAL_GPIO_Init+0x18e>
 80023bc:	e73f      	b.n	800223e <HAL_GPIO_Init+0xe>
 80023be:	2506      	movs	r5, #6
 80023c0:	e740      	b.n	8002244 <HAL_GPIO_Init+0x14>
 80023c2:	2501      	movs	r5, #1
 80023c4:	e73e      	b.n	8002244 <HAL_GPIO_Init+0x14>
 80023c6:	2502      	movs	r5, #2
 80023c8:	e73c      	b.n	8002244 <HAL_GPIO_Init+0x14>
 80023ca:	2503      	movs	r5, #3
 80023cc:	e73a      	b.n	8002244 <HAL_GPIO_Init+0x14>
  }
}
 80023ce:	bce0      	pop	{r5, r6, r7}
 80023d0:	46ba      	mov	sl, r7
 80023d2:	46b1      	mov	r9, r6
 80023d4:	46a8      	mov	r8, r5
 80023d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023d8:	40021800 	.word	0x40021800
 80023dc:	50000400 	.word	0x50000400
 80023e0:	50000800 	.word	0x50000800
 80023e4:	50000c00 	.word	0x50000c00
 80023e8:	50001400 	.word	0x50001400

080023ec <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80023ec:	4b14      	ldr	r3, [pc, #80]	@ (8002440 <HAL_RCC_GetSysClockFreq+0x54>)
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	2238      	movs	r2, #56	@ 0x38
 80023f2:	421a      	tst	r2, r3
 80023f4:	d107      	bne.n	8002406 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80023f6:	4b12      	ldr	r3, [pc, #72]	@ (8002440 <HAL_RCC_GetSysClockFreq+0x54>)
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	0ad2      	lsrs	r2, r2, #11
 80023fc:	2307      	movs	r3, #7
 80023fe:	4013      	ands	r3, r2

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002400:	4810      	ldr	r0, [pc, #64]	@ (8002444 <HAL_RCC_GetSysClockFreq+0x58>)
 8002402:	40d8      	lsrs	r0, r3
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
}
 8002404:	4770      	bx	lr
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002406:	4b0e      	ldr	r3, [pc, #56]	@ (8002440 <HAL_RCC_GetSysClockFreq+0x54>)
 8002408:	689a      	ldr	r2, [r3, #8]
 800240a:	2338      	movs	r3, #56	@ 0x38
 800240c:	4013      	ands	r3, r2
 800240e:	2b08      	cmp	r3, #8
 8002410:	d010      	beq.n	8002434 <HAL_RCC_GetSysClockFreq+0x48>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8002412:	4b0b      	ldr	r3, [pc, #44]	@ (8002440 <HAL_RCC_GetSysClockFreq+0x54>)
 8002414:	689a      	ldr	r2, [r3, #8]
 8002416:	2338      	movs	r3, #56	@ 0x38
 8002418:	4013      	ands	r3, r2
 800241a:	2b20      	cmp	r3, #32
 800241c:	d00c      	beq.n	8002438 <HAL_RCC_GetSysClockFreq+0x4c>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 800241e:	4b08      	ldr	r3, [pc, #32]	@ (8002440 <HAL_RCC_GetSysClockFreq+0x54>)
 8002420:	689a      	ldr	r2, [r3, #8]
 8002422:	2338      	movs	r3, #56	@ 0x38
 8002424:	4013      	ands	r3, r2
 8002426:	2b18      	cmp	r3, #24
 8002428:	d001      	beq.n	800242e <HAL_RCC_GetSysClockFreq+0x42>
    sysclockfreq = 0U;
 800242a:	2000      	movs	r0, #0
  return sysclockfreq;
 800242c:	e7ea      	b.n	8002404 <HAL_RCC_GetSysClockFreq+0x18>
    sysclockfreq = LSI_VALUE;
 800242e:	20fa      	movs	r0, #250	@ 0xfa
 8002430:	01c0      	lsls	r0, r0, #7
 8002432:	e7e7      	b.n	8002404 <HAL_RCC_GetSysClockFreq+0x18>
    sysclockfreq = HSE_VALUE;
 8002434:	4804      	ldr	r0, [pc, #16]	@ (8002448 <HAL_RCC_GetSysClockFreq+0x5c>)
 8002436:	e7e5      	b.n	8002404 <HAL_RCC_GetSysClockFreq+0x18>
    sysclockfreq = LSE_VALUE;
 8002438:	2080      	movs	r0, #128	@ 0x80
 800243a:	0200      	lsls	r0, r0, #8
 800243c:	e7e2      	b.n	8002404 <HAL_RCC_GetSysClockFreq+0x18>
 800243e:	46c0      	nop			@ (mov r8, r8)
 8002440:	40021000 	.word	0x40021000
 8002444:	02dc6c00 	.word	0x02dc6c00
 8002448:	007a1200 	.word	0x007a1200

0800244c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800244c:	b510      	push	{r4, lr}
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 800244e:	f7ff ffcd 	bl	80023ec <HAL_RCC_GetSysClockFreq>
 8002452:	4b07      	ldr	r3, [pc, #28]	@ (8002470 <HAL_RCC_GetHCLKFreq+0x24>)
 8002454:	689a      	ldr	r2, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002456:	0a12      	lsrs	r2, r2, #8
 8002458:	230f      	movs	r3, #15
 800245a:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 800245c:	4a05      	ldr	r2, [pc, #20]	@ (8002474 <HAL_RCC_GetHCLKFreq+0x28>)
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	589a      	ldr	r2, [r3, r2]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002462:	231f      	movs	r3, #31
 8002464:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8002466:	40d8      	lsrs	r0, r3
 8002468:	4b03      	ldr	r3, [pc, #12]	@ (8002478 <HAL_RCC_GetHCLKFreq+0x2c>)
 800246a:	6018      	str	r0, [r3, #0]
  return SystemCoreClock;
}
 800246c:	bd10      	pop	{r4, pc}
 800246e:	46c0      	nop			@ (mov r8, r8)
 8002470:	40021000 	.word	0x40021000
 8002474:	08004a10 	.word	0x08004a10
 8002478:	20000004 	.word	0x20000004

0800247c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800247c:	b510      	push	{r4, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 800247e:	f7ff ffe5 	bl	800244c <HAL_RCC_GetHCLKFreq>
 8002482:	4b06      	ldr	r3, [pc, #24]	@ (800249c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002484:	689a      	ldr	r2, [r3, #8]
 8002486:	0b12      	lsrs	r2, r2, #12
 8002488:	2307      	movs	r3, #7
 800248a:	4013      	ands	r3, r2
 800248c:	4a04      	ldr	r2, [pc, #16]	@ (80024a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	589a      	ldr	r2, [r3, r2]
 8002492:	231f      	movs	r3, #31
 8002494:	4013      	ands	r3, r2
 8002496:	40d8      	lsrs	r0, r3
}
 8002498:	bd10      	pop	{r4, pc}
 800249a:	46c0      	nop			@ (mov r8, r8)
 800249c:	40021000 	.word	0x40021000
 80024a0:	080049f0 	.word	0x080049f0

080024a4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80024a4:	b570      	push	{r4, r5, r6, lr}
 80024a6:	0004      	movs	r4, r0
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 80024a8:	4a0f      	ldr	r2, [pc, #60]	@ (80024e8 <HAL_RTC_WaitForSynchro+0x44>)
 80024aa:	68d3      	ldr	r3, [r2, #12]
 80024ac:	2120      	movs	r1, #32
 80024ae:	438b      	bics	r3, r1
 80024b0:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80024b2:	f7ff f8cd 	bl	8001650 <HAL_GetTick>
 80024b6:	0005      	movs	r5, r0

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80024b8:	4b0b      	ldr	r3, [pc, #44]	@ (80024e8 <HAL_RTC_WaitForSynchro+0x44>)
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	069b      	lsls	r3, r3, #26
 80024be:	d411      	bmi.n	80024e4 <HAL_RTC_WaitForSynchro+0x40>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80024c0:	f7ff f8c6 	bl	8001650 <HAL_GetTick>
 80024c4:	1b40      	subs	r0, r0, r5
 80024c6:	23fa      	movs	r3, #250	@ 0xfa
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	4298      	cmp	r0, r3
 80024cc:	d9f4      	bls.n	80024b8 <HAL_RTC_WaitForSynchro+0x14>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80024ce:	4b06      	ldr	r3, [pc, #24]	@ (80024e8 <HAL_RTC_WaitForSynchro+0x44>)
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	069b      	lsls	r3, r3, #26
 80024d4:	d501      	bpl.n	80024da <HAL_RTC_WaitForSynchro+0x36>
        break;
      }
    }
  }

  return HAL_OK;
 80024d6:	2000      	movs	r0, #0
 80024d8:	e005      	b.n	80024e6 <HAL_RTC_WaitForSynchro+0x42>
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80024da:	2325      	movs	r3, #37	@ 0x25
 80024dc:	2203      	movs	r2, #3
 80024de:	54e2      	strb	r2, [r4, r3]
        return HAL_TIMEOUT;
 80024e0:	2003      	movs	r0, #3
 80024e2:	e000      	b.n	80024e6 <HAL_RTC_WaitForSynchro+0x42>
  return HAL_OK;
 80024e4:	2000      	movs	r0, #0
}
 80024e6:	bd70      	pop	{r4, r5, r6, pc}
 80024e8:	40002800 	.word	0x40002800

080024ec <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80024ec:	b570      	push	{r4, r5, r6, lr}
 80024ee:	0004      	movs	r4, r0
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80024f0:	4b12      	ldr	r3, [pc, #72]	@ (800253c <RTC_EnterInitMode+0x50>)
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	065b      	lsls	r3, r3, #25
 80024f6:	d502      	bpl.n	80024fe <RTC_EnterInitMode+0x12>
  HAL_StatusTypeDef status = HAL_OK;
 80024f8:	2500      	movs	r5, #0
      }
    }
  }

  return status;
}
 80024fa:	0028      	movs	r0, r5
 80024fc:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80024fe:	4a0f      	ldr	r2, [pc, #60]	@ (800253c <RTC_EnterInitMode+0x50>)
 8002500:	68d3      	ldr	r3, [r2, #12]
 8002502:	2180      	movs	r1, #128	@ 0x80
 8002504:	430b      	orrs	r3, r1
 8002506:	60d3      	str	r3, [r2, #12]
    tickstart = HAL_GetTick();
 8002508:	f7ff f8a2 	bl	8001650 <HAL_GetTick>
 800250c:	0006      	movs	r6, r0
  HAL_StatusTypeDef status = HAL_OK;
 800250e:	2500      	movs	r5, #0
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002510:	4b0a      	ldr	r3, [pc, #40]	@ (800253c <RTC_EnterInitMode+0x50>)
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	065b      	lsls	r3, r3, #25
 8002516:	d4f0      	bmi.n	80024fa <RTC_EnterInitMode+0xe>
 8002518:	2d03      	cmp	r5, #3
 800251a:	d0ee      	beq.n	80024fa <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800251c:	f7ff f898 	bl	8001650 <HAL_GetTick>
 8002520:	1b80      	subs	r0, r0, r6
 8002522:	22fa      	movs	r2, #250	@ 0xfa
 8002524:	0092      	lsls	r2, r2, #2
 8002526:	4290      	cmp	r0, r2
 8002528:	d9f2      	bls.n	8002510 <RTC_EnterInitMode+0x24>
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800252a:	4b04      	ldr	r3, [pc, #16]	@ (800253c <RTC_EnterInitMode+0x50>)
 800252c:	68db      	ldr	r3, [r3, #12]
 800252e:	065b      	lsls	r3, r3, #25
 8002530:	d4e3      	bmi.n	80024fa <RTC_EnterInitMode+0xe>
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002532:	2325      	movs	r3, #37	@ 0x25
 8002534:	2203      	movs	r2, #3
 8002536:	54e2      	strb	r2, [r4, r3]
          status = HAL_TIMEOUT;
 8002538:	2503      	movs	r5, #3
 800253a:	e7e9      	b.n	8002510 <RTC_EnterInitMode+0x24>
 800253c:	40002800 	.word	0x40002800

08002540 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002540:	b510      	push	{r4, lr}
 8002542:	0004      	movs	r4, r0
  HAL_StatusTypeDef status = HAL_OK;

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8002544:	4b11      	ldr	r3, [pc, #68]	@ (800258c <RTC_ExitInitMode+0x4c>)
 8002546:	68da      	ldr	r2, [r3, #12]
 8002548:	2180      	movs	r1, #128	@ 0x80
 800254a:	438a      	bics	r2, r1
 800254c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800254e:	699b      	ldr	r3, [r3, #24]
 8002550:	069b      	lsls	r3, r3, #26
 8002552:	d408      	bmi.n	8002566 <RTC_ExitInitMode+0x26>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002554:	f7ff ffa6 	bl	80024a4 <HAL_RTC_WaitForSynchro>
 8002558:	2800      	cmp	r0, #0
 800255a:	d016      	beq.n	800258a <RTC_ExitInitMode+0x4a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800255c:	2325      	movs	r3, #37	@ 0x25
 800255e:	2203      	movs	r2, #3
 8002560:	54e2      	strb	r2, [r4, r3]
      status = HAL_TIMEOUT;
 8002562:	2003      	movs	r0, #3
 8002564:	e011      	b.n	800258a <RTC_ExitInitMode+0x4a>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002566:	4a09      	ldr	r2, [pc, #36]	@ (800258c <RTC_ExitInitMode+0x4c>)
 8002568:	6993      	ldr	r3, [r2, #24]
 800256a:	2120      	movs	r1, #32
 800256c:	438b      	bics	r3, r1
 800256e:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002570:	f7ff ff98 	bl	80024a4 <HAL_RTC_WaitForSynchro>
 8002574:	2800      	cmp	r0, #0
 8002576:	d003      	beq.n	8002580 <RTC_ExitInitMode+0x40>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002578:	2325      	movs	r3, #37	@ 0x25
 800257a:	2203      	movs	r2, #3
 800257c:	54e2      	strb	r2, [r4, r3]
      status = HAL_TIMEOUT;
 800257e:	2003      	movs	r0, #3
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002580:	4a02      	ldr	r2, [pc, #8]	@ (800258c <RTC_ExitInitMode+0x4c>)
 8002582:	6993      	ldr	r3, [r2, #24]
 8002584:	2120      	movs	r1, #32
 8002586:	430b      	orrs	r3, r1
 8002588:	6193      	str	r3, [r2, #24]
  }

  return status;
}
 800258a:	bd10      	pop	{r4, pc}
 800258c:	40002800 	.word	0x40002800

08002590 <HAL_RTC_Init>:
{
 8002590:	b570      	push	{r4, r5, r6, lr}
 8002592:	1e04      	subs	r4, r0, #0
  if (hrtc != NULL)
 8002594:	d048      	beq.n	8002628 <HAL_RTC_Init+0x98>
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8002596:	2325      	movs	r3, #37	@ 0x25
 8002598:	5cc3      	ldrb	r3, [r0, r3]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d00b      	beq.n	80025b6 <HAL_RTC_Init+0x26>
    hrtc->State = HAL_RTC_STATE_BUSY;
 800259e:	2325      	movs	r3, #37	@ 0x25
 80025a0:	2202      	movs	r2, #2
 80025a2:	54e2      	strb	r2, [r4, r3]
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80025a4:	6822      	ldr	r2, [r4, #0]
 80025a6:	68d3      	ldr	r3, [r2, #12]
 80025a8:	06db      	lsls	r3, r3, #27
 80025aa:	d50a      	bpl.n	80025c2 <HAL_RTC_Init+0x32>
      status = HAL_OK;
 80025ac:	2000      	movs	r0, #0
      hrtc->State = HAL_RTC_STATE_READY;
 80025ae:	2325      	movs	r3, #37	@ 0x25
 80025b0:	2201      	movs	r2, #1
 80025b2:	54e2      	strb	r2, [r4, r3]
}
 80025b4:	bd70      	pop	{r4, r5, r6, pc}
      hrtc->Lock = HAL_UNLOCKED;
 80025b6:	3324      	adds	r3, #36	@ 0x24
 80025b8:	2200      	movs	r2, #0
 80025ba:	54c2      	strb	r2, [r0, r3]
      HAL_RTC_MspInit(hrtc);
 80025bc:	f7fe fe84 	bl	80012c8 <HAL_RTC_MspInit>
 80025c0:	e7ed      	b.n	800259e <HAL_RTC_Init+0xe>
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80025c2:	23ca      	movs	r3, #202	@ 0xca
 80025c4:	6253      	str	r3, [r2, #36]	@ 0x24
 80025c6:	6823      	ldr	r3, [r4, #0]
 80025c8:	2253      	movs	r2, #83	@ 0x53
 80025ca:	625a      	str	r2, [r3, #36]	@ 0x24
      status = RTC_EnterInitMode(hrtc);
 80025cc:	0020      	movs	r0, r4
 80025ce:	f7ff ff8d 	bl	80024ec <RTC_EnterInitMode>
      if (status == HAL_OK)
 80025d2:	2800      	cmp	r0, #0
 80025d4:	d005      	beq.n	80025e2 <HAL_RTC_Init+0x52>
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80025d6:	6823      	ldr	r3, [r4, #0]
 80025d8:	22ff      	movs	r2, #255	@ 0xff
 80025da:	625a      	str	r2, [r3, #36]	@ 0x24
    if (status == HAL_OK)
 80025dc:	2800      	cmp	r0, #0
 80025de:	d1e9      	bne.n	80025b4 <HAL_RTC_Init+0x24>
 80025e0:	e7e5      	b.n	80025ae <HAL_RTC_Init+0x1e>
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL));
 80025e2:	4912      	ldr	r1, [pc, #72]	@ (800262c <HAL_RTC_Init+0x9c>)
 80025e4:	698b      	ldr	r3, [r1, #24]
 80025e6:	4a12      	ldr	r2, [pc, #72]	@ (8002630 <HAL_RTC_Init+0xa0>)
 80025e8:	4013      	ands	r3, r2
 80025ea:	618b      	str	r3, [r1, #24]
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 80025ec:	698a      	ldr	r2, [r1, #24]
 80025ee:	6863      	ldr	r3, [r4, #4]
 80025f0:	6920      	ldr	r0, [r4, #16]
 80025f2:	4303      	orrs	r3, r0
 80025f4:	69a0      	ldr	r0, [r4, #24]
 80025f6:	4303      	orrs	r3, r0
 80025f8:	4313      	orrs	r3, r2
 80025fa:	618b      	str	r3, [r1, #24]
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 80025fc:	68e3      	ldr	r3, [r4, #12]
 80025fe:	68a2      	ldr	r2, [r4, #8]
 8002600:	0412      	lsls	r2, r2, #16
 8002602:	4313      	orrs	r3, r2
 8002604:	610b      	str	r3, [r1, #16]
        status = RTC_ExitInitMode(hrtc);
 8002606:	0020      	movs	r0, r4
 8002608:	f7ff ff9a 	bl	8002540 <RTC_ExitInitMode>
      if (status == HAL_OK)
 800260c:	2800      	cmp	r0, #0
 800260e:	d1e2      	bne.n	80025d6 <HAL_RTC_Init+0x46>
        MODIFY_REG(RTC->CR, \
 8002610:	4906      	ldr	r1, [pc, #24]	@ (800262c <HAL_RTC_Init+0x9c>)
 8002612:	698b      	ldr	r3, [r1, #24]
 8002614:	00db      	lsls	r3, r3, #3
 8002616:	08db      	lsrs	r3, r3, #3
 8002618:	6a22      	ldr	r2, [r4, #32]
 800261a:	69e5      	ldr	r5, [r4, #28]
 800261c:	432a      	orrs	r2, r5
 800261e:	6965      	ldr	r5, [r4, #20]
 8002620:	432a      	orrs	r2, r5
 8002622:	4313      	orrs	r3, r2
 8002624:	618b      	str	r3, [r1, #24]
 8002626:	e7d6      	b.n	80025d6 <HAL_RTC_Init+0x46>
  HAL_StatusTypeDef status = HAL_ERROR;
 8002628:	2001      	movs	r0, #1
 800262a:	e7c3      	b.n	80025b4 <HAL_RTC_Init+0x24>
 800262c:	40002800 	.word	0x40002800
 8002630:	ff8fffbf 	.word	0xff8fffbf

08002634 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8002634:	2300      	movs	r3, #0
  uint8_t Param = Value;

  while (Param >= 10U)
 8002636:	e002      	b.n	800263e <RTC_ByteToBcd2+0xa>
  {
    bcdhigh++;
 8002638:	3301      	adds	r3, #1
    Param -= 10U;
 800263a:	380a      	subs	r0, #10
 800263c:	b2c0      	uxtb	r0, r0
  while (Param >= 10U)
 800263e:	2809      	cmp	r0, #9
 8002640:	d8fa      	bhi.n	8002638 <RTC_ByteToBcd2+0x4>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8002642:	011b      	lsls	r3, r3, #4
 8002644:	b2db      	uxtb	r3, r3
 8002646:	4318      	orrs	r0, r3
}
 8002648:	4770      	bx	lr
	...

0800264c <HAL_RTC_SetTime>:
{
 800264c:	b570      	push	{r4, r5, r6, lr}
 800264e:	0004      	movs	r4, r0
 8002650:	000e      	movs	r6, r1
 8002652:	0015      	movs	r5, r2
  __HAL_LOCK(hrtc);
 8002654:	2324      	movs	r3, #36	@ 0x24
 8002656:	5cc3      	ldrb	r3, [r0, r3]
 8002658:	2b01      	cmp	r3, #1
 800265a:	d057      	beq.n	800270c <HAL_RTC_SetTime+0xc0>
 800265c:	2324      	movs	r3, #36	@ 0x24
 800265e:	2201      	movs	r2, #1
 8002660:	54c2      	strb	r2, [r0, r3]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002662:	3301      	adds	r3, #1
 8002664:	3201      	adds	r2, #1
 8002666:	54c2      	strb	r2, [r0, r3]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002668:	6803      	ldr	r3, [r0, #0]
 800266a:	32c8      	adds	r2, #200	@ 0xc8
 800266c:	625a      	str	r2, [r3, #36]	@ 0x24
 800266e:	6803      	ldr	r3, [r0, #0]
 8002670:	3a77      	subs	r2, #119	@ 0x77
 8002672:	625a      	str	r2, [r3, #36]	@ 0x24
  status = RTC_EnterInitMode(hrtc);
 8002674:	f7ff ff3a 	bl	80024ec <RTC_EnterInitMode>
  if (status == HAL_OK)
 8002678:	2800      	cmp	r0, #0
 800267a:	d12a      	bne.n	80026d2 <HAL_RTC_SetTime+0x86>
    if (Format == RTC_FORMAT_BIN)
 800267c:	2d00      	cmp	r5, #0
 800267e:	d134      	bne.n	80026ea <HAL_RTC_SetTime+0x9e>
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002680:	6823      	ldr	r3, [r4, #0]
 8002682:	699b      	ldr	r3, [r3, #24]
 8002684:	065b      	lsls	r3, r3, #25
 8002686:	d401      	bmi.n	800268c <HAL_RTC_SetTime+0x40>
        sTime->TimeFormat = 0x00U;
 8002688:	2300      	movs	r3, #0
 800268a:	70f3      	strb	r3, [r6, #3]
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800268c:	7830      	ldrb	r0, [r6, #0]
 800268e:	f7ff ffd1 	bl	8002634 <RTC_ByteToBcd2>
 8002692:	0405      	lsls	r5, r0, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002694:	7870      	ldrb	r0, [r6, #1]
 8002696:	f7ff ffcd 	bl	8002634 <RTC_ByteToBcd2>
 800269a:	0200      	lsls	r0, r0, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800269c:	4305      	orrs	r5, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800269e:	78b0      	ldrb	r0, [r6, #2]
 80026a0:	f7ff ffc8 	bl	8002634 <RTC_ByteToBcd2>
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80026a4:	4328      	orrs	r0, r5
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80026a6:	78f3      	ldrb	r3, [r6, #3]
 80026a8:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80026aa:	4318      	orrs	r0, r3
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80026ac:	6823      	ldr	r3, [r4, #0]
 80026ae:	4a18      	ldr	r2, [pc, #96]	@ (8002710 <HAL_RTC_SetTime+0xc4>)
 80026b0:	4010      	ands	r0, r2
 80026b2:	6018      	str	r0, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80026b4:	6822      	ldr	r2, [r4, #0]
 80026b6:	6993      	ldr	r3, [r2, #24]
 80026b8:	4916      	ldr	r1, [pc, #88]	@ (8002714 <HAL_RTC_SetTime+0xc8>)
 80026ba:	400b      	ands	r3, r1
 80026bc:	6193      	str	r3, [r2, #24]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80026be:	6821      	ldr	r1, [r4, #0]
 80026c0:	698b      	ldr	r3, [r1, #24]
 80026c2:	68f2      	ldr	r2, [r6, #12]
 80026c4:	6930      	ldr	r0, [r6, #16]
 80026c6:	4302      	orrs	r2, r0
 80026c8:	4313      	orrs	r3, r2
 80026ca:	618b      	str	r3, [r1, #24]
    status = RTC_ExitInitMode(hrtc);
 80026cc:	0020      	movs	r0, r4
 80026ce:	f7ff ff37 	bl	8002540 <RTC_ExitInitMode>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80026d2:	6823      	ldr	r3, [r4, #0]
 80026d4:	22ff      	movs	r2, #255	@ 0xff
 80026d6:	625a      	str	r2, [r3, #36]	@ 0x24
  if (status == HAL_OK)
 80026d8:	2800      	cmp	r0, #0
 80026da:	d102      	bne.n	80026e2 <HAL_RTC_SetTime+0x96>
    hrtc->State = HAL_RTC_STATE_READY;
 80026dc:	2325      	movs	r3, #37	@ 0x25
 80026de:	3afe      	subs	r2, #254	@ 0xfe
 80026e0:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hrtc);
 80026e2:	2324      	movs	r3, #36	@ 0x24
 80026e4:	2200      	movs	r2, #0
 80026e6:	54e2      	strb	r2, [r4, r3]
}
 80026e8:	bd70      	pop	{r4, r5, r6, pc}
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80026ea:	6823      	ldr	r3, [r4, #0]
 80026ec:	699b      	ldr	r3, [r3, #24]
 80026ee:	065b      	lsls	r3, r3, #25
 80026f0:	d401      	bmi.n	80026f6 <HAL_RTC_SetTime+0xaa>
        sTime->TimeFormat = 0x00U;
 80026f2:	2300      	movs	r3, #0
 80026f4:	70f3      	strb	r3, [r6, #3]
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80026f6:	7830      	ldrb	r0, [r6, #0]
 80026f8:	0400      	lsls	r0, r0, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80026fa:	7873      	ldrb	r3, [r6, #1]
 80026fc:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80026fe:	4318      	orrs	r0, r3
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002700:	78b3      	ldrb	r3, [r6, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002702:	4318      	orrs	r0, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002704:	78f3      	ldrb	r3, [r6, #3]
 8002706:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002708:	4318      	orrs	r0, r3
 800270a:	e7cf      	b.n	80026ac <HAL_RTC_SetTime+0x60>
  __HAL_LOCK(hrtc);
 800270c:	2002      	movs	r0, #2
 800270e:	e7eb      	b.n	80026e8 <HAL_RTC_SetTime+0x9c>
 8002710:	007f7f7f 	.word	0x007f7f7f
 8002714:	fffbffff 	.word	0xfffbffff

08002718 <HAL_RTC_SetDate>:
{
 8002718:	b570      	push	{r4, r5, r6, lr}
 800271a:	0004      	movs	r4, r0
 800271c:	000e      	movs	r6, r1
  __HAL_LOCK(hrtc);
 800271e:	2324      	movs	r3, #36	@ 0x24
 8002720:	5cc3      	ldrb	r3, [r0, r3]
 8002722:	2b01      	cmp	r3, #1
 8002724:	d048      	beq.n	80027b8 <HAL_RTC_SetDate+0xa0>
 8002726:	2324      	movs	r3, #36	@ 0x24
 8002728:	2101      	movs	r1, #1
 800272a:	54c1      	strb	r1, [r0, r3]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800272c:	3301      	adds	r3, #1
 800272e:	3101      	adds	r1, #1
 8002730:	54c1      	strb	r1, [r0, r3]
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002732:	2a00      	cmp	r2, #0
 8002734:	d020      	beq.n	8002778 <HAL_RTC_SetDate+0x60>
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002736:	78f5      	ldrb	r5, [r6, #3]
 8002738:	042d      	lsls	r5, r5, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800273a:	7873      	ldrb	r3, [r6, #1]
 800273c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800273e:	431d      	orrs	r5, r3
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8002740:	78b3      	ldrb	r3, [r6, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8002742:	431d      	orrs	r5, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8002744:	7833      	ldrb	r3, [r6, #0]
 8002746:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002748:	431d      	orrs	r5, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800274a:	6823      	ldr	r3, [r4, #0]
 800274c:	22ca      	movs	r2, #202	@ 0xca
 800274e:	625a      	str	r2, [r3, #36]	@ 0x24
 8002750:	6823      	ldr	r3, [r4, #0]
 8002752:	3a77      	subs	r2, #119	@ 0x77
 8002754:	625a      	str	r2, [r3, #36]	@ 0x24
  status = RTC_EnterInitMode(hrtc);
 8002756:	0020      	movs	r0, r4
 8002758:	f7ff fec8 	bl	80024ec <RTC_EnterInitMode>
  if (status == HAL_OK)
 800275c:	2800      	cmp	r0, #0
 800275e:	d023      	beq.n	80027a8 <HAL_RTC_SetDate+0x90>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002760:	6823      	ldr	r3, [r4, #0]
 8002762:	22ff      	movs	r2, #255	@ 0xff
 8002764:	625a      	str	r2, [r3, #36]	@ 0x24
  if (status == HAL_OK)
 8002766:	2800      	cmp	r0, #0
 8002768:	d102      	bne.n	8002770 <HAL_RTC_SetDate+0x58>
    hrtc->State = HAL_RTC_STATE_READY;
 800276a:	2325      	movs	r3, #37	@ 0x25
 800276c:	3afe      	subs	r2, #254	@ 0xfe
 800276e:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hrtc);
 8002770:	2324      	movs	r3, #36	@ 0x24
 8002772:	2200      	movs	r2, #0
 8002774:	54e2      	strb	r2, [r4, r3]
}
 8002776:	bd70      	pop	{r4, r5, r6, pc}
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002778:	7873      	ldrb	r3, [r6, #1]
 800277a:	06da      	lsls	r2, r3, #27
 800277c:	d503      	bpl.n	8002786 <HAL_RTC_SetDate+0x6e>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800277e:	2210      	movs	r2, #16
 8002780:	4393      	bics	r3, r2
 8002782:	330a      	adds	r3, #10
 8002784:	7073      	strb	r3, [r6, #1]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002786:	78f0      	ldrb	r0, [r6, #3]
 8002788:	f7ff ff54 	bl	8002634 <RTC_ByteToBcd2>
 800278c:	0405      	lsls	r5, r0, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800278e:	7870      	ldrb	r0, [r6, #1]
 8002790:	f7ff ff50 	bl	8002634 <RTC_ByteToBcd2>
 8002794:	0200      	lsls	r0, r0, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002796:	4305      	orrs	r5, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8002798:	78b0      	ldrb	r0, [r6, #2]
 800279a:	f7ff ff4b 	bl	8002634 <RTC_ByteToBcd2>
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800279e:	4305      	orrs	r5, r0
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80027a0:	7833      	ldrb	r3, [r6, #0]
 80027a2:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80027a4:	431d      	orrs	r5, r3
 80027a6:	e7d0      	b.n	800274a <HAL_RTC_SetDate+0x32>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80027a8:	6823      	ldr	r3, [r4, #0]
 80027aa:	4a04      	ldr	r2, [pc, #16]	@ (80027bc <HAL_RTC_SetDate+0xa4>)
 80027ac:	4015      	ands	r5, r2
 80027ae:	605d      	str	r5, [r3, #4]
    status = RTC_ExitInitMode(hrtc);
 80027b0:	0020      	movs	r0, r4
 80027b2:	f7ff fec5 	bl	8002540 <RTC_ExitInitMode>
 80027b6:	e7d3      	b.n	8002760 <HAL_RTC_SetDate+0x48>
  __HAL_LOCK(hrtc);
 80027b8:	2002      	movs	r0, #2
 80027ba:	e7dc      	b.n	8002776 <HAL_RTC_SetDate+0x5e>
 80027bc:	00ffff3f 	.word	0x00ffff3f

080027c0 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80027c0:	0002      	movs	r2, r0
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 80027c2:	0901      	lsrs	r1, r0, #4
 80027c4:	008b      	lsls	r3, r1, #2
 80027c6:	185b      	adds	r3, r3, r1
 80027c8:	005b      	lsls	r3, r3, #1
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 80027ca:	200f      	movs	r0, #15
 80027cc:	4010      	ands	r0, r2
 80027ce:	18c0      	adds	r0, r0, r3
 80027d0:	b2c0      	uxtb	r0, r0
}
 80027d2:	4770      	bx	lr

080027d4 <HAL_RTC_GetTime>:
{
 80027d4:	b570      	push	{r4, r5, r6, lr}
 80027d6:	000c      	movs	r4, r1
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80027d8:	6803      	ldr	r3, [r0, #0]
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	604b      	str	r3, [r1, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80027de:	6803      	ldr	r3, [r0, #0]
 80027e0:	691b      	ldr	r3, [r3, #16]
 80027e2:	045b      	lsls	r3, r3, #17
 80027e4:	0c5b      	lsrs	r3, r3, #17
 80027e6:	608b      	str	r3, [r1, #8]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80027e8:	6803      	ldr	r3, [r0, #0]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	490e      	ldr	r1, [pc, #56]	@ (8002828 <HAL_RTC_GetTime+0x54>)
 80027ee:	400b      	ands	r3, r1
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 80027f0:	0c19      	lsrs	r1, r3, #16
 80027f2:	203f      	movs	r0, #63	@ 0x3f
 80027f4:	4008      	ands	r0, r1
 80027f6:	7020      	strb	r0, [r4, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80027f8:	0a1e      	lsrs	r6, r3, #8
 80027fa:	257f      	movs	r5, #127	@ 0x7f
 80027fc:	402e      	ands	r6, r5
 80027fe:	7066      	strb	r6, [r4, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8002800:	401d      	ands	r5, r3
 8002802:	70a5      	strb	r5, [r4, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8002804:	0d9b      	lsrs	r3, r3, #22
 8002806:	70e3      	strb	r3, [r4, #3]
  if (Format == RTC_FORMAT_BIN)
 8002808:	2a00      	cmp	r2, #0
 800280a:	d10a      	bne.n	8002822 <HAL_RTC_GetTime+0x4e>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800280c:	f7ff ffd8 	bl	80027c0 <RTC_Bcd2ToByte>
 8002810:	7020      	strb	r0, [r4, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002812:	0030      	movs	r0, r6
 8002814:	f7ff ffd4 	bl	80027c0 <RTC_Bcd2ToByte>
 8002818:	7060      	strb	r0, [r4, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800281a:	0028      	movs	r0, r5
 800281c:	f7ff ffd0 	bl	80027c0 <RTC_Bcd2ToByte>
 8002820:	70a0      	strb	r0, [r4, #2]
}
 8002822:	2000      	movs	r0, #0
 8002824:	bd70      	pop	{r4, r5, r6, pc}
 8002826:	46c0      	nop			@ (mov r8, r8)
 8002828:	007f7f7f 	.word	0x007f7f7f

0800282c <HAL_RTC_GetDate>:
{
 800282c:	b570      	push	{r4, r5, r6, lr}
 800282e:	000c      	movs	r4, r1
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8002830:	6803      	ldr	r3, [r0, #0]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	490e      	ldr	r1, [pc, #56]	@ (8002870 <HAL_RTC_GetDate+0x44>)
 8002836:	400b      	ands	r3, r1
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8002838:	0c18      	lsrs	r0, r3, #16
 800283a:	70e0      	strb	r0, [r4, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800283c:	0a19      	lsrs	r1, r3, #8
 800283e:	261f      	movs	r6, #31
 8002840:	400e      	ands	r6, r1
 8002842:	7066      	strb	r6, [r4, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8002844:	253f      	movs	r5, #63	@ 0x3f
 8002846:	401d      	ands	r5, r3
 8002848:	70a5      	strb	r5, [r4, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 800284a:	0b5b      	lsrs	r3, r3, #13
 800284c:	2107      	movs	r1, #7
 800284e:	400b      	ands	r3, r1
 8002850:	7023      	strb	r3, [r4, #0]
  if (Format == RTC_FORMAT_BIN)
 8002852:	2a00      	cmp	r2, #0
 8002854:	d10a      	bne.n	800286c <HAL_RTC_GetDate+0x40>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002856:	f7ff ffb3 	bl	80027c0 <RTC_Bcd2ToByte>
 800285a:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800285c:	0030      	movs	r0, r6
 800285e:	f7ff ffaf 	bl	80027c0 <RTC_Bcd2ToByte>
 8002862:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8002864:	0028      	movs	r0, r5
 8002866:	f7ff ffab 	bl	80027c0 <RTC_Bcd2ToByte>
 800286a:	70a0      	strb	r0, [r4, #2]
}
 800286c:	2000      	movs	r0, #0
 800286e:	bd70      	pop	{r4, r5, r6, pc}
 8002870:	00ffff3f 	.word	0x00ffff3f

08002874 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002874:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002876:	6a05      	ldr	r5, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002878:	6a03      	ldr	r3, [r0, #32]
 800287a:	2201      	movs	r2, #1
 800287c:	4393      	bics	r3, r2
 800287e:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002880:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002882:	6983      	ldr	r3, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002884:	4c16      	ldr	r4, [pc, #88]	@ (80028e0 <TIM_OC1_SetConfig+0x6c>)
 8002886:	4023      	ands	r3, r4
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002888:	680c      	ldr	r4, [r1, #0]
 800288a:	431c      	orrs	r4, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800288c:	2302      	movs	r3, #2
 800288e:	439d      	bics	r5, r3
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002890:	688b      	ldr	r3, [r1, #8]
 8002892:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002894:	4d13      	ldr	r5, [pc, #76]	@ (80028e4 <TIM_OC1_SetConfig+0x70>)
 8002896:	42a8      	cmp	r0, r5
 8002898:	d005      	beq.n	80028a6 <TIM_OC1_SetConfig+0x32>
 800289a:	4d13      	ldr	r5, [pc, #76]	@ (80028e8 <TIM_OC1_SetConfig+0x74>)
 800289c:	42a8      	cmp	r0, r5
 800289e:	d002      	beq.n	80028a6 <TIM_OC1_SetConfig+0x32>
 80028a0:	4d12      	ldr	r5, [pc, #72]	@ (80028ec <TIM_OC1_SetConfig+0x78>)
 80028a2:	42a8      	cmp	r0, r5
 80028a4:	d106      	bne.n	80028b4 <TIM_OC1_SetConfig+0x40>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80028a6:	2508      	movs	r5, #8
 80028a8:	43ab      	bics	r3, r5
 80028aa:	001d      	movs	r5, r3
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80028ac:	68cb      	ldr	r3, [r1, #12]
 80028ae:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80028b0:	2504      	movs	r5, #4
 80028b2:	43ab      	bics	r3, r5
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028b4:	4d0b      	ldr	r5, [pc, #44]	@ (80028e4 <TIM_OC1_SetConfig+0x70>)
 80028b6:	42a8      	cmp	r0, r5
 80028b8:	d005      	beq.n	80028c6 <TIM_OC1_SetConfig+0x52>
 80028ba:	4d0b      	ldr	r5, [pc, #44]	@ (80028e8 <TIM_OC1_SetConfig+0x74>)
 80028bc:	42a8      	cmp	r0, r5
 80028be:	d002      	beq.n	80028c6 <TIM_OC1_SetConfig+0x52>
 80028c0:	4d0a      	ldr	r5, [pc, #40]	@ (80028ec <TIM_OC1_SetConfig+0x78>)
 80028c2:	42a8      	cmp	r0, r5
 80028c4:	d105      	bne.n	80028d2 <TIM_OC1_SetConfig+0x5e>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80028c6:	4d0a      	ldr	r5, [pc, #40]	@ (80028f0 <TIM_OC1_SetConfig+0x7c>)
 80028c8:	402a      	ands	r2, r5
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80028ca:	694d      	ldr	r5, [r1, #20]
 80028cc:	4315      	orrs	r5, r2
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80028ce:	698a      	ldr	r2, [r1, #24]
 80028d0:	432a      	orrs	r2, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028d2:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80028d4:	6184      	str	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80028d6:	684a      	ldr	r2, [r1, #4]
 80028d8:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028da:	6203      	str	r3, [r0, #32]
}
 80028dc:	bd30      	pop	{r4, r5, pc}
 80028de:	46c0      	nop			@ (mov r8, r8)
 80028e0:	fffeff8c 	.word	0xfffeff8c
 80028e4:	40012c00 	.word	0x40012c00
 80028e8:	40014400 	.word	0x40014400
 80028ec:	40014800 	.word	0x40014800
 80028f0:	fffffcff 	.word	0xfffffcff

080028f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80028f4:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028f6:	6a04      	ldr	r4, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80028f8:	6a03      	ldr	r3, [r0, #32]
 80028fa:	4a16      	ldr	r2, [pc, #88]	@ (8002954 <TIM_OC3_SetConfig+0x60>)
 80028fc:	4013      	ands	r3, r2
 80028fe:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002900:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002902:	69c3      	ldr	r3, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002904:	4d14      	ldr	r5, [pc, #80]	@ (8002958 <TIM_OC3_SetConfig+0x64>)
 8002906:	402b      	ands	r3, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002908:	680d      	ldr	r5, [r1, #0]
 800290a:	431d      	orrs	r5, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800290c:	4b13      	ldr	r3, [pc, #76]	@ (800295c <TIM_OC3_SetConfig+0x68>)
 800290e:	401c      	ands	r4, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002910:	688b      	ldr	r3, [r1, #8]
 8002912:	021b      	lsls	r3, r3, #8
 8002914:	4323      	orrs	r3, r4

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002916:	4c12      	ldr	r4, [pc, #72]	@ (8002960 <TIM_OC3_SetConfig+0x6c>)
 8002918:	42a0      	cmp	r0, r4
 800291a:	d006      	beq.n	800292a <TIM_OC3_SetConfig+0x36>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800291c:	4c11      	ldr	r4, [pc, #68]	@ (8002964 <TIM_OC3_SetConfig+0x70>)
 800291e:	42a0      	cmp	r0, r4
 8002920:	d00a      	beq.n	8002938 <TIM_OC3_SetConfig+0x44>
 8002922:	4c11      	ldr	r4, [pc, #68]	@ (8002968 <TIM_OC3_SetConfig+0x74>)
 8002924:	42a0      	cmp	r0, r4
 8002926:	d10f      	bne.n	8002948 <TIM_OC3_SetConfig+0x54>
 8002928:	e006      	b.n	8002938 <TIM_OC3_SetConfig+0x44>
    tmpccer &= ~TIM_CCER_CC3NP;
 800292a:	4c10      	ldr	r4, [pc, #64]	@ (800296c <TIM_OC3_SetConfig+0x78>)
 800292c:	401c      	ands	r4, r3
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800292e:	68cb      	ldr	r3, [r1, #12]
 8002930:	021b      	lsls	r3, r3, #8
 8002932:	4323      	orrs	r3, r4
    tmpccer &= ~TIM_CCER_CC3NE;
 8002934:	4c0e      	ldr	r4, [pc, #56]	@ (8002970 <TIM_OC3_SetConfig+0x7c>)
 8002936:	4023      	ands	r3, r4
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002938:	4c0e      	ldr	r4, [pc, #56]	@ (8002974 <TIM_OC3_SetConfig+0x80>)
 800293a:	4022      	ands	r2, r4
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800293c:	694c      	ldr	r4, [r1, #20]
 800293e:	0124      	lsls	r4, r4, #4
 8002940:	4314      	orrs	r4, r2
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002942:	698a      	ldr	r2, [r1, #24]
 8002944:	0112      	lsls	r2, r2, #4
 8002946:	4322      	orrs	r2, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002948:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800294a:	61c5      	str	r5, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800294c:	684a      	ldr	r2, [r1, #4]
 800294e:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002950:	6203      	str	r3, [r0, #32]
}
 8002952:	bd30      	pop	{r4, r5, pc}
 8002954:	fffffeff 	.word	0xfffffeff
 8002958:	fffeff8c 	.word	0xfffeff8c
 800295c:	fffffdff 	.word	0xfffffdff
 8002960:	40012c00 	.word	0x40012c00
 8002964:	40014400 	.word	0x40014400
 8002968:	40014800 	.word	0x40014800
 800296c:	fffff7ff 	.word	0xfffff7ff
 8002970:	fffffbff 	.word	0xfffffbff
 8002974:	ffffcfff 	.word	0xffffcfff

08002978 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002978:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800297a:	6a04      	ldr	r4, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800297c:	6a03      	ldr	r3, [r0, #32]
 800297e:	4a11      	ldr	r2, [pc, #68]	@ (80029c4 <TIM_OC4_SetConfig+0x4c>)
 8002980:	4013      	ands	r3, r2
 8002982:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002984:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002986:	69c3      	ldr	r3, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002988:	4a0f      	ldr	r2, [pc, #60]	@ (80029c8 <TIM_OC4_SetConfig+0x50>)
 800298a:	4013      	ands	r3, r2

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800298c:	680a      	ldr	r2, [r1, #0]
 800298e:	0212      	lsls	r2, r2, #8
 8002990:	431a      	orrs	r2, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002992:	4b0e      	ldr	r3, [pc, #56]	@ (80029cc <TIM_OC4_SetConfig+0x54>)
 8002994:	401c      	ands	r4, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002996:	688b      	ldr	r3, [r1, #8]
 8002998:	031b      	lsls	r3, r3, #12
 800299a:	4323      	orrs	r3, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800299c:	4c0c      	ldr	r4, [pc, #48]	@ (80029d0 <TIM_OC4_SetConfig+0x58>)
 800299e:	42a0      	cmp	r0, r4
 80029a0:	d005      	beq.n	80029ae <TIM_OC4_SetConfig+0x36>
 80029a2:	4c0c      	ldr	r4, [pc, #48]	@ (80029d4 <TIM_OC4_SetConfig+0x5c>)
 80029a4:	42a0      	cmp	r0, r4
 80029a6:	d002      	beq.n	80029ae <TIM_OC4_SetConfig+0x36>
 80029a8:	4c0b      	ldr	r4, [pc, #44]	@ (80029d8 <TIM_OC4_SetConfig+0x60>)
 80029aa:	42a0      	cmp	r0, r4
 80029ac:	d104      	bne.n	80029b8 <TIM_OC4_SetConfig+0x40>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80029ae:	4c0b      	ldr	r4, [pc, #44]	@ (80029dc <TIM_OC4_SetConfig+0x64>)
 80029b0:	402c      	ands	r4, r5

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80029b2:	694d      	ldr	r5, [r1, #20]
 80029b4:	01ad      	lsls	r5, r5, #6
 80029b6:	4325      	orrs	r5, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029b8:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80029ba:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80029bc:	684a      	ldr	r2, [r1, #4]
 80029be:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029c0:	6203      	str	r3, [r0, #32]
}
 80029c2:	bd30      	pop	{r4, r5, pc}
 80029c4:	ffffefff 	.word	0xffffefff
 80029c8:	feff8cff 	.word	0xfeff8cff
 80029cc:	ffffdfff 	.word	0xffffdfff
 80029d0:	40012c00 	.word	0x40012c00
 80029d4:	40014400 	.word	0x40014400
 80029d8:	40014800 	.word	0x40014800
 80029dc:	ffffbfff 	.word	0xffffbfff

080029e0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80029e0:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029e2:	6a04      	ldr	r4, [r0, #32]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80029e4:	6a03      	ldr	r3, [r0, #32]
 80029e6:	4a11      	ldr	r2, [pc, #68]	@ (8002a2c <TIM_OC5_SetConfig+0x4c>)
 80029e8:	4013      	ands	r3, r2
 80029ea:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029ec:	6842      	ldr	r2, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80029ee:	6d43      	ldr	r3, [r0, #84]	@ 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80029f0:	4d0f      	ldr	r5, [pc, #60]	@ (8002a30 <TIM_OC5_SetConfig+0x50>)
 80029f2:	402b      	ands	r3, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80029f4:	680d      	ldr	r5, [r1, #0]
 80029f6:	431d      	orrs	r5, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80029f8:	4b0e      	ldr	r3, [pc, #56]	@ (8002a34 <TIM_OC5_SetConfig+0x54>)
 80029fa:	401c      	ands	r4, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80029fc:	688b      	ldr	r3, [r1, #8]
 80029fe:	041b      	lsls	r3, r3, #16
 8002a00:	4323      	orrs	r3, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a02:	4c0d      	ldr	r4, [pc, #52]	@ (8002a38 <TIM_OC5_SetConfig+0x58>)
 8002a04:	42a0      	cmp	r0, r4
 8002a06:	d005      	beq.n	8002a14 <TIM_OC5_SetConfig+0x34>
 8002a08:	4c0c      	ldr	r4, [pc, #48]	@ (8002a3c <TIM_OC5_SetConfig+0x5c>)
 8002a0a:	42a0      	cmp	r0, r4
 8002a0c:	d002      	beq.n	8002a14 <TIM_OC5_SetConfig+0x34>
 8002a0e:	4c0c      	ldr	r4, [pc, #48]	@ (8002a40 <TIM_OC5_SetConfig+0x60>)
 8002a10:	42a0      	cmp	r0, r4
 8002a12:	d104      	bne.n	8002a1e <TIM_OC5_SetConfig+0x3e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002a14:	4c05      	ldr	r4, [pc, #20]	@ (8002a2c <TIM_OC5_SetConfig+0x4c>)
 8002a16:	4014      	ands	r4, r2
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002a18:	694a      	ldr	r2, [r1, #20]
 8002a1a:	0212      	lsls	r2, r2, #8
 8002a1c:	4322      	orrs	r2, r4
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a1e:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002a20:	6545      	str	r5, [r0, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002a22:	684a      	ldr	r2, [r1, #4]
 8002a24:	6582      	str	r2, [r0, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a26:	6203      	str	r3, [r0, #32]
}
 8002a28:	bd30      	pop	{r4, r5, pc}
 8002a2a:	46c0      	nop			@ (mov r8, r8)
 8002a2c:	fffeffff 	.word	0xfffeffff
 8002a30:	fffeff8f 	.word	0xfffeff8f
 8002a34:	fffdffff 	.word	0xfffdffff
 8002a38:	40012c00 	.word	0x40012c00
 8002a3c:	40014400 	.word	0x40014400
 8002a40:	40014800 	.word	0x40014800

08002a44 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002a44:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a46:	6a04      	ldr	r4, [r0, #32]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002a48:	6a03      	ldr	r3, [r0, #32]
 8002a4a:	4a11      	ldr	r2, [pc, #68]	@ (8002a90 <TIM_OC6_SetConfig+0x4c>)
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a50:	6845      	ldr	r5, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002a52:	6d43      	ldr	r3, [r0, #84]	@ 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002a54:	4a0f      	ldr	r2, [pc, #60]	@ (8002a94 <TIM_OC6_SetConfig+0x50>)
 8002a56:	4013      	ands	r3, r2
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a58:	680a      	ldr	r2, [r1, #0]
 8002a5a:	0212      	lsls	r2, r2, #8
 8002a5c:	431a      	orrs	r2, r3

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002a5e:	4b0e      	ldr	r3, [pc, #56]	@ (8002a98 <TIM_OC6_SetConfig+0x54>)
 8002a60:	401c      	ands	r4, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002a62:	688b      	ldr	r3, [r1, #8]
 8002a64:	051b      	lsls	r3, r3, #20
 8002a66:	4323      	orrs	r3, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a68:	4c0c      	ldr	r4, [pc, #48]	@ (8002a9c <TIM_OC6_SetConfig+0x58>)
 8002a6a:	42a0      	cmp	r0, r4
 8002a6c:	d005      	beq.n	8002a7a <TIM_OC6_SetConfig+0x36>
 8002a6e:	4c0c      	ldr	r4, [pc, #48]	@ (8002aa0 <TIM_OC6_SetConfig+0x5c>)
 8002a70:	42a0      	cmp	r0, r4
 8002a72:	d002      	beq.n	8002a7a <TIM_OC6_SetConfig+0x36>
 8002a74:	4c0b      	ldr	r4, [pc, #44]	@ (8002aa4 <TIM_OC6_SetConfig+0x60>)
 8002a76:	42a0      	cmp	r0, r4
 8002a78:	d104      	bne.n	8002a84 <TIM_OC6_SetConfig+0x40>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002a7a:	4c0b      	ldr	r4, [pc, #44]	@ (8002aa8 <TIM_OC6_SetConfig+0x64>)
 8002a7c:	402c      	ands	r4, r5
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002a7e:	694d      	ldr	r5, [r1, #20]
 8002a80:	02ad      	lsls	r5, r5, #10
 8002a82:	4325      	orrs	r5, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a84:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002a86:	6542      	str	r2, [r0, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002a88:	684a      	ldr	r2, [r1, #4]
 8002a8a:	65c2      	str	r2, [r0, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a8c:	6203      	str	r3, [r0, #32]
}
 8002a8e:	bd30      	pop	{r4, r5, pc}
 8002a90:	ffefffff 	.word	0xffefffff
 8002a94:	feff8fff 	.word	0xfeff8fff
 8002a98:	ffdfffff 	.word	0xffdfffff
 8002a9c:	40012c00 	.word	0x40012c00
 8002aa0:	40014400 	.word	0x40014400
 8002aa4:	40014800 	.word	0x40014800
 8002aa8:	fffbffff 	.word	0xfffbffff

08002aac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002aac:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002aae:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ab0:	6a04      	ldr	r4, [r0, #32]
 8002ab2:	2501      	movs	r5, #1
 8002ab4:	43ac      	bics	r4, r5
 8002ab6:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ab8:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002aba:	35ef      	adds	r5, #239	@ 0xef
 8002abc:	43ac      	bics	r4, r5
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002abe:	0112      	lsls	r2, r2, #4
 8002ac0:	4322      	orrs	r2, r4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ac2:	240a      	movs	r4, #10
 8002ac4:	43a3      	bics	r3, r4
  tmpccer |= TIM_ICPolarity;
 8002ac6:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002ac8:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002aca:	6203      	str	r3, [r0, #32]
}
 8002acc:	bd30      	pop	{r4, r5, pc}
	...

08002ad0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ad0:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002ad2:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ad4:	6a04      	ldr	r4, [r0, #32]
 8002ad6:	2510      	movs	r5, #16
 8002ad8:	43ac      	bics	r4, r5
 8002ada:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002adc:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ade:	4d05      	ldr	r5, [pc, #20]	@ (8002af4 <TIM_TI2_ConfigInputStage+0x24>)
 8002ae0:	402c      	ands	r4, r5
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002ae2:	0312      	lsls	r2, r2, #12
 8002ae4:	4322      	orrs	r2, r4

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ae6:	24a0      	movs	r4, #160	@ 0xa0
 8002ae8:	43a3      	bics	r3, r4
  tmpccer |= (TIM_ICPolarity << 4U);
 8002aea:	0109      	lsls	r1, r1, #4
 8002aec:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002aee:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002af0:	6201      	str	r1, [r0, #32]
}
 8002af2:	bd30      	pop	{r4, r5, pc}
 8002af4:	ffff0fff 	.word	0xffff0fff

08002af8 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002af8:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002afa:	4a03      	ldr	r2, [pc, #12]	@ (8002b08 <TIM_ITRx_SetConfig+0x10>)
 8002afc:	4013      	ands	r3, r2
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002afe:	430b      	orrs	r3, r1
 8002b00:	2207      	movs	r2, #7
 8002b02:	4313      	orrs	r3, r2
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b04:	6083      	str	r3, [r0, #8]
}
 8002b06:	4770      	bx	lr
 8002b08:	ffcfff8f 	.word	0xffcfff8f

08002b0c <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8002b0c:	233d      	movs	r3, #61	@ 0x3d
 8002b0e:	5cc3      	ldrb	r3, [r0, r3]
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d122      	bne.n	8002b5a <HAL_TIM_Base_Start_IT+0x4e>
  htim->State = HAL_TIM_STATE_BUSY;
 8002b14:	333c      	adds	r3, #60	@ 0x3c
 8002b16:	2202      	movs	r2, #2
 8002b18:	54c2      	strb	r2, [r0, r3]
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b1a:	6802      	ldr	r2, [r0, #0]
 8002b1c:	68d3      	ldr	r3, [r2, #12]
 8002b1e:	2101      	movs	r1, #1
 8002b20:	430b      	orrs	r3, r1
 8002b22:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b24:	6803      	ldr	r3, [r0, #0]
 8002b26:	4a10      	ldr	r2, [pc, #64]	@ (8002b68 <HAL_TIM_Base_Start_IT+0x5c>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d008      	beq.n	8002b3e <HAL_TIM_Base_Start_IT+0x32>
 8002b2c:	4a0f      	ldr	r2, [pc, #60]	@ (8002b6c <HAL_TIM_Base_Start_IT+0x60>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d005      	beq.n	8002b3e <HAL_TIM_Base_Start_IT+0x32>
    __HAL_TIM_ENABLE(htim);
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	2101      	movs	r1, #1
 8002b36:	430a      	orrs	r2, r1
 8002b38:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002b3a:	2000      	movs	r0, #0
 8002b3c:	e00e      	b.n	8002b5c <HAL_TIM_Base_Start_IT+0x50>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b3e:	689a      	ldr	r2, [r3, #8]
 8002b40:	490b      	ldr	r1, [pc, #44]	@ (8002b70 <HAL_TIM_Base_Start_IT+0x64>)
 8002b42:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b44:	2a06      	cmp	r2, #6
 8002b46:	d00a      	beq.n	8002b5e <HAL_TIM_Base_Start_IT+0x52>
 8002b48:	3907      	subs	r1, #7
 8002b4a:	428a      	cmp	r2, r1
 8002b4c:	d009      	beq.n	8002b62 <HAL_TIM_Base_Start_IT+0x56>
      __HAL_TIM_ENABLE(htim);
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	2101      	movs	r1, #1
 8002b52:	430a      	orrs	r2, r1
 8002b54:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002b56:	2000      	movs	r0, #0
 8002b58:	e000      	b.n	8002b5c <HAL_TIM_Base_Start_IT+0x50>
    return HAL_ERROR;
 8002b5a:	2001      	movs	r0, #1
}
 8002b5c:	4770      	bx	lr
  return HAL_OK;
 8002b5e:	2000      	movs	r0, #0
 8002b60:	e7fc      	b.n	8002b5c <HAL_TIM_Base_Start_IT+0x50>
 8002b62:	2000      	movs	r0, #0
 8002b64:	e7fa      	b.n	8002b5c <HAL_TIM_Base_Start_IT+0x50>
 8002b66:	46c0      	nop			@ (mov r8, r8)
 8002b68:	40012c00 	.word	0x40012c00
 8002b6c:	40000400 	.word	0x40000400
 8002b70:	00010007 	.word	0x00010007

08002b74 <HAL_TIM_PWM_MspInit>:
}
 8002b74:	4770      	bx	lr

08002b76 <HAL_TIM_OC_DelayElapsedCallback>:
}
 8002b76:	4770      	bx	lr

08002b78 <HAL_TIM_IC_CaptureCallback>:
}
 8002b78:	4770      	bx	lr

08002b7a <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8002b7a:	4770      	bx	lr

08002b7c <HAL_TIM_TriggerCallback>:
}
 8002b7c:	4770      	bx	lr
	...

08002b80 <HAL_TIM_IRQHandler>:
{
 8002b80:	b570      	push	{r4, r5, r6, lr}
 8002b82:	0005      	movs	r5, r0
  uint32_t itsource = htim->Instance->DIER;
 8002b84:	6803      	ldr	r3, [r0, #0]
 8002b86:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002b88:	691c      	ldr	r4, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002b8a:	07a2      	lsls	r2, r4, #30
 8002b8c:	d50e      	bpl.n	8002bac <HAL_TIM_IRQHandler+0x2c>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002b8e:	07b2      	lsls	r2, r6, #30
 8002b90:	d50c      	bpl.n	8002bac <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002b92:	2203      	movs	r2, #3
 8002b94:	4252      	negs	r2, r2
 8002b96:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b9c:	6803      	ldr	r3, [r0, #0]
 8002b9e:	699b      	ldr	r3, [r3, #24]
 8002ba0:	079b      	lsls	r3, r3, #30
 8002ba2:	d057      	beq.n	8002c54 <HAL_TIM_IRQHandler+0xd4>
          HAL_TIM_IC_CaptureCallback(htim);
 8002ba4:	f7ff ffe8 	bl	8002b78 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	772b      	strb	r3, [r5, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002bac:	0763      	lsls	r3, r4, #29
 8002bae:	d512      	bpl.n	8002bd6 <HAL_TIM_IRQHandler+0x56>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002bb0:	0773      	lsls	r3, r6, #29
 8002bb2:	d510      	bpl.n	8002bd6 <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002bb4:	682b      	ldr	r3, [r5, #0]
 8002bb6:	2205      	movs	r2, #5
 8002bb8:	4252      	negs	r2, r2
 8002bba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002bbc:	2302      	movs	r3, #2
 8002bbe:	772b      	strb	r3, [r5, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002bc0:	682b      	ldr	r3, [r5, #0]
 8002bc2:	699a      	ldr	r2, [r3, #24]
 8002bc4:	23c0      	movs	r3, #192	@ 0xc0
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	421a      	tst	r2, r3
 8002bca:	d049      	beq.n	8002c60 <HAL_TIM_IRQHandler+0xe0>
        HAL_TIM_IC_CaptureCallback(htim);
 8002bcc:	0028      	movs	r0, r5
 8002bce:	f7ff ffd3 	bl	8002b78 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	772b      	strb	r3, [r5, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002bd6:	0723      	lsls	r3, r4, #28
 8002bd8:	d510      	bpl.n	8002bfc <HAL_TIM_IRQHandler+0x7c>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002bda:	0733      	lsls	r3, r6, #28
 8002bdc:	d50e      	bpl.n	8002bfc <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002bde:	682b      	ldr	r3, [r5, #0]
 8002be0:	2209      	movs	r2, #9
 8002be2:	4252      	negs	r2, r2
 8002be4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002be6:	2304      	movs	r3, #4
 8002be8:	772b      	strb	r3, [r5, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002bea:	682b      	ldr	r3, [r5, #0]
 8002bec:	69db      	ldr	r3, [r3, #28]
 8002bee:	079b      	lsls	r3, r3, #30
 8002bf0:	d03d      	beq.n	8002c6e <HAL_TIM_IRQHandler+0xee>
        HAL_TIM_IC_CaptureCallback(htim);
 8002bf2:	0028      	movs	r0, r5
 8002bf4:	f7ff ffc0 	bl	8002b78 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	772b      	strb	r3, [r5, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002bfc:	06e3      	lsls	r3, r4, #27
 8002bfe:	d512      	bpl.n	8002c26 <HAL_TIM_IRQHandler+0xa6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002c00:	06f3      	lsls	r3, r6, #27
 8002c02:	d510      	bpl.n	8002c26 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002c04:	682b      	ldr	r3, [r5, #0]
 8002c06:	2211      	movs	r2, #17
 8002c08:	4252      	negs	r2, r2
 8002c0a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c0c:	2308      	movs	r3, #8
 8002c0e:	772b      	strb	r3, [r5, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c10:	682b      	ldr	r3, [r5, #0]
 8002c12:	69da      	ldr	r2, [r3, #28]
 8002c14:	23c0      	movs	r3, #192	@ 0xc0
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	421a      	tst	r2, r3
 8002c1a:	d02f      	beq.n	8002c7c <HAL_TIM_IRQHandler+0xfc>
        HAL_TIM_IC_CaptureCallback(htim);
 8002c1c:	0028      	movs	r0, r5
 8002c1e:	f7ff ffab 	bl	8002b78 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c22:	2300      	movs	r3, #0
 8002c24:	772b      	strb	r3, [r5, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002c26:	07e3      	lsls	r3, r4, #31
 8002c28:	d501      	bpl.n	8002c2e <HAL_TIM_IRQHandler+0xae>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002c2a:	07f3      	lsls	r3, r6, #31
 8002c2c:	d42d      	bmi.n	8002c8a <HAL_TIM_IRQHandler+0x10a>
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002c2e:	2382      	movs	r3, #130	@ 0x82
 8002c30:	019b      	lsls	r3, r3, #6
 8002c32:	421c      	tst	r4, r3
 8002c34:	d001      	beq.n	8002c3a <HAL_TIM_IRQHandler+0xba>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002c36:	0633      	lsls	r3, r6, #24
 8002c38:	d42f      	bmi.n	8002c9a <HAL_TIM_IRQHandler+0x11a>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002c3a:	05e3      	lsls	r3, r4, #23
 8002c3c:	d501      	bpl.n	8002c42 <HAL_TIM_IRQHandler+0xc2>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002c3e:	0633      	lsls	r3, r6, #24
 8002c40:	d432      	bmi.n	8002ca8 <HAL_TIM_IRQHandler+0x128>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002c42:	0663      	lsls	r3, r4, #25
 8002c44:	d501      	bpl.n	8002c4a <HAL_TIM_IRQHandler+0xca>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002c46:	0673      	lsls	r3, r6, #25
 8002c48:	d435      	bmi.n	8002cb6 <HAL_TIM_IRQHandler+0x136>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002c4a:	06a4      	lsls	r4, r4, #26
 8002c4c:	d501      	bpl.n	8002c52 <HAL_TIM_IRQHandler+0xd2>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002c4e:	06b6      	lsls	r6, r6, #26
 8002c50:	d439      	bmi.n	8002cc6 <HAL_TIM_IRQHandler+0x146>
}
 8002c52:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c54:	f7ff ff8f 	bl	8002b76 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c58:	0028      	movs	r0, r5
 8002c5a:	f7ff ff8e 	bl	8002b7a <HAL_TIM_PWM_PulseFinishedCallback>
 8002c5e:	e7a3      	b.n	8002ba8 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c60:	0028      	movs	r0, r5
 8002c62:	f7ff ff88 	bl	8002b76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c66:	0028      	movs	r0, r5
 8002c68:	f7ff ff87 	bl	8002b7a <HAL_TIM_PWM_PulseFinishedCallback>
 8002c6c:	e7b1      	b.n	8002bd2 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c6e:	0028      	movs	r0, r5
 8002c70:	f7ff ff81 	bl	8002b76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c74:	0028      	movs	r0, r5
 8002c76:	f7ff ff80 	bl	8002b7a <HAL_TIM_PWM_PulseFinishedCallback>
 8002c7a:	e7bd      	b.n	8002bf8 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c7c:	0028      	movs	r0, r5
 8002c7e:	f7ff ff7a 	bl	8002b76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c82:	0028      	movs	r0, r5
 8002c84:	f7ff ff79 	bl	8002b7a <HAL_TIM_PWM_PulseFinishedCallback>
 8002c88:	e7cb      	b.n	8002c22 <HAL_TIM_IRQHandler+0xa2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002c8a:	682b      	ldr	r3, [r5, #0]
 8002c8c:	2202      	movs	r2, #2
 8002c8e:	4252      	negs	r2, r2
 8002c90:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c92:	0028      	movs	r0, r5
 8002c94:	f7fd fff2 	bl	8000c7c <HAL_TIM_PeriodElapsedCallback>
 8002c98:	e7c9      	b.n	8002c2e <HAL_TIM_IRQHandler+0xae>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002c9a:	682b      	ldr	r3, [r5, #0]
 8002c9c:	4a0e      	ldr	r2, [pc, #56]	@ (8002cd8 <HAL_TIM_IRQHandler+0x158>)
 8002c9e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002ca0:	0028      	movs	r0, r5
 8002ca2:	f000 fb6c 	bl	800337e <HAL_TIMEx_BreakCallback>
 8002ca6:	e7c8      	b.n	8002c3a <HAL_TIM_IRQHandler+0xba>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002ca8:	682b      	ldr	r3, [r5, #0]
 8002caa:	4a0c      	ldr	r2, [pc, #48]	@ (8002cdc <HAL_TIM_IRQHandler+0x15c>)
 8002cac:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8002cae:	0028      	movs	r0, r5
 8002cb0:	f000 fb66 	bl	8003380 <HAL_TIMEx_Break2Callback>
 8002cb4:	e7c5      	b.n	8002c42 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002cb6:	682b      	ldr	r3, [r5, #0]
 8002cb8:	2241      	movs	r2, #65	@ 0x41
 8002cba:	4252      	negs	r2, r2
 8002cbc:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002cbe:	0028      	movs	r0, r5
 8002cc0:	f7ff ff5c 	bl	8002b7c <HAL_TIM_TriggerCallback>
 8002cc4:	e7c1      	b.n	8002c4a <HAL_TIM_IRQHandler+0xca>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002cc6:	682b      	ldr	r3, [r5, #0]
 8002cc8:	2221      	movs	r2, #33	@ 0x21
 8002cca:	4252      	negs	r2, r2
 8002ccc:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8002cce:	0028      	movs	r0, r5
 8002cd0:	f000 fb54 	bl	800337c <HAL_TIMEx_CommutCallback>
}
 8002cd4:	e7bd      	b.n	8002c52 <HAL_TIM_IRQHandler+0xd2>
 8002cd6:	46c0      	nop			@ (mov r8, r8)
 8002cd8:	ffffdf7f 	.word	0xffffdf7f
 8002cdc:	fffffeff 	.word	0xfffffeff

08002ce0 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8002ce0:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ce2:	4a1c      	ldr	r2, [pc, #112]	@ (8002d54 <TIM_Base_SetConfig+0x74>)
 8002ce4:	4290      	cmp	r0, r2
 8002ce6:	d002      	beq.n	8002cee <TIM_Base_SetConfig+0xe>
 8002ce8:	4a1b      	ldr	r2, [pc, #108]	@ (8002d58 <TIM_Base_SetConfig+0x78>)
 8002cea:	4290      	cmp	r0, r2
 8002cec:	d103      	bne.n	8002cf6 <TIM_Base_SetConfig+0x16>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002cee:	2270      	movs	r2, #112	@ 0x70
 8002cf0:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8002cf2:	684a      	ldr	r2, [r1, #4]
 8002cf4:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cf6:	4a17      	ldr	r2, [pc, #92]	@ (8002d54 <TIM_Base_SetConfig+0x74>)
 8002cf8:	4290      	cmp	r0, r2
 8002cfa:	d00b      	beq.n	8002d14 <TIM_Base_SetConfig+0x34>
 8002cfc:	4a16      	ldr	r2, [pc, #88]	@ (8002d58 <TIM_Base_SetConfig+0x78>)
 8002cfe:	4290      	cmp	r0, r2
 8002d00:	d008      	beq.n	8002d14 <TIM_Base_SetConfig+0x34>
 8002d02:	4a16      	ldr	r2, [pc, #88]	@ (8002d5c <TIM_Base_SetConfig+0x7c>)
 8002d04:	4290      	cmp	r0, r2
 8002d06:	d005      	beq.n	8002d14 <TIM_Base_SetConfig+0x34>
 8002d08:	4a15      	ldr	r2, [pc, #84]	@ (8002d60 <TIM_Base_SetConfig+0x80>)
 8002d0a:	4290      	cmp	r0, r2
 8002d0c:	d002      	beq.n	8002d14 <TIM_Base_SetConfig+0x34>
 8002d0e:	4a15      	ldr	r2, [pc, #84]	@ (8002d64 <TIM_Base_SetConfig+0x84>)
 8002d10:	4290      	cmp	r0, r2
 8002d12:	d103      	bne.n	8002d1c <TIM_Base_SetConfig+0x3c>
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d14:	4a14      	ldr	r2, [pc, #80]	@ (8002d68 <TIM_Base_SetConfig+0x88>)
 8002d16:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d18:	68ca      	ldr	r2, [r1, #12]
 8002d1a:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d1c:	2280      	movs	r2, #128	@ 0x80
 8002d1e:	4393      	bics	r3, r2
 8002d20:	694a      	ldr	r2, [r1, #20]
 8002d22:	4313      	orrs	r3, r2
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d24:	688a      	ldr	r2, [r1, #8]
 8002d26:	62c2      	str	r2, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002d28:	680a      	ldr	r2, [r1, #0]
 8002d2a:	6282      	str	r2, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d2c:	4a09      	ldr	r2, [pc, #36]	@ (8002d54 <TIM_Base_SetConfig+0x74>)
 8002d2e:	4290      	cmp	r0, r2
 8002d30:	d005      	beq.n	8002d3e <TIM_Base_SetConfig+0x5e>
 8002d32:	4a0b      	ldr	r2, [pc, #44]	@ (8002d60 <TIM_Base_SetConfig+0x80>)
 8002d34:	4290      	cmp	r0, r2
 8002d36:	d002      	beq.n	8002d3e <TIM_Base_SetConfig+0x5e>
 8002d38:	4a0a      	ldr	r2, [pc, #40]	@ (8002d64 <TIM_Base_SetConfig+0x84>)
 8002d3a:	4290      	cmp	r0, r2
 8002d3c:	d101      	bne.n	8002d42 <TIM_Base_SetConfig+0x62>
    TIMx->RCR = Structure->RepetitionCounter;
 8002d3e:	690a      	ldr	r2, [r1, #16]
 8002d40:	6302      	str	r2, [r0, #48]	@ 0x30
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002d42:	6802      	ldr	r2, [r0, #0]
 8002d44:	2104      	movs	r1, #4
 8002d46:	430a      	orrs	r2, r1
 8002d48:	6002      	str	r2, [r0, #0]
  TIMx->EGR = TIM_EGR_UG;
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	6142      	str	r2, [r0, #20]
  TIMx->CR1 = tmpcr1;
 8002d4e:	6003      	str	r3, [r0, #0]
}
 8002d50:	4770      	bx	lr
 8002d52:	46c0      	nop			@ (mov r8, r8)
 8002d54:	40012c00 	.word	0x40012c00
 8002d58:	40000400 	.word	0x40000400
 8002d5c:	40002000 	.word	0x40002000
 8002d60:	40014400 	.word	0x40014400
 8002d64:	40014800 	.word	0x40014800
 8002d68:	fffffcff 	.word	0xfffffcff

08002d6c <HAL_TIM_Base_Init>:
{
 8002d6c:	b570      	push	{r4, r5, r6, lr}
 8002d6e:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 8002d70:	d02a      	beq.n	8002dc8 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002d72:	233d      	movs	r3, #61	@ 0x3d
 8002d74:	5cc3      	ldrb	r3, [r0, r3]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d020      	beq.n	8002dbc <HAL_TIM_Base_Init+0x50>
  htim->State = HAL_TIM_STATE_BUSY;
 8002d7a:	253d      	movs	r5, #61	@ 0x3d
 8002d7c:	2302      	movs	r3, #2
 8002d7e:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d80:	0021      	movs	r1, r4
 8002d82:	c901      	ldmia	r1!, {r0}
 8002d84:	f7ff ffac 	bl	8002ce0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	2248      	movs	r2, #72	@ 0x48
 8002d8c:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d8e:	3a0a      	subs	r2, #10
 8002d90:	54a3      	strb	r3, [r4, r2]
 8002d92:	3201      	adds	r2, #1
 8002d94:	54a3      	strb	r3, [r4, r2]
 8002d96:	3201      	adds	r2, #1
 8002d98:	54a3      	strb	r3, [r4, r2]
 8002d9a:	3201      	adds	r2, #1
 8002d9c:	54a3      	strb	r3, [r4, r2]
 8002d9e:	3201      	adds	r2, #1
 8002da0:	54a3      	strb	r3, [r4, r2]
 8002da2:	3201      	adds	r2, #1
 8002da4:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002da6:	3201      	adds	r2, #1
 8002da8:	54a3      	strb	r3, [r4, r2]
 8002daa:	3201      	adds	r2, #1
 8002dac:	54a3      	strb	r3, [r4, r2]
 8002dae:	3201      	adds	r2, #1
 8002db0:	54a3      	strb	r3, [r4, r2]
 8002db2:	3201      	adds	r2, #1
 8002db4:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 8002db6:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8002db8:	2000      	movs	r0, #0
}
 8002dba:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8002dbc:	333c      	adds	r3, #60	@ 0x3c
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 8002dc2:	f7fe faeb 	bl	800139c <HAL_TIM_Base_MspInit>
 8002dc6:	e7d8      	b.n	8002d7a <HAL_TIM_Base_Init+0xe>
    return HAL_ERROR;
 8002dc8:	2001      	movs	r0, #1
 8002dca:	e7f6      	b.n	8002dba <HAL_TIM_Base_Init+0x4e>

08002dcc <HAL_TIM_PWM_Init>:
{
 8002dcc:	b570      	push	{r4, r5, r6, lr}
 8002dce:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 8002dd0:	d02a      	beq.n	8002e28 <HAL_TIM_PWM_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002dd2:	233d      	movs	r3, #61	@ 0x3d
 8002dd4:	5cc3      	ldrb	r3, [r0, r3]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d020      	beq.n	8002e1c <HAL_TIM_PWM_Init+0x50>
  htim->State = HAL_TIM_STATE_BUSY;
 8002dda:	253d      	movs	r5, #61	@ 0x3d
 8002ddc:	2302      	movs	r3, #2
 8002dde:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002de0:	0021      	movs	r1, r4
 8002de2:	c901      	ldmia	r1!, {r0}
 8002de4:	f7ff ff7c 	bl	8002ce0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002de8:	2301      	movs	r3, #1
 8002dea:	2248      	movs	r2, #72	@ 0x48
 8002dec:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dee:	3a0a      	subs	r2, #10
 8002df0:	54a3      	strb	r3, [r4, r2]
 8002df2:	3201      	adds	r2, #1
 8002df4:	54a3      	strb	r3, [r4, r2]
 8002df6:	3201      	adds	r2, #1
 8002df8:	54a3      	strb	r3, [r4, r2]
 8002dfa:	3201      	adds	r2, #1
 8002dfc:	54a3      	strb	r3, [r4, r2]
 8002dfe:	3201      	adds	r2, #1
 8002e00:	54a3      	strb	r3, [r4, r2]
 8002e02:	3201      	adds	r2, #1
 8002e04:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e06:	3201      	adds	r2, #1
 8002e08:	54a3      	strb	r3, [r4, r2]
 8002e0a:	3201      	adds	r2, #1
 8002e0c:	54a3      	strb	r3, [r4, r2]
 8002e0e:	3201      	adds	r2, #1
 8002e10:	54a3      	strb	r3, [r4, r2]
 8002e12:	3201      	adds	r2, #1
 8002e14:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 8002e16:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8002e18:	2000      	movs	r0, #0
}
 8002e1a:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8002e1c:	333c      	adds	r3, #60	@ 0x3c
 8002e1e:	2200      	movs	r2, #0
 8002e20:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_PWM_MspInit(htim);
 8002e22:	f7ff fea7 	bl	8002b74 <HAL_TIM_PWM_MspInit>
 8002e26:	e7d8      	b.n	8002dda <HAL_TIM_PWM_Init+0xe>
    return HAL_ERROR;
 8002e28:	2001      	movs	r0, #1
 8002e2a:	e7f6      	b.n	8002e1a <HAL_TIM_PWM_Init+0x4e>

08002e2c <TIM_OC2_SetConfig>:
{
 8002e2c:	b570      	push	{r4, r5, r6, lr}
  tmpccer = TIMx->CCER;
 8002e2e:	6a02      	ldr	r2, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e30:	6a03      	ldr	r3, [r0, #32]
 8002e32:	2410      	movs	r4, #16
 8002e34:	43a3      	bics	r3, r4
 8002e36:	6203      	str	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8002e38:	6845      	ldr	r5, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8002e3a:	6983      	ldr	r3, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002e3c:	4c14      	ldr	r4, [pc, #80]	@ (8002e90 <TIM_OC2_SetConfig+0x64>)
 8002e3e:	4023      	ands	r3, r4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e40:	680c      	ldr	r4, [r1, #0]
 8002e42:	0224      	lsls	r4, r4, #8
 8002e44:	431c      	orrs	r4, r3
  tmpccer &= ~TIM_CCER_CC2P;
 8002e46:	2320      	movs	r3, #32
 8002e48:	439a      	bics	r2, r3
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002e4a:	688b      	ldr	r3, [r1, #8]
 8002e4c:	011b      	lsls	r3, r3, #4
 8002e4e:	4313      	orrs	r3, r2
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002e50:	4a10      	ldr	r2, [pc, #64]	@ (8002e94 <TIM_OC2_SetConfig+0x68>)
 8002e52:	4290      	cmp	r0, r2
 8002e54:	d006      	beq.n	8002e64 <TIM_OC2_SetConfig+0x38>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e56:	4a10      	ldr	r2, [pc, #64]	@ (8002e98 <TIM_OC2_SetConfig+0x6c>)
 8002e58:	4290      	cmp	r0, r2
 8002e5a:	d00b      	beq.n	8002e74 <TIM_OC2_SetConfig+0x48>
 8002e5c:	4a0f      	ldr	r2, [pc, #60]	@ (8002e9c <TIM_OC2_SetConfig+0x70>)
 8002e5e:	4290      	cmp	r0, r2
 8002e60:	d110      	bne.n	8002e84 <TIM_OC2_SetConfig+0x58>
 8002e62:	e007      	b.n	8002e74 <TIM_OC2_SetConfig+0x48>
    tmpccer &= ~TIM_CCER_CC2NP;
 8002e64:	2280      	movs	r2, #128	@ 0x80
 8002e66:	4393      	bics	r3, r2
 8002e68:	001e      	movs	r6, r3
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002e6a:	68cb      	ldr	r3, [r1, #12]
 8002e6c:	011b      	lsls	r3, r3, #4
 8002e6e:	4333      	orrs	r3, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8002e70:	3a40      	subs	r2, #64	@ 0x40
 8002e72:	4393      	bics	r3, r2
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002e74:	4a0a      	ldr	r2, [pc, #40]	@ (8002ea0 <TIM_OC2_SetConfig+0x74>)
 8002e76:	4015      	ands	r5, r2
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002e78:	694a      	ldr	r2, [r1, #20]
 8002e7a:	0092      	lsls	r2, r2, #2
 8002e7c:	432a      	orrs	r2, r5
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002e7e:	698d      	ldr	r5, [r1, #24]
 8002e80:	00ad      	lsls	r5, r5, #2
 8002e82:	4315      	orrs	r5, r2
  TIMx->CR2 = tmpcr2;
 8002e84:	6045      	str	r5, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002e86:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8002e88:	684a      	ldr	r2, [r1, #4]
 8002e8a:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 8002e8c:	6203      	str	r3, [r0, #32]
}
 8002e8e:	bd70      	pop	{r4, r5, r6, pc}
 8002e90:	feff8cff 	.word	0xfeff8cff
 8002e94:	40012c00 	.word	0x40012c00
 8002e98:	40014400 	.word	0x40014400
 8002e9c:	40014800 	.word	0x40014800
 8002ea0:	fffff3ff 	.word	0xfffff3ff

08002ea4 <HAL_TIM_PWM_ConfigChannel>:
{
 8002ea4:	b570      	push	{r4, r5, r6, lr}
 8002ea6:	0004      	movs	r4, r0
 8002ea8:	000d      	movs	r5, r1
  __HAL_LOCK(htim);
 8002eaa:	233c      	movs	r3, #60	@ 0x3c
 8002eac:	5cc3      	ldrb	r3, [r0, r3]
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d100      	bne.n	8002eb4 <HAL_TIM_PWM_ConfigChannel+0x10>
 8002eb2:	e092      	b.n	8002fda <HAL_TIM_PWM_ConfigChannel+0x136>
 8002eb4:	233c      	movs	r3, #60	@ 0x3c
 8002eb6:	2101      	movs	r1, #1
 8002eb8:	54c1      	strb	r1, [r0, r3]
  switch (Channel)
 8002eba:	2a14      	cmp	r2, #20
 8002ebc:	d900      	bls.n	8002ec0 <HAL_TIM_PWM_ConfigChannel+0x1c>
 8002ebe:	e087      	b.n	8002fd0 <HAL_TIM_PWM_ConfigChannel+0x12c>
 8002ec0:	0092      	lsls	r2, r2, #2
 8002ec2:	4b47      	ldr	r3, [pc, #284]	@ (8002fe0 <HAL_TIM_PWM_ConfigChannel+0x13c>)
 8002ec4:	589b      	ldr	r3, [r3, r2]
 8002ec6:	469f      	mov	pc, r3
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002ec8:	6800      	ldr	r0, [r0, #0]
 8002eca:	0029      	movs	r1, r5
 8002ecc:	f7ff fcd2 	bl	8002874 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002ed0:	6822      	ldr	r2, [r4, #0]
 8002ed2:	6993      	ldr	r3, [r2, #24]
 8002ed4:	2108      	movs	r1, #8
 8002ed6:	430b      	orrs	r3, r1
 8002ed8:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002eda:	6822      	ldr	r2, [r4, #0]
 8002edc:	6993      	ldr	r3, [r2, #24]
 8002ede:	3904      	subs	r1, #4
 8002ee0:	438b      	bics	r3, r1
 8002ee2:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002ee4:	6822      	ldr	r2, [r4, #0]
 8002ee6:	6993      	ldr	r3, [r2, #24]
 8002ee8:	6929      	ldr	r1, [r5, #16]
 8002eea:	430b      	orrs	r3, r1
 8002eec:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8002eee:	2000      	movs	r0, #0
      break;
 8002ef0:	e06f      	b.n	8002fd2 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002ef2:	6800      	ldr	r0, [r0, #0]
 8002ef4:	0029      	movs	r1, r5
 8002ef6:	f7ff ff99 	bl	8002e2c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002efa:	6822      	ldr	r2, [r4, #0]
 8002efc:	6991      	ldr	r1, [r2, #24]
 8002efe:	2380      	movs	r3, #128	@ 0x80
 8002f00:	011b      	lsls	r3, r3, #4
 8002f02:	430b      	orrs	r3, r1
 8002f04:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002f06:	6822      	ldr	r2, [r4, #0]
 8002f08:	6993      	ldr	r3, [r2, #24]
 8002f0a:	4936      	ldr	r1, [pc, #216]	@ (8002fe4 <HAL_TIM_PWM_ConfigChannel+0x140>)
 8002f0c:	400b      	ands	r3, r1
 8002f0e:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002f10:	6821      	ldr	r1, [r4, #0]
 8002f12:	698b      	ldr	r3, [r1, #24]
 8002f14:	692a      	ldr	r2, [r5, #16]
 8002f16:	0212      	lsls	r2, r2, #8
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	618b      	str	r3, [r1, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8002f1c:	2000      	movs	r0, #0
      break;
 8002f1e:	e058      	b.n	8002fd2 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002f20:	6800      	ldr	r0, [r0, #0]
 8002f22:	0029      	movs	r1, r5
 8002f24:	f7ff fce6 	bl	80028f4 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002f28:	6822      	ldr	r2, [r4, #0]
 8002f2a:	69d3      	ldr	r3, [r2, #28]
 8002f2c:	2108      	movs	r1, #8
 8002f2e:	430b      	orrs	r3, r1
 8002f30:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002f32:	6822      	ldr	r2, [r4, #0]
 8002f34:	69d3      	ldr	r3, [r2, #28]
 8002f36:	3904      	subs	r1, #4
 8002f38:	438b      	bics	r3, r1
 8002f3a:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002f3c:	6822      	ldr	r2, [r4, #0]
 8002f3e:	69d3      	ldr	r3, [r2, #28]
 8002f40:	6929      	ldr	r1, [r5, #16]
 8002f42:	430b      	orrs	r3, r1
 8002f44:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8002f46:	2000      	movs	r0, #0
      break;
 8002f48:	e043      	b.n	8002fd2 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002f4a:	6800      	ldr	r0, [r0, #0]
 8002f4c:	0029      	movs	r1, r5
 8002f4e:	f7ff fd13 	bl	8002978 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002f52:	6822      	ldr	r2, [r4, #0]
 8002f54:	69d1      	ldr	r1, [r2, #28]
 8002f56:	2380      	movs	r3, #128	@ 0x80
 8002f58:	011b      	lsls	r3, r3, #4
 8002f5a:	430b      	orrs	r3, r1
 8002f5c:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002f5e:	6822      	ldr	r2, [r4, #0]
 8002f60:	69d3      	ldr	r3, [r2, #28]
 8002f62:	4920      	ldr	r1, [pc, #128]	@ (8002fe4 <HAL_TIM_PWM_ConfigChannel+0x140>)
 8002f64:	400b      	ands	r3, r1
 8002f66:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002f68:	6821      	ldr	r1, [r4, #0]
 8002f6a:	69cb      	ldr	r3, [r1, #28]
 8002f6c:	692a      	ldr	r2, [r5, #16]
 8002f6e:	0212      	lsls	r2, r2, #8
 8002f70:	4313      	orrs	r3, r2
 8002f72:	61cb      	str	r3, [r1, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8002f74:	2000      	movs	r0, #0
      break;
 8002f76:	e02c      	b.n	8002fd2 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002f78:	6800      	ldr	r0, [r0, #0]
 8002f7a:	0029      	movs	r1, r5
 8002f7c:	f7ff fd30 	bl	80029e0 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002f80:	6822      	ldr	r2, [r4, #0]
 8002f82:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8002f84:	2108      	movs	r1, #8
 8002f86:	430b      	orrs	r3, r1
 8002f88:	6553      	str	r3, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002f8a:	6822      	ldr	r2, [r4, #0]
 8002f8c:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8002f8e:	3904      	subs	r1, #4
 8002f90:	438b      	bics	r3, r1
 8002f92:	6553      	str	r3, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002f94:	6822      	ldr	r2, [r4, #0]
 8002f96:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8002f98:	6929      	ldr	r1, [r5, #16]
 8002f9a:	430b      	orrs	r3, r1
 8002f9c:	6553      	str	r3, [r2, #84]	@ 0x54
  HAL_StatusTypeDef status = HAL_OK;
 8002f9e:	2000      	movs	r0, #0
      break;
 8002fa0:	e017      	b.n	8002fd2 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002fa2:	6800      	ldr	r0, [r0, #0]
 8002fa4:	0029      	movs	r1, r5
 8002fa6:	f7ff fd4d 	bl	8002a44 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002faa:	6822      	ldr	r2, [r4, #0]
 8002fac:	6d51      	ldr	r1, [r2, #84]	@ 0x54
 8002fae:	2380      	movs	r3, #128	@ 0x80
 8002fb0:	011b      	lsls	r3, r3, #4
 8002fb2:	430b      	orrs	r3, r1
 8002fb4:	6553      	str	r3, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002fb6:	6822      	ldr	r2, [r4, #0]
 8002fb8:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8002fba:	490a      	ldr	r1, [pc, #40]	@ (8002fe4 <HAL_TIM_PWM_ConfigChannel+0x140>)
 8002fbc:	400b      	ands	r3, r1
 8002fbe:	6553      	str	r3, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002fc0:	6821      	ldr	r1, [r4, #0]
 8002fc2:	6d4b      	ldr	r3, [r1, #84]	@ 0x54
 8002fc4:	692a      	ldr	r2, [r5, #16]
 8002fc6:	0212      	lsls	r2, r2, #8
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	654b      	str	r3, [r1, #84]	@ 0x54
  HAL_StatusTypeDef status = HAL_OK;
 8002fcc:	2000      	movs	r0, #0
      break;
 8002fce:	e000      	b.n	8002fd2 <HAL_TIM_PWM_ConfigChannel+0x12e>
  switch (Channel)
 8002fd0:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8002fd2:	233c      	movs	r3, #60	@ 0x3c
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	54e2      	strb	r2, [r4, r3]
}
 8002fd8:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(htim);
 8002fda:	2002      	movs	r0, #2
 8002fdc:	e7fc      	b.n	8002fd8 <HAL_TIM_PWM_ConfigChannel+0x134>
 8002fde:	46c0      	nop			@ (mov r8, r8)
 8002fe0:	08004a50 	.word	0x08004a50
 8002fe4:	fffffbff 	.word	0xfffffbff

08002fe8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002fe8:	b530      	push	{r4, r5, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002fea:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fec:	4d03      	ldr	r5, [pc, #12]	@ (8002ffc <TIM_ETR_SetConfig+0x14>)
 8002fee:	402c      	ands	r4, r5

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ff0:	021b      	lsls	r3, r3, #8
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	430b      	orrs	r3, r1
 8002ff6:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ff8:	6083      	str	r3, [r0, #8]
}
 8002ffa:	bd30      	pop	{r4, r5, pc}
 8002ffc:	ffff00ff 	.word	0xffff00ff

08003000 <HAL_TIM_ConfigClockSource>:
{
 8003000:	b510      	push	{r4, lr}
 8003002:	0004      	movs	r4, r0
 8003004:	000b      	movs	r3, r1
  __HAL_LOCK(htim);
 8003006:	223c      	movs	r2, #60	@ 0x3c
 8003008:	5c82      	ldrb	r2, [r0, r2]
 800300a:	2a01      	cmp	r2, #1
 800300c:	d100      	bne.n	8003010 <HAL_TIM_ConfigClockSource+0x10>
 800300e:	e077      	b.n	8003100 <HAL_TIM_ConfigClockSource+0x100>
 8003010:	223c      	movs	r2, #60	@ 0x3c
 8003012:	2101      	movs	r1, #1
 8003014:	5481      	strb	r1, [r0, r2]
  htim->State = HAL_TIM_STATE_BUSY;
 8003016:	3201      	adds	r2, #1
 8003018:	3101      	adds	r1, #1
 800301a:	5481      	strb	r1, [r0, r2]
  tmpsmcr = htim->Instance->SMCR;
 800301c:	6801      	ldr	r1, [r0, #0]
 800301e:	688a      	ldr	r2, [r1, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003020:	4838      	ldr	r0, [pc, #224]	@ (8003104 <HAL_TIM_ConfigClockSource+0x104>)
 8003022:	4002      	ands	r2, r0
  htim->Instance->SMCR = tmpsmcr;
 8003024:	608a      	str	r2, [r1, #8]
  switch (sClockSourceConfig->ClockSource)
 8003026:	6819      	ldr	r1, [r3, #0]
 8003028:	2960      	cmp	r1, #96	@ 0x60
 800302a:	d04f      	beq.n	80030cc <HAL_TIM_ConfigClockSource+0xcc>
 800302c:	d823      	bhi.n	8003076 <HAL_TIM_ConfigClockSource+0x76>
 800302e:	2940      	cmp	r1, #64	@ 0x40
 8003030:	d057      	beq.n	80030e2 <HAL_TIM_ConfigClockSource+0xe2>
 8003032:	d811      	bhi.n	8003058 <HAL_TIM_ConfigClockSource+0x58>
 8003034:	2920      	cmp	r1, #32
 8003036:	d004      	beq.n	8003042 <HAL_TIM_ConfigClockSource+0x42>
 8003038:	d80a      	bhi.n	8003050 <HAL_TIM_ConfigClockSource+0x50>
 800303a:	2900      	cmp	r1, #0
 800303c:	d001      	beq.n	8003042 <HAL_TIM_ConfigClockSource+0x42>
 800303e:	2910      	cmp	r1, #16
 8003040:	d104      	bne.n	800304c <HAL_TIM_ConfigClockSource+0x4c>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003042:	6820      	ldr	r0, [r4, #0]
 8003044:	f7ff fd58 	bl	8002af8 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8003048:	2000      	movs	r0, #0
      break;
 800304a:	e02a      	b.n	80030a2 <HAL_TIM_ConfigClockSource+0xa2>
      status = HAL_ERROR;
 800304c:	2001      	movs	r0, #1
 800304e:	e028      	b.n	80030a2 <HAL_TIM_ConfigClockSource+0xa2>
  switch (sClockSourceConfig->ClockSource)
 8003050:	2930      	cmp	r1, #48	@ 0x30
 8003052:	d0f6      	beq.n	8003042 <HAL_TIM_ConfigClockSource+0x42>
      status = HAL_ERROR;
 8003054:	2001      	movs	r0, #1
 8003056:	e024      	b.n	80030a2 <HAL_TIM_ConfigClockSource+0xa2>
  switch (sClockSourceConfig->ClockSource)
 8003058:	2950      	cmp	r1, #80	@ 0x50
 800305a:	d10a      	bne.n	8003072 <HAL_TIM_ConfigClockSource+0x72>
                               sClockSourceConfig->ClockPolarity,
 800305c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800305e:	68da      	ldr	r2, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003060:	6820      	ldr	r0, [r4, #0]
 8003062:	f7ff fd23 	bl	8002aac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003066:	6820      	ldr	r0, [r4, #0]
 8003068:	2150      	movs	r1, #80	@ 0x50
 800306a:	f7ff fd45 	bl	8002af8 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800306e:	2000      	movs	r0, #0
      break;
 8003070:	e017      	b.n	80030a2 <HAL_TIM_ConfigClockSource+0xa2>
      status = HAL_ERROR;
 8003072:	2001      	movs	r0, #1
 8003074:	e015      	b.n	80030a2 <HAL_TIM_ConfigClockSource+0xa2>
  switch (sClockSourceConfig->ClockSource)
 8003076:	2280      	movs	r2, #128	@ 0x80
 8003078:	0152      	lsls	r2, r2, #5
 800307a:	4291      	cmp	r1, r2
 800307c:	d03c      	beq.n	80030f8 <HAL_TIM_ConfigClockSource+0xf8>
 800307e:	2280      	movs	r2, #128	@ 0x80
 8003080:	0192      	lsls	r2, r2, #6
 8003082:	4291      	cmp	r1, r2
 8003084:	d014      	beq.n	80030b0 <HAL_TIM_ConfigClockSource+0xb0>
 8003086:	2970      	cmp	r1, #112	@ 0x70
 8003088:	d138      	bne.n	80030fc <HAL_TIM_ConfigClockSource+0xfc>
                        sClockSourceConfig->ClockPrescaler,
 800308a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800308c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800308e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003090:	6820      	ldr	r0, [r4, #0]
 8003092:	f7ff ffa9 	bl	8002fe8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003096:	6822      	ldr	r2, [r4, #0]
 8003098:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800309a:	2177      	movs	r1, #119	@ 0x77
 800309c:	430b      	orrs	r3, r1
      htim->Instance->SMCR = tmpsmcr;
 800309e:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80030a0:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80030a2:	233d      	movs	r3, #61	@ 0x3d
 80030a4:	2201      	movs	r2, #1
 80030a6:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(htim);
 80030a8:	3b01      	subs	r3, #1
 80030aa:	2200      	movs	r2, #0
 80030ac:	54e2      	strb	r2, [r4, r3]
}
 80030ae:	bd10      	pop	{r4, pc}
                        sClockSourceConfig->ClockPrescaler,
 80030b0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80030b2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80030b4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80030b6:	6820      	ldr	r0, [r4, #0]
 80030b8:	f7ff ff96 	bl	8002fe8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80030bc:	6822      	ldr	r2, [r4, #0]
 80030be:	6891      	ldr	r1, [r2, #8]
 80030c0:	2380      	movs	r3, #128	@ 0x80
 80030c2:	01db      	lsls	r3, r3, #7
 80030c4:	430b      	orrs	r3, r1
 80030c6:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80030c8:	2000      	movs	r0, #0
      break;
 80030ca:	e7ea      	b.n	80030a2 <HAL_TIM_ConfigClockSource+0xa2>
                               sClockSourceConfig->ClockPolarity,
 80030cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80030ce:	68da      	ldr	r2, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80030d0:	6820      	ldr	r0, [r4, #0]
 80030d2:	f7ff fcfd 	bl	8002ad0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80030d6:	6820      	ldr	r0, [r4, #0]
 80030d8:	2160      	movs	r1, #96	@ 0x60
 80030da:	f7ff fd0d 	bl	8002af8 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80030de:	2000      	movs	r0, #0
      break;
 80030e0:	e7df      	b.n	80030a2 <HAL_TIM_ConfigClockSource+0xa2>
                               sClockSourceConfig->ClockPolarity,
 80030e2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80030e4:	68da      	ldr	r2, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030e6:	6820      	ldr	r0, [r4, #0]
 80030e8:	f7ff fce0 	bl	8002aac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80030ec:	6820      	ldr	r0, [r4, #0]
 80030ee:	2140      	movs	r1, #64	@ 0x40
 80030f0:	f7ff fd02 	bl	8002af8 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80030f4:	2000      	movs	r0, #0
      break;
 80030f6:	e7d4      	b.n	80030a2 <HAL_TIM_ConfigClockSource+0xa2>
  switch (sClockSourceConfig->ClockSource)
 80030f8:	2000      	movs	r0, #0
 80030fa:	e7d2      	b.n	80030a2 <HAL_TIM_ConfigClockSource+0xa2>
      status = HAL_ERROR;
 80030fc:	2001      	movs	r0, #1
 80030fe:	e7d0      	b.n	80030a2 <HAL_TIM_ConfigClockSource+0xa2>
  __HAL_LOCK(htim);
 8003100:	2002      	movs	r0, #2
 8003102:	e7d4      	b.n	80030ae <HAL_TIM_ConfigClockSource+0xae>
 8003104:	ffce0088 	.word	0xffce0088

08003108 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003108:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800310a:	231f      	movs	r3, #31
 800310c:	4019      	ands	r1, r3
 800310e:	2401      	movs	r4, #1
 8003110:	408c      	lsls	r4, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003112:	6a03      	ldr	r3, [r0, #32]
 8003114:	43a3      	bics	r3, r4
 8003116:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003118:	6a03      	ldr	r3, [r0, #32]
 800311a:	408a      	lsls	r2, r1
 800311c:	4313      	orrs	r3, r2
 800311e:	6203      	str	r3, [r0, #32]
}
 8003120:	bd10      	pop	{r4, pc}
	...

08003124 <HAL_TIM_PWM_Start>:
{
 8003124:	b510      	push	{r4, lr}
 8003126:	0004      	movs	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003128:	2910      	cmp	r1, #16
 800312a:	d82d      	bhi.n	8003188 <HAL_TIM_PWM_Start+0x64>
 800312c:	008b      	lsls	r3, r1, #2
 800312e:	4a3f      	ldr	r2, [pc, #252]	@ (800322c <HAL_TIM_PWM_Start+0x108>)
 8003130:	58d3      	ldr	r3, [r2, r3]
 8003132:	469f      	mov	pc, r3
 8003134:	233e      	movs	r3, #62	@ 0x3e
 8003136:	5cc3      	ldrb	r3, [r0, r3]
 8003138:	3b01      	subs	r3, #1
 800313a:	1e5a      	subs	r2, r3, #1
 800313c:	4193      	sbcs	r3, r2
 800313e:	b2db      	uxtb	r3, r3
 8003140:	2b00      	cmp	r3, #0
 8003142:	d16d      	bne.n	8003220 <HAL_TIM_PWM_Start+0xfc>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003144:	2910      	cmp	r1, #16
 8003146:	d859      	bhi.n	80031fc <HAL_TIM_PWM_Start+0xd8>
 8003148:	008b      	lsls	r3, r1, #2
 800314a:	4a39      	ldr	r2, [pc, #228]	@ (8003230 <HAL_TIM_PWM_Start+0x10c>)
 800314c:	58d3      	ldr	r3, [r2, r3]
 800314e:	469f      	mov	pc, r3
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003150:	233f      	movs	r3, #63	@ 0x3f
 8003152:	5cc3      	ldrb	r3, [r0, r3]
 8003154:	3b01      	subs	r3, #1
 8003156:	1e5a      	subs	r2, r3, #1
 8003158:	4193      	sbcs	r3, r2
 800315a:	b2db      	uxtb	r3, r3
 800315c:	e7f0      	b.n	8003140 <HAL_TIM_PWM_Start+0x1c>
 800315e:	2340      	movs	r3, #64	@ 0x40
 8003160:	5cc3      	ldrb	r3, [r0, r3]
 8003162:	3b01      	subs	r3, #1
 8003164:	1e5a      	subs	r2, r3, #1
 8003166:	4193      	sbcs	r3, r2
 8003168:	b2db      	uxtb	r3, r3
 800316a:	e7e9      	b.n	8003140 <HAL_TIM_PWM_Start+0x1c>
 800316c:	2341      	movs	r3, #65	@ 0x41
 800316e:	5cc3      	ldrb	r3, [r0, r3]
 8003170:	3b01      	subs	r3, #1
 8003172:	1e5a      	subs	r2, r3, #1
 8003174:	4193      	sbcs	r3, r2
 8003176:	b2db      	uxtb	r3, r3
 8003178:	e7e2      	b.n	8003140 <HAL_TIM_PWM_Start+0x1c>
 800317a:	2342      	movs	r3, #66	@ 0x42
 800317c:	5cc3      	ldrb	r3, [r0, r3]
 800317e:	3b01      	subs	r3, #1
 8003180:	1e5a      	subs	r2, r3, #1
 8003182:	4193      	sbcs	r3, r2
 8003184:	b2db      	uxtb	r3, r3
 8003186:	e7db      	b.n	8003140 <HAL_TIM_PWM_Start+0x1c>
 8003188:	2343      	movs	r3, #67	@ 0x43
 800318a:	5ce3      	ldrb	r3, [r4, r3]
 800318c:	3b01      	subs	r3, #1
 800318e:	1e5a      	subs	r2, r3, #1
 8003190:	4193      	sbcs	r3, r2
 8003192:	b2db      	uxtb	r3, r3
 8003194:	e7d4      	b.n	8003140 <HAL_TIM_PWM_Start+0x1c>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003196:	233e      	movs	r3, #62	@ 0x3e
 8003198:	2202      	movs	r2, #2
 800319a:	54e2      	strb	r2, [r4, r3]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800319c:	6820      	ldr	r0, [r4, #0]
 800319e:	2201      	movs	r2, #1
 80031a0:	f7ff ffb2 	bl	8003108 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80031a4:	6823      	ldr	r3, [r4, #0]
 80031a6:	4a23      	ldr	r2, [pc, #140]	@ (8003234 <HAL_TIM_PWM_Start+0x110>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d005      	beq.n	80031b8 <HAL_TIM_PWM_Start+0x94>
 80031ac:	4a22      	ldr	r2, [pc, #136]	@ (8003238 <HAL_TIM_PWM_Start+0x114>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d002      	beq.n	80031b8 <HAL_TIM_PWM_Start+0x94>
 80031b2:	4a22      	ldr	r2, [pc, #136]	@ (800323c <HAL_TIM_PWM_Start+0x118>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d104      	bne.n	80031c2 <HAL_TIM_PWM_Start+0x9e>
    __HAL_TIM_MOE_ENABLE(htim);
 80031b8:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80031ba:	2280      	movs	r2, #128	@ 0x80
 80031bc:	0212      	lsls	r2, r2, #8
 80031be:	430a      	orrs	r2, r1
 80031c0:	645a      	str	r2, [r3, #68]	@ 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031c2:	6823      	ldr	r3, [r4, #0]
 80031c4:	4a1b      	ldr	r2, [pc, #108]	@ (8003234 <HAL_TIM_PWM_Start+0x110>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d01c      	beq.n	8003204 <HAL_TIM_PWM_Start+0xe0>
 80031ca:	4a1d      	ldr	r2, [pc, #116]	@ (8003240 <HAL_TIM_PWM_Start+0x11c>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d019      	beq.n	8003204 <HAL_TIM_PWM_Start+0xe0>
    __HAL_TIM_ENABLE(htim);
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	2101      	movs	r1, #1
 80031d4:	430a      	orrs	r2, r1
 80031d6:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80031d8:	2000      	movs	r0, #0
 80031da:	e022      	b.n	8003222 <HAL_TIM_PWM_Start+0xfe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80031dc:	233f      	movs	r3, #63	@ 0x3f
 80031de:	2202      	movs	r2, #2
 80031e0:	54e2      	strb	r2, [r4, r3]
 80031e2:	e7db      	b.n	800319c <HAL_TIM_PWM_Start+0x78>
 80031e4:	2340      	movs	r3, #64	@ 0x40
 80031e6:	2202      	movs	r2, #2
 80031e8:	54e2      	strb	r2, [r4, r3]
 80031ea:	e7d7      	b.n	800319c <HAL_TIM_PWM_Start+0x78>
 80031ec:	2341      	movs	r3, #65	@ 0x41
 80031ee:	2202      	movs	r2, #2
 80031f0:	54e2      	strb	r2, [r4, r3]
 80031f2:	e7d3      	b.n	800319c <HAL_TIM_PWM_Start+0x78>
 80031f4:	2342      	movs	r3, #66	@ 0x42
 80031f6:	2202      	movs	r2, #2
 80031f8:	54e2      	strb	r2, [r4, r3]
 80031fa:	e7cf      	b.n	800319c <HAL_TIM_PWM_Start+0x78>
 80031fc:	2343      	movs	r3, #67	@ 0x43
 80031fe:	2202      	movs	r2, #2
 8003200:	54e2      	strb	r2, [r4, r3]
 8003202:	e7cb      	b.n	800319c <HAL_TIM_PWM_Start+0x78>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003204:	689a      	ldr	r2, [r3, #8]
 8003206:	490f      	ldr	r1, [pc, #60]	@ (8003244 <HAL_TIM_PWM_Start+0x120>)
 8003208:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800320a:	2a06      	cmp	r2, #6
 800320c:	d00a      	beq.n	8003224 <HAL_TIM_PWM_Start+0x100>
 800320e:	3907      	subs	r1, #7
 8003210:	428a      	cmp	r2, r1
 8003212:	d009      	beq.n	8003228 <HAL_TIM_PWM_Start+0x104>
      __HAL_TIM_ENABLE(htim);
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	2101      	movs	r1, #1
 8003218:	430a      	orrs	r2, r1
 800321a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800321c:	2000      	movs	r0, #0
 800321e:	e000      	b.n	8003222 <HAL_TIM_PWM_Start+0xfe>
    return HAL_ERROR;
 8003220:	2001      	movs	r0, #1
}
 8003222:	bd10      	pop	{r4, pc}
  return HAL_OK;
 8003224:	2000      	movs	r0, #0
 8003226:	e7fc      	b.n	8003222 <HAL_TIM_PWM_Start+0xfe>
 8003228:	2000      	movs	r0, #0
 800322a:	e7fa      	b.n	8003222 <HAL_TIM_PWM_Start+0xfe>
 800322c:	08004aa4 	.word	0x08004aa4
 8003230:	08004ae8 	.word	0x08004ae8
 8003234:	40012c00 	.word	0x40012c00
 8003238:	40014400 	.word	0x40014400
 800323c:	40014800 	.word	0x40014800
 8003240:	40000400 	.word	0x40000400
 8003244:	00010007 	.word	0x00010007

08003248 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003248:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800324a:	233c      	movs	r3, #60	@ 0x3c
 800324c:	5cc3      	ldrb	r3, [r0, r3]
 800324e:	2b01      	cmp	r3, #1
 8003250:	d029      	beq.n	80032a6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8003252:	233c      	movs	r3, #60	@ 0x3c
 8003254:	2201      	movs	r2, #1
 8003256:	54c2      	strb	r2, [r0, r3]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003258:	3301      	adds	r3, #1
 800325a:	3201      	adds	r2, #1
 800325c:	54c2      	strb	r2, [r0, r3]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800325e:	6802      	ldr	r2, [r0, #0]
 8003260:	6853      	ldr	r3, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003262:	6895      	ldr	r5, [r2, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003264:	4c11      	ldr	r4, [pc, #68]	@ (80032ac <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 8003266:	42a2      	cmp	r2, r4
 8003268:	d018      	beq.n	800329c <HAL_TIMEx_MasterConfigSynchronization+0x54>
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800326a:	2470      	movs	r4, #112	@ 0x70
 800326c:	43a3      	bics	r3, r4
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800326e:	680c      	ldr	r4, [r1, #0]
 8003270:	4323      	orrs	r3, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003272:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003274:	6803      	ldr	r3, [r0, #0]
 8003276:	4a0d      	ldr	r2, [pc, #52]	@ (80032ac <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d002      	beq.n	8003282 <HAL_TIMEx_MasterConfigSynchronization+0x3a>
 800327c:	4a0c      	ldr	r2, [pc, #48]	@ (80032b0 <HAL_TIMEx_MasterConfigSynchronization+0x68>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d104      	bne.n	800328c <HAL_TIMEx_MasterConfigSynchronization+0x44>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003282:	2280      	movs	r2, #128	@ 0x80
 8003284:	4395      	bics	r5, r2
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003286:	688a      	ldr	r2, [r1, #8]
 8003288:	432a      	orrs	r2, r5

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800328a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800328c:	233d      	movs	r3, #61	@ 0x3d
 800328e:	2201      	movs	r2, #1
 8003290:	54c2      	strb	r2, [r0, r3]

  __HAL_UNLOCK(htim);
 8003292:	3b01      	subs	r3, #1
 8003294:	2200      	movs	r2, #0
 8003296:	54c2      	strb	r2, [r0, r3]

  return HAL_OK;
 8003298:	2000      	movs	r0, #0
}
 800329a:	bd30      	pop	{r4, r5, pc}
    tmpcr2 &= ~TIM_CR2_MMS2;
 800329c:	4c05      	ldr	r4, [pc, #20]	@ (80032b4 <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
 800329e:	4023      	ands	r3, r4
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80032a0:	684c      	ldr	r4, [r1, #4]
 80032a2:	4323      	orrs	r3, r4
 80032a4:	e7e1      	b.n	800326a <HAL_TIMEx_MasterConfigSynchronization+0x22>
  __HAL_LOCK(htim);
 80032a6:	2002      	movs	r0, #2
 80032a8:	e7f7      	b.n	800329a <HAL_TIMEx_MasterConfigSynchronization+0x52>
 80032aa:	46c0      	nop			@ (mov r8, r8)
 80032ac:	40012c00 	.word	0x40012c00
 80032b0:	40000400 	.word	0x40000400
 80032b4:	ff0fffff 	.word	0xff0fffff

080032b8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80032b8:	b510      	push	{r4, lr}
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80032ba:	233c      	movs	r3, #60	@ 0x3c
 80032bc:	5cc3      	ldrb	r3, [r0, r3]
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d040      	beq.n	8003344 <HAL_TIMEx_ConfigBreakDeadTime+0x8c>
 80032c2:	233c      	movs	r3, #60	@ 0x3c
 80032c4:	2201      	movs	r2, #1
 80032c6:	54c2      	strb	r2, [r0, r3]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80032c8:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80032ca:	4a1f      	ldr	r2, [pc, #124]	@ (8003348 <HAL_TIMEx_ConfigBreakDeadTime+0x90>)
 80032cc:	4013      	ands	r3, r2
 80032ce:	688a      	ldr	r2, [r1, #8]
 80032d0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80032d2:	4a1e      	ldr	r2, [pc, #120]	@ (800334c <HAL_TIMEx_ConfigBreakDeadTime+0x94>)
 80032d4:	4013      	ands	r3, r2
 80032d6:	684a      	ldr	r2, [r1, #4]
 80032d8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80032da:	4a1d      	ldr	r2, [pc, #116]	@ (8003350 <HAL_TIMEx_ConfigBreakDeadTime+0x98>)
 80032dc:	4013      	ands	r3, r2
 80032de:	680a      	ldr	r2, [r1, #0]
 80032e0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80032e2:	4a1c      	ldr	r2, [pc, #112]	@ (8003354 <HAL_TIMEx_ConfigBreakDeadTime+0x9c>)
 80032e4:	4013      	ands	r3, r2
 80032e6:	690a      	ldr	r2, [r1, #16]
 80032e8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80032ea:	4a1b      	ldr	r2, [pc, #108]	@ (8003358 <HAL_TIMEx_ConfigBreakDeadTime+0xa0>)
 80032ec:	4013      	ands	r3, r2
 80032ee:	694a      	ldr	r2, [r1, #20]
 80032f0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80032f2:	4a1a      	ldr	r2, [pc, #104]	@ (800335c <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 80032f4:	4013      	ands	r3, r2
 80032f6:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 80032f8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80032fa:	4a19      	ldr	r2, [pc, #100]	@ (8003360 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 80032fc:	4013      	ands	r3, r2
 80032fe:	698a      	ldr	r2, [r1, #24]
 8003300:	0412      	lsls	r2, r2, #16
 8003302:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8003304:	4a17      	ldr	r2, [pc, #92]	@ (8003364 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8003306:	4013      	ands	r3, r2
 8003308:	69ca      	ldr	r2, [r1, #28]
 800330a:	4313      	orrs	r3, r2

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800330c:	6802      	ldr	r2, [r0, #0]
 800330e:	4c16      	ldr	r4, [pc, #88]	@ (8003368 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8003310:	42a2      	cmp	r2, r4
 8003312:	d005      	beq.n	8003320 <HAL_TIMEx_ConfigBreakDeadTime+0x68>
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003314:	6453      	str	r3, [r2, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003316:	233c      	movs	r3, #60	@ 0x3c
 8003318:	2200      	movs	r2, #0
 800331a:	54c2      	strb	r2, [r0, r3]

  return HAL_OK;
 800331c:	2000      	movs	r0, #0
}
 800331e:	bd10      	pop	{r4, pc}
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003320:	4c12      	ldr	r4, [pc, #72]	@ (800336c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8003322:	4023      	ands	r3, r4
 8003324:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 8003326:	0524      	lsls	r4, r4, #20
 8003328:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800332a:	4c11      	ldr	r4, [pc, #68]	@ (8003370 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 800332c:	4023      	ands	r3, r4
 800332e:	6a0c      	ldr	r4, [r1, #32]
 8003330:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003332:	4c10      	ldr	r4, [pc, #64]	@ (8003374 <HAL_TIMEx_ConfigBreakDeadTime+0xbc>)
 8003334:	4023      	ands	r3, r4
 8003336:	6a4c      	ldr	r4, [r1, #36]	@ 0x24
 8003338:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800333a:	4c0f      	ldr	r4, [pc, #60]	@ (8003378 <HAL_TIMEx_ConfigBreakDeadTime+0xc0>)
 800333c:	4023      	ands	r3, r4
 800333e:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
 8003340:	430b      	orrs	r3, r1
 8003342:	e7e7      	b.n	8003314 <HAL_TIMEx_ConfigBreakDeadTime+0x5c>
  __HAL_LOCK(htim);
 8003344:	2002      	movs	r0, #2
 8003346:	e7ea      	b.n	800331e <HAL_TIMEx_ConfigBreakDeadTime+0x66>
 8003348:	fffffcff 	.word	0xfffffcff
 800334c:	fffffbff 	.word	0xfffffbff
 8003350:	fffff7ff 	.word	0xfffff7ff
 8003354:	ffffefff 	.word	0xffffefff
 8003358:	ffffdfff 	.word	0xffffdfff
 800335c:	ffffbfff 	.word	0xffffbfff
 8003360:	fff0ffff 	.word	0xfff0ffff
 8003364:	efffffff 	.word	0xefffffff
 8003368:	40012c00 	.word	0x40012c00
 800336c:	ff0fffff 	.word	0xff0fffff
 8003370:	feffffff 	.word	0xfeffffff
 8003374:	fdffffff 	.word	0xfdffffff
 8003378:	dfffffff 	.word	0xdfffffff

0800337c <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800337c:	4770      	bx	lr

0800337e <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800337e:	4770      	bx	lr

08003380 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003380:	4770      	bx	lr
	...

08003384 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003384:	b530      	push	{r4, r5, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003386:	f3ef 8410 	mrs	r4, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800338a:	2201      	movs	r2, #1
 800338c:	f382 8810 	msr	PRIMASK, r2
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8003390:	6801      	ldr	r1, [r0, #0]
 8003392:	680b      	ldr	r3, [r1, #0]
 8003394:	25c0      	movs	r5, #192	@ 0xc0
 8003396:	43ab      	bics	r3, r5
 8003398:	600b      	str	r3, [r1, #0]
 800339a:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800339e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033a2:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80033a6:	6802      	ldr	r2, [r0, #0]
 80033a8:	6893      	ldr	r3, [r2, #8]
 80033aa:	4c04      	ldr	r4, [pc, #16]	@ (80033bc <UART_EndTxTransfer+0x38>)
 80033ac:	4023      	ands	r3, r4
 80033ae:	6093      	str	r3, [r2, #8]
 80033b0:	f381 8810 	msr	PRIMASK, r1

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80033b4:	2388      	movs	r3, #136	@ 0x88
 80033b6:	2220      	movs	r2, #32
 80033b8:	50c2      	str	r2, [r0, r3]
}
 80033ba:	bd30      	pop	{r4, r5, pc}
 80033bc:	ff7fffff 	.word	0xff7fffff

080033c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80033c0:	b530      	push	{r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80033c2:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033c6:	2201      	movs	r2, #1
 80033c8:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80033cc:	6801      	ldr	r1, [r0, #0]
 80033ce:	680b      	ldr	r3, [r1, #0]
 80033d0:	4d12      	ldr	r5, [pc, #72]	@ (800341c <UART_EndRxTransfer+0x5c>)
 80033d2:	402b      	ands	r3, r5
 80033d4:	600b      	str	r3, [r1, #0]
 80033d6:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80033da:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033de:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80033e2:	6802      	ldr	r2, [r0, #0]
 80033e4:	6893      	ldr	r3, [r2, #8]
 80033e6:	4c0e      	ldr	r4, [pc, #56]	@ (8003420 <UART_EndRxTransfer+0x60>)
 80033e8:	4023      	ands	r3, r4
 80033ea:	6093      	str	r3, [r2, #8]
 80033ec:	f381 8810 	msr	PRIMASK, r1

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033f0:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d006      	beq.n	8003404 <UART_EndRxTransfer+0x44>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80033f6:	238c      	movs	r3, #140	@ 0x8c
 80033f8:	2220      	movs	r2, #32
 80033fa:	50c2      	str	r2, [r0, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033fc:	2300      	movs	r3, #0
 80033fe:	66c3      	str	r3, [r0, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003400:	6743      	str	r3, [r0, #116]	@ 0x74
}
 8003402:	bd30      	pop	{r4, r5, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003404:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003408:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800340c:	6802      	ldr	r2, [r0, #0]
 800340e:	6813      	ldr	r3, [r2, #0]
 8003410:	2410      	movs	r4, #16
 8003412:	43a3      	bics	r3, r4
 8003414:	6013      	str	r3, [r2, #0]
 8003416:	f381 8810 	msr	PRIMASK, r1
}
 800341a:	e7ec      	b.n	80033f6 <UART_EndRxTransfer+0x36>
 800341c:	fffffedf 	.word	0xfffffedf
 8003420:	effffffe 	.word	0xeffffffe

08003424 <HAL_UART_RxCpltCallback>:
}
 8003424:	4770      	bx	lr

08003426 <HAL_UART_RxHalfCpltCallback>:
}
 8003426:	4770      	bx	lr

08003428 <HAL_UART_ErrorCallback>:
}
 8003428:	4770      	bx	lr

0800342a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800342a:	b570      	push	{r4, r5, r6, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800342c:	6a84      	ldr	r4, [r0, #40]	@ 0x28

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800342e:	2388      	movs	r3, #136	@ 0x88
 8003430:	58e2      	ldr	r2, [r4, r3]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003432:	3304      	adds	r3, #4
 8003434:	58e5      	ldr	r5, [r4, r3]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003436:	6823      	ldr	r3, [r4, #0]
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	061b      	lsls	r3, r3, #24
 800343c:	d501      	bpl.n	8003442 <UART_DMAError+0x18>
 800343e:	2a21      	cmp	r2, #33	@ 0x21
 8003440:	d00e      	beq.n	8003460 <UART_DMAError+0x36>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8003442:	6823      	ldr	r3, [r4, #0]
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	065b      	lsls	r3, r3, #25
 8003448:	d501      	bpl.n	800344e <UART_DMAError+0x24>
 800344a:	2d22      	cmp	r5, #34	@ 0x22
 800344c:	d00f      	beq.n	800346e <UART_DMAError+0x44>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800344e:	2290      	movs	r2, #144	@ 0x90
 8003450:	58a3      	ldr	r3, [r4, r2]
 8003452:	2110      	movs	r1, #16
 8003454:	430b      	orrs	r3, r1
 8003456:	50a3      	str	r3, [r4, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003458:	0020      	movs	r0, r4
 800345a:	f7ff ffe5 	bl	8003428 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800345e:	bd70      	pop	{r4, r5, r6, pc}
    huart->TxXferCount = 0U;
 8003460:	2356      	movs	r3, #86	@ 0x56
 8003462:	2200      	movs	r2, #0
 8003464:	52e2      	strh	r2, [r4, r3]
    UART_EndTxTransfer(huart);
 8003466:	0020      	movs	r0, r4
 8003468:	f7ff ff8c 	bl	8003384 <UART_EndTxTransfer>
 800346c:	e7e9      	b.n	8003442 <UART_DMAError+0x18>
    huart->RxXferCount = 0U;
 800346e:	235e      	movs	r3, #94	@ 0x5e
 8003470:	2200      	movs	r2, #0
 8003472:	52e2      	strh	r2, [r4, r3]
    UART_EndRxTransfer(huart);
 8003474:	0020      	movs	r0, r4
 8003476:	f7ff ffa3 	bl	80033c0 <UART_EndRxTransfer>
 800347a:	e7e8      	b.n	800344e <UART_DMAError+0x24>

0800347c <HAL_UARTEx_RxEventCallback>:
}
 800347c:	4770      	bx	lr

0800347e <UART_DMARxHalfCplt>:
{
 800347e:	b510      	push	{r4, lr}
 8003480:	0003      	movs	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003482:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8003484:	2201      	movs	r2, #1
 8003486:	6702      	str	r2, [r0, #112]	@ 0x70
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003488:	6ec2      	ldr	r2, [r0, #108]	@ 0x6c
 800348a:	2a01      	cmp	r2, #1
 800348c:	d111      	bne.n	80034b2 <UART_DMARxHalfCplt+0x34>
    huart->RxXferCount = huart->RxXferSize / 2U;
 800348e:	325b      	adds	r2, #91	@ 0x5b
 8003490:	5a81      	ldrh	r1, [r0, r2]
 8003492:	084c      	lsrs	r4, r1, #1
 8003494:	3202      	adds	r2, #2
 8003496:	5284      	strh	r4, [r0, r2]
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	b29b      	uxth	r3, r3
    if (nb_remaining_rx_data <= huart->RxXferSize)
 800349e:	4299      	cmp	r1, r3
 80034a0:	d300      	bcc.n	80034a4 <UART_DMARxHalfCplt+0x26>
      huart->RxXferCount = nb_remaining_rx_data;
 80034a2:	5283      	strh	r3, [r0, r2]
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80034a4:	235e      	movs	r3, #94	@ 0x5e
 80034a6:	5ac3      	ldrh	r3, [r0, r3]
 80034a8:	1ac9      	subs	r1, r1, r3
 80034aa:	b289      	uxth	r1, r1
 80034ac:	f7ff ffe6 	bl	800347c <HAL_UARTEx_RxEventCallback>
}
 80034b0:	bd10      	pop	{r4, pc}
    HAL_UART_RxHalfCpltCallback(huart);
 80034b2:	f7ff ffb8 	bl	8003426 <HAL_UART_RxHalfCpltCallback>
}
 80034b6:	e7fb      	b.n	80034b0 <UART_DMARxHalfCplt+0x32>

080034b8 <UART_DMAReceiveCplt>:
{
 80034b8:	b570      	push	{r4, r5, r6, lr}
 80034ba:	0003      	movs	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80034bc:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	6812      	ldr	r2, [r2, #0]
 80034c2:	0692      	lsls	r2, r2, #26
 80034c4:	d429      	bmi.n	800351a <UART_DMAReceiveCplt+0x62>
    huart->RxXferCount = 0U;
 80034c6:	225e      	movs	r2, #94	@ 0x5e
 80034c8:	2100      	movs	r1, #0
 80034ca:	5281      	strh	r1, [r0, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80034cc:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034d0:	3a5d      	subs	r2, #93	@ 0x5d
 80034d2:	f382 8810 	msr	PRIMASK, r2
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80034d6:	6804      	ldr	r4, [r0, #0]
 80034d8:	6821      	ldr	r1, [r4, #0]
 80034da:	4e23      	ldr	r6, [pc, #140]	@ (8003568 <UART_DMAReceiveCplt+0xb0>)
 80034dc:	4031      	ands	r1, r6
 80034de:	6021      	str	r1, [r4, #0]
 80034e0:	f385 8810 	msr	PRIMASK, r5
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80034e4:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034e8:	f382 8810 	msr	PRIMASK, r2
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034ec:	6804      	ldr	r4, [r0, #0]
 80034ee:	68a1      	ldr	r1, [r4, #8]
 80034f0:	4391      	bics	r1, r2
 80034f2:	60a1      	str	r1, [r4, #8]
 80034f4:	f385 8810 	msr	PRIMASK, r5
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80034f8:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034fc:	f382 8810 	msr	PRIMASK, r2
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003500:	6801      	ldr	r1, [r0, #0]
 8003502:	688a      	ldr	r2, [r1, #8]
 8003504:	2540      	movs	r5, #64	@ 0x40
 8003506:	43aa      	bics	r2, r5
 8003508:	608a      	str	r2, [r1, #8]
 800350a:	f384 8810 	msr	PRIMASK, r4
    huart->RxState = HAL_UART_STATE_READY;
 800350e:	228c      	movs	r2, #140	@ 0x8c
 8003510:	2120      	movs	r1, #32
 8003512:	5081      	str	r1, [r0, r2]
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003514:	6ec2      	ldr	r2, [r0, #108]	@ 0x6c
 8003516:	2a01      	cmp	r2, #1
 8003518:	d017      	beq.n	800354a <UART_DMAReceiveCplt+0x92>
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800351a:	2200      	movs	r2, #0
 800351c:	6702      	str	r2, [r0, #112]	@ 0x70
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800351e:	6ec2      	ldr	r2, [r0, #108]	@ 0x6c
 8003520:	2a01      	cmp	r2, #1
 8003522:	d11e      	bne.n	8003562 <UART_DMAReceiveCplt+0xaa>
    huart->RxXferCount = 0;
 8003524:	325d      	adds	r2, #93	@ 0x5d
 8003526:	2100      	movs	r1, #0
 8003528:	5281      	strh	r1, [r0, r2]
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	b29b      	uxth	r3, r3
    if (nb_remaining_rx_data < huart->RxXferSize)
 8003530:	3a02      	subs	r2, #2
 8003532:	5a81      	ldrh	r1, [r0, r2]
 8003534:	4299      	cmp	r1, r3
 8003536:	d901      	bls.n	800353c <UART_DMAReceiveCplt+0x84>
      huart->RxXferCount = nb_remaining_rx_data;
 8003538:	3202      	adds	r2, #2
 800353a:	5283      	strh	r3, [r0, r2]
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800353c:	235e      	movs	r3, #94	@ 0x5e
 800353e:	5ac3      	ldrh	r3, [r0, r3]
 8003540:	1ac9      	subs	r1, r1, r3
 8003542:	b289      	uxth	r1, r1
 8003544:	f7ff ff9a 	bl	800347c <HAL_UARTEx_RxEventCallback>
}
 8003548:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800354a:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800354e:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003552:	6801      	ldr	r1, [r0, #0]
 8003554:	680a      	ldr	r2, [r1, #0]
 8003556:	3d30      	subs	r5, #48	@ 0x30
 8003558:	43aa      	bics	r2, r5
 800355a:	600a      	str	r2, [r1, #0]
 800355c:	f384 8810 	msr	PRIMASK, r4
}
 8003560:	e7db      	b.n	800351a <UART_DMAReceiveCplt+0x62>
    HAL_UART_RxCpltCallback(huart);
 8003562:	f7ff ff5f 	bl	8003424 <HAL_UART_RxCpltCallback>
}
 8003566:	e7ef      	b.n	8003548 <UART_DMAReceiveCplt+0x90>
 8003568:	fffffeff 	.word	0xfffffeff

0800356c <UART_SetConfig>:
{
 800356c:	b510      	push	{r4, lr}
 800356e:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003570:	6883      	ldr	r3, [r0, #8]
 8003572:	6902      	ldr	r2, [r0, #16]
 8003574:	4313      	orrs	r3, r2
 8003576:	6942      	ldr	r2, [r0, #20]
 8003578:	4313      	orrs	r3, r2
 800357a:	69c2      	ldr	r2, [r0, #28]
 800357c:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800357e:	6801      	ldr	r1, [r0, #0]
 8003580:	680a      	ldr	r2, [r1, #0]
 8003582:	4862      	ldr	r0, [pc, #392]	@ (800370c <UART_SetConfig+0x1a0>)
 8003584:	4002      	ands	r2, r0
 8003586:	4313      	orrs	r3, r2
 8003588:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800358a:	6822      	ldr	r2, [r4, #0]
 800358c:	6853      	ldr	r3, [r2, #4]
 800358e:	4960      	ldr	r1, [pc, #384]	@ (8003710 <UART_SetConfig+0x1a4>)
 8003590:	400b      	ands	r3, r1
 8003592:	68e1      	ldr	r1, [r4, #12]
 8003594:	430b      	orrs	r3, r1
 8003596:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003598:	69a3      	ldr	r3, [r4, #24]
  tmpreg |= huart->Init.OneBitSampling;
 800359a:	6a22      	ldr	r2, [r4, #32]
 800359c:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800359e:	6821      	ldr	r1, [r4, #0]
 80035a0:	688b      	ldr	r3, [r1, #8]
 80035a2:	485c      	ldr	r0, [pc, #368]	@ (8003714 <UART_SetConfig+0x1a8>)
 80035a4:	4003      	ands	r3, r0
 80035a6:	4313      	orrs	r3, r2
 80035a8:	608b      	str	r3, [r1, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80035aa:	6822      	ldr	r2, [r4, #0]
 80035ac:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80035ae:	210f      	movs	r1, #15
 80035b0:	438b      	bics	r3, r1
 80035b2:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80035b4:	430b      	orrs	r3, r1
 80035b6:	62d3      	str	r3, [r2, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 80035b8:	6823      	ldr	r3, [r4, #0]
 80035ba:	4a57      	ldr	r2, [pc, #348]	@ (8003718 <UART_SetConfig+0x1ac>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d030      	beq.n	8003622 <UART_SetConfig+0xb6>
 80035c0:	4a56      	ldr	r2, [pc, #344]	@ (800371c <UART_SetConfig+0x1b0>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d03e      	beq.n	8003644 <UART_SetConfig+0xd8>
 80035c6:	2310      	movs	r3, #16
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035c8:	69e0      	ldr	r0, [r4, #28]
 80035ca:	2280      	movs	r2, #128	@ 0x80
 80035cc:	0212      	lsls	r2, r2, #8
 80035ce:	4290      	cmp	r0, r2
 80035d0:	d042      	beq.n	8003658 <UART_SetConfig+0xec>
    switch (clocksource)
 80035d2:	2b04      	cmp	r3, #4
 80035d4:	d100      	bne.n	80035d8 <UART_SetConfig+0x6c>
 80035d6:	e089      	b.n	80036ec <UART_SetConfig+0x180>
 80035d8:	d87b      	bhi.n	80036d2 <UART_SetConfig+0x166>
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d100      	bne.n	80035e0 <UART_SetConfig+0x74>
 80035de:	e07f      	b.n	80036e0 <UART_SetConfig+0x174>
 80035e0:	2b02      	cmp	r3, #2
 80035e2:	d174      	bne.n	80036ce <UART_SetConfig+0x162>
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 80035e4:	4b4e      	ldr	r3, [pc, #312]	@ (8003720 <UART_SetConfig+0x1b4>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	095b      	lsrs	r3, r3, #5
 80035ea:	2107      	movs	r1, #7
 80035ec:	4019      	ands	r1, r3
 80035ee:	3101      	adds	r1, #1
 80035f0:	484c      	ldr	r0, [pc, #304]	@ (8003724 <UART_SetConfig+0x1b8>)
 80035f2:	f7fc fd9d 	bl	8000130 <__udivsi3>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80035f6:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80035f8:	4b4b      	ldr	r3, [pc, #300]	@ (8003728 <UART_SetConfig+0x1bc>)
 80035fa:	0052      	lsls	r2, r2, #1
 80035fc:	5ad1      	ldrh	r1, [r2, r3]
 80035fe:	f7fc fd97 	bl	8000130 <__udivsi3>
 8003602:	6861      	ldr	r1, [r4, #4]
 8003604:	084b      	lsrs	r3, r1, #1
 8003606:	18c0      	adds	r0, r0, r3
 8003608:	f7fc fd92 	bl	8000130 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800360c:	0002      	movs	r2, r0
 800360e:	3a10      	subs	r2, #16
 8003610:	4b46      	ldr	r3, [pc, #280]	@ (800372c <UART_SetConfig+0x1c0>)
 8003612:	429a      	cmp	r2, r3
 8003614:	d86f      	bhi.n	80036f6 <UART_SetConfig+0x18a>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003616:	6823      	ldr	r3, [r4, #0]
 8003618:	0400      	lsls	r0, r0, #16
 800361a:	0c00      	lsrs	r0, r0, #16
 800361c:	60d8      	str	r0, [r3, #12]
 800361e:	2000      	movs	r0, #0
 8003620:	e06a      	b.n	80036f8 <UART_SetConfig+0x18c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003622:	4b3f      	ldr	r3, [pc, #252]	@ (8003720 <UART_SetConfig+0x1b4>)
 8003624:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003626:	2303      	movs	r3, #3
 8003628:	4013      	ands	r3, r2
 800362a:	2b02      	cmp	r3, #2
 800362c:	d00c      	beq.n	8003648 <UART_SetConfig+0xdc>
 800362e:	d805      	bhi.n	800363c <UART_SetConfig+0xd0>
 8003630:	2b00      	cmp	r3, #0
 8003632:	d00b      	beq.n	800364c <UART_SetConfig+0xe0>
 8003634:	2b01      	cmp	r3, #1
 8003636:	d10b      	bne.n	8003650 <UART_SetConfig+0xe4>
 8003638:	3303      	adds	r3, #3
 800363a:	e7c5      	b.n	80035c8 <UART_SetConfig+0x5c>
 800363c:	2b03      	cmp	r3, #3
 800363e:	d109      	bne.n	8003654 <UART_SetConfig+0xe8>
 8003640:	3305      	adds	r3, #5
 8003642:	e7c1      	b.n	80035c8 <UART_SetConfig+0x5c>
 8003644:	2300      	movs	r3, #0
 8003646:	e7bf      	b.n	80035c8 <UART_SetConfig+0x5c>
 8003648:	2302      	movs	r3, #2
 800364a:	e7bd      	b.n	80035c8 <UART_SetConfig+0x5c>
 800364c:	2300      	movs	r3, #0
 800364e:	e7bb      	b.n	80035c8 <UART_SetConfig+0x5c>
 8003650:	2310      	movs	r3, #16
 8003652:	e7b9      	b.n	80035c8 <UART_SetConfig+0x5c>
 8003654:	2310      	movs	r3, #16
 8003656:	e7b7      	b.n	80035c8 <UART_SetConfig+0x5c>
    switch (clocksource)
 8003658:	2b04      	cmp	r3, #4
 800365a:	d035      	beq.n	80036c8 <UART_SetConfig+0x15c>
 800365c:	d82a      	bhi.n	80036b4 <UART_SetConfig+0x148>
 800365e:	2b00      	cmp	r3, #0
 8003660:	d02c      	beq.n	80036bc <UART_SetConfig+0x150>
 8003662:	2b02      	cmp	r3, #2
 8003664:	d124      	bne.n	80036b0 <UART_SetConfig+0x144>
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8003666:	4b2e      	ldr	r3, [pc, #184]	@ (8003720 <UART_SetConfig+0x1b4>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	095b      	lsrs	r3, r3, #5
 800366c:	2107      	movs	r1, #7
 800366e:	4019      	ands	r1, r3
 8003670:	3101      	adds	r1, #1
 8003672:	482c      	ldr	r0, [pc, #176]	@ (8003724 <UART_SetConfig+0x1b8>)
 8003674:	f7fc fd5c 	bl	8000130 <__udivsi3>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003678:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800367a:	4b2b      	ldr	r3, [pc, #172]	@ (8003728 <UART_SetConfig+0x1bc>)
 800367c:	0052      	lsls	r2, r2, #1
 800367e:	5ad1      	ldrh	r1, [r2, r3]
 8003680:	f7fc fd56 	bl	8000130 <__udivsi3>
 8003684:	0040      	lsls	r0, r0, #1
 8003686:	6861      	ldr	r1, [r4, #4]
 8003688:	084b      	lsrs	r3, r1, #1
 800368a:	18c0      	adds	r0, r0, r3
 800368c:	f7fc fd50 	bl	8000130 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003690:	0002      	movs	r2, r0
 8003692:	3a10      	subs	r2, #16
 8003694:	4b25      	ldr	r3, [pc, #148]	@ (800372c <UART_SetConfig+0x1c0>)
 8003696:	429a      	cmp	r2, r3
 8003698:	d82b      	bhi.n	80036f2 <UART_SetConfig+0x186>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800369a:	b282      	uxth	r2, r0
 800369c:	230f      	movs	r3, #15
 800369e:	439a      	bics	r2, r3
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80036a0:	0840      	lsrs	r0, r0, #1
 80036a2:	3b08      	subs	r3, #8
 80036a4:	4003      	ands	r3, r0
 80036a6:	4313      	orrs	r3, r2
        huart->Instance->BRR = brrtemp;
 80036a8:	6822      	ldr	r2, [r4, #0]
 80036aa:	60d3      	str	r3, [r2, #12]
 80036ac:	2000      	movs	r0, #0
 80036ae:	e023      	b.n	80036f8 <UART_SetConfig+0x18c>
    switch (clocksource)
 80036b0:	2001      	movs	r0, #1
 80036b2:	e021      	b.n	80036f8 <UART_SetConfig+0x18c>
 80036b4:	2b08      	cmp	r3, #8
 80036b6:	d0df      	beq.n	8003678 <UART_SetConfig+0x10c>
 80036b8:	2001      	movs	r0, #1
 80036ba:	e01d      	b.n	80036f8 <UART_SetConfig+0x18c>
        pclk = HAL_RCC_GetPCLK1Freq();
 80036bc:	f7fe fede 	bl	800247c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80036c0:	2800      	cmp	r0, #0
 80036c2:	d1d9      	bne.n	8003678 <UART_SetConfig+0x10c>
 80036c4:	2000      	movs	r0, #0
 80036c6:	e017      	b.n	80036f8 <UART_SetConfig+0x18c>
        pclk = HAL_RCC_GetSysClockFreq();
 80036c8:	f7fe fe90 	bl	80023ec <HAL_RCC_GetSysClockFreq>
        break;
 80036cc:	e7f8      	b.n	80036c0 <UART_SetConfig+0x154>
    switch (clocksource)
 80036ce:	2001      	movs	r0, #1
 80036d0:	e012      	b.n	80036f8 <UART_SetConfig+0x18c>
 80036d2:	2b08      	cmp	r3, #8
 80036d4:	d102      	bne.n	80036dc <UART_SetConfig+0x170>
 80036d6:	2080      	movs	r0, #128	@ 0x80
 80036d8:	0200      	lsls	r0, r0, #8
 80036da:	e78c      	b.n	80035f6 <UART_SetConfig+0x8a>
 80036dc:	2001      	movs	r0, #1
 80036de:	e00b      	b.n	80036f8 <UART_SetConfig+0x18c>
        pclk = HAL_RCC_GetPCLK1Freq();
 80036e0:	f7fe fecc 	bl	800247c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80036e4:	2800      	cmp	r0, #0
 80036e6:	d186      	bne.n	80035f6 <UART_SetConfig+0x8a>
 80036e8:	2000      	movs	r0, #0
 80036ea:	e005      	b.n	80036f8 <UART_SetConfig+0x18c>
        pclk = HAL_RCC_GetSysClockFreq();
 80036ec:	f7fe fe7e 	bl	80023ec <HAL_RCC_GetSysClockFreq>
        break;
 80036f0:	e7f8      	b.n	80036e4 <UART_SetConfig+0x178>
        ret = HAL_ERROR;
 80036f2:	2001      	movs	r0, #1
 80036f4:	e000      	b.n	80036f8 <UART_SetConfig+0x18c>
        ret = HAL_ERROR;
 80036f6:	2001      	movs	r0, #1
  huart->NbTxDataToProcess = 1;
 80036f8:	2301      	movs	r3, #1
 80036fa:	226a      	movs	r2, #106	@ 0x6a
 80036fc:	52a3      	strh	r3, [r4, r2]
  huart->NbRxDataToProcess = 1;
 80036fe:	3a02      	subs	r2, #2
 8003700:	52a3      	strh	r3, [r4, r2]
  huart->RxISR = NULL;
 8003702:	2300      	movs	r3, #0
 8003704:	6763      	str	r3, [r4, #116]	@ 0x74
  huart->TxISR = NULL;
 8003706:	67a3      	str	r3, [r4, #120]	@ 0x78
}
 8003708:	bd10      	pop	{r4, pc}
 800370a:	46c0      	nop			@ (mov r8, r8)
 800370c:	cfff69f3 	.word	0xcfff69f3
 8003710:	ffffcfff 	.word	0xffffcfff
 8003714:	11fff4ff 	.word	0x11fff4ff
 8003718:	40013800 	.word	0x40013800
 800371c:	40004400 	.word	0x40004400
 8003720:	40021000 	.word	0x40021000
 8003724:	02dc6c00 	.word	0x02dc6c00
 8003728:	08004b2c 	.word	0x08004b2c
 800372c:	0000ffef 	.word	0x0000ffef

08003730 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003730:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8003732:	071b      	lsls	r3, r3, #28
 8003734:	d506      	bpl.n	8003744 <UART_AdvFeatureConfig+0x14>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003736:	6802      	ldr	r2, [r0, #0]
 8003738:	6853      	ldr	r3, [r2, #4]
 800373a:	492c      	ldr	r1, [pc, #176]	@ (80037ec <UART_AdvFeatureConfig+0xbc>)
 800373c:	400b      	ands	r3, r1
 800373e:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 8003740:	430b      	orrs	r3, r1
 8003742:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003744:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8003746:	07db      	lsls	r3, r3, #31
 8003748:	d506      	bpl.n	8003758 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800374a:	6802      	ldr	r2, [r0, #0]
 800374c:	6853      	ldr	r3, [r2, #4]
 800374e:	4928      	ldr	r1, [pc, #160]	@ (80037f0 <UART_AdvFeatureConfig+0xc0>)
 8003750:	400b      	ands	r3, r1
 8003752:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8003754:	430b      	orrs	r3, r1
 8003756:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003758:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800375a:	079b      	lsls	r3, r3, #30
 800375c:	d506      	bpl.n	800376c <UART_AdvFeatureConfig+0x3c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800375e:	6802      	ldr	r2, [r0, #0]
 8003760:	6853      	ldr	r3, [r2, #4]
 8003762:	4924      	ldr	r1, [pc, #144]	@ (80037f4 <UART_AdvFeatureConfig+0xc4>)
 8003764:	400b      	ands	r3, r1
 8003766:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 8003768:	430b      	orrs	r3, r1
 800376a:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800376c:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800376e:	075b      	lsls	r3, r3, #29
 8003770:	d506      	bpl.n	8003780 <UART_AdvFeatureConfig+0x50>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003772:	6802      	ldr	r2, [r0, #0]
 8003774:	6853      	ldr	r3, [r2, #4]
 8003776:	4920      	ldr	r1, [pc, #128]	@ (80037f8 <UART_AdvFeatureConfig+0xc8>)
 8003778:	400b      	ands	r3, r1
 800377a:	6b41      	ldr	r1, [r0, #52]	@ 0x34
 800377c:	430b      	orrs	r3, r1
 800377e:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003780:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8003782:	06db      	lsls	r3, r3, #27
 8003784:	d506      	bpl.n	8003794 <UART_AdvFeatureConfig+0x64>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003786:	6802      	ldr	r2, [r0, #0]
 8003788:	6893      	ldr	r3, [r2, #8]
 800378a:	491c      	ldr	r1, [pc, #112]	@ (80037fc <UART_AdvFeatureConfig+0xcc>)
 800378c:	400b      	ands	r3, r1
 800378e:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 8003790:	430b      	orrs	r3, r1
 8003792:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003794:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8003796:	069b      	lsls	r3, r3, #26
 8003798:	d506      	bpl.n	80037a8 <UART_AdvFeatureConfig+0x78>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800379a:	6802      	ldr	r2, [r0, #0]
 800379c:	6893      	ldr	r3, [r2, #8]
 800379e:	4918      	ldr	r1, [pc, #96]	@ (8003800 <UART_AdvFeatureConfig+0xd0>)
 80037a0:	400b      	ands	r3, r1
 80037a2:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 80037a4:	430b      	orrs	r3, r1
 80037a6:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80037a8:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80037aa:	065b      	lsls	r3, r3, #25
 80037ac:	d50b      	bpl.n	80037c6 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80037ae:	6802      	ldr	r2, [r0, #0]
 80037b0:	6853      	ldr	r3, [r2, #4]
 80037b2:	4914      	ldr	r1, [pc, #80]	@ (8003804 <UART_AdvFeatureConfig+0xd4>)
 80037b4:	400b      	ands	r3, r1
 80037b6:	6c41      	ldr	r1, [r0, #68]	@ 0x44
 80037b8:	430b      	orrs	r3, r1
 80037ba:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80037bc:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 80037be:	2380      	movs	r3, #128	@ 0x80
 80037c0:	035b      	lsls	r3, r3, #13
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d00a      	beq.n	80037dc <UART_AdvFeatureConfig+0xac>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80037c6:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80037c8:	061b      	lsls	r3, r3, #24
 80037ca:	d506      	bpl.n	80037da <UART_AdvFeatureConfig+0xaa>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80037cc:	6802      	ldr	r2, [r0, #0]
 80037ce:	6853      	ldr	r3, [r2, #4]
 80037d0:	490d      	ldr	r1, [pc, #52]	@ (8003808 <UART_AdvFeatureConfig+0xd8>)
 80037d2:	400b      	ands	r3, r1
 80037d4:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 80037d6:	430b      	orrs	r3, r1
 80037d8:	6053      	str	r3, [r2, #4]
}
 80037da:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80037dc:	6802      	ldr	r2, [r0, #0]
 80037de:	6853      	ldr	r3, [r2, #4]
 80037e0:	490a      	ldr	r1, [pc, #40]	@ (800380c <UART_AdvFeatureConfig+0xdc>)
 80037e2:	400b      	ands	r3, r1
 80037e4:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 80037e6:	430b      	orrs	r3, r1
 80037e8:	6053      	str	r3, [r2, #4]
 80037ea:	e7ec      	b.n	80037c6 <UART_AdvFeatureConfig+0x96>
 80037ec:	ffff7fff 	.word	0xffff7fff
 80037f0:	fffdffff 	.word	0xfffdffff
 80037f4:	fffeffff 	.word	0xfffeffff
 80037f8:	fffbffff 	.word	0xfffbffff
 80037fc:	ffffefff 	.word	0xffffefff
 8003800:	ffffdfff 	.word	0xffffdfff
 8003804:	ffefffff 	.word	0xffefffff
 8003808:	fff7ffff 	.word	0xfff7ffff
 800380c:	ff9fffff 	.word	0xff9fffff

08003810 <UART_WaitOnFlagUntilTimeout>:
{
 8003810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003812:	46ce      	mov	lr, r9
 8003814:	4647      	mov	r7, r8
 8003816:	b580      	push	{r7, lr}
 8003818:	0006      	movs	r6, r0
 800381a:	000d      	movs	r5, r1
 800381c:	0017      	movs	r7, r2
 800381e:	4699      	mov	r9, r3
 8003820:	9b08      	ldr	r3, [sp, #32]
 8003822:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003824:	6833      	ldr	r3, [r6, #0]
 8003826:	69dc      	ldr	r4, [r3, #28]
 8003828:	402c      	ands	r4, r5
 800382a:	1b64      	subs	r4, r4, r5
 800382c:	4263      	negs	r3, r4
 800382e:	415c      	adcs	r4, r3
 8003830:	42bc      	cmp	r4, r7
 8003832:	d133      	bne.n	800389c <UART_WaitOnFlagUntilTimeout+0x8c>
    if (Timeout != HAL_MAX_DELAY)
 8003834:	4643      	mov	r3, r8
 8003836:	3301      	adds	r3, #1
 8003838:	d0f4      	beq.n	8003824 <UART_WaitOnFlagUntilTimeout+0x14>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800383a:	f7fd ff09 	bl	8001650 <HAL_GetTick>
 800383e:	464b      	mov	r3, r9
 8003840:	1ac0      	subs	r0, r0, r3
 8003842:	4540      	cmp	r0, r8
 8003844:	d82f      	bhi.n	80038a6 <UART_WaitOnFlagUntilTimeout+0x96>
 8003846:	4643      	mov	r3, r8
 8003848:	2b00      	cmp	r3, #0
 800384a:	d02e      	beq.n	80038aa <UART_WaitOnFlagUntilTimeout+0x9a>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800384c:	6832      	ldr	r2, [r6, #0]
 800384e:	6813      	ldr	r3, [r2, #0]
 8003850:	075b      	lsls	r3, r3, #29
 8003852:	d5e7      	bpl.n	8003824 <UART_WaitOnFlagUntilTimeout+0x14>
 8003854:	2d80      	cmp	r5, #128	@ 0x80
 8003856:	d0e5      	beq.n	8003824 <UART_WaitOnFlagUntilTimeout+0x14>
 8003858:	2d40      	cmp	r5, #64	@ 0x40
 800385a:	d0e3      	beq.n	8003824 <UART_WaitOnFlagUntilTimeout+0x14>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800385c:	69d3      	ldr	r3, [r2, #28]
 800385e:	071b      	lsls	r3, r3, #28
 8003860:	d410      	bmi.n	8003884 <UART_WaitOnFlagUntilTimeout+0x74>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003862:	69d3      	ldr	r3, [r2, #28]
 8003864:	051b      	lsls	r3, r3, #20
 8003866:	d5dd      	bpl.n	8003824 <UART_WaitOnFlagUntilTimeout+0x14>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003868:	2380      	movs	r3, #128	@ 0x80
 800386a:	011b      	lsls	r3, r3, #4
 800386c:	6213      	str	r3, [r2, #32]
          UART_EndRxTransfer(huart);
 800386e:	0030      	movs	r0, r6
 8003870:	f7ff fda6 	bl	80033c0 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003874:	2390      	movs	r3, #144	@ 0x90
 8003876:	2220      	movs	r2, #32
 8003878:	50f2      	str	r2, [r6, r3]
          __HAL_UNLOCK(huart);
 800387a:	3b0c      	subs	r3, #12
 800387c:	2200      	movs	r2, #0
 800387e:	54f2      	strb	r2, [r6, r3]
          return HAL_TIMEOUT;
 8003880:	2003      	movs	r0, #3
 8003882:	e00c      	b.n	800389e <UART_WaitOnFlagUntilTimeout+0x8e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003884:	2408      	movs	r4, #8
 8003886:	6214      	str	r4, [r2, #32]
          UART_EndRxTransfer(huart);
 8003888:	0030      	movs	r0, r6
 800388a:	f7ff fd99 	bl	80033c0 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800388e:	2390      	movs	r3, #144	@ 0x90
 8003890:	50f4      	str	r4, [r6, r3]
          __HAL_UNLOCK(huart);
 8003892:	3b0c      	subs	r3, #12
 8003894:	2200      	movs	r2, #0
 8003896:	54f2      	strb	r2, [r6, r3]
          return HAL_ERROR;
 8003898:	2001      	movs	r0, #1
 800389a:	e000      	b.n	800389e <UART_WaitOnFlagUntilTimeout+0x8e>
  return HAL_OK;
 800389c:	2000      	movs	r0, #0
}
 800389e:	bcc0      	pop	{r6, r7}
 80038a0:	46b9      	mov	r9, r7
 80038a2:	46b0      	mov	r8, r6
 80038a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 80038a6:	2003      	movs	r0, #3
 80038a8:	e7f9      	b.n	800389e <UART_WaitOnFlagUntilTimeout+0x8e>
 80038aa:	2003      	movs	r0, #3
 80038ac:	e7f7      	b.n	800389e <UART_WaitOnFlagUntilTimeout+0x8e>

080038ae <HAL_UART_Transmit>:
{
 80038ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038b0:	46c6      	mov	lr, r8
 80038b2:	b500      	push	{lr}
 80038b4:	b082      	sub	sp, #8
 80038b6:	0004      	movs	r4, r0
 80038b8:	000d      	movs	r5, r1
 80038ba:	4690      	mov	r8, r2
 80038bc:	001e      	movs	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80038be:	2388      	movs	r3, #136	@ 0x88
 80038c0:	58c3      	ldr	r3, [r0, r3]
 80038c2:	2b20      	cmp	r3, #32
 80038c4:	d166      	bne.n	8003994 <HAL_UART_Transmit+0xe6>
    if ((pData == NULL) || (Size == 0U))
 80038c6:	2900      	cmp	r1, #0
 80038c8:	d069      	beq.n	800399e <HAL_UART_Transmit+0xf0>
 80038ca:	2a00      	cmp	r2, #0
 80038cc:	d069      	beq.n	80039a2 <HAL_UART_Transmit+0xf4>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038ce:	6882      	ldr	r2, [r0, #8]
 80038d0:	2380      	movs	r3, #128	@ 0x80
 80038d2:	015b      	lsls	r3, r3, #5
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d104      	bne.n	80038e2 <HAL_UART_Transmit+0x34>
 80038d8:	6903      	ldr	r3, [r0, #16]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d101      	bne.n	80038e2 <HAL_UART_Transmit+0x34>
      if ((((uint32_t)pData) & 1U) != 0U)
 80038de:	07cb      	lsls	r3, r1, #31
 80038e0:	d461      	bmi.n	80039a6 <HAL_UART_Transmit+0xf8>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038e2:	2390      	movs	r3, #144	@ 0x90
 80038e4:	2200      	movs	r2, #0
 80038e6:	50e2      	str	r2, [r4, r3]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038e8:	3b08      	subs	r3, #8
 80038ea:	3221      	adds	r2, #33	@ 0x21
 80038ec:	50e2      	str	r2, [r4, r3]
    tickstart = HAL_GetTick();
 80038ee:	f7fd feaf 	bl	8001650 <HAL_GetTick>
 80038f2:	0007      	movs	r7, r0
    huart->TxXferSize  = Size;
 80038f4:	2354      	movs	r3, #84	@ 0x54
 80038f6:	4642      	mov	r2, r8
 80038f8:	52e2      	strh	r2, [r4, r3]
    huart->TxXferCount = Size;
 80038fa:	3302      	adds	r3, #2
 80038fc:	52e2      	strh	r2, [r4, r3]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038fe:	68a2      	ldr	r2, [r4, #8]
 8003900:	2380      	movs	r3, #128	@ 0x80
 8003902:	015b      	lsls	r3, r3, #5
 8003904:	429a      	cmp	r2, r3
 8003906:	d002      	beq.n	800390e <HAL_UART_Transmit+0x60>
      pdata16bits = NULL;
 8003908:	2300      	movs	r3, #0
 800390a:	4698      	mov	r8, r3
 800390c:	e018      	b.n	8003940 <HAL_UART_Transmit+0x92>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800390e:	6923      	ldr	r3, [r4, #16]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d02a      	beq.n	800396a <HAL_UART_Transmit+0xbc>
      pdata16bits = NULL;
 8003914:	2300      	movs	r3, #0
 8003916:	4698      	mov	r8, r3
 8003918:	e012      	b.n	8003940 <HAL_UART_Transmit+0x92>
        huart->gState = HAL_UART_STATE_READY;
 800391a:	2388      	movs	r3, #136	@ 0x88
 800391c:	2220      	movs	r2, #32
 800391e:	50e2      	str	r2, [r4, r3]
        return HAL_TIMEOUT;
 8003920:	2003      	movs	r0, #3
 8003922:	e038      	b.n	8003996 <HAL_UART_Transmit+0xe8>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003924:	4643      	mov	r3, r8
 8003926:	881b      	ldrh	r3, [r3, #0]
 8003928:	6822      	ldr	r2, [r4, #0]
 800392a:	05db      	lsls	r3, r3, #23
 800392c:	0ddb      	lsrs	r3, r3, #23
 800392e:	6293      	str	r3, [r2, #40]	@ 0x28
        pdata16bits++;
 8003930:	2302      	movs	r3, #2
 8003932:	469c      	mov	ip, r3
 8003934:	44e0      	add	r8, ip
      huart->TxXferCount--;
 8003936:	2356      	movs	r3, #86	@ 0x56
 8003938:	5ae2      	ldrh	r2, [r4, r3]
 800393a:	3a01      	subs	r2, #1
 800393c:	b292      	uxth	r2, r2
 800393e:	52e2      	strh	r2, [r4, r3]
    while (huart->TxXferCount > 0U)
 8003940:	2356      	movs	r3, #86	@ 0x56
 8003942:	5ae3      	ldrh	r3, [r4, r3]
 8003944:	b29b      	uxth	r3, r3
 8003946:	2b00      	cmp	r3, #0
 8003948:	d012      	beq.n	8003970 <HAL_UART_Transmit+0xc2>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800394a:	9600      	str	r6, [sp, #0]
 800394c:	003b      	movs	r3, r7
 800394e:	2200      	movs	r2, #0
 8003950:	2180      	movs	r1, #128	@ 0x80
 8003952:	0020      	movs	r0, r4
 8003954:	f7ff ff5c 	bl	8003810 <UART_WaitOnFlagUntilTimeout>
 8003958:	2800      	cmp	r0, #0
 800395a:	d1de      	bne.n	800391a <HAL_UART_Transmit+0x6c>
      if (pdata8bits == NULL)
 800395c:	2d00      	cmp	r5, #0
 800395e:	d0e1      	beq.n	8003924 <HAL_UART_Transmit+0x76>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003960:	782a      	ldrb	r2, [r5, #0]
 8003962:	6823      	ldr	r3, [r4, #0]
 8003964:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003966:	3501      	adds	r5, #1
 8003968:	e7e5      	b.n	8003936 <HAL_UART_Transmit+0x88>
      pdata16bits = (const uint16_t *) pData;
 800396a:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 800396c:	2500      	movs	r5, #0
 800396e:	e7e7      	b.n	8003940 <HAL_UART_Transmit+0x92>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003970:	9600      	str	r6, [sp, #0]
 8003972:	003b      	movs	r3, r7
 8003974:	2200      	movs	r2, #0
 8003976:	2140      	movs	r1, #64	@ 0x40
 8003978:	0020      	movs	r0, r4
 800397a:	f7ff ff49 	bl	8003810 <UART_WaitOnFlagUntilTimeout>
 800397e:	2800      	cmp	r0, #0
 8003980:	d103      	bne.n	800398a <HAL_UART_Transmit+0xdc>
    huart->gState = HAL_UART_STATE_READY;
 8003982:	2388      	movs	r3, #136	@ 0x88
 8003984:	2220      	movs	r2, #32
 8003986:	50e2      	str	r2, [r4, r3]
    return HAL_OK;
 8003988:	e005      	b.n	8003996 <HAL_UART_Transmit+0xe8>
      huart->gState = HAL_UART_STATE_READY;
 800398a:	2388      	movs	r3, #136	@ 0x88
 800398c:	2220      	movs	r2, #32
 800398e:	50e2      	str	r2, [r4, r3]
      return HAL_TIMEOUT;
 8003990:	2003      	movs	r0, #3
 8003992:	e000      	b.n	8003996 <HAL_UART_Transmit+0xe8>
    return HAL_BUSY;
 8003994:	2002      	movs	r0, #2
}
 8003996:	b002      	add	sp, #8
 8003998:	bc80      	pop	{r7}
 800399a:	46b8      	mov	r8, r7
 800399c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return  HAL_ERROR;
 800399e:	2001      	movs	r0, #1
 80039a0:	e7f9      	b.n	8003996 <HAL_UART_Transmit+0xe8>
 80039a2:	2001      	movs	r0, #1
 80039a4:	e7f7      	b.n	8003996 <HAL_UART_Transmit+0xe8>
        return  HAL_ERROR;
 80039a6:	2001      	movs	r0, #1
 80039a8:	e7f5      	b.n	8003996 <HAL_UART_Transmit+0xe8>
	...

080039ac <UART_CheckIdleState>:
{
 80039ac:	b530      	push	{r4, r5, lr}
 80039ae:	b083      	sub	sp, #12
 80039b0:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039b2:	2390      	movs	r3, #144	@ 0x90
 80039b4:	2200      	movs	r2, #0
 80039b6:	50c2      	str	r2, [r0, r3]
  tickstart = HAL_GetTick();
 80039b8:	f7fd fe4a 	bl	8001650 <HAL_GetTick>
 80039bc:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80039be:	6823      	ldr	r3, [r4, #0]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	071b      	lsls	r3, r3, #28
 80039c4:	d410      	bmi.n	80039e8 <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80039c6:	6823      	ldr	r3, [r4, #0]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	075b      	lsls	r3, r3, #29
 80039cc:	d42b      	bmi.n	8003a26 <UART_CheckIdleState+0x7a>
  huart->gState = HAL_UART_STATE_READY;
 80039ce:	2320      	movs	r3, #32
 80039d0:	2288      	movs	r2, #136	@ 0x88
 80039d2:	50a3      	str	r3, [r4, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80039d4:	3204      	adds	r2, #4
 80039d6:	50a3      	str	r3, [r4, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039d8:	2300      	movs	r3, #0
 80039da:	66e3      	str	r3, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80039dc:	6723      	str	r3, [r4, #112]	@ 0x70
  __HAL_UNLOCK(huart);
 80039de:	3a08      	subs	r2, #8
 80039e0:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 80039e2:	2000      	movs	r0, #0
}
 80039e4:	b003      	add	sp, #12
 80039e6:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039e8:	2180      	movs	r1, #128	@ 0x80
 80039ea:	4b23      	ldr	r3, [pc, #140]	@ (8003a78 <UART_CheckIdleState+0xcc>)
 80039ec:	9300      	str	r3, [sp, #0]
 80039ee:	0003      	movs	r3, r0
 80039f0:	2200      	movs	r2, #0
 80039f2:	0389      	lsls	r1, r1, #14
 80039f4:	0020      	movs	r0, r4
 80039f6:	f7ff ff0b 	bl	8003810 <UART_WaitOnFlagUntilTimeout>
 80039fa:	2800      	cmp	r0, #0
 80039fc:	d0e3      	beq.n	80039c6 <UART_CheckIdleState+0x1a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80039fe:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a02:	2301      	movs	r3, #1
 8003a04:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003a08:	6822      	ldr	r2, [r4, #0]
 8003a0a:	6813      	ldr	r3, [r2, #0]
 8003a0c:	2080      	movs	r0, #128	@ 0x80
 8003a0e:	4383      	bics	r3, r0
 8003a10:	6013      	str	r3, [r2, #0]
 8003a12:	f381 8810 	msr	PRIMASK, r1
      huart->gState = HAL_UART_STATE_READY;
 8003a16:	2388      	movs	r3, #136	@ 0x88
 8003a18:	2220      	movs	r2, #32
 8003a1a:	50e2      	str	r2, [r4, r3]
      __HAL_UNLOCK(huart);
 8003a1c:	3b04      	subs	r3, #4
 8003a1e:	2200      	movs	r2, #0
 8003a20:	54e2      	strb	r2, [r4, r3]
      return HAL_TIMEOUT;
 8003a22:	387d      	subs	r0, #125	@ 0x7d
 8003a24:	e7de      	b.n	80039e4 <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a26:	2180      	movs	r1, #128	@ 0x80
 8003a28:	4b13      	ldr	r3, [pc, #76]	@ (8003a78 <UART_CheckIdleState+0xcc>)
 8003a2a:	9300      	str	r3, [sp, #0]
 8003a2c:	002b      	movs	r3, r5
 8003a2e:	2200      	movs	r2, #0
 8003a30:	03c9      	lsls	r1, r1, #15
 8003a32:	0020      	movs	r0, r4
 8003a34:	f7ff feec 	bl	8003810 <UART_WaitOnFlagUntilTimeout>
 8003a38:	2800      	cmp	r0, #0
 8003a3a:	d0c8      	beq.n	80039ce <UART_CheckIdleState+0x22>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003a3c:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a40:	2201      	movs	r2, #1
 8003a42:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003a46:	6821      	ldr	r1, [r4, #0]
 8003a48:	680b      	ldr	r3, [r1, #0]
 8003a4a:	4d0c      	ldr	r5, [pc, #48]	@ (8003a7c <UART_CheckIdleState+0xd0>)
 8003a4c:	402b      	ands	r3, r5
 8003a4e:	600b      	str	r3, [r1, #0]
 8003a50:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003a54:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a58:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a5c:	6821      	ldr	r1, [r4, #0]
 8003a5e:	688b      	ldr	r3, [r1, #8]
 8003a60:	4393      	bics	r3, r2
 8003a62:	608b      	str	r3, [r1, #8]
 8003a64:	f380 8810 	msr	PRIMASK, r0
      huart->RxState = HAL_UART_STATE_READY;
 8003a68:	238c      	movs	r3, #140	@ 0x8c
 8003a6a:	321f      	adds	r2, #31
 8003a6c:	50e2      	str	r2, [r4, r3]
      __HAL_UNLOCK(huart);
 8003a6e:	3b08      	subs	r3, #8
 8003a70:	2200      	movs	r2, #0
 8003a72:	54e2      	strb	r2, [r4, r3]
      return HAL_TIMEOUT;
 8003a74:	2003      	movs	r0, #3
 8003a76:	e7b5      	b.n	80039e4 <UART_CheckIdleState+0x38>
 8003a78:	01ffffff 	.word	0x01ffffff
 8003a7c:	fffffedf 	.word	0xfffffedf

08003a80 <HAL_UART_Init>:
{
 8003a80:	b510      	push	{r4, lr}
 8003a82:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8003a84:	d030      	beq.n	8003ae8 <HAL_UART_Init+0x68>
  if (huart->gState == HAL_UART_STATE_RESET)
 8003a86:	2388      	movs	r3, #136	@ 0x88
 8003a88:	58c3      	ldr	r3, [r0, r3]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d022      	beq.n	8003ad4 <HAL_UART_Init+0x54>
  huart->gState = HAL_UART_STATE_BUSY;
 8003a8e:	2388      	movs	r3, #136	@ 0x88
 8003a90:	2224      	movs	r2, #36	@ 0x24
 8003a92:	50e2      	str	r2, [r4, r3]
  __HAL_UART_DISABLE(huart);
 8003a94:	6822      	ldr	r2, [r4, #0]
 8003a96:	6813      	ldr	r3, [r2, #0]
 8003a98:	2101      	movs	r1, #1
 8003a9a:	438b      	bics	r3, r1
 8003a9c:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a9e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d11d      	bne.n	8003ae0 <HAL_UART_Init+0x60>
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003aa4:	0020      	movs	r0, r4
 8003aa6:	f7ff fd61 	bl	800356c <UART_SetConfig>
 8003aaa:	2801      	cmp	r0, #1
 8003aac:	d011      	beq.n	8003ad2 <HAL_UART_Init+0x52>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003aae:	6822      	ldr	r2, [r4, #0]
 8003ab0:	6853      	ldr	r3, [r2, #4]
 8003ab2:	490e      	ldr	r1, [pc, #56]	@ (8003aec <HAL_UART_Init+0x6c>)
 8003ab4:	400b      	ands	r3, r1
 8003ab6:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ab8:	6822      	ldr	r2, [r4, #0]
 8003aba:	6893      	ldr	r3, [r2, #8]
 8003abc:	212a      	movs	r1, #42	@ 0x2a
 8003abe:	438b      	bics	r3, r1
 8003ac0:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8003ac2:	6822      	ldr	r2, [r4, #0]
 8003ac4:	6813      	ldr	r3, [r2, #0]
 8003ac6:	3929      	subs	r1, #41	@ 0x29
 8003ac8:	430b      	orrs	r3, r1
 8003aca:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8003acc:	0020      	movs	r0, r4
 8003ace:	f7ff ff6d 	bl	80039ac <UART_CheckIdleState>
}
 8003ad2:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8003ad4:	3384      	adds	r3, #132	@ 0x84
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	54c2      	strb	r2, [r0, r3]
    HAL_UART_MspInit(huart);
 8003ada:	f7fd fcb7 	bl	800144c <HAL_UART_MspInit>
 8003ade:	e7d6      	b.n	8003a8e <HAL_UART_Init+0xe>
    UART_AdvFeatureConfig(huart);
 8003ae0:	0020      	movs	r0, r4
 8003ae2:	f7ff fe25 	bl	8003730 <UART_AdvFeatureConfig>
 8003ae6:	e7dd      	b.n	8003aa4 <HAL_UART_Init+0x24>
    return HAL_ERROR;
 8003ae8:	2001      	movs	r0, #1
 8003aea:	e7f2      	b.n	8003ad2 <HAL_UART_Init+0x52>
 8003aec:	ffffb7ff 	.word	0xffffb7ff

08003af0 <UART_Start_Receive_DMA>:
{
 8003af0:	b510      	push	{r4, lr}
 8003af2:	0004      	movs	r4, r0
 8003af4:	0013      	movs	r3, r2
  huart->pRxBuffPtr = pData;
 8003af6:	6581      	str	r1, [r0, #88]	@ 0x58
  huart->RxXferSize = Size;
 8003af8:	225c      	movs	r2, #92	@ 0x5c
 8003afa:	5283      	strh	r3, [r0, r2]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003afc:	3234      	adds	r2, #52	@ 0x34
 8003afe:	2100      	movs	r1, #0
 8003b00:	5081      	str	r1, [r0, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003b02:	3a04      	subs	r2, #4
 8003b04:	3122      	adds	r1, #34	@ 0x22
 8003b06:	5081      	str	r1, [r0, r2]
  if (huart->hdmarx != NULL)
 8003b08:	3a0c      	subs	r2, #12
 8003b0a:	5882      	ldr	r2, [r0, r2]
 8003b0c:	2a00      	cmp	r2, #0
 8003b0e:	d013      	beq.n	8003b38 <UART_Start_Receive_DMA+0x48>
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003b10:	4921      	ldr	r1, [pc, #132]	@ (8003b98 <UART_Start_Receive_DMA+0xa8>)
 8003b12:	62d1      	str	r1, [r2, #44]	@ 0x2c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003b14:	2080      	movs	r0, #128	@ 0x80
 8003b16:	5822      	ldr	r2, [r4, r0]
 8003b18:	4920      	ldr	r1, [pc, #128]	@ (8003b9c <UART_Start_Receive_DMA+0xac>)
 8003b1a:	6311      	str	r1, [r2, #48]	@ 0x30
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003b1c:	5822      	ldr	r2, [r4, r0]
 8003b1e:	4920      	ldr	r1, [pc, #128]	@ (8003ba0 <UART_Start_Receive_DMA+0xb0>)
 8003b20:	6351      	str	r1, [r2, #52]	@ 0x34
    huart->hdmarx->XferAbortCallback = NULL;
 8003b22:	5822      	ldr	r2, [r4, r0]
 8003b24:	2100      	movs	r1, #0
 8003b26:	6391      	str	r1, [r2, #56]	@ 0x38
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8003b28:	6821      	ldr	r1, [r4, #0]
 8003b2a:	3124      	adds	r1, #36	@ 0x24
 8003b2c:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8003b2e:	5820      	ldr	r0, [r4, r0]
 8003b30:	f7fe fb2e 	bl	8002190 <HAL_DMA_Start_IT>
 8003b34:	2800      	cmp	r0, #0
 8003b36:	d126      	bne.n	8003b86 <UART_Start_Receive_DMA+0x96>
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003b38:	6923      	ldr	r3, [r4, #16]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d00b      	beq.n	8003b56 <UART_Start_Receive_DMA+0x66>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003b3e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b42:	2301      	movs	r3, #1
 8003b44:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b48:	6822      	ldr	r2, [r4, #0]
 8003b4a:	6810      	ldr	r0, [r2, #0]
 8003b4c:	33ff      	adds	r3, #255	@ 0xff
 8003b4e:	4303      	orrs	r3, r0
 8003b50:	6013      	str	r3, [r2, #0]
 8003b52:	f381 8810 	msr	PRIMASK, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003b56:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b60:	6821      	ldr	r1, [r4, #0]
 8003b62:	688a      	ldr	r2, [r1, #8]
 8003b64:	431a      	orrs	r2, r3
 8003b66:	608a      	str	r2, [r1, #8]
 8003b68:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003b6c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b70:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b74:	6822      	ldr	r2, [r4, #0]
 8003b76:	6893      	ldr	r3, [r2, #8]
 8003b78:	2040      	movs	r0, #64	@ 0x40
 8003b7a:	4303      	orrs	r3, r0
 8003b7c:	6093      	str	r3, [r2, #8]
 8003b7e:	f381 8810 	msr	PRIMASK, r1
  return HAL_OK;
 8003b82:	2000      	movs	r0, #0
}
 8003b84:	bd10      	pop	{r4, pc}
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003b86:	2390      	movs	r3, #144	@ 0x90
 8003b88:	2210      	movs	r2, #16
 8003b8a:	50e2      	str	r2, [r4, r3]
      huart->RxState = HAL_UART_STATE_READY;
 8003b8c:	3b04      	subs	r3, #4
 8003b8e:	3210      	adds	r2, #16
 8003b90:	50e2      	str	r2, [r4, r3]
      return HAL_ERROR;
 8003b92:	2001      	movs	r0, #1
 8003b94:	e7f6      	b.n	8003b84 <UART_Start_Receive_DMA+0x94>
 8003b96:	46c0      	nop			@ (mov r8, r8)
 8003b98:	080034b9 	.word	0x080034b9
 8003b9c:	0800347f 	.word	0x0800347f
 8003ba0:	0800342b 	.word	0x0800342b

08003ba4 <HAL_UART_Receive_DMA>:
{
 8003ba4:	b570      	push	{r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8003ba6:	238c      	movs	r3, #140	@ 0x8c
 8003ba8:	58c3      	ldr	r3, [r0, r3]
 8003baa:	2b20      	cmp	r3, #32
 8003bac:	d123      	bne.n	8003bf6 <HAL_UART_Receive_DMA+0x52>
    if ((pData == NULL) || (Size == 0U))
 8003bae:	2900      	cmp	r1, #0
 8003bb0:	d023      	beq.n	8003bfa <HAL_UART_Receive_DMA+0x56>
 8003bb2:	2a00      	cmp	r2, #0
 8003bb4:	d023      	beq.n	8003bfe <HAL_UART_Receive_DMA+0x5a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bb6:	6884      	ldr	r4, [r0, #8]
 8003bb8:	2380      	movs	r3, #128	@ 0x80
 8003bba:	015b      	lsls	r3, r3, #5
 8003bbc:	429c      	cmp	r4, r3
 8003bbe:	d104      	bne.n	8003bca <HAL_UART_Receive_DMA+0x26>
 8003bc0:	6903      	ldr	r3, [r0, #16]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d101      	bne.n	8003bca <HAL_UART_Receive_DMA+0x26>
      if ((((uint32_t)pData) & 1U) != 0U)
 8003bc6:	07cb      	lsls	r3, r1, #31
 8003bc8:	d41b      	bmi.n	8003c02 <HAL_UART_Receive_DMA+0x5e>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	66c3      	str	r3, [r0, #108]	@ 0x6c
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003bce:	6803      	ldr	r3, [r0, #0]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	021b      	lsls	r3, r3, #8
 8003bd4:	d50c      	bpl.n	8003bf0 <HAL_UART_Receive_DMA+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003bd6:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bda:	2301      	movs	r3, #1
 8003bdc:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003be0:	6804      	ldr	r4, [r0, #0]
 8003be2:	6825      	ldr	r5, [r4, #0]
 8003be4:	2380      	movs	r3, #128	@ 0x80
 8003be6:	04db      	lsls	r3, r3, #19
 8003be8:	432b      	orrs	r3, r5
 8003bea:	6023      	str	r3, [r4, #0]
 8003bec:	f38c 8810 	msr	PRIMASK, ip
    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003bf0:	f7ff ff7e 	bl	8003af0 <UART_Start_Receive_DMA>
 8003bf4:	e000      	b.n	8003bf8 <HAL_UART_Receive_DMA+0x54>
    return HAL_BUSY;
 8003bf6:	2002      	movs	r0, #2
}
 8003bf8:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8003bfa:	2001      	movs	r0, #1
 8003bfc:	e7fc      	b.n	8003bf8 <HAL_UART_Receive_DMA+0x54>
 8003bfe:	2001      	movs	r0, #1
 8003c00:	e7fa      	b.n	8003bf8 <HAL_UART_Receive_DMA+0x54>
        return  HAL_ERROR;
 8003c02:	2001      	movs	r0, #1
 8003c04:	e7f8      	b.n	8003bf8 <HAL_UART_Receive_DMA+0x54>
	...

08003c08 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c0a:	0004      	movs	r4, r0
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003c0c:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d105      	bne.n	8003c1e <UARTEx_SetNbDataToProcess+0x16>
  {
    huart->NbTxDataToProcess = 1U;
 8003c12:	3301      	adds	r3, #1
 8003c14:	226a      	movs	r2, #106	@ 0x6a
 8003c16:	5283      	strh	r3, [r0, r2]
    huart->NbRxDataToProcess = 1U;
 8003c18:	3a02      	subs	r2, #2
 8003c1a:	5283      	strh	r3, [r0, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003c1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003c1e:	6802      	ldr	r2, [r0, #0]
 8003c20:	6895      	ldr	r5, [r2, #8]
 8003c22:	0e6d      	lsrs	r5, r5, #25
 8003c24:	2307      	movs	r3, #7
 8003c26:	401d      	ands	r5, r3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003c28:	6892      	ldr	r2, [r2, #8]
 8003c2a:	0f52      	lsrs	r2, r2, #29
 8003c2c:	4013      	ands	r3, r2
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003c2e:	4f08      	ldr	r7, [pc, #32]	@ (8003c50 <UARTEx_SetNbDataToProcess+0x48>)
 8003c30:	5cf8      	ldrb	r0, [r7, r3]
 8003c32:	00c0      	lsls	r0, r0, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003c34:	4e07      	ldr	r6, [pc, #28]	@ (8003c54 <UARTEx_SetNbDataToProcess+0x4c>)
 8003c36:	5cf1      	ldrb	r1, [r6, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003c38:	f7fc fb04 	bl	8000244 <__divsi3>
 8003c3c:	236a      	movs	r3, #106	@ 0x6a
 8003c3e:	52e0      	strh	r0, [r4, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003c40:	5d78      	ldrb	r0, [r7, r5]
 8003c42:	00c0      	lsls	r0, r0, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003c44:	5d71      	ldrb	r1, [r6, r5]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003c46:	f7fc fafd 	bl	8000244 <__divsi3>
 8003c4a:	2368      	movs	r3, #104	@ 0x68
 8003c4c:	52e0      	strh	r0, [r4, r3]
}
 8003c4e:	e7e5      	b.n	8003c1c <UARTEx_SetNbDataToProcess+0x14>
 8003c50:	08004b4c 	.word	0x08004b4c
 8003c54:	08004b44 	.word	0x08004b44

08003c58 <HAL_UARTEx_DisableFifoMode>:
{
 8003c58:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 8003c5a:	2384      	movs	r3, #132	@ 0x84
 8003c5c:	5cc3      	ldrb	r3, [r0, r3]
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d015      	beq.n	8003c8e <HAL_UARTEx_DisableFifoMode+0x36>
 8003c62:	2484      	movs	r4, #132	@ 0x84
 8003c64:	2601      	movs	r6, #1
 8003c66:	5506      	strb	r6, [r0, r4]
  huart->gState = HAL_UART_STATE_BUSY;
 8003c68:	2588      	movs	r5, #136	@ 0x88
 8003c6a:	2324      	movs	r3, #36	@ 0x24
 8003c6c:	5143      	str	r3, [r0, r5]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003c6e:	6802      	ldr	r2, [r0, #0]
 8003c70:	6813      	ldr	r3, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8003c72:	6811      	ldr	r1, [r2, #0]
 8003c74:	43b1      	bics	r1, r6
 8003c76:	6011      	str	r1, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003c78:	4a06      	ldr	r2, [pc, #24]	@ (8003c94 <HAL_UARTEx_DisableFifoMode+0x3c>)
 8003c7a:	4013      	ands	r3, r2
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	6642      	str	r2, [r0, #100]	@ 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003c80:	6801      	ldr	r1, [r0, #0]
 8003c82:	600b      	str	r3, [r1, #0]
  huart->gState = HAL_UART_STATE_READY;
 8003c84:	2320      	movs	r3, #32
 8003c86:	5143      	str	r3, [r0, r5]
  __HAL_UNLOCK(huart);
 8003c88:	5502      	strb	r2, [r0, r4]
  return HAL_OK;
 8003c8a:	2000      	movs	r0, #0
}
 8003c8c:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(huart);
 8003c8e:	2002      	movs	r0, #2
 8003c90:	e7fc      	b.n	8003c8c <HAL_UARTEx_DisableFifoMode+0x34>
 8003c92:	46c0      	nop			@ (mov r8, r8)
 8003c94:	dfffffff 	.word	0xdfffffff

08003c98 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8003c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c9a:	0004      	movs	r4, r0
 8003c9c:	000a      	movs	r2, r1
  __HAL_LOCK(huart);
 8003c9e:	2384      	movs	r3, #132	@ 0x84
 8003ca0:	5cc3      	ldrb	r3, [r0, r3]
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d01b      	beq.n	8003cde <HAL_UARTEx_SetTxFifoThreshold+0x46>
 8003ca6:	2584      	movs	r5, #132	@ 0x84
 8003ca8:	2001      	movs	r0, #1
 8003caa:	5560      	strb	r0, [r4, r5]
  huart->gState = HAL_UART_STATE_BUSY;
 8003cac:	2688      	movs	r6, #136	@ 0x88
 8003cae:	2324      	movs	r3, #36	@ 0x24
 8003cb0:	51a3      	str	r3, [r4, r6]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003cb2:	6823      	ldr	r3, [r4, #0]
 8003cb4:	681f      	ldr	r7, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8003cb6:	6819      	ldr	r1, [r3, #0]
 8003cb8:	4381      	bics	r1, r0
 8003cba:	6019      	str	r1, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003cbc:	6820      	ldr	r0, [r4, #0]
 8003cbe:	6883      	ldr	r3, [r0, #8]
 8003cc0:	00db      	lsls	r3, r3, #3
 8003cc2:	08d9      	lsrs	r1, r3, #3
 8003cc4:	4311      	orrs	r1, r2
 8003cc6:	6081      	str	r1, [r0, #8]
  UARTEx_SetNbDataToProcess(huart);
 8003cc8:	0020      	movs	r0, r4
 8003cca:	f7ff ff9d 	bl	8003c08 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003cce:	6823      	ldr	r3, [r4, #0]
 8003cd0:	601f      	str	r7, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8003cd2:	2320      	movs	r3, #32
 8003cd4:	51a3      	str	r3, [r4, r6]
  __HAL_UNLOCK(huart);
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8003cda:	2000      	movs	r0, #0
}
 8003cdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(huart);
 8003cde:	2002      	movs	r0, #2
 8003ce0:	e7fc      	b.n	8003cdc <HAL_UARTEx_SetTxFifoThreshold+0x44>
	...

08003ce4 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8003ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ce6:	0004      	movs	r4, r0
 8003ce8:	000b      	movs	r3, r1
  __HAL_LOCK(huart);
 8003cea:	2284      	movs	r2, #132	@ 0x84
 8003cec:	5c82      	ldrb	r2, [r0, r2]
 8003cee:	2a01      	cmp	r2, #1
 8003cf0:	d01b      	beq.n	8003d2a <HAL_UARTEx_SetRxFifoThreshold+0x46>
 8003cf2:	2584      	movs	r5, #132	@ 0x84
 8003cf4:	2001      	movs	r0, #1
 8003cf6:	5560      	strb	r0, [r4, r5]
  huart->gState = HAL_UART_STATE_BUSY;
 8003cf8:	2688      	movs	r6, #136	@ 0x88
 8003cfa:	2224      	movs	r2, #36	@ 0x24
 8003cfc:	51a2      	str	r2, [r4, r6]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003cfe:	6822      	ldr	r2, [r4, #0]
 8003d00:	6817      	ldr	r7, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8003d02:	6811      	ldr	r1, [r2, #0]
 8003d04:	4381      	bics	r1, r0
 8003d06:	6011      	str	r1, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003d08:	6822      	ldr	r2, [r4, #0]
 8003d0a:	6891      	ldr	r1, [r2, #8]
 8003d0c:	4808      	ldr	r0, [pc, #32]	@ (8003d30 <HAL_UARTEx_SetRxFifoThreshold+0x4c>)
 8003d0e:	4001      	ands	r1, r0
 8003d10:	4319      	orrs	r1, r3
 8003d12:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8003d14:	0020      	movs	r0, r4
 8003d16:	f7ff ff77 	bl	8003c08 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003d1a:	6823      	ldr	r3, [r4, #0]
 8003d1c:	601f      	str	r7, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8003d1e:	2320      	movs	r3, #32
 8003d20:	51a3      	str	r3, [r4, r6]
  __HAL_UNLOCK(huart);
 8003d22:	2300      	movs	r3, #0
 8003d24:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8003d26:	2000      	movs	r0, #0
}
 8003d28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(huart);
 8003d2a:	2002      	movs	r0, #2
 8003d2c:	e7fc      	b.n	8003d28 <HAL_UARTEx_SetRxFifoThreshold+0x44>
 8003d2e:	46c0      	nop			@ (mov r8, r8)
 8003d30:	f1ffffff 	.word	0xf1ffffff

08003d34 <LL_SetSystemCoreClock>:
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8003d34:	4b01      	ldr	r3, [pc, #4]	@ (8003d3c <LL_SetSystemCoreClock+0x8>)
 8003d36:	6018      	str	r0, [r3, #0]
}
 8003d38:	4770      	bx	lr
 8003d3a:	46c0      	nop			@ (mov r8, r8)
 8003d3c:	20000004 	.word	0x20000004

08003d40 <_strtoul_l.isra.0>:
 8003d40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d42:	001e      	movs	r6, r3
 8003d44:	4b3e      	ldr	r3, [pc, #248]	@ (8003e40 <_strtoul_l.isra.0+0x100>)
 8003d46:	0017      	movs	r7, r2
 8003d48:	000c      	movs	r4, r1
 8003d4a:	469c      	mov	ip, r3
 8003d4c:	2208      	movs	r2, #8
 8003d4e:	b085      	sub	sp, #20
 8003d50:	9003      	str	r0, [sp, #12]
 8003d52:	9100      	str	r1, [sp, #0]
 8003d54:	0023      	movs	r3, r4
 8003d56:	4661      	mov	r1, ip
 8003d58:	781d      	ldrb	r5, [r3, #0]
 8003d5a:	3401      	adds	r4, #1
 8003d5c:	5d48      	ldrb	r0, [r1, r5]
 8003d5e:	0001      	movs	r1, r0
 8003d60:	4011      	ands	r1, r2
 8003d62:	4210      	tst	r0, r2
 8003d64:	d1f6      	bne.n	8003d54 <_strtoul_l.isra.0+0x14>
 8003d66:	2d2d      	cmp	r5, #45	@ 0x2d
 8003d68:	d112      	bne.n	8003d90 <_strtoul_l.isra.0+0x50>
 8003d6a:	7825      	ldrb	r5, [r4, #0]
 8003d6c:	1c9c      	adds	r4, r3, #2
 8003d6e:	2301      	movs	r3, #1
 8003d70:	9302      	str	r3, [sp, #8]
 8003d72:	2210      	movs	r2, #16
 8003d74:	0033      	movs	r3, r6
 8003d76:	4393      	bics	r3, r2
 8003d78:	d116      	bne.n	8003da8 <_strtoul_l.isra.0+0x68>
 8003d7a:	2d30      	cmp	r5, #48	@ 0x30
 8003d7c:	d10e      	bne.n	8003d9c <_strtoul_l.isra.0+0x5c>
 8003d7e:	2120      	movs	r1, #32
 8003d80:	7823      	ldrb	r3, [r4, #0]
 8003d82:	438b      	bics	r3, r1
 8003d84:	2b58      	cmp	r3, #88	@ 0x58
 8003d86:	d109      	bne.n	8003d9c <_strtoul_l.isra.0+0x5c>
 8003d88:	7865      	ldrb	r5, [r4, #1]
 8003d8a:	3402      	adds	r4, #2
 8003d8c:	2610      	movs	r6, #16
 8003d8e:	e00b      	b.n	8003da8 <_strtoul_l.isra.0+0x68>
 8003d90:	9102      	str	r1, [sp, #8]
 8003d92:	2d2b      	cmp	r5, #43	@ 0x2b
 8003d94:	d1ed      	bne.n	8003d72 <_strtoul_l.isra.0+0x32>
 8003d96:	7825      	ldrb	r5, [r4, #0]
 8003d98:	1c9c      	adds	r4, r3, #2
 8003d9a:	e7ea      	b.n	8003d72 <_strtoul_l.isra.0+0x32>
 8003d9c:	2e00      	cmp	r6, #0
 8003d9e:	d1f5      	bne.n	8003d8c <_strtoul_l.isra.0+0x4c>
 8003da0:	360a      	adds	r6, #10
 8003da2:	2d30      	cmp	r5, #48	@ 0x30
 8003da4:	d100      	bne.n	8003da8 <_strtoul_l.isra.0+0x68>
 8003da6:	3e02      	subs	r6, #2
 8003da8:	2001      	movs	r0, #1
 8003daa:	0031      	movs	r1, r6
 8003dac:	4240      	negs	r0, r0
 8003dae:	f7fc f9bf 	bl	8000130 <__udivsi3>
 8003db2:	9001      	str	r0, [sp, #4]
 8003db4:	2001      	movs	r0, #1
 8003db6:	0031      	movs	r1, r6
 8003db8:	4240      	negs	r0, r0
 8003dba:	f7fc fa3f 	bl	800023c <__aeabi_uidivmod>
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	0018      	movs	r0, r3
 8003dc4:	4694      	mov	ip, r2
 8003dc6:	002a      	movs	r2, r5
 8003dc8:	3a30      	subs	r2, #48	@ 0x30
 8003dca:	2a09      	cmp	r2, #9
 8003dcc:	d812      	bhi.n	8003df4 <_strtoul_l.isra.0+0xb4>
 8003dce:	0015      	movs	r5, r2
 8003dd0:	42ae      	cmp	r6, r5
 8003dd2:	dd1e      	ble.n	8003e12 <_strtoul_l.isra.0+0xd2>
 8003dd4:	1c5a      	adds	r2, r3, #1
 8003dd6:	d00a      	beq.n	8003dee <_strtoul_l.isra.0+0xae>
 8003dd8:	2301      	movs	r3, #1
 8003dda:	9a01      	ldr	r2, [sp, #4]
 8003ddc:	425b      	negs	r3, r3
 8003dde:	4282      	cmp	r2, r0
 8003de0:	d305      	bcc.n	8003dee <_strtoul_l.isra.0+0xae>
 8003de2:	d101      	bne.n	8003de8 <_strtoul_l.isra.0+0xa8>
 8003de4:	42a9      	cmp	r1, r5
 8003de6:	db11      	blt.n	8003e0c <_strtoul_l.isra.0+0xcc>
 8003de8:	4663      	mov	r3, ip
 8003dea:	4370      	muls	r0, r6
 8003dec:	1828      	adds	r0, r5, r0
 8003dee:	7825      	ldrb	r5, [r4, #0]
 8003df0:	3401      	adds	r4, #1
 8003df2:	e7e8      	b.n	8003dc6 <_strtoul_l.isra.0+0x86>
 8003df4:	002a      	movs	r2, r5
 8003df6:	3a41      	subs	r2, #65	@ 0x41
 8003df8:	2a19      	cmp	r2, #25
 8003dfa:	d801      	bhi.n	8003e00 <_strtoul_l.isra.0+0xc0>
 8003dfc:	3d37      	subs	r5, #55	@ 0x37
 8003dfe:	e7e7      	b.n	8003dd0 <_strtoul_l.isra.0+0x90>
 8003e00:	002a      	movs	r2, r5
 8003e02:	3a61      	subs	r2, #97	@ 0x61
 8003e04:	2a19      	cmp	r2, #25
 8003e06:	d804      	bhi.n	8003e12 <_strtoul_l.isra.0+0xd2>
 8003e08:	3d57      	subs	r5, #87	@ 0x57
 8003e0a:	e7e1      	b.n	8003dd0 <_strtoul_l.isra.0+0x90>
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	425b      	negs	r3, r3
 8003e10:	e7ed      	b.n	8003dee <_strtoul_l.isra.0+0xae>
 8003e12:	1c5a      	adds	r2, r3, #1
 8003e14:	d107      	bne.n	8003e26 <_strtoul_l.isra.0+0xe6>
 8003e16:	2222      	movs	r2, #34	@ 0x22
 8003e18:	9903      	ldr	r1, [sp, #12]
 8003e1a:	0018      	movs	r0, r3
 8003e1c:	600a      	str	r2, [r1, #0]
 8003e1e:	2f00      	cmp	r7, #0
 8003e20:	d109      	bne.n	8003e36 <_strtoul_l.isra.0+0xf6>
 8003e22:	b005      	add	sp, #20
 8003e24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e26:	9a02      	ldr	r2, [sp, #8]
 8003e28:	2a00      	cmp	r2, #0
 8003e2a:	d000      	beq.n	8003e2e <_strtoul_l.isra.0+0xee>
 8003e2c:	4240      	negs	r0, r0
 8003e2e:	2f00      	cmp	r7, #0
 8003e30:	d0f7      	beq.n	8003e22 <_strtoul_l.isra.0+0xe2>
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d001      	beq.n	8003e3a <_strtoul_l.isra.0+0xfa>
 8003e36:	1e63      	subs	r3, r4, #1
 8003e38:	9300      	str	r3, [sp, #0]
 8003e3a:	9b00      	ldr	r3, [sp, #0]
 8003e3c:	603b      	str	r3, [r7, #0]
 8003e3e:	e7f0      	b.n	8003e22 <_strtoul_l.isra.0+0xe2>
 8003e40:	08004b55 	.word	0x08004b55

08003e44 <strtoul>:
 8003e44:	b510      	push	{r4, lr}
 8003e46:	4c04      	ldr	r4, [pc, #16]	@ (8003e58 <strtoul+0x14>)
 8003e48:	0013      	movs	r3, r2
 8003e4a:	000a      	movs	r2, r1
 8003e4c:	0001      	movs	r1, r0
 8003e4e:	6820      	ldr	r0, [r4, #0]
 8003e50:	f7ff ff76 	bl	8003d40 <_strtoul_l.isra.0>
 8003e54:	bd10      	pop	{r4, pc}
 8003e56:	46c0      	nop			@ (mov r8, r8)
 8003e58:	20000010 	.word	0x20000010

08003e5c <_vsniprintf_r>:
 8003e5c:	b530      	push	{r4, r5, lr}
 8003e5e:	0005      	movs	r5, r0
 8003e60:	0014      	movs	r4, r2
 8003e62:	0008      	movs	r0, r1
 8003e64:	001a      	movs	r2, r3
 8003e66:	b09b      	sub	sp, #108	@ 0x6c
 8003e68:	2c00      	cmp	r4, #0
 8003e6a:	da05      	bge.n	8003e78 <_vsniprintf_r+0x1c>
 8003e6c:	238b      	movs	r3, #139	@ 0x8b
 8003e6e:	2001      	movs	r0, #1
 8003e70:	602b      	str	r3, [r5, #0]
 8003e72:	4240      	negs	r0, r0
 8003e74:	b01b      	add	sp, #108	@ 0x6c
 8003e76:	bd30      	pop	{r4, r5, pc}
 8003e78:	2382      	movs	r3, #130	@ 0x82
 8003e7a:	4669      	mov	r1, sp
 8003e7c:	009b      	lsls	r3, r3, #2
 8003e7e:	818b      	strh	r3, [r1, #12]
 8003e80:	2100      	movs	r1, #0
 8003e82:	9000      	str	r0, [sp, #0]
 8003e84:	9119      	str	r1, [sp, #100]	@ 0x64
 8003e86:	9004      	str	r0, [sp, #16]
 8003e88:	428c      	cmp	r4, r1
 8003e8a:	d000      	beq.n	8003e8e <_vsniprintf_r+0x32>
 8003e8c:	1e61      	subs	r1, r4, #1
 8003e8e:	2301      	movs	r3, #1
 8003e90:	9102      	str	r1, [sp, #8]
 8003e92:	9105      	str	r1, [sp, #20]
 8003e94:	4669      	mov	r1, sp
 8003e96:	425b      	negs	r3, r3
 8003e98:	81cb      	strh	r3, [r1, #14]
 8003e9a:	0028      	movs	r0, r5
 8003e9c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8003e9e:	f000 f9ed 	bl	800427c <_svfiprintf_r>
 8003ea2:	1c43      	adds	r3, r0, #1
 8003ea4:	da01      	bge.n	8003eaa <_vsniprintf_r+0x4e>
 8003ea6:	238b      	movs	r3, #139	@ 0x8b
 8003ea8:	602b      	str	r3, [r5, #0]
 8003eaa:	2c00      	cmp	r4, #0
 8003eac:	d0e2      	beq.n	8003e74 <_vsniprintf_r+0x18>
 8003eae:	2200      	movs	r2, #0
 8003eb0:	9b00      	ldr	r3, [sp, #0]
 8003eb2:	701a      	strb	r2, [r3, #0]
 8003eb4:	e7de      	b.n	8003e74 <_vsniprintf_r+0x18>
	...

08003eb8 <vsniprintf>:
 8003eb8:	b513      	push	{r0, r1, r4, lr}
 8003eba:	4c04      	ldr	r4, [pc, #16]	@ (8003ecc <vsniprintf+0x14>)
 8003ebc:	9300      	str	r3, [sp, #0]
 8003ebe:	0013      	movs	r3, r2
 8003ec0:	000a      	movs	r2, r1
 8003ec2:	0001      	movs	r1, r0
 8003ec4:	6820      	ldr	r0, [r4, #0]
 8003ec6:	f7ff ffc9 	bl	8003e5c <_vsniprintf_r>
 8003eca:	bd16      	pop	{r1, r2, r4, pc}
 8003ecc:	20000010 	.word	0x20000010

08003ed0 <memset>:
 8003ed0:	0003      	movs	r3, r0
 8003ed2:	1882      	adds	r2, r0, r2
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d100      	bne.n	8003eda <memset+0xa>
 8003ed8:	4770      	bx	lr
 8003eda:	7019      	strb	r1, [r3, #0]
 8003edc:	3301      	adds	r3, #1
 8003ede:	e7f9      	b.n	8003ed4 <memset+0x4>

08003ee0 <strncpy>:
 8003ee0:	0003      	movs	r3, r0
 8003ee2:	b530      	push	{r4, r5, lr}
 8003ee4:	001d      	movs	r5, r3
 8003ee6:	2a00      	cmp	r2, #0
 8003ee8:	d006      	beq.n	8003ef8 <strncpy+0x18>
 8003eea:	780c      	ldrb	r4, [r1, #0]
 8003eec:	3a01      	subs	r2, #1
 8003eee:	3301      	adds	r3, #1
 8003ef0:	702c      	strb	r4, [r5, #0]
 8003ef2:	3101      	adds	r1, #1
 8003ef4:	2c00      	cmp	r4, #0
 8003ef6:	d1f5      	bne.n	8003ee4 <strncpy+0x4>
 8003ef8:	2100      	movs	r1, #0
 8003efa:	189a      	adds	r2, r3, r2
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d100      	bne.n	8003f02 <strncpy+0x22>
 8003f00:	bd30      	pop	{r4, r5, pc}
 8003f02:	7019      	strb	r1, [r3, #0]
 8003f04:	3301      	adds	r3, #1
 8003f06:	e7f9      	b.n	8003efc <strncpy+0x1c>

08003f08 <__strtok_r>:
 8003f08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f0a:	1e04      	subs	r4, r0, #0
 8003f0c:	d102      	bne.n	8003f14 <__strtok_r+0xc>
 8003f0e:	6814      	ldr	r4, [r2, #0]
 8003f10:	2c00      	cmp	r4, #0
 8003f12:	d009      	beq.n	8003f28 <__strtok_r+0x20>
 8003f14:	0020      	movs	r0, r4
 8003f16:	000e      	movs	r6, r1
 8003f18:	7805      	ldrb	r5, [r0, #0]
 8003f1a:	3401      	adds	r4, #1
 8003f1c:	7837      	ldrb	r7, [r6, #0]
 8003f1e:	2f00      	cmp	r7, #0
 8003f20:	d104      	bne.n	8003f2c <__strtok_r+0x24>
 8003f22:	2d00      	cmp	r5, #0
 8003f24:	d10d      	bne.n	8003f42 <__strtok_r+0x3a>
 8003f26:	6015      	str	r5, [r2, #0]
 8003f28:	2000      	movs	r0, #0
 8003f2a:	e006      	b.n	8003f3a <__strtok_r+0x32>
 8003f2c:	3601      	adds	r6, #1
 8003f2e:	42bd      	cmp	r5, r7
 8003f30:	d1f4      	bne.n	8003f1c <__strtok_r+0x14>
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d1ee      	bne.n	8003f14 <__strtok_r+0xc>
 8003f36:	6014      	str	r4, [r2, #0]
 8003f38:	7003      	strb	r3, [r0, #0]
 8003f3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f3c:	3301      	adds	r3, #1
 8003f3e:	2d00      	cmp	r5, #0
 8003f40:	d103      	bne.n	8003f4a <__strtok_r+0x42>
 8003f42:	0026      	movs	r6, r4
 8003f44:	000b      	movs	r3, r1
 8003f46:	7837      	ldrb	r7, [r6, #0]
 8003f48:	3401      	adds	r4, #1
 8003f4a:	781d      	ldrb	r5, [r3, #0]
 8003f4c:	42af      	cmp	r7, r5
 8003f4e:	d1f5      	bne.n	8003f3c <__strtok_r+0x34>
 8003f50:	2300      	movs	r3, #0
 8003f52:	0019      	movs	r1, r3
 8003f54:	429f      	cmp	r7, r3
 8003f56:	d001      	beq.n	8003f5c <__strtok_r+0x54>
 8003f58:	0023      	movs	r3, r4
 8003f5a:	7031      	strb	r1, [r6, #0]
 8003f5c:	6013      	str	r3, [r2, #0]
 8003f5e:	e7ec      	b.n	8003f3a <__strtok_r+0x32>

08003f60 <strtok_r>:
 8003f60:	b510      	push	{r4, lr}
 8003f62:	2301      	movs	r3, #1
 8003f64:	f7ff ffd0 	bl	8003f08 <__strtok_r>
 8003f68:	bd10      	pop	{r4, pc}
	...

08003f6c <__errno>:
 8003f6c:	4b01      	ldr	r3, [pc, #4]	@ (8003f74 <__errno+0x8>)
 8003f6e:	6818      	ldr	r0, [r3, #0]
 8003f70:	4770      	bx	lr
 8003f72:	46c0      	nop			@ (mov r8, r8)
 8003f74:	20000010 	.word	0x20000010

08003f78 <__libc_init_array>:
 8003f78:	b570      	push	{r4, r5, r6, lr}
 8003f7a:	2600      	movs	r6, #0
 8003f7c:	4c0c      	ldr	r4, [pc, #48]	@ (8003fb0 <__libc_init_array+0x38>)
 8003f7e:	4d0d      	ldr	r5, [pc, #52]	@ (8003fb4 <__libc_init_array+0x3c>)
 8003f80:	1b64      	subs	r4, r4, r5
 8003f82:	10a4      	asrs	r4, r4, #2
 8003f84:	42a6      	cmp	r6, r4
 8003f86:	d109      	bne.n	8003f9c <__libc_init_array+0x24>
 8003f88:	2600      	movs	r6, #0
 8003f8a:	f000 fc61 	bl	8004850 <_init>
 8003f8e:	4c0a      	ldr	r4, [pc, #40]	@ (8003fb8 <__libc_init_array+0x40>)
 8003f90:	4d0a      	ldr	r5, [pc, #40]	@ (8003fbc <__libc_init_array+0x44>)
 8003f92:	1b64      	subs	r4, r4, r5
 8003f94:	10a4      	asrs	r4, r4, #2
 8003f96:	42a6      	cmp	r6, r4
 8003f98:	d105      	bne.n	8003fa6 <__libc_init_array+0x2e>
 8003f9a:	bd70      	pop	{r4, r5, r6, pc}
 8003f9c:	00b3      	lsls	r3, r6, #2
 8003f9e:	58eb      	ldr	r3, [r5, r3]
 8003fa0:	4798      	blx	r3
 8003fa2:	3601      	adds	r6, #1
 8003fa4:	e7ee      	b.n	8003f84 <__libc_init_array+0xc>
 8003fa6:	00b3      	lsls	r3, r6, #2
 8003fa8:	58eb      	ldr	r3, [r5, r3]
 8003faa:	4798      	blx	r3
 8003fac:	3601      	adds	r6, #1
 8003fae:	e7f2      	b.n	8003f96 <__libc_init_array+0x1e>
 8003fb0:	08004c88 	.word	0x08004c88
 8003fb4:	08004c88 	.word	0x08004c88
 8003fb8:	08004c8c 	.word	0x08004c8c
 8003fbc:	08004c88 	.word	0x08004c88

08003fc0 <__retarget_lock_acquire_recursive>:
 8003fc0:	4770      	bx	lr

08003fc2 <__retarget_lock_release_recursive>:
 8003fc2:	4770      	bx	lr

08003fc4 <_free_r>:
 8003fc4:	b570      	push	{r4, r5, r6, lr}
 8003fc6:	0005      	movs	r5, r0
 8003fc8:	1e0c      	subs	r4, r1, #0
 8003fca:	d010      	beq.n	8003fee <_free_r+0x2a>
 8003fcc:	3c04      	subs	r4, #4
 8003fce:	6823      	ldr	r3, [r4, #0]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	da00      	bge.n	8003fd6 <_free_r+0x12>
 8003fd4:	18e4      	adds	r4, r4, r3
 8003fd6:	0028      	movs	r0, r5
 8003fd8:	f000 f8e0 	bl	800419c <__malloc_lock>
 8003fdc:	4a1d      	ldr	r2, [pc, #116]	@ (8004054 <_free_r+0x90>)
 8003fde:	6813      	ldr	r3, [r2, #0]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d105      	bne.n	8003ff0 <_free_r+0x2c>
 8003fe4:	6063      	str	r3, [r4, #4]
 8003fe6:	6014      	str	r4, [r2, #0]
 8003fe8:	0028      	movs	r0, r5
 8003fea:	f000 f8df 	bl	80041ac <__malloc_unlock>
 8003fee:	bd70      	pop	{r4, r5, r6, pc}
 8003ff0:	42a3      	cmp	r3, r4
 8003ff2:	d908      	bls.n	8004006 <_free_r+0x42>
 8003ff4:	6820      	ldr	r0, [r4, #0]
 8003ff6:	1821      	adds	r1, r4, r0
 8003ff8:	428b      	cmp	r3, r1
 8003ffa:	d1f3      	bne.n	8003fe4 <_free_r+0x20>
 8003ffc:	6819      	ldr	r1, [r3, #0]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	1809      	adds	r1, r1, r0
 8004002:	6021      	str	r1, [r4, #0]
 8004004:	e7ee      	b.n	8003fe4 <_free_r+0x20>
 8004006:	001a      	movs	r2, r3
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d001      	beq.n	8004012 <_free_r+0x4e>
 800400e:	42a3      	cmp	r3, r4
 8004010:	d9f9      	bls.n	8004006 <_free_r+0x42>
 8004012:	6811      	ldr	r1, [r2, #0]
 8004014:	1850      	adds	r0, r2, r1
 8004016:	42a0      	cmp	r0, r4
 8004018:	d10b      	bne.n	8004032 <_free_r+0x6e>
 800401a:	6820      	ldr	r0, [r4, #0]
 800401c:	1809      	adds	r1, r1, r0
 800401e:	1850      	adds	r0, r2, r1
 8004020:	6011      	str	r1, [r2, #0]
 8004022:	4283      	cmp	r3, r0
 8004024:	d1e0      	bne.n	8003fe8 <_free_r+0x24>
 8004026:	6818      	ldr	r0, [r3, #0]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	1841      	adds	r1, r0, r1
 800402c:	6011      	str	r1, [r2, #0]
 800402e:	6053      	str	r3, [r2, #4]
 8004030:	e7da      	b.n	8003fe8 <_free_r+0x24>
 8004032:	42a0      	cmp	r0, r4
 8004034:	d902      	bls.n	800403c <_free_r+0x78>
 8004036:	230c      	movs	r3, #12
 8004038:	602b      	str	r3, [r5, #0]
 800403a:	e7d5      	b.n	8003fe8 <_free_r+0x24>
 800403c:	6820      	ldr	r0, [r4, #0]
 800403e:	1821      	adds	r1, r4, r0
 8004040:	428b      	cmp	r3, r1
 8004042:	d103      	bne.n	800404c <_free_r+0x88>
 8004044:	6819      	ldr	r1, [r3, #0]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	1809      	adds	r1, r1, r0
 800404a:	6021      	str	r1, [r4, #0]
 800404c:	6063      	str	r3, [r4, #4]
 800404e:	6054      	str	r4, [r2, #4]
 8004050:	e7ca      	b.n	8003fe8 <_free_r+0x24>
 8004052:	46c0      	nop			@ (mov r8, r8)
 8004054:	200006f0 	.word	0x200006f0

08004058 <sbrk_aligned>:
 8004058:	b570      	push	{r4, r5, r6, lr}
 800405a:	4e0f      	ldr	r6, [pc, #60]	@ (8004098 <sbrk_aligned+0x40>)
 800405c:	000d      	movs	r5, r1
 800405e:	6831      	ldr	r1, [r6, #0]
 8004060:	0004      	movs	r4, r0
 8004062:	2900      	cmp	r1, #0
 8004064:	d102      	bne.n	800406c <sbrk_aligned+0x14>
 8004066:	f000 fb95 	bl	8004794 <_sbrk_r>
 800406a:	6030      	str	r0, [r6, #0]
 800406c:	0029      	movs	r1, r5
 800406e:	0020      	movs	r0, r4
 8004070:	f000 fb90 	bl	8004794 <_sbrk_r>
 8004074:	1c43      	adds	r3, r0, #1
 8004076:	d103      	bne.n	8004080 <sbrk_aligned+0x28>
 8004078:	2501      	movs	r5, #1
 800407a:	426d      	negs	r5, r5
 800407c:	0028      	movs	r0, r5
 800407e:	bd70      	pop	{r4, r5, r6, pc}
 8004080:	2303      	movs	r3, #3
 8004082:	1cc5      	adds	r5, r0, #3
 8004084:	439d      	bics	r5, r3
 8004086:	42a8      	cmp	r0, r5
 8004088:	d0f8      	beq.n	800407c <sbrk_aligned+0x24>
 800408a:	1a29      	subs	r1, r5, r0
 800408c:	0020      	movs	r0, r4
 800408e:	f000 fb81 	bl	8004794 <_sbrk_r>
 8004092:	3001      	adds	r0, #1
 8004094:	d1f2      	bne.n	800407c <sbrk_aligned+0x24>
 8004096:	e7ef      	b.n	8004078 <sbrk_aligned+0x20>
 8004098:	200006ec 	.word	0x200006ec

0800409c <_malloc_r>:
 800409c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800409e:	2203      	movs	r2, #3
 80040a0:	1ccb      	adds	r3, r1, #3
 80040a2:	4393      	bics	r3, r2
 80040a4:	3308      	adds	r3, #8
 80040a6:	0005      	movs	r5, r0
 80040a8:	001f      	movs	r7, r3
 80040aa:	2b0c      	cmp	r3, #12
 80040ac:	d234      	bcs.n	8004118 <_malloc_r+0x7c>
 80040ae:	270c      	movs	r7, #12
 80040b0:	42b9      	cmp	r1, r7
 80040b2:	d833      	bhi.n	800411c <_malloc_r+0x80>
 80040b4:	0028      	movs	r0, r5
 80040b6:	f000 f871 	bl	800419c <__malloc_lock>
 80040ba:	4e37      	ldr	r6, [pc, #220]	@ (8004198 <_malloc_r+0xfc>)
 80040bc:	6833      	ldr	r3, [r6, #0]
 80040be:	001c      	movs	r4, r3
 80040c0:	2c00      	cmp	r4, #0
 80040c2:	d12f      	bne.n	8004124 <_malloc_r+0x88>
 80040c4:	0039      	movs	r1, r7
 80040c6:	0028      	movs	r0, r5
 80040c8:	f7ff ffc6 	bl	8004058 <sbrk_aligned>
 80040cc:	0004      	movs	r4, r0
 80040ce:	1c43      	adds	r3, r0, #1
 80040d0:	d15f      	bne.n	8004192 <_malloc_r+0xf6>
 80040d2:	6834      	ldr	r4, [r6, #0]
 80040d4:	9400      	str	r4, [sp, #0]
 80040d6:	9b00      	ldr	r3, [sp, #0]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d14a      	bne.n	8004172 <_malloc_r+0xd6>
 80040dc:	2c00      	cmp	r4, #0
 80040de:	d052      	beq.n	8004186 <_malloc_r+0xea>
 80040e0:	6823      	ldr	r3, [r4, #0]
 80040e2:	0028      	movs	r0, r5
 80040e4:	18e3      	adds	r3, r4, r3
 80040e6:	9900      	ldr	r1, [sp, #0]
 80040e8:	9301      	str	r3, [sp, #4]
 80040ea:	f000 fb53 	bl	8004794 <_sbrk_r>
 80040ee:	9b01      	ldr	r3, [sp, #4]
 80040f0:	4283      	cmp	r3, r0
 80040f2:	d148      	bne.n	8004186 <_malloc_r+0xea>
 80040f4:	6823      	ldr	r3, [r4, #0]
 80040f6:	0028      	movs	r0, r5
 80040f8:	1aff      	subs	r7, r7, r3
 80040fa:	0039      	movs	r1, r7
 80040fc:	f7ff ffac 	bl	8004058 <sbrk_aligned>
 8004100:	3001      	adds	r0, #1
 8004102:	d040      	beq.n	8004186 <_malloc_r+0xea>
 8004104:	6823      	ldr	r3, [r4, #0]
 8004106:	19db      	adds	r3, r3, r7
 8004108:	6023      	str	r3, [r4, #0]
 800410a:	6833      	ldr	r3, [r6, #0]
 800410c:	685a      	ldr	r2, [r3, #4]
 800410e:	2a00      	cmp	r2, #0
 8004110:	d133      	bne.n	800417a <_malloc_r+0xde>
 8004112:	9b00      	ldr	r3, [sp, #0]
 8004114:	6033      	str	r3, [r6, #0]
 8004116:	e019      	b.n	800414c <_malloc_r+0xb0>
 8004118:	2b00      	cmp	r3, #0
 800411a:	dac9      	bge.n	80040b0 <_malloc_r+0x14>
 800411c:	230c      	movs	r3, #12
 800411e:	602b      	str	r3, [r5, #0]
 8004120:	2000      	movs	r0, #0
 8004122:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004124:	6821      	ldr	r1, [r4, #0]
 8004126:	1bc9      	subs	r1, r1, r7
 8004128:	d420      	bmi.n	800416c <_malloc_r+0xd0>
 800412a:	290b      	cmp	r1, #11
 800412c:	d90a      	bls.n	8004144 <_malloc_r+0xa8>
 800412e:	19e2      	adds	r2, r4, r7
 8004130:	6027      	str	r7, [r4, #0]
 8004132:	42a3      	cmp	r3, r4
 8004134:	d104      	bne.n	8004140 <_malloc_r+0xa4>
 8004136:	6032      	str	r2, [r6, #0]
 8004138:	6863      	ldr	r3, [r4, #4]
 800413a:	6011      	str	r1, [r2, #0]
 800413c:	6053      	str	r3, [r2, #4]
 800413e:	e005      	b.n	800414c <_malloc_r+0xb0>
 8004140:	605a      	str	r2, [r3, #4]
 8004142:	e7f9      	b.n	8004138 <_malloc_r+0x9c>
 8004144:	6862      	ldr	r2, [r4, #4]
 8004146:	42a3      	cmp	r3, r4
 8004148:	d10e      	bne.n	8004168 <_malloc_r+0xcc>
 800414a:	6032      	str	r2, [r6, #0]
 800414c:	0028      	movs	r0, r5
 800414e:	f000 f82d 	bl	80041ac <__malloc_unlock>
 8004152:	0020      	movs	r0, r4
 8004154:	2207      	movs	r2, #7
 8004156:	300b      	adds	r0, #11
 8004158:	1d23      	adds	r3, r4, #4
 800415a:	4390      	bics	r0, r2
 800415c:	1ac2      	subs	r2, r0, r3
 800415e:	4298      	cmp	r0, r3
 8004160:	d0df      	beq.n	8004122 <_malloc_r+0x86>
 8004162:	1a1b      	subs	r3, r3, r0
 8004164:	50a3      	str	r3, [r4, r2]
 8004166:	e7dc      	b.n	8004122 <_malloc_r+0x86>
 8004168:	605a      	str	r2, [r3, #4]
 800416a:	e7ef      	b.n	800414c <_malloc_r+0xb0>
 800416c:	0023      	movs	r3, r4
 800416e:	6864      	ldr	r4, [r4, #4]
 8004170:	e7a6      	b.n	80040c0 <_malloc_r+0x24>
 8004172:	9c00      	ldr	r4, [sp, #0]
 8004174:	6863      	ldr	r3, [r4, #4]
 8004176:	9300      	str	r3, [sp, #0]
 8004178:	e7ad      	b.n	80040d6 <_malloc_r+0x3a>
 800417a:	001a      	movs	r2, r3
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	42a3      	cmp	r3, r4
 8004180:	d1fb      	bne.n	800417a <_malloc_r+0xde>
 8004182:	2300      	movs	r3, #0
 8004184:	e7da      	b.n	800413c <_malloc_r+0xa0>
 8004186:	230c      	movs	r3, #12
 8004188:	0028      	movs	r0, r5
 800418a:	602b      	str	r3, [r5, #0]
 800418c:	f000 f80e 	bl	80041ac <__malloc_unlock>
 8004190:	e7c6      	b.n	8004120 <_malloc_r+0x84>
 8004192:	6007      	str	r7, [r0, #0]
 8004194:	e7da      	b.n	800414c <_malloc_r+0xb0>
 8004196:	46c0      	nop			@ (mov r8, r8)
 8004198:	200006f0 	.word	0x200006f0

0800419c <__malloc_lock>:
 800419c:	b510      	push	{r4, lr}
 800419e:	4802      	ldr	r0, [pc, #8]	@ (80041a8 <__malloc_lock+0xc>)
 80041a0:	f7ff ff0e 	bl	8003fc0 <__retarget_lock_acquire_recursive>
 80041a4:	bd10      	pop	{r4, pc}
 80041a6:	46c0      	nop			@ (mov r8, r8)
 80041a8:	200006e8 	.word	0x200006e8

080041ac <__malloc_unlock>:
 80041ac:	b510      	push	{r4, lr}
 80041ae:	4802      	ldr	r0, [pc, #8]	@ (80041b8 <__malloc_unlock+0xc>)
 80041b0:	f7ff ff07 	bl	8003fc2 <__retarget_lock_release_recursive>
 80041b4:	bd10      	pop	{r4, pc}
 80041b6:	46c0      	nop			@ (mov r8, r8)
 80041b8:	200006e8 	.word	0x200006e8

080041bc <__ssputs_r>:
 80041bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041be:	688e      	ldr	r6, [r1, #8]
 80041c0:	b085      	sub	sp, #20
 80041c2:	001f      	movs	r7, r3
 80041c4:	000c      	movs	r4, r1
 80041c6:	680b      	ldr	r3, [r1, #0]
 80041c8:	9002      	str	r0, [sp, #8]
 80041ca:	9203      	str	r2, [sp, #12]
 80041cc:	42be      	cmp	r6, r7
 80041ce:	d830      	bhi.n	8004232 <__ssputs_r+0x76>
 80041d0:	210c      	movs	r1, #12
 80041d2:	5e62      	ldrsh	r2, [r4, r1]
 80041d4:	2190      	movs	r1, #144	@ 0x90
 80041d6:	00c9      	lsls	r1, r1, #3
 80041d8:	420a      	tst	r2, r1
 80041da:	d028      	beq.n	800422e <__ssputs_r+0x72>
 80041dc:	2003      	movs	r0, #3
 80041de:	6921      	ldr	r1, [r4, #16]
 80041e0:	1a5b      	subs	r3, r3, r1
 80041e2:	9301      	str	r3, [sp, #4]
 80041e4:	6963      	ldr	r3, [r4, #20]
 80041e6:	4343      	muls	r3, r0
 80041e8:	9801      	ldr	r0, [sp, #4]
 80041ea:	0fdd      	lsrs	r5, r3, #31
 80041ec:	18ed      	adds	r5, r5, r3
 80041ee:	1c7b      	adds	r3, r7, #1
 80041f0:	181b      	adds	r3, r3, r0
 80041f2:	106d      	asrs	r5, r5, #1
 80041f4:	42ab      	cmp	r3, r5
 80041f6:	d900      	bls.n	80041fa <__ssputs_r+0x3e>
 80041f8:	001d      	movs	r5, r3
 80041fa:	0552      	lsls	r2, r2, #21
 80041fc:	d528      	bpl.n	8004250 <__ssputs_r+0x94>
 80041fe:	0029      	movs	r1, r5
 8004200:	9802      	ldr	r0, [sp, #8]
 8004202:	f7ff ff4b 	bl	800409c <_malloc_r>
 8004206:	1e06      	subs	r6, r0, #0
 8004208:	d02c      	beq.n	8004264 <__ssputs_r+0xa8>
 800420a:	9a01      	ldr	r2, [sp, #4]
 800420c:	6921      	ldr	r1, [r4, #16]
 800420e:	f000 fade 	bl	80047ce <memcpy>
 8004212:	89a2      	ldrh	r2, [r4, #12]
 8004214:	4b18      	ldr	r3, [pc, #96]	@ (8004278 <__ssputs_r+0xbc>)
 8004216:	401a      	ands	r2, r3
 8004218:	2380      	movs	r3, #128	@ 0x80
 800421a:	4313      	orrs	r3, r2
 800421c:	81a3      	strh	r3, [r4, #12]
 800421e:	9b01      	ldr	r3, [sp, #4]
 8004220:	6126      	str	r6, [r4, #16]
 8004222:	18f6      	adds	r6, r6, r3
 8004224:	6026      	str	r6, [r4, #0]
 8004226:	003e      	movs	r6, r7
 8004228:	6165      	str	r5, [r4, #20]
 800422a:	1aed      	subs	r5, r5, r3
 800422c:	60a5      	str	r5, [r4, #8]
 800422e:	42be      	cmp	r6, r7
 8004230:	d900      	bls.n	8004234 <__ssputs_r+0x78>
 8004232:	003e      	movs	r6, r7
 8004234:	0032      	movs	r2, r6
 8004236:	9903      	ldr	r1, [sp, #12]
 8004238:	6820      	ldr	r0, [r4, #0]
 800423a:	f000 fa99 	bl	8004770 <memmove>
 800423e:	2000      	movs	r0, #0
 8004240:	68a3      	ldr	r3, [r4, #8]
 8004242:	1b9b      	subs	r3, r3, r6
 8004244:	60a3      	str	r3, [r4, #8]
 8004246:	6823      	ldr	r3, [r4, #0]
 8004248:	199b      	adds	r3, r3, r6
 800424a:	6023      	str	r3, [r4, #0]
 800424c:	b005      	add	sp, #20
 800424e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004250:	002a      	movs	r2, r5
 8004252:	9802      	ldr	r0, [sp, #8]
 8004254:	f000 fac4 	bl	80047e0 <_realloc_r>
 8004258:	1e06      	subs	r6, r0, #0
 800425a:	d1e0      	bne.n	800421e <__ssputs_r+0x62>
 800425c:	6921      	ldr	r1, [r4, #16]
 800425e:	9802      	ldr	r0, [sp, #8]
 8004260:	f7ff feb0 	bl	8003fc4 <_free_r>
 8004264:	230c      	movs	r3, #12
 8004266:	2001      	movs	r0, #1
 8004268:	9a02      	ldr	r2, [sp, #8]
 800426a:	4240      	negs	r0, r0
 800426c:	6013      	str	r3, [r2, #0]
 800426e:	89a2      	ldrh	r2, [r4, #12]
 8004270:	3334      	adds	r3, #52	@ 0x34
 8004272:	4313      	orrs	r3, r2
 8004274:	81a3      	strh	r3, [r4, #12]
 8004276:	e7e9      	b.n	800424c <__ssputs_r+0x90>
 8004278:	fffffb7f 	.word	0xfffffb7f

0800427c <_svfiprintf_r>:
 800427c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800427e:	b0a1      	sub	sp, #132	@ 0x84
 8004280:	9003      	str	r0, [sp, #12]
 8004282:	001d      	movs	r5, r3
 8004284:	898b      	ldrh	r3, [r1, #12]
 8004286:	000f      	movs	r7, r1
 8004288:	0016      	movs	r6, r2
 800428a:	061b      	lsls	r3, r3, #24
 800428c:	d511      	bpl.n	80042b2 <_svfiprintf_r+0x36>
 800428e:	690b      	ldr	r3, [r1, #16]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d10e      	bne.n	80042b2 <_svfiprintf_r+0x36>
 8004294:	2140      	movs	r1, #64	@ 0x40
 8004296:	f7ff ff01 	bl	800409c <_malloc_r>
 800429a:	6038      	str	r0, [r7, #0]
 800429c:	6138      	str	r0, [r7, #16]
 800429e:	2800      	cmp	r0, #0
 80042a0:	d105      	bne.n	80042ae <_svfiprintf_r+0x32>
 80042a2:	230c      	movs	r3, #12
 80042a4:	9a03      	ldr	r2, [sp, #12]
 80042a6:	6013      	str	r3, [r2, #0]
 80042a8:	2001      	movs	r0, #1
 80042aa:	4240      	negs	r0, r0
 80042ac:	e0cf      	b.n	800444e <_svfiprintf_r+0x1d2>
 80042ae:	2340      	movs	r3, #64	@ 0x40
 80042b0:	617b      	str	r3, [r7, #20]
 80042b2:	2300      	movs	r3, #0
 80042b4:	ac08      	add	r4, sp, #32
 80042b6:	6163      	str	r3, [r4, #20]
 80042b8:	3320      	adds	r3, #32
 80042ba:	7663      	strb	r3, [r4, #25]
 80042bc:	3310      	adds	r3, #16
 80042be:	76a3      	strb	r3, [r4, #26]
 80042c0:	9507      	str	r5, [sp, #28]
 80042c2:	0035      	movs	r5, r6
 80042c4:	782b      	ldrb	r3, [r5, #0]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d001      	beq.n	80042ce <_svfiprintf_r+0x52>
 80042ca:	2b25      	cmp	r3, #37	@ 0x25
 80042cc:	d148      	bne.n	8004360 <_svfiprintf_r+0xe4>
 80042ce:	1bab      	subs	r3, r5, r6
 80042d0:	9305      	str	r3, [sp, #20]
 80042d2:	42b5      	cmp	r5, r6
 80042d4:	d00b      	beq.n	80042ee <_svfiprintf_r+0x72>
 80042d6:	0032      	movs	r2, r6
 80042d8:	0039      	movs	r1, r7
 80042da:	9803      	ldr	r0, [sp, #12]
 80042dc:	f7ff ff6e 	bl	80041bc <__ssputs_r>
 80042e0:	3001      	adds	r0, #1
 80042e2:	d100      	bne.n	80042e6 <_svfiprintf_r+0x6a>
 80042e4:	e0ae      	b.n	8004444 <_svfiprintf_r+0x1c8>
 80042e6:	6963      	ldr	r3, [r4, #20]
 80042e8:	9a05      	ldr	r2, [sp, #20]
 80042ea:	189b      	adds	r3, r3, r2
 80042ec:	6163      	str	r3, [r4, #20]
 80042ee:	782b      	ldrb	r3, [r5, #0]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d100      	bne.n	80042f6 <_svfiprintf_r+0x7a>
 80042f4:	e0a6      	b.n	8004444 <_svfiprintf_r+0x1c8>
 80042f6:	2201      	movs	r2, #1
 80042f8:	2300      	movs	r3, #0
 80042fa:	4252      	negs	r2, r2
 80042fc:	6062      	str	r2, [r4, #4]
 80042fe:	a904      	add	r1, sp, #16
 8004300:	3254      	adds	r2, #84	@ 0x54
 8004302:	1852      	adds	r2, r2, r1
 8004304:	1c6e      	adds	r6, r5, #1
 8004306:	6023      	str	r3, [r4, #0]
 8004308:	60e3      	str	r3, [r4, #12]
 800430a:	60a3      	str	r3, [r4, #8]
 800430c:	7013      	strb	r3, [r2, #0]
 800430e:	65a3      	str	r3, [r4, #88]	@ 0x58
 8004310:	4b54      	ldr	r3, [pc, #336]	@ (8004464 <_svfiprintf_r+0x1e8>)
 8004312:	2205      	movs	r2, #5
 8004314:	0018      	movs	r0, r3
 8004316:	7831      	ldrb	r1, [r6, #0]
 8004318:	9305      	str	r3, [sp, #20]
 800431a:	f000 fa4d 	bl	80047b8 <memchr>
 800431e:	1c75      	adds	r5, r6, #1
 8004320:	2800      	cmp	r0, #0
 8004322:	d11f      	bne.n	8004364 <_svfiprintf_r+0xe8>
 8004324:	6822      	ldr	r2, [r4, #0]
 8004326:	06d3      	lsls	r3, r2, #27
 8004328:	d504      	bpl.n	8004334 <_svfiprintf_r+0xb8>
 800432a:	2353      	movs	r3, #83	@ 0x53
 800432c:	a904      	add	r1, sp, #16
 800432e:	185b      	adds	r3, r3, r1
 8004330:	2120      	movs	r1, #32
 8004332:	7019      	strb	r1, [r3, #0]
 8004334:	0713      	lsls	r3, r2, #28
 8004336:	d504      	bpl.n	8004342 <_svfiprintf_r+0xc6>
 8004338:	2353      	movs	r3, #83	@ 0x53
 800433a:	a904      	add	r1, sp, #16
 800433c:	185b      	adds	r3, r3, r1
 800433e:	212b      	movs	r1, #43	@ 0x2b
 8004340:	7019      	strb	r1, [r3, #0]
 8004342:	7833      	ldrb	r3, [r6, #0]
 8004344:	2b2a      	cmp	r3, #42	@ 0x2a
 8004346:	d016      	beq.n	8004376 <_svfiprintf_r+0xfa>
 8004348:	0035      	movs	r5, r6
 800434a:	2100      	movs	r1, #0
 800434c:	200a      	movs	r0, #10
 800434e:	68e3      	ldr	r3, [r4, #12]
 8004350:	782a      	ldrb	r2, [r5, #0]
 8004352:	1c6e      	adds	r6, r5, #1
 8004354:	3a30      	subs	r2, #48	@ 0x30
 8004356:	2a09      	cmp	r2, #9
 8004358:	d950      	bls.n	80043fc <_svfiprintf_r+0x180>
 800435a:	2900      	cmp	r1, #0
 800435c:	d111      	bne.n	8004382 <_svfiprintf_r+0x106>
 800435e:	e017      	b.n	8004390 <_svfiprintf_r+0x114>
 8004360:	3501      	adds	r5, #1
 8004362:	e7af      	b.n	80042c4 <_svfiprintf_r+0x48>
 8004364:	9b05      	ldr	r3, [sp, #20]
 8004366:	6822      	ldr	r2, [r4, #0]
 8004368:	1ac0      	subs	r0, r0, r3
 800436a:	2301      	movs	r3, #1
 800436c:	4083      	lsls	r3, r0
 800436e:	4313      	orrs	r3, r2
 8004370:	002e      	movs	r6, r5
 8004372:	6023      	str	r3, [r4, #0]
 8004374:	e7cc      	b.n	8004310 <_svfiprintf_r+0x94>
 8004376:	9b07      	ldr	r3, [sp, #28]
 8004378:	1d19      	adds	r1, r3, #4
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	9107      	str	r1, [sp, #28]
 800437e:	2b00      	cmp	r3, #0
 8004380:	db01      	blt.n	8004386 <_svfiprintf_r+0x10a>
 8004382:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004384:	e004      	b.n	8004390 <_svfiprintf_r+0x114>
 8004386:	425b      	negs	r3, r3
 8004388:	60e3      	str	r3, [r4, #12]
 800438a:	2302      	movs	r3, #2
 800438c:	4313      	orrs	r3, r2
 800438e:	6023      	str	r3, [r4, #0]
 8004390:	782b      	ldrb	r3, [r5, #0]
 8004392:	2b2e      	cmp	r3, #46	@ 0x2e
 8004394:	d10c      	bne.n	80043b0 <_svfiprintf_r+0x134>
 8004396:	786b      	ldrb	r3, [r5, #1]
 8004398:	2b2a      	cmp	r3, #42	@ 0x2a
 800439a:	d134      	bne.n	8004406 <_svfiprintf_r+0x18a>
 800439c:	9b07      	ldr	r3, [sp, #28]
 800439e:	3502      	adds	r5, #2
 80043a0:	1d1a      	adds	r2, r3, #4
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	9207      	str	r2, [sp, #28]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	da01      	bge.n	80043ae <_svfiprintf_r+0x132>
 80043aa:	2301      	movs	r3, #1
 80043ac:	425b      	negs	r3, r3
 80043ae:	9309      	str	r3, [sp, #36]	@ 0x24
 80043b0:	4e2d      	ldr	r6, [pc, #180]	@ (8004468 <_svfiprintf_r+0x1ec>)
 80043b2:	2203      	movs	r2, #3
 80043b4:	0030      	movs	r0, r6
 80043b6:	7829      	ldrb	r1, [r5, #0]
 80043b8:	f000 f9fe 	bl	80047b8 <memchr>
 80043bc:	2800      	cmp	r0, #0
 80043be:	d006      	beq.n	80043ce <_svfiprintf_r+0x152>
 80043c0:	2340      	movs	r3, #64	@ 0x40
 80043c2:	1b80      	subs	r0, r0, r6
 80043c4:	4083      	lsls	r3, r0
 80043c6:	6822      	ldr	r2, [r4, #0]
 80043c8:	3501      	adds	r5, #1
 80043ca:	4313      	orrs	r3, r2
 80043cc:	6023      	str	r3, [r4, #0]
 80043ce:	7829      	ldrb	r1, [r5, #0]
 80043d0:	2206      	movs	r2, #6
 80043d2:	4826      	ldr	r0, [pc, #152]	@ (800446c <_svfiprintf_r+0x1f0>)
 80043d4:	1c6e      	adds	r6, r5, #1
 80043d6:	7621      	strb	r1, [r4, #24]
 80043d8:	f000 f9ee 	bl	80047b8 <memchr>
 80043dc:	2800      	cmp	r0, #0
 80043de:	d038      	beq.n	8004452 <_svfiprintf_r+0x1d6>
 80043e0:	4b23      	ldr	r3, [pc, #140]	@ (8004470 <_svfiprintf_r+0x1f4>)
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d122      	bne.n	800442c <_svfiprintf_r+0x1b0>
 80043e6:	2207      	movs	r2, #7
 80043e8:	9b07      	ldr	r3, [sp, #28]
 80043ea:	3307      	adds	r3, #7
 80043ec:	4393      	bics	r3, r2
 80043ee:	3308      	adds	r3, #8
 80043f0:	9307      	str	r3, [sp, #28]
 80043f2:	6963      	ldr	r3, [r4, #20]
 80043f4:	9a04      	ldr	r2, [sp, #16]
 80043f6:	189b      	adds	r3, r3, r2
 80043f8:	6163      	str	r3, [r4, #20]
 80043fa:	e762      	b.n	80042c2 <_svfiprintf_r+0x46>
 80043fc:	4343      	muls	r3, r0
 80043fe:	0035      	movs	r5, r6
 8004400:	2101      	movs	r1, #1
 8004402:	189b      	adds	r3, r3, r2
 8004404:	e7a4      	b.n	8004350 <_svfiprintf_r+0xd4>
 8004406:	2300      	movs	r3, #0
 8004408:	200a      	movs	r0, #10
 800440a:	0019      	movs	r1, r3
 800440c:	3501      	adds	r5, #1
 800440e:	6063      	str	r3, [r4, #4]
 8004410:	782a      	ldrb	r2, [r5, #0]
 8004412:	1c6e      	adds	r6, r5, #1
 8004414:	3a30      	subs	r2, #48	@ 0x30
 8004416:	2a09      	cmp	r2, #9
 8004418:	d903      	bls.n	8004422 <_svfiprintf_r+0x1a6>
 800441a:	2b00      	cmp	r3, #0
 800441c:	d0c8      	beq.n	80043b0 <_svfiprintf_r+0x134>
 800441e:	9109      	str	r1, [sp, #36]	@ 0x24
 8004420:	e7c6      	b.n	80043b0 <_svfiprintf_r+0x134>
 8004422:	4341      	muls	r1, r0
 8004424:	0035      	movs	r5, r6
 8004426:	2301      	movs	r3, #1
 8004428:	1889      	adds	r1, r1, r2
 800442a:	e7f1      	b.n	8004410 <_svfiprintf_r+0x194>
 800442c:	aa07      	add	r2, sp, #28
 800442e:	9200      	str	r2, [sp, #0]
 8004430:	0021      	movs	r1, r4
 8004432:	003a      	movs	r2, r7
 8004434:	4b0f      	ldr	r3, [pc, #60]	@ (8004474 <_svfiprintf_r+0x1f8>)
 8004436:	9803      	ldr	r0, [sp, #12]
 8004438:	e000      	b.n	800443c <_svfiprintf_r+0x1c0>
 800443a:	bf00      	nop
 800443c:	9004      	str	r0, [sp, #16]
 800443e:	9b04      	ldr	r3, [sp, #16]
 8004440:	3301      	adds	r3, #1
 8004442:	d1d6      	bne.n	80043f2 <_svfiprintf_r+0x176>
 8004444:	89bb      	ldrh	r3, [r7, #12]
 8004446:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8004448:	065b      	lsls	r3, r3, #25
 800444a:	d500      	bpl.n	800444e <_svfiprintf_r+0x1d2>
 800444c:	e72c      	b.n	80042a8 <_svfiprintf_r+0x2c>
 800444e:	b021      	add	sp, #132	@ 0x84
 8004450:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004452:	aa07      	add	r2, sp, #28
 8004454:	9200      	str	r2, [sp, #0]
 8004456:	0021      	movs	r1, r4
 8004458:	003a      	movs	r2, r7
 800445a:	4b06      	ldr	r3, [pc, #24]	@ (8004474 <_svfiprintf_r+0x1f8>)
 800445c:	9803      	ldr	r0, [sp, #12]
 800445e:	f000 f87b 	bl	8004558 <_printf_i>
 8004462:	e7eb      	b.n	800443c <_svfiprintf_r+0x1c0>
 8004464:	08004c55 	.word	0x08004c55
 8004468:	08004c5b 	.word	0x08004c5b
 800446c:	08004c5f 	.word	0x08004c5f
 8004470:	00000000 	.word	0x00000000
 8004474:	080041bd 	.word	0x080041bd

08004478 <_printf_common>:
 8004478:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800447a:	0016      	movs	r6, r2
 800447c:	9301      	str	r3, [sp, #4]
 800447e:	688a      	ldr	r2, [r1, #8]
 8004480:	690b      	ldr	r3, [r1, #16]
 8004482:	000c      	movs	r4, r1
 8004484:	9000      	str	r0, [sp, #0]
 8004486:	4293      	cmp	r3, r2
 8004488:	da00      	bge.n	800448c <_printf_common+0x14>
 800448a:	0013      	movs	r3, r2
 800448c:	0022      	movs	r2, r4
 800448e:	6033      	str	r3, [r6, #0]
 8004490:	3243      	adds	r2, #67	@ 0x43
 8004492:	7812      	ldrb	r2, [r2, #0]
 8004494:	2a00      	cmp	r2, #0
 8004496:	d001      	beq.n	800449c <_printf_common+0x24>
 8004498:	3301      	adds	r3, #1
 800449a:	6033      	str	r3, [r6, #0]
 800449c:	6823      	ldr	r3, [r4, #0]
 800449e:	069b      	lsls	r3, r3, #26
 80044a0:	d502      	bpl.n	80044a8 <_printf_common+0x30>
 80044a2:	6833      	ldr	r3, [r6, #0]
 80044a4:	3302      	adds	r3, #2
 80044a6:	6033      	str	r3, [r6, #0]
 80044a8:	6822      	ldr	r2, [r4, #0]
 80044aa:	2306      	movs	r3, #6
 80044ac:	0015      	movs	r5, r2
 80044ae:	401d      	ands	r5, r3
 80044b0:	421a      	tst	r2, r3
 80044b2:	d027      	beq.n	8004504 <_printf_common+0x8c>
 80044b4:	0023      	movs	r3, r4
 80044b6:	3343      	adds	r3, #67	@ 0x43
 80044b8:	781b      	ldrb	r3, [r3, #0]
 80044ba:	1e5a      	subs	r2, r3, #1
 80044bc:	4193      	sbcs	r3, r2
 80044be:	6822      	ldr	r2, [r4, #0]
 80044c0:	0692      	lsls	r2, r2, #26
 80044c2:	d430      	bmi.n	8004526 <_printf_common+0xae>
 80044c4:	0022      	movs	r2, r4
 80044c6:	9901      	ldr	r1, [sp, #4]
 80044c8:	9800      	ldr	r0, [sp, #0]
 80044ca:	9d08      	ldr	r5, [sp, #32]
 80044cc:	3243      	adds	r2, #67	@ 0x43
 80044ce:	47a8      	blx	r5
 80044d0:	3001      	adds	r0, #1
 80044d2:	d025      	beq.n	8004520 <_printf_common+0xa8>
 80044d4:	2206      	movs	r2, #6
 80044d6:	6823      	ldr	r3, [r4, #0]
 80044d8:	2500      	movs	r5, #0
 80044da:	4013      	ands	r3, r2
 80044dc:	2b04      	cmp	r3, #4
 80044de:	d105      	bne.n	80044ec <_printf_common+0x74>
 80044e0:	6833      	ldr	r3, [r6, #0]
 80044e2:	68e5      	ldr	r5, [r4, #12]
 80044e4:	1aed      	subs	r5, r5, r3
 80044e6:	43eb      	mvns	r3, r5
 80044e8:	17db      	asrs	r3, r3, #31
 80044ea:	401d      	ands	r5, r3
 80044ec:	68a3      	ldr	r3, [r4, #8]
 80044ee:	6922      	ldr	r2, [r4, #16]
 80044f0:	4293      	cmp	r3, r2
 80044f2:	dd01      	ble.n	80044f8 <_printf_common+0x80>
 80044f4:	1a9b      	subs	r3, r3, r2
 80044f6:	18ed      	adds	r5, r5, r3
 80044f8:	2600      	movs	r6, #0
 80044fa:	42b5      	cmp	r5, r6
 80044fc:	d120      	bne.n	8004540 <_printf_common+0xc8>
 80044fe:	2000      	movs	r0, #0
 8004500:	e010      	b.n	8004524 <_printf_common+0xac>
 8004502:	3501      	adds	r5, #1
 8004504:	68e3      	ldr	r3, [r4, #12]
 8004506:	6832      	ldr	r2, [r6, #0]
 8004508:	1a9b      	subs	r3, r3, r2
 800450a:	42ab      	cmp	r3, r5
 800450c:	ddd2      	ble.n	80044b4 <_printf_common+0x3c>
 800450e:	0022      	movs	r2, r4
 8004510:	2301      	movs	r3, #1
 8004512:	9901      	ldr	r1, [sp, #4]
 8004514:	9800      	ldr	r0, [sp, #0]
 8004516:	9f08      	ldr	r7, [sp, #32]
 8004518:	3219      	adds	r2, #25
 800451a:	47b8      	blx	r7
 800451c:	3001      	adds	r0, #1
 800451e:	d1f0      	bne.n	8004502 <_printf_common+0x8a>
 8004520:	2001      	movs	r0, #1
 8004522:	4240      	negs	r0, r0
 8004524:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004526:	2030      	movs	r0, #48	@ 0x30
 8004528:	18e1      	adds	r1, r4, r3
 800452a:	3143      	adds	r1, #67	@ 0x43
 800452c:	7008      	strb	r0, [r1, #0]
 800452e:	0021      	movs	r1, r4
 8004530:	1c5a      	adds	r2, r3, #1
 8004532:	3145      	adds	r1, #69	@ 0x45
 8004534:	7809      	ldrb	r1, [r1, #0]
 8004536:	18a2      	adds	r2, r4, r2
 8004538:	3243      	adds	r2, #67	@ 0x43
 800453a:	3302      	adds	r3, #2
 800453c:	7011      	strb	r1, [r2, #0]
 800453e:	e7c1      	b.n	80044c4 <_printf_common+0x4c>
 8004540:	0022      	movs	r2, r4
 8004542:	2301      	movs	r3, #1
 8004544:	9901      	ldr	r1, [sp, #4]
 8004546:	9800      	ldr	r0, [sp, #0]
 8004548:	9f08      	ldr	r7, [sp, #32]
 800454a:	321a      	adds	r2, #26
 800454c:	47b8      	blx	r7
 800454e:	3001      	adds	r0, #1
 8004550:	d0e6      	beq.n	8004520 <_printf_common+0xa8>
 8004552:	3601      	adds	r6, #1
 8004554:	e7d1      	b.n	80044fa <_printf_common+0x82>
	...

08004558 <_printf_i>:
 8004558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800455a:	b08b      	sub	sp, #44	@ 0x2c
 800455c:	9206      	str	r2, [sp, #24]
 800455e:	000a      	movs	r2, r1
 8004560:	3243      	adds	r2, #67	@ 0x43
 8004562:	9307      	str	r3, [sp, #28]
 8004564:	9005      	str	r0, [sp, #20]
 8004566:	9203      	str	r2, [sp, #12]
 8004568:	7e0a      	ldrb	r2, [r1, #24]
 800456a:	000c      	movs	r4, r1
 800456c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800456e:	2a78      	cmp	r2, #120	@ 0x78
 8004570:	d809      	bhi.n	8004586 <_printf_i+0x2e>
 8004572:	2a62      	cmp	r2, #98	@ 0x62
 8004574:	d80b      	bhi.n	800458e <_printf_i+0x36>
 8004576:	2a00      	cmp	r2, #0
 8004578:	d100      	bne.n	800457c <_printf_i+0x24>
 800457a:	e0ba      	b.n	80046f2 <_printf_i+0x19a>
 800457c:	497a      	ldr	r1, [pc, #488]	@ (8004768 <_printf_i+0x210>)
 800457e:	9104      	str	r1, [sp, #16]
 8004580:	2a58      	cmp	r2, #88	@ 0x58
 8004582:	d100      	bne.n	8004586 <_printf_i+0x2e>
 8004584:	e08e      	b.n	80046a4 <_printf_i+0x14c>
 8004586:	0025      	movs	r5, r4
 8004588:	3542      	adds	r5, #66	@ 0x42
 800458a:	702a      	strb	r2, [r5, #0]
 800458c:	e022      	b.n	80045d4 <_printf_i+0x7c>
 800458e:	0010      	movs	r0, r2
 8004590:	3863      	subs	r0, #99	@ 0x63
 8004592:	2815      	cmp	r0, #21
 8004594:	d8f7      	bhi.n	8004586 <_printf_i+0x2e>
 8004596:	f7fb fdc1 	bl	800011c <__gnu_thumb1_case_shi>
 800459a:	0016      	.short	0x0016
 800459c:	fff6001f 	.word	0xfff6001f
 80045a0:	fff6fff6 	.word	0xfff6fff6
 80045a4:	001ffff6 	.word	0x001ffff6
 80045a8:	fff6fff6 	.word	0xfff6fff6
 80045ac:	fff6fff6 	.word	0xfff6fff6
 80045b0:	0036009f 	.word	0x0036009f
 80045b4:	fff6007e 	.word	0xfff6007e
 80045b8:	00b0fff6 	.word	0x00b0fff6
 80045bc:	0036fff6 	.word	0x0036fff6
 80045c0:	fff6fff6 	.word	0xfff6fff6
 80045c4:	0082      	.short	0x0082
 80045c6:	0025      	movs	r5, r4
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	3542      	adds	r5, #66	@ 0x42
 80045cc:	1d11      	adds	r1, r2, #4
 80045ce:	6019      	str	r1, [r3, #0]
 80045d0:	6813      	ldr	r3, [r2, #0]
 80045d2:	702b      	strb	r3, [r5, #0]
 80045d4:	2301      	movs	r3, #1
 80045d6:	e09e      	b.n	8004716 <_printf_i+0x1be>
 80045d8:	6818      	ldr	r0, [r3, #0]
 80045da:	6809      	ldr	r1, [r1, #0]
 80045dc:	1d02      	adds	r2, r0, #4
 80045de:	060d      	lsls	r5, r1, #24
 80045e0:	d50b      	bpl.n	80045fa <_printf_i+0xa2>
 80045e2:	6806      	ldr	r6, [r0, #0]
 80045e4:	601a      	str	r2, [r3, #0]
 80045e6:	2e00      	cmp	r6, #0
 80045e8:	da03      	bge.n	80045f2 <_printf_i+0x9a>
 80045ea:	232d      	movs	r3, #45	@ 0x2d
 80045ec:	9a03      	ldr	r2, [sp, #12]
 80045ee:	4276      	negs	r6, r6
 80045f0:	7013      	strb	r3, [r2, #0]
 80045f2:	4b5d      	ldr	r3, [pc, #372]	@ (8004768 <_printf_i+0x210>)
 80045f4:	270a      	movs	r7, #10
 80045f6:	9304      	str	r3, [sp, #16]
 80045f8:	e018      	b.n	800462c <_printf_i+0xd4>
 80045fa:	6806      	ldr	r6, [r0, #0]
 80045fc:	601a      	str	r2, [r3, #0]
 80045fe:	0649      	lsls	r1, r1, #25
 8004600:	d5f1      	bpl.n	80045e6 <_printf_i+0x8e>
 8004602:	b236      	sxth	r6, r6
 8004604:	e7ef      	b.n	80045e6 <_printf_i+0x8e>
 8004606:	6808      	ldr	r0, [r1, #0]
 8004608:	6819      	ldr	r1, [r3, #0]
 800460a:	c940      	ldmia	r1!, {r6}
 800460c:	0605      	lsls	r5, r0, #24
 800460e:	d402      	bmi.n	8004616 <_printf_i+0xbe>
 8004610:	0640      	lsls	r0, r0, #25
 8004612:	d500      	bpl.n	8004616 <_printf_i+0xbe>
 8004614:	b2b6      	uxth	r6, r6
 8004616:	6019      	str	r1, [r3, #0]
 8004618:	4b53      	ldr	r3, [pc, #332]	@ (8004768 <_printf_i+0x210>)
 800461a:	270a      	movs	r7, #10
 800461c:	9304      	str	r3, [sp, #16]
 800461e:	2a6f      	cmp	r2, #111	@ 0x6f
 8004620:	d100      	bne.n	8004624 <_printf_i+0xcc>
 8004622:	3f02      	subs	r7, #2
 8004624:	0023      	movs	r3, r4
 8004626:	2200      	movs	r2, #0
 8004628:	3343      	adds	r3, #67	@ 0x43
 800462a:	701a      	strb	r2, [r3, #0]
 800462c:	6863      	ldr	r3, [r4, #4]
 800462e:	60a3      	str	r3, [r4, #8]
 8004630:	2b00      	cmp	r3, #0
 8004632:	db06      	blt.n	8004642 <_printf_i+0xea>
 8004634:	2104      	movs	r1, #4
 8004636:	6822      	ldr	r2, [r4, #0]
 8004638:	9d03      	ldr	r5, [sp, #12]
 800463a:	438a      	bics	r2, r1
 800463c:	6022      	str	r2, [r4, #0]
 800463e:	4333      	orrs	r3, r6
 8004640:	d00c      	beq.n	800465c <_printf_i+0x104>
 8004642:	9d03      	ldr	r5, [sp, #12]
 8004644:	0030      	movs	r0, r6
 8004646:	0039      	movs	r1, r7
 8004648:	f7fb fdf8 	bl	800023c <__aeabi_uidivmod>
 800464c:	9b04      	ldr	r3, [sp, #16]
 800464e:	3d01      	subs	r5, #1
 8004650:	5c5b      	ldrb	r3, [r3, r1]
 8004652:	702b      	strb	r3, [r5, #0]
 8004654:	0033      	movs	r3, r6
 8004656:	0006      	movs	r6, r0
 8004658:	429f      	cmp	r7, r3
 800465a:	d9f3      	bls.n	8004644 <_printf_i+0xec>
 800465c:	2f08      	cmp	r7, #8
 800465e:	d109      	bne.n	8004674 <_printf_i+0x11c>
 8004660:	6823      	ldr	r3, [r4, #0]
 8004662:	07db      	lsls	r3, r3, #31
 8004664:	d506      	bpl.n	8004674 <_printf_i+0x11c>
 8004666:	6862      	ldr	r2, [r4, #4]
 8004668:	6923      	ldr	r3, [r4, #16]
 800466a:	429a      	cmp	r2, r3
 800466c:	dc02      	bgt.n	8004674 <_printf_i+0x11c>
 800466e:	2330      	movs	r3, #48	@ 0x30
 8004670:	3d01      	subs	r5, #1
 8004672:	702b      	strb	r3, [r5, #0]
 8004674:	9b03      	ldr	r3, [sp, #12]
 8004676:	1b5b      	subs	r3, r3, r5
 8004678:	6123      	str	r3, [r4, #16]
 800467a:	9b07      	ldr	r3, [sp, #28]
 800467c:	0021      	movs	r1, r4
 800467e:	9300      	str	r3, [sp, #0]
 8004680:	9805      	ldr	r0, [sp, #20]
 8004682:	9b06      	ldr	r3, [sp, #24]
 8004684:	aa09      	add	r2, sp, #36	@ 0x24
 8004686:	f7ff fef7 	bl	8004478 <_printf_common>
 800468a:	3001      	adds	r0, #1
 800468c:	d148      	bne.n	8004720 <_printf_i+0x1c8>
 800468e:	2001      	movs	r0, #1
 8004690:	4240      	negs	r0, r0
 8004692:	b00b      	add	sp, #44	@ 0x2c
 8004694:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004696:	2220      	movs	r2, #32
 8004698:	6809      	ldr	r1, [r1, #0]
 800469a:	430a      	orrs	r2, r1
 800469c:	6022      	str	r2, [r4, #0]
 800469e:	2278      	movs	r2, #120	@ 0x78
 80046a0:	4932      	ldr	r1, [pc, #200]	@ (800476c <_printf_i+0x214>)
 80046a2:	9104      	str	r1, [sp, #16]
 80046a4:	0021      	movs	r1, r4
 80046a6:	3145      	adds	r1, #69	@ 0x45
 80046a8:	700a      	strb	r2, [r1, #0]
 80046aa:	6819      	ldr	r1, [r3, #0]
 80046ac:	6822      	ldr	r2, [r4, #0]
 80046ae:	c940      	ldmia	r1!, {r6}
 80046b0:	0610      	lsls	r0, r2, #24
 80046b2:	d402      	bmi.n	80046ba <_printf_i+0x162>
 80046b4:	0650      	lsls	r0, r2, #25
 80046b6:	d500      	bpl.n	80046ba <_printf_i+0x162>
 80046b8:	b2b6      	uxth	r6, r6
 80046ba:	6019      	str	r1, [r3, #0]
 80046bc:	07d3      	lsls	r3, r2, #31
 80046be:	d502      	bpl.n	80046c6 <_printf_i+0x16e>
 80046c0:	2320      	movs	r3, #32
 80046c2:	4313      	orrs	r3, r2
 80046c4:	6023      	str	r3, [r4, #0]
 80046c6:	2e00      	cmp	r6, #0
 80046c8:	d001      	beq.n	80046ce <_printf_i+0x176>
 80046ca:	2710      	movs	r7, #16
 80046cc:	e7aa      	b.n	8004624 <_printf_i+0xcc>
 80046ce:	2220      	movs	r2, #32
 80046d0:	6823      	ldr	r3, [r4, #0]
 80046d2:	4393      	bics	r3, r2
 80046d4:	6023      	str	r3, [r4, #0]
 80046d6:	e7f8      	b.n	80046ca <_printf_i+0x172>
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	680d      	ldr	r5, [r1, #0]
 80046dc:	1d10      	adds	r0, r2, #4
 80046de:	6949      	ldr	r1, [r1, #20]
 80046e0:	6018      	str	r0, [r3, #0]
 80046e2:	6813      	ldr	r3, [r2, #0]
 80046e4:	062e      	lsls	r6, r5, #24
 80046e6:	d501      	bpl.n	80046ec <_printf_i+0x194>
 80046e8:	6019      	str	r1, [r3, #0]
 80046ea:	e002      	b.n	80046f2 <_printf_i+0x19a>
 80046ec:	066d      	lsls	r5, r5, #25
 80046ee:	d5fb      	bpl.n	80046e8 <_printf_i+0x190>
 80046f0:	8019      	strh	r1, [r3, #0]
 80046f2:	2300      	movs	r3, #0
 80046f4:	9d03      	ldr	r5, [sp, #12]
 80046f6:	6123      	str	r3, [r4, #16]
 80046f8:	e7bf      	b.n	800467a <_printf_i+0x122>
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	1d11      	adds	r1, r2, #4
 80046fe:	6019      	str	r1, [r3, #0]
 8004700:	6815      	ldr	r5, [r2, #0]
 8004702:	2100      	movs	r1, #0
 8004704:	0028      	movs	r0, r5
 8004706:	6862      	ldr	r2, [r4, #4]
 8004708:	f000 f856 	bl	80047b8 <memchr>
 800470c:	2800      	cmp	r0, #0
 800470e:	d001      	beq.n	8004714 <_printf_i+0x1bc>
 8004710:	1b40      	subs	r0, r0, r5
 8004712:	6060      	str	r0, [r4, #4]
 8004714:	6863      	ldr	r3, [r4, #4]
 8004716:	6123      	str	r3, [r4, #16]
 8004718:	2300      	movs	r3, #0
 800471a:	9a03      	ldr	r2, [sp, #12]
 800471c:	7013      	strb	r3, [r2, #0]
 800471e:	e7ac      	b.n	800467a <_printf_i+0x122>
 8004720:	002a      	movs	r2, r5
 8004722:	6923      	ldr	r3, [r4, #16]
 8004724:	9906      	ldr	r1, [sp, #24]
 8004726:	9805      	ldr	r0, [sp, #20]
 8004728:	9d07      	ldr	r5, [sp, #28]
 800472a:	47a8      	blx	r5
 800472c:	3001      	adds	r0, #1
 800472e:	d0ae      	beq.n	800468e <_printf_i+0x136>
 8004730:	6823      	ldr	r3, [r4, #0]
 8004732:	079b      	lsls	r3, r3, #30
 8004734:	d415      	bmi.n	8004762 <_printf_i+0x20a>
 8004736:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004738:	68e0      	ldr	r0, [r4, #12]
 800473a:	4298      	cmp	r0, r3
 800473c:	daa9      	bge.n	8004692 <_printf_i+0x13a>
 800473e:	0018      	movs	r0, r3
 8004740:	e7a7      	b.n	8004692 <_printf_i+0x13a>
 8004742:	0022      	movs	r2, r4
 8004744:	2301      	movs	r3, #1
 8004746:	9906      	ldr	r1, [sp, #24]
 8004748:	9805      	ldr	r0, [sp, #20]
 800474a:	9e07      	ldr	r6, [sp, #28]
 800474c:	3219      	adds	r2, #25
 800474e:	47b0      	blx	r6
 8004750:	3001      	adds	r0, #1
 8004752:	d09c      	beq.n	800468e <_printf_i+0x136>
 8004754:	3501      	adds	r5, #1
 8004756:	68e3      	ldr	r3, [r4, #12]
 8004758:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800475a:	1a9b      	subs	r3, r3, r2
 800475c:	42ab      	cmp	r3, r5
 800475e:	dcf0      	bgt.n	8004742 <_printf_i+0x1ea>
 8004760:	e7e9      	b.n	8004736 <_printf_i+0x1de>
 8004762:	2500      	movs	r5, #0
 8004764:	e7f7      	b.n	8004756 <_printf_i+0x1fe>
 8004766:	46c0      	nop			@ (mov r8, r8)
 8004768:	08004c66 	.word	0x08004c66
 800476c:	08004c77 	.word	0x08004c77

08004770 <memmove>:
 8004770:	b510      	push	{r4, lr}
 8004772:	4288      	cmp	r0, r1
 8004774:	d902      	bls.n	800477c <memmove+0xc>
 8004776:	188b      	adds	r3, r1, r2
 8004778:	4298      	cmp	r0, r3
 800477a:	d308      	bcc.n	800478e <memmove+0x1e>
 800477c:	2300      	movs	r3, #0
 800477e:	429a      	cmp	r2, r3
 8004780:	d007      	beq.n	8004792 <memmove+0x22>
 8004782:	5ccc      	ldrb	r4, [r1, r3]
 8004784:	54c4      	strb	r4, [r0, r3]
 8004786:	3301      	adds	r3, #1
 8004788:	e7f9      	b.n	800477e <memmove+0xe>
 800478a:	5c8b      	ldrb	r3, [r1, r2]
 800478c:	5483      	strb	r3, [r0, r2]
 800478e:	3a01      	subs	r2, #1
 8004790:	d2fb      	bcs.n	800478a <memmove+0x1a>
 8004792:	bd10      	pop	{r4, pc}

08004794 <_sbrk_r>:
 8004794:	2300      	movs	r3, #0
 8004796:	b570      	push	{r4, r5, r6, lr}
 8004798:	4d06      	ldr	r5, [pc, #24]	@ (80047b4 <_sbrk_r+0x20>)
 800479a:	0004      	movs	r4, r0
 800479c:	0008      	movs	r0, r1
 800479e:	602b      	str	r3, [r5, #0]
 80047a0:	f7fc feb4 	bl	800150c <_sbrk>
 80047a4:	1c43      	adds	r3, r0, #1
 80047a6:	d103      	bne.n	80047b0 <_sbrk_r+0x1c>
 80047a8:	682b      	ldr	r3, [r5, #0]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d000      	beq.n	80047b0 <_sbrk_r+0x1c>
 80047ae:	6023      	str	r3, [r4, #0]
 80047b0:	bd70      	pop	{r4, r5, r6, pc}
 80047b2:	46c0      	nop			@ (mov r8, r8)
 80047b4:	200006e4 	.word	0x200006e4

080047b8 <memchr>:
 80047b8:	b2c9      	uxtb	r1, r1
 80047ba:	1882      	adds	r2, r0, r2
 80047bc:	4290      	cmp	r0, r2
 80047be:	d101      	bne.n	80047c4 <memchr+0xc>
 80047c0:	2000      	movs	r0, #0
 80047c2:	4770      	bx	lr
 80047c4:	7803      	ldrb	r3, [r0, #0]
 80047c6:	428b      	cmp	r3, r1
 80047c8:	d0fb      	beq.n	80047c2 <memchr+0xa>
 80047ca:	3001      	adds	r0, #1
 80047cc:	e7f6      	b.n	80047bc <memchr+0x4>

080047ce <memcpy>:
 80047ce:	2300      	movs	r3, #0
 80047d0:	b510      	push	{r4, lr}
 80047d2:	429a      	cmp	r2, r3
 80047d4:	d100      	bne.n	80047d8 <memcpy+0xa>
 80047d6:	bd10      	pop	{r4, pc}
 80047d8:	5ccc      	ldrb	r4, [r1, r3]
 80047da:	54c4      	strb	r4, [r0, r3]
 80047dc:	3301      	adds	r3, #1
 80047de:	e7f8      	b.n	80047d2 <memcpy+0x4>

080047e0 <_realloc_r>:
 80047e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80047e2:	0006      	movs	r6, r0
 80047e4:	000c      	movs	r4, r1
 80047e6:	0015      	movs	r5, r2
 80047e8:	2900      	cmp	r1, #0
 80047ea:	d105      	bne.n	80047f8 <_realloc_r+0x18>
 80047ec:	0011      	movs	r1, r2
 80047ee:	f7ff fc55 	bl	800409c <_malloc_r>
 80047f2:	0004      	movs	r4, r0
 80047f4:	0020      	movs	r0, r4
 80047f6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80047f8:	2a00      	cmp	r2, #0
 80047fa:	d103      	bne.n	8004804 <_realloc_r+0x24>
 80047fc:	f7ff fbe2 	bl	8003fc4 <_free_r>
 8004800:	002c      	movs	r4, r5
 8004802:	e7f7      	b.n	80047f4 <_realloc_r+0x14>
 8004804:	f000 f81c 	bl	8004840 <_malloc_usable_size_r>
 8004808:	0007      	movs	r7, r0
 800480a:	4285      	cmp	r5, r0
 800480c:	d802      	bhi.n	8004814 <_realloc_r+0x34>
 800480e:	0843      	lsrs	r3, r0, #1
 8004810:	42ab      	cmp	r3, r5
 8004812:	d3ef      	bcc.n	80047f4 <_realloc_r+0x14>
 8004814:	0029      	movs	r1, r5
 8004816:	0030      	movs	r0, r6
 8004818:	f7ff fc40 	bl	800409c <_malloc_r>
 800481c:	9001      	str	r0, [sp, #4]
 800481e:	2800      	cmp	r0, #0
 8004820:	d101      	bne.n	8004826 <_realloc_r+0x46>
 8004822:	9c01      	ldr	r4, [sp, #4]
 8004824:	e7e6      	b.n	80047f4 <_realloc_r+0x14>
 8004826:	002a      	movs	r2, r5
 8004828:	42bd      	cmp	r5, r7
 800482a:	d900      	bls.n	800482e <_realloc_r+0x4e>
 800482c:	003a      	movs	r2, r7
 800482e:	0021      	movs	r1, r4
 8004830:	9801      	ldr	r0, [sp, #4]
 8004832:	f7ff ffcc 	bl	80047ce <memcpy>
 8004836:	0021      	movs	r1, r4
 8004838:	0030      	movs	r0, r6
 800483a:	f7ff fbc3 	bl	8003fc4 <_free_r>
 800483e:	e7f0      	b.n	8004822 <_realloc_r+0x42>

08004840 <_malloc_usable_size_r>:
 8004840:	1f0b      	subs	r3, r1, #4
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	1f18      	subs	r0, r3, #4
 8004846:	2b00      	cmp	r3, #0
 8004848:	da01      	bge.n	800484e <_malloc_usable_size_r+0xe>
 800484a:	580b      	ldr	r3, [r1, r0]
 800484c:	18c0      	adds	r0, r0, r3
 800484e:	4770      	bx	lr

08004850 <_init>:
 8004850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004852:	46c0      	nop			@ (mov r8, r8)
 8004854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004856:	bc08      	pop	{r3}
 8004858:	469e      	mov	lr, r3
 800485a:	4770      	bx	lr

0800485c <_fini>:
 800485c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800485e:	46c0      	nop			@ (mov r8, r8)
 8004860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004862:	bc08      	pop	{r3}
 8004864:	469e      	mov	lr, r3
 8004866:	4770      	bx	lr
