
stm32c0_rtc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004784  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000041c  08004844  08004844  00005844  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c60  08004c60  00006060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08004c60  08004c60  00006060  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08004c60  08004c60  00006060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c60  08004c60  00005c60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004c64  08004c64  00005c64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08004c68  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000694  20000060  08004cc8  00006060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006f4  08004cc8  000066f4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00006060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cf3e  00000000  00000000  00006088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000403c  00000000  00000000  00022fc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0000cd6a  00000000  00000000  00027002  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001208  00000000  00000000  00033d70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f3d  00000000  00000000  00034f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000197c7  00000000  00000000  00035eb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00021b52  00000000  00000000  0004f67c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00092bae  00000000  00000000  000711ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00103d7c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003498  00000000  00000000  00103dc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000051  00000000  00000000  00107258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000060 	.word	0x20000060
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800482c 	.word	0x0800482c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000064 	.word	0x20000064
 8000104:	0800482c 	.word	0x0800482c

08000108 <strcmp>:
 8000108:	7802      	ldrb	r2, [r0, #0]
 800010a:	780b      	ldrb	r3, [r1, #0]
 800010c:	2a00      	cmp	r2, #0
 800010e:	d003      	beq.n	8000118 <strcmp+0x10>
 8000110:	3001      	adds	r0, #1
 8000112:	3101      	adds	r1, #1
 8000114:	429a      	cmp	r2, r3
 8000116:	d0f7      	beq.n	8000108 <strcmp>
 8000118:	1ad0      	subs	r0, r2, r3
 800011a:	4770      	bx	lr

0800011c <__gnu_thumb1_case_shi>:
 800011c:	b403      	push	{r0, r1}
 800011e:	4671      	mov	r1, lr
 8000120:	0849      	lsrs	r1, r1, #1
 8000122:	0040      	lsls	r0, r0, #1
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	5e09      	ldrsh	r1, [r1, r0]
 8000128:	0049      	lsls	r1, r1, #1
 800012a:	448e      	add	lr, r1
 800012c:	bc03      	pop	{r0, r1}
 800012e:	4770      	bx	lr

08000130 <__udivsi3>:
 8000130:	2200      	movs	r2, #0
 8000132:	0843      	lsrs	r3, r0, #1
 8000134:	428b      	cmp	r3, r1
 8000136:	d374      	bcc.n	8000222 <__udivsi3+0xf2>
 8000138:	0903      	lsrs	r3, r0, #4
 800013a:	428b      	cmp	r3, r1
 800013c:	d35f      	bcc.n	80001fe <__udivsi3+0xce>
 800013e:	0a03      	lsrs	r3, r0, #8
 8000140:	428b      	cmp	r3, r1
 8000142:	d344      	bcc.n	80001ce <__udivsi3+0x9e>
 8000144:	0b03      	lsrs	r3, r0, #12
 8000146:	428b      	cmp	r3, r1
 8000148:	d328      	bcc.n	800019c <__udivsi3+0x6c>
 800014a:	0c03      	lsrs	r3, r0, #16
 800014c:	428b      	cmp	r3, r1
 800014e:	d30d      	bcc.n	800016c <__udivsi3+0x3c>
 8000150:	22ff      	movs	r2, #255	@ 0xff
 8000152:	0209      	lsls	r1, r1, #8
 8000154:	ba12      	rev	r2, r2
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d302      	bcc.n	8000162 <__udivsi3+0x32>
 800015c:	1212      	asrs	r2, r2, #8
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	d065      	beq.n	800022e <__udivsi3+0xfe>
 8000162:	0b03      	lsrs	r3, r0, #12
 8000164:	428b      	cmp	r3, r1
 8000166:	d319      	bcc.n	800019c <__udivsi3+0x6c>
 8000168:	e000      	b.n	800016c <__udivsi3+0x3c>
 800016a:	0a09      	lsrs	r1, r1, #8
 800016c:	0bc3      	lsrs	r3, r0, #15
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x46>
 8000172:	03cb      	lsls	r3, r1, #15
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b83      	lsrs	r3, r0, #14
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x52>
 800017e:	038b      	lsls	r3, r1, #14
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b43      	lsrs	r3, r0, #13
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x5e>
 800018a:	034b      	lsls	r3, r1, #13
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b03      	lsrs	r3, r0, #12
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x6a>
 8000196:	030b      	lsls	r3, r1, #12
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0ac3      	lsrs	r3, r0, #11
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x76>
 80001a2:	02cb      	lsls	r3, r1, #11
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a83      	lsrs	r3, r0, #10
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x82>
 80001ae:	028b      	lsls	r3, r1, #10
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a43      	lsrs	r3, r0, #9
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x8e>
 80001ba:	024b      	lsls	r3, r1, #9
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a03      	lsrs	r3, r0, #8
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x9a>
 80001c6:	020b      	lsls	r3, r1, #8
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	d2cd      	bcs.n	800016a <__udivsi3+0x3a>
 80001ce:	09c3      	lsrs	r3, r0, #7
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xa8>
 80001d4:	01cb      	lsls	r3, r1, #7
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0983      	lsrs	r3, r0, #6
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xb4>
 80001e0:	018b      	lsls	r3, r1, #6
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0943      	lsrs	r3, r0, #5
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xc0>
 80001ec:	014b      	lsls	r3, r1, #5
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0903      	lsrs	r3, r0, #4
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xcc>
 80001f8:	010b      	lsls	r3, r1, #4
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	08c3      	lsrs	r3, r0, #3
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xd8>
 8000204:	00cb      	lsls	r3, r1, #3
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0883      	lsrs	r3, r0, #2
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xe4>
 8000210:	008b      	lsls	r3, r1, #2
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0843      	lsrs	r3, r0, #1
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xf0>
 800021c:	004b      	lsls	r3, r1, #1
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	1a41      	subs	r1, r0, r1
 8000224:	d200      	bcs.n	8000228 <__udivsi3+0xf8>
 8000226:	4601      	mov	r1, r0
 8000228:	4152      	adcs	r2, r2
 800022a:	4610      	mov	r0, r2
 800022c:	4770      	bx	lr
 800022e:	e7ff      	b.n	8000230 <__udivsi3+0x100>
 8000230:	b501      	push	{r0, lr}
 8000232:	2000      	movs	r0, #0
 8000234:	f000 f8f0 	bl	8000418 <__aeabi_idiv0>
 8000238:	bd02      	pop	{r1, pc}
 800023a:	46c0      	nop			@ (mov r8, r8)

0800023c <__aeabi_uidivmod>:
 800023c:	2900      	cmp	r1, #0
 800023e:	d0f7      	beq.n	8000230 <__udivsi3+0x100>
 8000240:	e776      	b.n	8000130 <__udivsi3>
 8000242:	4770      	bx	lr

08000244 <__divsi3>:
 8000244:	4603      	mov	r3, r0
 8000246:	430b      	orrs	r3, r1
 8000248:	d47f      	bmi.n	800034a <__divsi3+0x106>
 800024a:	2200      	movs	r2, #0
 800024c:	0843      	lsrs	r3, r0, #1
 800024e:	428b      	cmp	r3, r1
 8000250:	d374      	bcc.n	800033c <__divsi3+0xf8>
 8000252:	0903      	lsrs	r3, r0, #4
 8000254:	428b      	cmp	r3, r1
 8000256:	d35f      	bcc.n	8000318 <__divsi3+0xd4>
 8000258:	0a03      	lsrs	r3, r0, #8
 800025a:	428b      	cmp	r3, r1
 800025c:	d344      	bcc.n	80002e8 <__divsi3+0xa4>
 800025e:	0b03      	lsrs	r3, r0, #12
 8000260:	428b      	cmp	r3, r1
 8000262:	d328      	bcc.n	80002b6 <__divsi3+0x72>
 8000264:	0c03      	lsrs	r3, r0, #16
 8000266:	428b      	cmp	r3, r1
 8000268:	d30d      	bcc.n	8000286 <__divsi3+0x42>
 800026a:	22ff      	movs	r2, #255	@ 0xff
 800026c:	0209      	lsls	r1, r1, #8
 800026e:	ba12      	rev	r2, r2
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d302      	bcc.n	800027c <__divsi3+0x38>
 8000276:	1212      	asrs	r2, r2, #8
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	d065      	beq.n	8000348 <__divsi3+0x104>
 800027c:	0b03      	lsrs	r3, r0, #12
 800027e:	428b      	cmp	r3, r1
 8000280:	d319      	bcc.n	80002b6 <__divsi3+0x72>
 8000282:	e000      	b.n	8000286 <__divsi3+0x42>
 8000284:	0a09      	lsrs	r1, r1, #8
 8000286:	0bc3      	lsrs	r3, r0, #15
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x4c>
 800028c:	03cb      	lsls	r3, r1, #15
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b83      	lsrs	r3, r0, #14
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x58>
 8000298:	038b      	lsls	r3, r1, #14
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b43      	lsrs	r3, r0, #13
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x64>
 80002a4:	034b      	lsls	r3, r1, #13
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b03      	lsrs	r3, r0, #12
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x70>
 80002b0:	030b      	lsls	r3, r1, #12
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0ac3      	lsrs	r3, r0, #11
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x7c>
 80002bc:	02cb      	lsls	r3, r1, #11
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a83      	lsrs	r3, r0, #10
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x88>
 80002c8:	028b      	lsls	r3, r1, #10
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a43      	lsrs	r3, r0, #9
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x94>
 80002d4:	024b      	lsls	r3, r1, #9
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a03      	lsrs	r3, r0, #8
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0xa0>
 80002e0:	020b      	lsls	r3, r1, #8
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	d2cd      	bcs.n	8000284 <__divsi3+0x40>
 80002e8:	09c3      	lsrs	r3, r0, #7
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xae>
 80002ee:	01cb      	lsls	r3, r1, #7
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0983      	lsrs	r3, r0, #6
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xba>
 80002fa:	018b      	lsls	r3, r1, #6
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0943      	lsrs	r3, r0, #5
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xc6>
 8000306:	014b      	lsls	r3, r1, #5
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0903      	lsrs	r3, r0, #4
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xd2>
 8000312:	010b      	lsls	r3, r1, #4
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	08c3      	lsrs	r3, r0, #3
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xde>
 800031e:	00cb      	lsls	r3, r1, #3
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	0883      	lsrs	r3, r0, #2
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xea>
 800032a:	008b      	lsls	r3, r1, #2
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0843      	lsrs	r3, r0, #1
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xf6>
 8000336:	004b      	lsls	r3, r1, #1
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	1a41      	subs	r1, r0, r1
 800033e:	d200      	bcs.n	8000342 <__divsi3+0xfe>
 8000340:	4601      	mov	r1, r0
 8000342:	4152      	adcs	r2, r2
 8000344:	4610      	mov	r0, r2
 8000346:	4770      	bx	lr
 8000348:	e05d      	b.n	8000406 <__divsi3+0x1c2>
 800034a:	0fca      	lsrs	r2, r1, #31
 800034c:	d000      	beq.n	8000350 <__divsi3+0x10c>
 800034e:	4249      	negs	r1, r1
 8000350:	1003      	asrs	r3, r0, #32
 8000352:	d300      	bcc.n	8000356 <__divsi3+0x112>
 8000354:	4240      	negs	r0, r0
 8000356:	4053      	eors	r3, r2
 8000358:	2200      	movs	r2, #0
 800035a:	469c      	mov	ip, r3
 800035c:	0903      	lsrs	r3, r0, #4
 800035e:	428b      	cmp	r3, r1
 8000360:	d32d      	bcc.n	80003be <__divsi3+0x17a>
 8000362:	0a03      	lsrs	r3, r0, #8
 8000364:	428b      	cmp	r3, r1
 8000366:	d312      	bcc.n	800038e <__divsi3+0x14a>
 8000368:	22fc      	movs	r2, #252	@ 0xfc
 800036a:	0189      	lsls	r1, r1, #6
 800036c:	ba12      	rev	r2, r2
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d30c      	bcc.n	800038e <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d308      	bcc.n	800038e <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	1192      	asrs	r2, r2, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d304      	bcc.n	800038e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	d03a      	beq.n	80003fe <__divsi3+0x1ba>
 8000388:	1192      	asrs	r2, r2, #6
 800038a:	e000      	b.n	800038e <__divsi3+0x14a>
 800038c:	0989      	lsrs	r1, r1, #6
 800038e:	09c3      	lsrs	r3, r0, #7
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x154>
 8000394:	01cb      	lsls	r3, r1, #7
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0983      	lsrs	r3, r0, #6
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x160>
 80003a0:	018b      	lsls	r3, r1, #6
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0943      	lsrs	r3, r0, #5
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x16c>
 80003ac:	014b      	lsls	r3, r1, #5
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0903      	lsrs	r3, r0, #4
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x178>
 80003b8:	010b      	lsls	r3, r1, #4
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	08c3      	lsrs	r3, r0, #3
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x184>
 80003c4:	00cb      	lsls	r3, r1, #3
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	0883      	lsrs	r3, r0, #2
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x190>
 80003d0:	008b      	lsls	r3, r1, #2
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	d2d9      	bcs.n	800038c <__divsi3+0x148>
 80003d8:	0843      	lsrs	r3, r0, #1
 80003da:	428b      	cmp	r3, r1
 80003dc:	d301      	bcc.n	80003e2 <__divsi3+0x19e>
 80003de:	004b      	lsls	r3, r1, #1
 80003e0:	1ac0      	subs	r0, r0, r3
 80003e2:	4152      	adcs	r2, r2
 80003e4:	1a41      	subs	r1, r0, r1
 80003e6:	d200      	bcs.n	80003ea <__divsi3+0x1a6>
 80003e8:	4601      	mov	r1, r0
 80003ea:	4663      	mov	r3, ip
 80003ec:	4152      	adcs	r2, r2
 80003ee:	105b      	asrs	r3, r3, #1
 80003f0:	4610      	mov	r0, r2
 80003f2:	d301      	bcc.n	80003f8 <__divsi3+0x1b4>
 80003f4:	4240      	negs	r0, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d500      	bpl.n	80003fc <__divsi3+0x1b8>
 80003fa:	4249      	negs	r1, r1
 80003fc:	4770      	bx	lr
 80003fe:	4663      	mov	r3, ip
 8000400:	105b      	asrs	r3, r3, #1
 8000402:	d300      	bcc.n	8000406 <__divsi3+0x1c2>
 8000404:	4240      	negs	r0, r0
 8000406:	b501      	push	{r0, lr}
 8000408:	2000      	movs	r0, #0
 800040a:	f000 f805 	bl	8000418 <__aeabi_idiv0>
 800040e:	bd02      	pop	{r1, pc}

08000410 <__aeabi_idivmod>:
 8000410:	2900      	cmp	r1, #0
 8000412:	d0f8      	beq.n	8000406 <__divsi3+0x1c2>
 8000414:	e716      	b.n	8000244 <__divsi3>
 8000416:	4770      	bx	lr

08000418 <__aeabi_idiv0>:
 8000418:	4770      	bx	lr
 800041a:	46c0      	nop			@ (mov r8, r8)

0800041c <ledISR>:


static void infoCli(uint8_t argc, const char **argv);

void ledISR(void *arg)
{
 800041c:	b510      	push	{r4, lr}
  ledToggle(_DEF_CH1);
 800041e:	2000      	movs	r0, #0
 8000420:	f000 fa12 	bl	8000848 <ledToggle>
}
 8000424:	bd10      	pop	{r4, pc}
	...

08000428 <infoCli>:
}



void infoCli(uint8_t argc, const char **argv)
{
 8000428:	b5f0      	push	{r4, r5, r6, r7, lr}
 800042a:	46c6      	mov	lr, r8
 800042c:	b500      	push	{lr}
 800042e:	0004      	movs	r4, r0
 8000430:	000d      	movs	r5, r1
  bool ret = false;

  if(argc == 1 && cliIsStr(argv[0],"test"))
 8000432:	2801      	cmp	r0, #1
 8000434:	d009      	beq.n	800044a <infoCli+0x22>
  bool ret = false;
 8000436:	2600      	movs	r6, #0
  {
    cliPrintf("infoCli run test \n");
    ret = true;
  }

  if(argc == 2 && cliIsStr(argv[0],"print"))
 8000438:	2c02      	cmp	r4, #2
 800043a:	d010      	beq.n	800045e <infoCli+0x36>
      cliPrintf("print %d/%d\n",i+1,count);
    }
    ret = true;
  }

  if(argc ==1 && cliIsStr(argv[0],"button"))
 800043c:	2c01      	cmp	r4, #1
 800043e:	d026      	beq.n	800048e <infoCli+0x66>
      delay(100);
    }
    ret = true;
  }

  if(ret == false)
 8000440:	2e00      	cmp	r6, #0
 8000442:	d044      	beq.n	80004ce <infoCli+0xa6>
  {
    cliPrintf("info test\n");
    cliPrintf("info print 0~10\n");
    cliPrintf("info button\n");
  }
}
 8000444:	bc80      	pop	{r7}
 8000446:	46b8      	mov	r8, r7
 8000448:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(argc == 1 && cliIsStr(argv[0],"test"))
 800044a:	4926      	ldr	r1, [pc, #152]	@ (80004e4 <infoCli+0xbc>)
 800044c:	6828      	ldr	r0, [r5, #0]
 800044e:	f000 f94b 	bl	80006e8 <cliIsStr>
 8000452:	1e06      	subs	r6, r0, #0
 8000454:	d0f0      	beq.n	8000438 <infoCli+0x10>
    cliPrintf("infoCli run test \n");
 8000456:	4824      	ldr	r0, [pc, #144]	@ (80004e8 <infoCli+0xc0>)
 8000458:	f000 f918 	bl	800068c <cliPrintf>
    ret = true;
 800045c:	e7ec      	b.n	8000438 <infoCli+0x10>
  if(argc == 2 && cliIsStr(argv[0],"print"))
 800045e:	4923      	ldr	r1, [pc, #140]	@ (80004ec <infoCli+0xc4>)
 8000460:	6828      	ldr	r0, [r5, #0]
 8000462:	f000 f941 	bl	80006e8 <cliIsStr>
 8000466:	4680      	mov	r8, r0
 8000468:	2800      	cmp	r0, #0
 800046a:	d0e7      	beq.n	800043c <infoCli+0x14>
    count = (uint8_t)cliGetData(argv[1]);
 800046c:	6868      	ldr	r0, [r5, #4]
 800046e:	f000 f944 	bl	80006fa <cliGetData>
 8000472:	0007      	movs	r7, r0
    for(int i=0;i<count;i++)
 8000474:	2600      	movs	r6, #0
 8000476:	e004      	b.n	8000482 <infoCli+0x5a>
      cliPrintf("print %d/%d\n",i+1,count);
 8000478:	3601      	adds	r6, #1
 800047a:	481d      	ldr	r0, [pc, #116]	@ (80004f0 <infoCli+0xc8>)
 800047c:	0031      	movs	r1, r6
 800047e:	f000 f905 	bl	800068c <cliPrintf>
    for(int i=0;i<count;i++)
 8000482:	22ff      	movs	r2, #255	@ 0xff
 8000484:	403a      	ands	r2, r7
 8000486:	4296      	cmp	r6, r2
 8000488:	dbf6      	blt.n	8000478 <infoCli+0x50>
    ret = true;
 800048a:	4646      	mov	r6, r8
 800048c:	e7d6      	b.n	800043c <infoCli+0x14>
  if(argc ==1 && cliIsStr(argv[0],"button"))
 800048e:	4919      	ldr	r1, [pc, #100]	@ (80004f4 <infoCli+0xcc>)
 8000490:	6828      	ldr	r0, [r5, #0]
 8000492:	f000 f929 	bl	80006e8 <cliIsStr>
 8000496:	1e05      	subs	r5, r0, #0
 8000498:	d111      	bne.n	80004be <infoCli+0x96>
 800049a:	e7d1      	b.n	8000440 <infoCli+0x18>
        cliPrintf("%d", buttonGetPressed(i));
 800049c:	b2e0      	uxtb	r0, r4
 800049e:	f000 f89f 	bl	80005e0 <buttonGetPressed>
 80004a2:	0001      	movs	r1, r0
 80004a4:	4b14      	ldr	r3, [pc, #80]	@ (80004f8 <infoCli+0xd0>)
 80004a6:	0018      	movs	r0, r3
 80004a8:	f000 f8f0 	bl	800068c <cliPrintf>
      for(int i=0;i<BUTTON_MAX_CH;i++)
 80004ac:	3401      	adds	r4, #1
 80004ae:	2c04      	cmp	r4, #4
 80004b0:	ddf4      	ble.n	800049c <infoCli+0x74>
      cliPrintf("\n");
 80004b2:	4812      	ldr	r0, [pc, #72]	@ (80004fc <infoCli+0xd4>)
 80004b4:	f000 f8ea 	bl	800068c <cliPrintf>
      delay(100);
 80004b8:	2064      	movs	r0, #100	@ 0x64
 80004ba:	f000 fc60 	bl	8000d7e <delay>
    while(cliKeepLoop())
 80004be:	f000 f922 	bl	8000706 <cliKeepLoop>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	d001      	beq.n	80004ca <infoCli+0xa2>
      for(int i=0;i<BUTTON_MAX_CH;i++)
 80004c6:	2400      	movs	r4, #0
 80004c8:	e7f1      	b.n	80004ae <infoCli+0x86>
    ret = true;
 80004ca:	002e      	movs	r6, r5
 80004cc:	e7b8      	b.n	8000440 <infoCli+0x18>
    cliPrintf("info test\n");
 80004ce:	480c      	ldr	r0, [pc, #48]	@ (8000500 <infoCli+0xd8>)
 80004d0:	f000 f8dc 	bl	800068c <cliPrintf>
    cliPrintf("info print 0~10\n");
 80004d4:	480b      	ldr	r0, [pc, #44]	@ (8000504 <infoCli+0xdc>)
 80004d6:	f000 f8d9 	bl	800068c <cliPrintf>
    cliPrintf("info button\n");
 80004da:	480b      	ldr	r0, [pc, #44]	@ (8000508 <infoCli+0xe0>)
 80004dc:	f000 f8d6 	bl	800068c <cliPrintf>
}
 80004e0:	e7b0      	b.n	8000444 <infoCli+0x1c>
 80004e2:	46c0      	nop			@ (mov r8, r8)
 80004e4:	08004844 	.word	0x08004844
 80004e8:	0800484c 	.word	0x0800484c
 80004ec:	08004860 	.word	0x08004860
 80004f0:	08004868 	.word	0x08004868
 80004f4:	08004878 	.word	0x08004878
 80004f8:	08004880 	.word	0x08004880
 80004fc:	08004884 	.word	0x08004884
 8000500:	08004888 	.word	0x08004888
 8000504:	08004894 	.word	0x08004894
 8000508:	080048a8 	.word	0x080048a8

0800050c <apInit>:
{
 800050c:	b510      	push	{r4, lr}
 800050e:	b084      	sub	sp, #16
  cliInit();
 8000510:	f000 f8a2 	bl	8000658 <cliInit>
  swtimerInit();
 8000514:	f000 fb12 	bl	8000b3c <swtimerInit>
  rtcInit();
 8000518:	f000 f9cc 	bl	80008b4 <rtcInit>
  ledInit();
 800051c:	f000 f97c 	bl	8000818 <ledInit>
  pwmInit();
 8000520:	f000 f9aa 	bl	8000878 <pwmInit>
  adcInit();
 8000524:	f000 f83a 	bl	800059c <adcInit>
  buttonInit();
 8000528:	f000 f858 	bl	80005dc <buttonInit>
  uartInit();
 800052c:	f000 fb9e 	bl	8000c6c <uartInit>
  cliAdd("info", infoCli);
 8000530:	490d      	ldr	r1, [pc, #52]	@ (8000568 <apInit+0x5c>)
 8000532:	480e      	ldr	r0, [pc, #56]	@ (800056c <apInit+0x60>)
 8000534:	f000 f870 	bl	8000618 <cliAdd>
  if(swtimerGetCh(&timer_ch)== true)
 8000538:	200f      	movs	r0, #15
 800053a:	4468      	add	r0, sp
 800053c:	f000 fb18 	bl	8000b70 <swtimerGetCh>
 8000540:	2800      	cmp	r0, #0
 8000542:	d101      	bne.n	8000548 <apInit+0x3c>
}
 8000544:	b004      	add	sp, #16
 8000546:	bd10      	pop	{r4, pc}
    swtimerSet(timer_ch,
 8000548:	4909      	ldr	r1, [pc, #36]	@ (8000570 <apInit+0x64>)
 800054a:	240f      	movs	r4, #15
 800054c:	446c      	add	r4, sp
 800054e:	7820      	ldrb	r0, [r4, #0]
 8000550:	23fa      	movs	r3, #250	@ 0xfa
 8000552:	005b      	lsls	r3, r3, #1
 8000554:	9300      	str	r3, [sp, #0]
 8000556:	2300      	movs	r3, #0
 8000558:	2200      	movs	r2, #0
 800055a:	f000 fb17 	bl	8000b8c <swtimerSet>
    swtimerStart(timer_ch);
 800055e:	7820      	ldrb	r0, [r4, #0]
 8000560:	f000 fb2c 	bl	8000bbc <swtimerStart>
}
 8000564:	e7ee      	b.n	8000544 <apInit+0x38>
 8000566:	46c0      	nop			@ (mov r8, r8)
 8000568:	08000429 	.word	0x08000429
 800056c:	080048b8 	.word	0x080048b8
 8000570:	0800041d 	.word	0x0800041d

08000574 <apMain>:
{
 8000574:	b510      	push	{r4, lr}
  ledSetDuty(_DEF_CH1, 100);
 8000576:	2164      	movs	r1, #100	@ 0x64
 8000578:	2000      	movs	r0, #0
 800057a:	f000 f975 	bl	8000868 <ledSetDuty>
  uint32_t pre_time = 0;
 800057e:	2400      	movs	r4, #0
 8000580:	e004      	b.n	800058c <apMain+0x18>
      pre_time = millis();
 8000582:	f000 fc00 	bl	8000d86 <millis>
 8000586:	0004      	movs	r4, r0
    cliMain();
 8000588:	f000 f8c8 	bl	800071c <cliMain>
    if(millis()-pre_time >= 500)
 800058c:	f000 fbfb 	bl	8000d86 <millis>
 8000590:	1b00      	subs	r0, r0, r4
 8000592:	22fa      	movs	r2, #250	@ 0xfa
 8000594:	0052      	lsls	r2, r2, #1
 8000596:	4290      	cmp	r0, r2
 8000598:	d2f3      	bcs.n	8000582 <apMain+0xe>
 800059a:	e7f5      	b.n	8000588 <apMain+0x14>

0800059c <adcInit>:

uint16_t adc_data[3];
//uint32_t adc_time;

bool adcInit(void)
{
 800059c:	b510      	push	{r4, lr}
  HAL_ADCEx_Calibration_Start(&hadc1);
 800059e:	4c05      	ldr	r4, [pc, #20]	@ (80005b4 <adcInit+0x18>)
 80005a0:	0020      	movs	r0, r4
 80005a2:	f001 fc19 	bl	8001dd8 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1,(uint32_t *)&adc_data,3);
 80005a6:	4904      	ldr	r1, [pc, #16]	@ (80005b8 <adcInit+0x1c>)
 80005a8:	2203      	movs	r2, #3
 80005aa:	0020      	movs	r0, r4
 80005ac:	f001 fb70 	bl	8001c90 <HAL_ADC_Start_DMA>

  return true;
}
 80005b0:	2001      	movs	r0, #1
 80005b2:	bd10      	pop	{r4, pc}
 80005b4:	20000540 	.word	0x20000540
 80005b8:	2000007c 	.word	0x2000007c

080005bc <adcRead>:
uint16_t adcRead(uint8_t ch)
{
  uint16_t ret = 0;


  ret = adc_data[ch];
 80005bc:	4b01      	ldr	r3, [pc, #4]	@ (80005c4 <adcRead+0x8>)
 80005be:	0040      	lsls	r0, r0, #1
 80005c0:	5ac0      	ldrh	r0, [r0, r3]


  return ret;

}
 80005c2:	4770      	bx	lr
 80005c4:	2000007c 	.word	0x2000007c

080005c8 <adcReadVoltage>:
uint32_t adcReadVoltage(uint8_t ch)
{
 80005c8:	b510      	push	{r4, lr}

  uint32_t ret;
  uint32_t adc_data;
  adc_data = adcRead(ch);
 80005ca:	f7ff fff7 	bl	80005bc <adcRead>


  ret = (330 *adc_data)/ 4096;
 80005ce:	0083      	lsls	r3, r0, #2
 80005d0:	1818      	adds	r0, r3, r0
 80005d2:	0143      	lsls	r3, r0, #5
 80005d4:	18c0      	adds	r0, r0, r3
 80005d6:	0040      	lsls	r0, r0, #1
 80005d8:	0b00      	lsrs	r0, r0, #12

  return ret;
}
 80005da:	bd10      	pop	{r4, pc}

080005dc <buttonInit>:


bool buttonInit(void)
{
  return true;
}
 80005dc:	2001      	movs	r0, #1
 80005de:	4770      	bx	lr

080005e0 <buttonGetPressed>:

bool buttonGetPressed(uint8_t ch)
{
 80005e0:	b510      	push	{r4, lr}
 80005e2:	0004      	movs	r4, r0
  bool ret = false;
  uint32_t adc_voltage;

  if(ch>=BUTTON_MAX_CH)
 80005e4:	2804      	cmp	r0, #4
 80005e6:	d901      	bls.n	80005ec <buttonGetPressed+0xc>
    return false;
 80005e8:	2000      	movs	r0, #0
      ret = true;
  }


  return ret;
}
 80005ea:	bd10      	pop	{r4, pc}
  adc_voltage = adcReadVoltage(adc_ch);
 80005ec:	2000      	movs	r0, #0
 80005ee:	f7ff ffeb 	bl	80005c8 <adcReadVoltage>
  if(adc_voltage >= button_adc[ch].adc_min && adc_voltage <= button_adc[ch].adc_max)
 80005f2:	4b08      	ldr	r3, [pc, #32]	@ (8000614 <buttonGetPressed+0x34>)
 80005f4:	00a2      	lsls	r2, r4, #2
 80005f6:	5ad3      	ldrh	r3, [r2, r3]
 80005f8:	4283      	cmp	r3, r0
 80005fa:	d806      	bhi.n	800060a <buttonGetPressed+0x2a>
 80005fc:	4b05      	ldr	r3, [pc, #20]	@ (8000614 <buttonGetPressed+0x34>)
 80005fe:	189b      	adds	r3, r3, r2
 8000600:	885b      	ldrh	r3, [r3, #2]
 8000602:	4283      	cmp	r3, r0
 8000604:	d203      	bcs.n	800060e <buttonGetPressed+0x2e>
  bool ret = false;
 8000606:	2000      	movs	r0, #0
 8000608:	e7ef      	b.n	80005ea <buttonGetPressed+0xa>
 800060a:	2000      	movs	r0, #0
 800060c:	e7ed      	b.n	80005ea <buttonGetPressed+0xa>
      ret = true;
 800060e:	2001      	movs	r0, #1
 8000610:	e7eb      	b.n	80005ea <buttonGetPressed+0xa>
 8000612:	46c0      	nop			@ (mov r8, r8)
 8000614:	080049b4 	.word	0x080049b4

08000618 <cliAdd>:
  cliAdd("help",cliHelp);
  return true;
}

bool cliAdd(const char *cmd_str, void (*cmd_func)(uint8_t argc, const char **argv))
{
 8000618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800061a:	0003      	movs	r3, r0
 800061c:	000d      	movs	r5, r1
   if(cli_cmd_count >=CLI_CMD_LIST_MAX)
 800061e:	4a0c      	ldr	r2, [pc, #48]	@ (8000650 <cliAdd+0x38>)
 8000620:	7814      	ldrb	r4, [r2, #0]
 8000622:	2c07      	cmp	r4, #7
 8000624:	d901      	bls.n	800062a <cliAdd+0x12>
     return false;
 8000626:	2000      	movs	r0, #0
  strncpy(cli_cmd_func[cli_cmd_count].cmd_str,cmd_str,8);
  cli_cmd_func[cli_cmd_count].cmd_func = cmd_func;
  cli_cmd_count++;

  return true;
}
 8000628:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  strncpy(cli_cmd_func[cli_cmd_count].cmd_str,cmd_str,8);
 800062a:	0066      	lsls	r6, r4, #1
 800062c:	1930      	adds	r0, r6, r4
 800062e:	0080      	lsls	r0, r0, #2
 8000630:	4f08      	ldr	r7, [pc, #32]	@ (8000654 <cliAdd+0x3c>)
 8000632:	19c0      	adds	r0, r0, r7
 8000634:	2208      	movs	r2, #8
 8000636:	0019      	movs	r1, r3
 8000638:	f003 fc40 	bl	8003ebc <strncpy>
  cli_cmd_func[cli_cmd_count].cmd_func = cmd_func;
 800063c:	1936      	adds	r6, r6, r4
 800063e:	00b6      	lsls	r6, r6, #2
 8000640:	19bf      	adds	r7, r7, r6
 8000642:	60bd      	str	r5, [r7, #8]
  cli_cmd_count++;
 8000644:	4b02      	ldr	r3, [pc, #8]	@ (8000650 <cliAdd+0x38>)
 8000646:	3401      	adds	r4, #1
 8000648:	701c      	strb	r4, [r3, #0]
  return true;
 800064a:	2001      	movs	r0, #1
 800064c:	e7ec      	b.n	8000628 <cliAdd+0x10>
 800064e:	46c0      	nop			@ (mov r8, r8)
 8000650:	200000e4 	.word	0x200000e4
 8000654:	20000084 	.word	0x20000084

08000658 <cliInit>:
{
 8000658:	b510      	push	{r4, lr}
  for(int i=0;i<CLI_CMD_LIST_MAX;i++)
 800065a:	2200      	movs	r2, #0
 800065c:	e007      	b.n	800066e <cliInit+0x16>
    cli_cmd_func[i].cmd_func = NULL;
 800065e:	4b08      	ldr	r3, [pc, #32]	@ (8000680 <cliInit+0x28>)
 8000660:	0051      	lsls	r1, r2, #1
 8000662:	1889      	adds	r1, r1, r2
 8000664:	0088      	lsls	r0, r1, #2
 8000666:	181b      	adds	r3, r3, r0
 8000668:	2100      	movs	r1, #0
 800066a:	6099      	str	r1, [r3, #8]
  for(int i=0;i<CLI_CMD_LIST_MAX;i++)
 800066c:	3201      	adds	r2, #1
 800066e:	2a07      	cmp	r2, #7
 8000670:	ddf5      	ble.n	800065e <cliInit+0x6>
  cliAdd("help",cliHelp);
 8000672:	4904      	ldr	r1, [pc, #16]	@ (8000684 <cliInit+0x2c>)
 8000674:	4804      	ldr	r0, [pc, #16]	@ (8000688 <cliInit+0x30>)
 8000676:	f7ff ffcf 	bl	8000618 <cliAdd>
}
 800067a:	2001      	movs	r0, #1
 800067c:	bd10      	pop	{r4, pc}
 800067e:	46c0      	nop			@ (mov r8, r8)
 8000680:	20000084 	.word	0x20000084
 8000684:	080006a9 	.word	0x080006a9
 8000688:	080048c0 	.word	0x080048c0

0800068c <cliPrintf>:
  cliPrintf("------------------------\n");
}


void cliPrintf(const char *fmt, ...)
{
 800068c:	b40f      	push	{r0, r1, r2, r3}
 800068e:	b500      	push	{lr}
 8000690:	b083      	sub	sp, #12
 8000692:	aa04      	add	r2, sp, #16
 8000694:	ca02      	ldmia	r2!, {r1}
  va_list arg;

  va_start(arg,fmt);
 8000696:	9201      	str	r2, [sp, #4]
  uartVPrintf(cli_ch,fmt,arg);
 8000698:	2000      	movs	r0, #0
 800069a:	f000 fb5c 	bl	8000d56 <uartVPrintf>
  va_end(arg);
}
 800069e:	b003      	add	sp, #12
 80006a0:	bc08      	pop	{r3}
 80006a2:	b004      	add	sp, #16
 80006a4:	4718      	bx	r3
	...

080006a8 <cliHelp>:
{
 80006a8:	b510      	push	{r4, lr}
  cliPrintf("------------------------\n");
 80006aa:	480b      	ldr	r0, [pc, #44]	@ (80006d8 <cliHelp+0x30>)
 80006ac:	f7ff ffee 	bl	800068c <cliPrintf>
  for(int i=0;i<cli_cmd_count;i++)
 80006b0:	2400      	movs	r4, #0
 80006b2:	e008      	b.n	80006c6 <cliHelp+0x1e>
    cliPrintf("%s\n",cli_cmd_func[i].cmd_str);
 80006b4:	0063      	lsls	r3, r4, #1
 80006b6:	191b      	adds	r3, r3, r4
 80006b8:	0099      	lsls	r1, r3, #2
 80006ba:	4b08      	ldr	r3, [pc, #32]	@ (80006dc <cliHelp+0x34>)
 80006bc:	18c9      	adds	r1, r1, r3
 80006be:	4808      	ldr	r0, [pc, #32]	@ (80006e0 <cliHelp+0x38>)
 80006c0:	f7ff ffe4 	bl	800068c <cliPrintf>
  for(int i=0;i<cli_cmd_count;i++)
 80006c4:	3401      	adds	r4, #1
 80006c6:	4b07      	ldr	r3, [pc, #28]	@ (80006e4 <cliHelp+0x3c>)
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	42a3      	cmp	r3, r4
 80006cc:	dcf2      	bgt.n	80006b4 <cliHelp+0xc>
  cliPrintf("------------------------\n");
 80006ce:	4802      	ldr	r0, [pc, #8]	@ (80006d8 <cliHelp+0x30>)
 80006d0:	f7ff ffdc 	bl	800068c <cliPrintf>
}
 80006d4:	bd10      	pop	{r4, pc}
 80006d6:	46c0      	nop			@ (mov r8, r8)
 80006d8:	080048c8 	.word	0x080048c8
 80006dc:	20000084 	.word	0x20000084
 80006e0:	080048e4 	.word	0x080048e4
 80006e4:	200000e4 	.word	0x200000e4

080006e8 <cliIsStr>:

bool cliIsStr(const char *p_arg , const char *p_str)
{
 80006e8:	b510      	push	{r4, lr}
  if(strcmp(p_arg,p_str)==0)
 80006ea:	f7ff fd0d 	bl	8000108 <strcmp>
 80006ee:	2800      	cmp	r0, #0
 80006f0:	d101      	bne.n	80006f6 <cliIsStr+0xe>
    return true;
 80006f2:	3001      	adds	r0, #1
  else
    return false;
}
 80006f4:	bd10      	pop	{r4, pc}
    return false;
 80006f6:	2000      	movs	r0, #0
 80006f8:	e7fc      	b.n	80006f4 <cliIsStr+0xc>

080006fa <cliGetData>:

int32_t cliGetData(const char *p_arg)
{
 80006fa:	b510      	push	{r4, lr}
  int32_t ret;
  ret = (int32_t)strtoul(p_arg,(char **)NULL, 0);
 80006fc:	2200      	movs	r2, #0
 80006fe:	2100      	movs	r1, #0
 8000700:	f003 fb8e 	bl	8003e20 <strtoul>

  return ret;
}
 8000704:	bd10      	pop	{r4, pc}

08000706 <cliKeepLoop>:

bool cliKeepLoop(void)
{
 8000706:	b510      	push	{r4, lr}
  if(uartAvailable(cli_ch) == 0)
 8000708:	2000      	movs	r0, #0
 800070a:	f000 fad1 	bl	8000cb0 <uartAvailable>
 800070e:	2800      	cmp	r0, #0
 8000710:	d101      	bne.n	8000716 <cliKeepLoop+0x10>
    return true;
 8000712:	3001      	adds	r0, #1
  else
    return false;
}
 8000714:	bd10      	pop	{r4, pc}
    return false;
 8000716:	2000      	movs	r0, #0
 8000718:	e7fc      	b.n	8000714 <cliKeepLoop+0xe>
	...

0800071c <cliMain>:


bool cliMain(void)
{
 800071c:	b530      	push	{r4, r5, lr}
 800071e:	b083      	sub	sp, #12
  bool ret = false;
  if(uartAvailable(cli_ch) > 0)
 8000720:	2000      	movs	r0, #0
 8000722:	f000 fac5 	bl	8000cb0 <uartAvailable>
 8000726:	2800      	cmp	r0, #0
 8000728:	d103      	bne.n	8000732 <cliMain+0x16>
  bool ret = false;
 800072a:	2400      	movs	r4, #0

          uartWrite(cli_ch, &rx_data , 1);
        }
      }
  return ret;
}
 800072c:	0020      	movs	r0, r4
 800072e:	b003      	add	sp, #12
 8000730:	bd30      	pop	{r4, r5, pc}
        rx_data = uartRead(cli_ch);
 8000732:	2000      	movs	r0, #0
 8000734:	f000 fade 	bl	8000cf4 <uartRead>
 8000738:	466b      	mov	r3, sp
 800073a:	70d8      	strb	r0, [r3, #3]
        if(rx_data == '\r')
 800073c:	280d      	cmp	r0, #13
 800073e:	d005      	beq.n	800074c <cliMain+0x30>
        else if (cli_buf_index < (128-1))
 8000740:	4b2b      	ldr	r3, [pc, #172]	@ (80007f0 <cliMain+0xd4>)
 8000742:	881b      	ldrh	r3, [r3, #0]
 8000744:	2b7e      	cmp	r3, #126	@ 0x7e
 8000746:	d945      	bls.n	80007d4 <cliMain+0xb8>
  bool ret = false;
 8000748:	2400      	movs	r4, #0
 800074a:	e7ef      	b.n	800072c <cliMain+0x10>
          cli_buf[cli_buf_index] = 0;
 800074c:	4b28      	ldr	r3, [pc, #160]	@ (80007f0 <cliMain+0xd4>)
 800074e:	881a      	ldrh	r2, [r3, #0]
 8000750:	4c28      	ldr	r4, [pc, #160]	@ (80007f4 <cliMain+0xd8>)
 8000752:	2500      	movs	r5, #0
 8000754:	54a5      	strb	r5, [r4, r2]
          cli_buf_index = 0;
 8000756:	801d      	strh	r5, [r3, #0]
          uartPrintf(cli_ch,"\r\n");
 8000758:	4927      	ldr	r1, [pc, #156]	@ (80007f8 <cliMain+0xdc>)
 800075a:	2000      	movs	r0, #0
 800075c:	f000 fae2 	bl	8000d24 <uartPrintf>
          char *str_ptr = cli_buf;
 8000760:	9401      	str	r4, [sp, #4]
          cli_argc = 0;
 8000762:	4b26      	ldr	r3, [pc, #152]	@ (80007fc <cliMain+0xe0>)
 8000764:	801d      	strh	r5, [r3, #0]
          while((tok = strtok_r(str_ptr," ",&str_ptr)) != NULL)
 8000766:	e006      	b.n	8000776 <cliMain+0x5a>
            cli_argv[cli_argc] = tok;
 8000768:	4924      	ldr	r1, [pc, #144]	@ (80007fc <cliMain+0xe0>)
 800076a:	880b      	ldrh	r3, [r1, #0]
 800076c:	4a24      	ldr	r2, [pc, #144]	@ (8000800 <cliMain+0xe4>)
 800076e:	009c      	lsls	r4, r3, #2
 8000770:	50a0      	str	r0, [r4, r2]
            cli_argc++;
 8000772:	3301      	adds	r3, #1
 8000774:	800b      	strh	r3, [r1, #0]
          while((tok = strtok_r(str_ptr," ",&str_ptr)) != NULL)
 8000776:	4923      	ldr	r1, [pc, #140]	@ (8000804 <cliMain+0xe8>)
 8000778:	9801      	ldr	r0, [sp, #4]
 800077a:	aa01      	add	r2, sp, #4
 800077c:	f003 fbde 	bl	8003f3c <strtok_r>
 8000780:	2800      	cmp	r0, #0
 8000782:	d1f1      	bne.n	8000768 <cliMain+0x4c>
          for(int i=0;i<cli_cmd_count;i++)
 8000784:	2400      	movs	r4, #0
 8000786:	e000      	b.n	800078a <cliMain+0x6e>
 8000788:	3401      	adds	r4, #1
 800078a:	4b1f      	ldr	r3, [pc, #124]	@ (8000808 <cliMain+0xec>)
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	42a3      	cmp	r3, r4
 8000790:	dd1a      	ble.n	80007c8 <cliMain+0xac>
            if(strcmp(cli_argv[0], cli_cmd_func[i].cmd_str) ==0 )
 8000792:	4b1b      	ldr	r3, [pc, #108]	@ (8000800 <cliMain+0xe4>)
 8000794:	6818      	ldr	r0, [r3, #0]
 8000796:	0061      	lsls	r1, r4, #1
 8000798:	1909      	adds	r1, r1, r4
 800079a:	0089      	lsls	r1, r1, #2
 800079c:	4b1b      	ldr	r3, [pc, #108]	@ (800080c <cliMain+0xf0>)
 800079e:	18c9      	adds	r1, r1, r3
 80007a0:	f7ff fcb2 	bl	8000108 <strcmp>
 80007a4:	2800      	cmp	r0, #0
 80007a6:	d1ef      	bne.n	8000788 <cliMain+0x6c>
              if(cli_cmd_func[i].cmd_func != NULL)
 80007a8:	4b18      	ldr	r3, [pc, #96]	@ (800080c <cliMain+0xf0>)
 80007aa:	0062      	lsls	r2, r4, #1
 80007ac:	1912      	adds	r2, r2, r4
 80007ae:	0092      	lsls	r2, r2, #2
 80007b0:	189b      	adds	r3, r3, r2
 80007b2:	689b      	ldr	r3, [r3, #8]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d0e7      	beq.n	8000788 <cliMain+0x6c>
                cli_cmd_func[i].cmd_func(cli_argc - 1, (const char **)&cli_argv[1]);
 80007b8:	4915      	ldr	r1, [pc, #84]	@ (8000810 <cliMain+0xf4>)
 80007ba:	4a10      	ldr	r2, [pc, #64]	@ (80007fc <cliMain+0xe0>)
 80007bc:	8810      	ldrh	r0, [r2, #0]
 80007be:	3801      	subs	r0, #1
 80007c0:	b2c0      	uxtb	r0, r0
 80007c2:	4798      	blx	r3
                ret = true;
 80007c4:	2401      	movs	r4, #1
                break;
 80007c6:	e000      	b.n	80007ca <cliMain+0xae>
  bool ret = false;
 80007c8:	2400      	movs	r4, #0
          uartPrintf(cli_ch,"cli# ");
 80007ca:	4912      	ldr	r1, [pc, #72]	@ (8000814 <cliMain+0xf8>)
 80007cc:	2000      	movs	r0, #0
 80007ce:	f000 faa9 	bl	8000d24 <uartPrintf>
 80007d2:	e7ab      	b.n	800072c <cliMain+0x10>
          cli_buf[cli_buf_index] = rx_data;
 80007d4:	4a07      	ldr	r2, [pc, #28]	@ (80007f4 <cliMain+0xd8>)
 80007d6:	54d0      	strb	r0, [r2, r3]
          cli_buf_index++;
 80007d8:	4a05      	ldr	r2, [pc, #20]	@ (80007f0 <cliMain+0xd4>)
 80007da:	3301      	adds	r3, #1
 80007dc:	8013      	strh	r3, [r2, #0]
          uartWrite(cli_ch, &rx_data , 1);
 80007de:	2201      	movs	r2, #1
 80007e0:	466b      	mov	r3, sp
 80007e2:	1cd9      	adds	r1, r3, #3
 80007e4:	2000      	movs	r0, #0
 80007e6:	f000 fa4f 	bl	8000c88 <uartWrite>
  bool ret = false;
 80007ea:	2400      	movs	r4, #0
 80007ec:	e79e      	b.n	800072c <cliMain+0x10>
 80007ee:	46c0      	nop			@ (mov r8, r8)
 80007f0:	2000010a 	.word	0x2000010a
 80007f4:	2000010c 	.word	0x2000010c
 80007f8:	080048e8 	.word	0x080048e8
 80007fc:	20000108 	.word	0x20000108
 8000800:	200000e8 	.word	0x200000e8
 8000804:	080048f0 	.word	0x080048f0
 8000808:	200000e4 	.word	0x200000e4
 800080c:	20000084 	.word	0x20000084
 8000810:	200000ec 	.word	0x200000ec
 8000814:	080048ec 	.word	0x080048ec

08000818 <ledInit>:


bool ledInit(void)
{
  return true;
}
 8000818:	2001      	movs	r0, #1
 800081a:	4770      	bx	lr

0800081c <ledOn>:
void ledOn(uint8_t ch)
{
 800081c:	b510      	push	{r4, lr}
  switch(ch)
 800081e:	2800      	cmp	r0, #0
 8000820:	d000      	beq.n	8000824 <ledOn+0x8>
    case _DEF_CH1:
     pwmWrite(_DEF_CH1,100 - led_duty[_DEF_CH1]);
      break;
  }

}
 8000822:	bd10      	pop	{r4, pc}
     pwmWrite(_DEF_CH1,100 - led_duty[_DEF_CH1]);
 8000824:	4b03      	ldr	r3, [pc, #12]	@ (8000834 <ledOn+0x18>)
 8000826:	881b      	ldrh	r3, [r3, #0]
 8000828:	2164      	movs	r1, #100	@ 0x64
 800082a:	1ac9      	subs	r1, r1, r3
 800082c:	b289      	uxth	r1, r1
 800082e:	f000 f82d 	bl	800088c <pwmWrite>
}
 8000832:	e7f6      	b.n	8000822 <ledOn+0x6>
 8000834:	20000000 	.word	0x20000000

08000838 <ledOff>:
void ledOff(uint8_t ch)
{
 8000838:	b510      	push	{r4, lr}
  switch(ch)
 800083a:	2800      	cmp	r0, #0
 800083c:	d000      	beq.n	8000840 <ledOff+0x8>
    case _DEF_CH1:
      pwmWrite(_DEF_CH1,100);
      break;
  }

}
 800083e:	bd10      	pop	{r4, pc}
      pwmWrite(_DEF_CH1,100);
 8000840:	2164      	movs	r1, #100	@ 0x64
 8000842:	f000 f823 	bl	800088c <pwmWrite>
}
 8000846:	e7fa      	b.n	800083e <ledOff+0x6>

08000848 <ledToggle>:
void ledToggle(uint8_t ch)
{
 8000848:	b510      	push	{r4, lr}
  switch(ch)
 800084a:	2800      	cmp	r0, #0
 800084c:	d000      	beq.n	8000850 <ledToggle+0x8>
      else
        ledOff(_DEF_CH1);
      break;
  }

}
 800084e:	bd10      	pop	{r4, pc}
      if(pwmRead(_DEF_CH1) == 100 )
 8000850:	f000 f824 	bl	800089c <pwmRead>
 8000854:	2864      	cmp	r0, #100	@ 0x64
 8000856:	d003      	beq.n	8000860 <ledToggle+0x18>
        ledOff(_DEF_CH1);
 8000858:	2000      	movs	r0, #0
 800085a:	f7ff ffed 	bl	8000838 <ledOff>
}
 800085e:	e7f6      	b.n	800084e <ledToggle+0x6>
        ledOn(_DEF_CH1);
 8000860:	2000      	movs	r0, #0
 8000862:	f7ff ffdb 	bl	800081c <ledOn>
 8000866:	e7f2      	b.n	800084e <ledToggle+0x6>

08000868 <ledSetDuty>:

void ledSetDuty(uint8_t ch,uint16_t duty_data)
{
  switch(ch)
 8000868:	2800      	cmp	r0, #0
 800086a:	d102      	bne.n	8000872 <ledSetDuty+0xa>
    {
      case _DEF_CH1:
        led_duty[ch] = duty_data;
 800086c:	4b01      	ldr	r3, [pc, #4]	@ (8000874 <ledSetDuty+0xc>)
 800086e:	0040      	lsls	r0, r0, #1
 8000870:	52c1      	strh	r1, [r0, r3]
        break;
    }
}
 8000872:	4770      	bx	lr
 8000874:	20000000 	.word	0x20000000

08000878 <pwmInit>:




bool pwmInit(void)
{
 8000878:	b510      	push	{r4, lr}
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800087a:	4803      	ldr	r0, [pc, #12]	@ (8000888 <pwmInit+0x10>)
 800087c:	2100      	movs	r1, #0
 800087e:	f002 fc3f 	bl	8003100 <HAL_TIM_PWM_Start>

  return true;
}
 8000882:	2001      	movs	r0, #1
 8000884:	bd10      	pop	{r4, pc}
 8000886:	46c0      	nop			@ (mov r8, r8)
 8000888:	20000470 	.word	0x20000470

0800088c <pwmWrite>:
void pwmWrite(uint8_t ch,uint16_t duty)
{
  switch(ch)
 800088c:	2800      	cmp	r0, #0
 800088e:	d102      	bne.n	8000896 <pwmWrite+0xa>
  {
    case _DEF_CH1:
      htim1.Instance->CCR1 = duty;
 8000890:	4b01      	ldr	r3, [pc, #4]	@ (8000898 <pwmWrite+0xc>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	6359      	str	r1, [r3, #52]	@ 0x34
      break;
  }

}
 8000896:	4770      	bx	lr
 8000898:	20000470 	.word	0x20000470

0800089c <pwmRead>:
uint16_t pwmRead(uint8_t ch)
{
  uint16_t pwm_data = 0;

  switch(ch)
 800089c:	2800      	cmp	r0, #0
 800089e:	d104      	bne.n	80008aa <pwmRead+0xe>
    {
      case _DEF_CH1:
        pwm_data = htim1.Instance->CCR1;
 80008a0:	4b03      	ldr	r3, [pc, #12]	@ (80008b0 <pwmRead+0x14>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 80008a6:	b280      	uxth	r0, r0
        break;
    }

  return pwm_data;
}
 80008a8:	4770      	bx	lr
  uint16_t pwm_data = 0;
 80008aa:	2000      	movs	r0, #0
 80008ac:	e7fc      	b.n	80008a8 <pwmRead+0xc>
 80008ae:	46c0      	nop			@ (mov r8, r8)
 80008b0:	20000470 	.word	0x20000470

080008b4 <rtcInit>:




bool rtcInit(void)
{
 80008b4:	b510      	push	{r4, lr}
  cliAdd("rtc",rtcCli);
 80008b6:	4903      	ldr	r1, [pc, #12]	@ (80008c4 <rtcInit+0x10>)
 80008b8:	4803      	ldr	r0, [pc, #12]	@ (80008c8 <rtcInit+0x14>)
 80008ba:	f7ff fead 	bl	8000618 <cliAdd>
  return true;
}
 80008be:	2001      	movs	r0, #1
 80008c0:	bd10      	pop	{r4, pc}
 80008c2:	46c0      	nop			@ (mov r8, r8)
 80008c4:	080009f5 	.word	0x080009f5
 80008c8:	080048f4 	.word	0x080048f4

080008cc <rtcGetInfo>:



bool rtcGetInfo(rtc_info_t *rtc_info)
{
 80008cc:	b510      	push	{r4, lr}
 80008ce:	b086      	sub	sp, #24
 80008d0:	0004      	movs	r4, r0
  RTC_TimeTypeDef sTime = {0};
 80008d2:	2214      	movs	r2, #20
 80008d4:	2100      	movs	r1, #0
 80008d6:	a801      	add	r0, sp, #4
 80008d8:	f003 fae8 	bl	8003eac <memset>
  RTC_DateTypeDef sDate = {0};
 80008dc:	2300      	movs	r3, #0
 80008de:	9300      	str	r3, [sp, #0]


  if (HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80008e0:	4812      	ldr	r0, [pc, #72]	@ (800092c <rtcGetInfo+0x60>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	a901      	add	r1, sp, #4
 80008e6:	f001 ff63 	bl	80027b0 <HAL_RTC_GetTime>
 80008ea:	2800      	cmp	r0, #0
 80008ec:	d002      	beq.n	80008f4 <rtcGetInfo+0x28>
    return false;
 80008ee:	2000      	movs	r0, #0
  rtc_info->date.month = sDate.Month;
  rtc_info->date.day = sDate.Date;

  return true;

}
 80008f0:	b006      	add	sp, #24
 80008f2:	bd10      	pop	{r4, pc}
  if (HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80008f4:	480d      	ldr	r0, [pc, #52]	@ (800092c <rtcGetInfo+0x60>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	4669      	mov	r1, sp
 80008fa:	f001 ff85 	bl	8002808 <HAL_RTC_GetDate>
 80008fe:	2800      	cmp	r0, #0
 8000900:	d111      	bne.n	8000926 <rtcGetInfo+0x5a>
  rtc_info->time.hours = sTime.Hours;
 8000902:	ab01      	add	r3, sp, #4
 8000904:	781a      	ldrb	r2, [r3, #0]
 8000906:	7022      	strb	r2, [r4, #0]
  rtc_info->time.minutes = sTime.Minutes;
 8000908:	785a      	ldrb	r2, [r3, #1]
 800090a:	7062      	strb	r2, [r4, #1]
  rtc_info->time.seconds = sTime.Seconds;
 800090c:	789b      	ldrb	r3, [r3, #2]
 800090e:	70a3      	strb	r3, [r4, #2]
  rtc_info->date.year = sDate.Year;
 8000910:	466b      	mov	r3, sp
 8000912:	78db      	ldrb	r3, [r3, #3]
 8000914:	70e3      	strb	r3, [r4, #3]
  rtc_info->date.month = sDate.Month;
 8000916:	466b      	mov	r3, sp
 8000918:	785b      	ldrb	r3, [r3, #1]
 800091a:	7123      	strb	r3, [r4, #4]
  rtc_info->date.day = sDate.Date;
 800091c:	466b      	mov	r3, sp
 800091e:	789b      	ldrb	r3, [r3, #2]
 8000920:	7163      	strb	r3, [r4, #5]
  return true;
 8000922:	3001      	adds	r0, #1
 8000924:	e7e4      	b.n	80008f0 <rtcGetInfo+0x24>
    return false;
 8000926:	2000      	movs	r0, #0
 8000928:	e7e2      	b.n	80008f0 <rtcGetInfo+0x24>
 800092a:	46c0      	nop			@ (mov r8, r8)
 800092c:	200004bc 	.word	0x200004bc

08000930 <rtcSetTime>:
  return true;
}


bool rtcSetTime(rtc_time_t *rtc_time)
{
 8000930:	b510      	push	{r4, lr}
 8000932:	b086      	sub	sp, #24
 8000934:	0004      	movs	r4, r0
  RTC_TimeTypeDef sTime = {0};
 8000936:	2214      	movs	r2, #20
 8000938:	2100      	movs	r1, #0
 800093a:	a801      	add	r0, sp, #4
 800093c:	f003 fab6 	bl	8003eac <memset>
  RTC_DateTypeDef sDate = {0};
 8000940:	2300      	movs	r3, #0
 8000942:	9300      	str	r3, [sp, #0]


  if (HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000944:	4811      	ldr	r0, [pc, #68]	@ (800098c <rtcSetTime+0x5c>)
 8000946:	2200      	movs	r2, #0
 8000948:	a901      	add	r1, sp, #4
 800094a:	f001 ff31 	bl	80027b0 <HAL_RTC_GetTime>
 800094e:	2800      	cmp	r0, #0
 8000950:	d002      	beq.n	8000958 <rtcSetTime+0x28>
    return false;
 8000952:	2000      	movs	r0, #0
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
      return false;

  return true;

}
 8000954:	b006      	add	sp, #24
 8000956:	bd10      	pop	{r4, pc}
  if (HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000958:	480c      	ldr	r0, [pc, #48]	@ (800098c <rtcSetTime+0x5c>)
 800095a:	2200      	movs	r2, #0
 800095c:	4669      	mov	r1, sp
 800095e:	f001 ff53 	bl	8002808 <HAL_RTC_GetDate>
 8000962:	2800      	cmp	r0, #0
 8000964:	d001      	beq.n	800096a <rtcSetTime+0x3a>
    return false;
 8000966:	2000      	movs	r0, #0
 8000968:	e7f4      	b.n	8000954 <rtcSetTime+0x24>
  sTime.Hours = rtc_time->hours;
 800096a:	7823      	ldrb	r3, [r4, #0]
 800096c:	a901      	add	r1, sp, #4
 800096e:	700b      	strb	r3, [r1, #0]
  sTime.Minutes = rtc_time->minutes;
 8000970:	7863      	ldrb	r3, [r4, #1]
 8000972:	704b      	strb	r3, [r1, #1]
  sTime.Seconds = rtc_time->seconds;
 8000974:	78a3      	ldrb	r3, [r4, #2]
 8000976:	708b      	strb	r3, [r1, #2]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000978:	4804      	ldr	r0, [pc, #16]	@ (800098c <rtcSetTime+0x5c>)
 800097a:	2200      	movs	r2, #0
 800097c:	f001 fe54 	bl	8002628 <HAL_RTC_SetTime>
 8000980:	2800      	cmp	r0, #0
 8000982:	d101      	bne.n	8000988 <rtcSetTime+0x58>
  return true;
 8000984:	3001      	adds	r0, #1
 8000986:	e7e5      	b.n	8000954 <rtcSetTime+0x24>
      return false;
 8000988:	2000      	movs	r0, #0
 800098a:	e7e3      	b.n	8000954 <rtcSetTime+0x24>
 800098c:	200004bc 	.word	0x200004bc

08000990 <rtcSetDate>:
bool rtcSetDate(rtc_date_t *rtc_date)
{
 8000990:	b510      	push	{r4, lr}
 8000992:	b086      	sub	sp, #24
 8000994:	0004      	movs	r4, r0
  RTC_TimeTypeDef sTime = {0};
 8000996:	2214      	movs	r2, #20
 8000998:	2100      	movs	r1, #0
 800099a:	a801      	add	r0, sp, #4
 800099c:	f003 fa86 	bl	8003eac <memset>
   RTC_DateTypeDef sDate = {0};
 80009a0:	2300      	movs	r3, #0
 80009a2:	9300      	str	r3, [sp, #0]


   if (HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80009a4:	4812      	ldr	r0, [pc, #72]	@ (80009f0 <rtcSetDate+0x60>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	a901      	add	r1, sp, #4
 80009aa:	f001 ff01 	bl	80027b0 <HAL_RTC_GetTime>
 80009ae:	2800      	cmp	r0, #0
 80009b0:	d002      	beq.n	80009b8 <rtcSetDate+0x28>
     return false;
 80009b2:	2000      	movs	r0, #0

   if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
        return false;

   return true;
}
 80009b4:	b006      	add	sp, #24
 80009b6:	bd10      	pop	{r4, pc}
   if (HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80009b8:	480d      	ldr	r0, [pc, #52]	@ (80009f0 <rtcSetDate+0x60>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	4669      	mov	r1, sp
 80009be:	f001 ff23 	bl	8002808 <HAL_RTC_GetDate>
 80009c2:	2800      	cmp	r0, #0
 80009c4:	d001      	beq.n	80009ca <rtcSetDate+0x3a>
     return false;
 80009c6:	2000      	movs	r0, #0
 80009c8:	e7f4      	b.n	80009b4 <rtcSetDate+0x24>
   sDate.Year = rtc_date->year;
 80009ca:	7823      	ldrb	r3, [r4, #0]
 80009cc:	466a      	mov	r2, sp
 80009ce:	70d3      	strb	r3, [r2, #3]
   sDate.Month = rtc_date->month;
 80009d0:	7863      	ldrb	r3, [r4, #1]
 80009d2:	7053      	strb	r3, [r2, #1]
   sDate.Date = rtc_date->day;
 80009d4:	78a3      	ldrb	r3, [r4, #2]
 80009d6:	7093      	strb	r3, [r2, #2]
   if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80009d8:	4805      	ldr	r0, [pc, #20]	@ (80009f0 <rtcSetDate+0x60>)
 80009da:	2200      	movs	r2, #0
 80009dc:	4669      	mov	r1, sp
 80009de:	f001 fe89 	bl	80026f4 <HAL_RTC_SetDate>
 80009e2:	2800      	cmp	r0, #0
 80009e4:	d101      	bne.n	80009ea <rtcSetDate+0x5a>
   return true;
 80009e6:	3001      	adds	r0, #1
 80009e8:	e7e4      	b.n	80009b4 <rtcSetDate+0x24>
        return false;
 80009ea:	2000      	movs	r0, #0
 80009ec:	e7e2      	b.n	80009b4 <rtcSetDate+0x24>
 80009ee:	46c0      	nop			@ (mov r8, r8)
 80009f0:	200004bc 	.word	0x200004bc

080009f4 <rtcCli>:



void rtcCli(uint8_t argc,const char **argv)
{
 80009f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009f6:	46c6      	mov	lr, r8
 80009f8:	b500      	push	{lr}
 80009fa:	b086      	sub	sp, #24
 80009fc:	0004      	movs	r4, r0
 80009fe:	000e      	movs	r6, r1
  bool ret = false;

  if(argc == 2 && cliIsStr(argv[0], "get") && cliIsStr(argv[1], "info"))
 8000a00:	2802      	cmp	r0, #2
 8000a02:	d009      	beq.n	8000a18 <rtcCli+0x24>
  bool ret = false;
 8000a04:	2700      	movs	r7, #0
      delay(1000);
    }
    ret = true;
  }

  if(argc == 5 && cliIsStr(argv[0],"set") &&cliIsStr(argv[1], "time"))
 8000a06:	2c05      	cmp	r4, #5
 8000a08:	d030      	beq.n	8000a6c <rtcCli+0x78>

    ret = true;
  }


  if(ret == false)
 8000a0a:	2f00      	cmp	r7, #0
 8000a0c:	d100      	bne.n	8000a10 <rtcCli+0x1c>
 8000a0e:	e074      	b.n	8000afa <rtcCli+0x106>
    cliPrintf("rtc get info\n");
    cliPrintf("rtc set time [h] [m] [s]\n");
    cliPrintf("rtc set date [y] [m] [d]\n");
  }

}
 8000a10:	b006      	add	sp, #24
 8000a12:	bc80      	pop	{r7}
 8000a14:	46b8      	mov	r8, r7
 8000a16:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(argc == 2 && cliIsStr(argv[0], "get") && cliIsStr(argv[1], "info"))
 8000a18:	493d      	ldr	r1, [pc, #244]	@ (8000b10 <rtcCli+0x11c>)
 8000a1a:	6830      	ldr	r0, [r6, #0]
 8000a1c:	f7ff fe64 	bl	80006e8 <cliIsStr>
 8000a20:	1e07      	subs	r7, r0, #0
 8000a22:	d0f0      	beq.n	8000a06 <rtcCli+0x12>
 8000a24:	493b      	ldr	r1, [pc, #236]	@ (8000b14 <rtcCli+0x120>)
 8000a26:	6870      	ldr	r0, [r6, #4]
 8000a28:	f7ff fe5e 	bl	80006e8 <cliIsStr>
 8000a2c:	1e07      	subs	r7, r0, #0
 8000a2e:	d118      	bne.n	8000a62 <rtcCli+0x6e>
 8000a30:	e7e9      	b.n	8000a06 <rtcCli+0x12>
      rtcGetInfo(&rtc_info);
 8000a32:	ad04      	add	r5, sp, #16
 8000a34:	0028      	movs	r0, r5
 8000a36:	f7ff ff49 	bl	80008cc <rtcGetInfo>
                rtc_info.date.year,
 8000a3a:	78e9      	ldrb	r1, [r5, #3]
                rtc_info.date.month,
 8000a3c:	792a      	ldrb	r2, [r5, #4]
                rtc_info.date.day,
 8000a3e:	796b      	ldrb	r3, [r5, #5]
                rtc_info.time.hours,
 8000a40:	7828      	ldrb	r0, [r5, #0]
 8000a42:	4684      	mov	ip, r0
                rtc_info.time.minutes,
 8000a44:	7868      	ldrb	r0, [r5, #1]
 8000a46:	4680      	mov	r8, r0
                rtc_info.time.seconds);
 8000a48:	78ad      	ldrb	r5, [r5, #2]
      cliPrintf("Y:%02d M:%02d D:%02d, H:%02d M:%02d S:%02d\n",
 8000a4a:	4833      	ldr	r0, [pc, #204]	@ (8000b18 <rtcCli+0x124>)
 8000a4c:	9502      	str	r5, [sp, #8]
 8000a4e:	4645      	mov	r5, r8
 8000a50:	9501      	str	r5, [sp, #4]
 8000a52:	4665      	mov	r5, ip
 8000a54:	9500      	str	r5, [sp, #0]
 8000a56:	f7ff fe19 	bl	800068c <cliPrintf>
      delay(1000);
 8000a5a:	20fa      	movs	r0, #250	@ 0xfa
 8000a5c:	0080      	lsls	r0, r0, #2
 8000a5e:	f000 f98e 	bl	8000d7e <delay>
    while(cliKeepLoop())
 8000a62:	f7ff fe50 	bl	8000706 <cliKeepLoop>
 8000a66:	2800      	cmp	r0, #0
 8000a68:	d1e3      	bne.n	8000a32 <rtcCli+0x3e>
 8000a6a:	e7cc      	b.n	8000a06 <rtcCli+0x12>
  if(argc == 5 && cliIsStr(argv[0],"set") &&cliIsStr(argv[1], "time"))
 8000a6c:	492b      	ldr	r1, [pc, #172]	@ (8000b1c <rtcCli+0x128>)
 8000a6e:	6830      	ldr	r0, [r6, #0]
 8000a70:	f7ff fe3a 	bl	80006e8 <cliIsStr>
 8000a74:	2800      	cmp	r0, #0
 8000a76:	d122      	bne.n	8000abe <rtcCli+0xca>
  if(argc == 5 && cliIsStr(argv[0],"set") &&cliIsStr(argv[1], "date"))
 8000a78:	4928      	ldr	r1, [pc, #160]	@ (8000b1c <rtcCli+0x128>)
 8000a7a:	6830      	ldr	r0, [r6, #0]
 8000a7c:	f7ff fe34 	bl	80006e8 <cliIsStr>
 8000a80:	2800      	cmp	r0, #0
 8000a82:	d0c2      	beq.n	8000a0a <rtcCli+0x16>
 8000a84:	4926      	ldr	r1, [pc, #152]	@ (8000b20 <rtcCli+0x12c>)
 8000a86:	6870      	ldr	r0, [r6, #4]
 8000a88:	f7ff fe2e 	bl	80006e8 <cliIsStr>
 8000a8c:	2800      	cmp	r0, #0
 8000a8e:	d0bc      	beq.n	8000a0a <rtcCli+0x16>
     rtc_date.year = cliGetData(argv[2]);
 8000a90:	68b0      	ldr	r0, [r6, #8]
 8000a92:	f7ff fe32 	bl	80006fa <cliGetData>
 8000a96:	ac04      	add	r4, sp, #16
 8000a98:	7020      	strb	r0, [r4, #0]
     rtc_date.month = cliGetData(argv[3]);
 8000a9a:	68f0      	ldr	r0, [r6, #12]
 8000a9c:	f7ff fe2d 	bl	80006fa <cliGetData>
 8000aa0:	7060      	strb	r0, [r4, #1]
     rtc_date.day = cliGetData(argv[4]);
 8000aa2:	6930      	ldr	r0, [r6, #16]
 8000aa4:	f7ff fe29 	bl	80006fa <cliGetData>
 8000aa8:	70a0      	strb	r0, [r4, #2]
     rtcSetDate(&rtc_date);
 8000aaa:	0020      	movs	r0, r4
 8000aac:	f7ff ff70 	bl	8000990 <rtcSetDate>
               rtc_date.year,
 8000ab0:	7821      	ldrb	r1, [r4, #0]
               rtc_date.month,
 8000ab2:	7862      	ldrb	r2, [r4, #1]
               rtc_date.day);
 8000ab4:	78a3      	ldrb	r3, [r4, #2]
     cliPrintf("Y:%02d M:%02d S:%02d\n",
 8000ab6:	481b      	ldr	r0, [pc, #108]	@ (8000b24 <rtcCli+0x130>)
 8000ab8:	f7ff fde8 	bl	800068c <cliPrintf>
  if(ret == false)
 8000abc:	e7a8      	b.n	8000a10 <rtcCli+0x1c>
  if(argc == 5 && cliIsStr(argv[0],"set") &&cliIsStr(argv[1], "time"))
 8000abe:	491a      	ldr	r1, [pc, #104]	@ (8000b28 <rtcCli+0x134>)
 8000ac0:	6870      	ldr	r0, [r6, #4]
 8000ac2:	f7ff fe11 	bl	80006e8 <cliIsStr>
 8000ac6:	1e04      	subs	r4, r0, #0
 8000ac8:	d0d6      	beq.n	8000a78 <rtcCli+0x84>
     rtc_time.hours = cliGetData(argv[2]);
 8000aca:	68b0      	ldr	r0, [r6, #8]
 8000acc:	f7ff fe15 	bl	80006fa <cliGetData>
 8000ad0:	ad04      	add	r5, sp, #16
 8000ad2:	7028      	strb	r0, [r5, #0]
     rtc_time.minutes = cliGetData(argv[3]);
 8000ad4:	68f0      	ldr	r0, [r6, #12]
 8000ad6:	f7ff fe10 	bl	80006fa <cliGetData>
 8000ada:	7068      	strb	r0, [r5, #1]
     rtc_time.seconds = cliGetData(argv[4]);
 8000adc:	6930      	ldr	r0, [r6, #16]
 8000ade:	f7ff fe0c 	bl	80006fa <cliGetData>
 8000ae2:	70a8      	strb	r0, [r5, #2]
     rtcSetTime(&rtc_time);
 8000ae4:	0028      	movs	r0, r5
 8000ae6:	f7ff ff23 	bl	8000930 <rtcSetTime>
               rtc_time.hours,
 8000aea:	7829      	ldrb	r1, [r5, #0]
               rtc_time.minutes,
 8000aec:	786a      	ldrb	r2, [r5, #1]
               rtc_time.seconds);
 8000aee:	78ab      	ldrb	r3, [r5, #2]
     cliPrintf("H:%02d M:%02d S:%02d\n",
 8000af0:	480e      	ldr	r0, [pc, #56]	@ (8000b2c <rtcCli+0x138>)
 8000af2:	f7ff fdcb 	bl	800068c <cliPrintf>
    ret = true;
 8000af6:	0027      	movs	r7, r4
 8000af8:	e7be      	b.n	8000a78 <rtcCli+0x84>
    cliPrintf("rtc get info\n");
 8000afa:	480d      	ldr	r0, [pc, #52]	@ (8000b30 <rtcCli+0x13c>)
 8000afc:	f7ff fdc6 	bl	800068c <cliPrintf>
    cliPrintf("rtc set time [h] [m] [s]\n");
 8000b00:	480c      	ldr	r0, [pc, #48]	@ (8000b34 <rtcCli+0x140>)
 8000b02:	f7ff fdc3 	bl	800068c <cliPrintf>
    cliPrintf("rtc set date [y] [m] [d]\n");
 8000b06:	480c      	ldr	r0, [pc, #48]	@ (8000b38 <rtcCli+0x144>)
 8000b08:	f7ff fdc0 	bl	800068c <cliPrintf>
}
 8000b0c:	e780      	b.n	8000a10 <rtcCli+0x1c>
 8000b0e:	46c0      	nop			@ (mov r8, r8)
 8000b10:	080048f8 	.word	0x080048f8
 8000b14:	080048b8 	.word	0x080048b8
 8000b18:	080048fc 	.word	0x080048fc
 8000b1c:	08004928 	.word	0x08004928
 8000b20:	0800494c 	.word	0x0800494c
 8000b24:	08004954 	.word	0x08004954
 8000b28:	0800492c 	.word	0x0800492c
 8000b2c:	08004934 	.word	0x08004934
 8000b30:	0800496c 	.word	0x0800496c
 8000b34:	0800497c 	.word	0x0800497c
 8000b38:	08004998 	.word	0x08004998

08000b3c <swtimerInit>:




bool swtimerInit(void)
{
 8000b3c:	b510      	push	{r4, lr}
  for(int i=0;i<SWTIMER_MAX_CH;i++)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	e00a      	b.n	8000b58 <swtimerInit+0x1c>
  {
    swtimer_tbl[i].enable = false;
 8000b42:	4b09      	ldr	r3, [pc, #36]	@ (8000b68 <swtimerInit+0x2c>)
 8000b44:	0091      	lsls	r1, r2, #2
 8000b46:	1888      	adds	r0, r1, r2
 8000b48:	0084      	lsls	r4, r0, #2
 8000b4a:	2000      	movs	r0, #0
 8000b4c:	54e0      	strb	r0, [r4, r3]
    swtimer_tbl[i].counter = 0;
 8000b4e:	191b      	adds	r3, r3, r4
 8000b50:	6058      	str	r0, [r3, #4]
    swtimer_tbl[i].func = NULL;
 8000b52:	60d8      	str	r0, [r3, #12]
    swtimer_tbl[i].func_arg = NULL;
 8000b54:	6118      	str	r0, [r3, #16]
  for(int i=0;i<SWTIMER_MAX_CH;i++)
 8000b56:	3201      	adds	r2, #1
 8000b58:	2a07      	cmp	r2, #7
 8000b5a:	ddf2      	ble.n	8000b42 <swtimerInit+0x6>

  }
  HAL_TIM_Base_Start_IT(&htim14);
 8000b5c:	4803      	ldr	r0, [pc, #12]	@ (8000b6c <swtimerInit+0x30>)
 8000b5e:	f001 ffc3 	bl	8002ae8 <HAL_TIM_Base_Start_IT>

  return true;
}
 8000b62:	2001      	movs	r0, #1
 8000b64:	bd10      	pop	{r4, pc}
 8000b66:	46c0      	nop			@ (mov r8, r8)
 8000b68:	2000018c 	.word	0x2000018c
 8000b6c:	20000424 	.word	0x20000424

08000b70 <swtimerGetCh>:

bool swtimerGetCh(uint8_t *p_ch)
{
  if(swtimer_count >= SWTIMER_MAX_CH)
 8000b70:	4b05      	ldr	r3, [pc, #20]	@ (8000b88 <swtimerGetCh+0x18>)
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	2b07      	cmp	r3, #7
 8000b76:	d805      	bhi.n	8000b84 <swtimerGetCh+0x14>
    return false;

  *p_ch  = swtimer_count;
 8000b78:	7003      	strb	r3, [r0, #0]

  swtimer_count++;
 8000b7a:	4a03      	ldr	r2, [pc, #12]	@ (8000b88 <swtimerGetCh+0x18>)
 8000b7c:	3301      	adds	r3, #1
 8000b7e:	7013      	strb	r3, [r2, #0]

  return true;
 8000b80:	2001      	movs	r0, #1
}
 8000b82:	4770      	bx	lr
    return false;
 8000b84:	2000      	movs	r0, #0
 8000b86:	e7fc      	b.n	8000b82 <swtimerGetCh+0x12>
 8000b88:	2000022c 	.word	0x2000022c

08000b8c <swtimerSet>:
bool swtimerSet(uint8_t ch,
                void (*func)(void *arg),
                void *func_arg,
                SwtimerMode_t mode,
                uint32_t time_ms)
{
 8000b8c:	b570      	push	{r4, r5, r6, lr}
  if(ch >= SWTIMER_MAX_CH)
 8000b8e:	2807      	cmp	r0, #7
 8000b90:	d810      	bhi.n	8000bb4 <swtimerSet+0x28>
     return false;

  swtimer_tbl[ch].func = func;
 8000b92:	4e09      	ldr	r6, [pc, #36]	@ (8000bb8 <swtimerSet+0x2c>)
 8000b94:	0085      	lsls	r5, r0, #2
 8000b96:	182c      	adds	r4, r5, r0
 8000b98:	00a4      	lsls	r4, r4, #2
 8000b9a:	1934      	adds	r4, r6, r4
 8000b9c:	60e1      	str	r1, [r4, #12]
  swtimer_tbl[ch].func_arg =func_arg;
 8000b9e:	6122      	str	r2, [r4, #16]
  swtimer_tbl[ch].mode = mode;
 8000ba0:	7063      	strb	r3, [r4, #1]
  swtimer_tbl[ch].counter = 0;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	6063      	str	r3, [r4, #4]
  swtimer_tbl[ch].reload = time_ms;
 8000ba6:	9a04      	ldr	r2, [sp, #16]
 8000ba8:	60a2      	str	r2, [r4, #8]
  swtimer_tbl[ch].enable = false;
 8000baa:	182d      	adds	r5, r5, r0
 8000bac:	00ad      	lsls	r5, r5, #2
 8000bae:	55ab      	strb	r3, [r5, r6]


  return true;
 8000bb0:	2001      	movs	r0, #1
}
 8000bb2:	bd70      	pop	{r4, r5, r6, pc}
     return false;
 8000bb4:	2000      	movs	r0, #0
 8000bb6:	e7fc      	b.n	8000bb2 <swtimerSet+0x26>
 8000bb8:	2000018c 	.word	0x2000018c

08000bbc <swtimerStart>:


bool swtimerStart(uint8_t ch)
{
 8000bbc:	b510      	push	{r4, lr}
  if(swtimer_count >= SWTIMER_MAX_CH)
 8000bbe:	4b09      	ldr	r3, [pc, #36]	@ (8000be4 <swtimerStart+0x28>)
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	2b07      	cmp	r3, #7
 8000bc4:	d80c      	bhi.n	8000be0 <swtimerStart+0x24>
     return false;

  swtimer_tbl[ch].counter = 0;
 8000bc6:	4908      	ldr	r1, [pc, #32]	@ (8000be8 <swtimerStart+0x2c>)
 8000bc8:	0083      	lsls	r3, r0, #2
 8000bca:	181a      	adds	r2, r3, r0
 8000bcc:	0092      	lsls	r2, r2, #2
 8000bce:	188a      	adds	r2, r1, r2
 8000bd0:	2400      	movs	r4, #0
 8000bd2:	6054      	str	r4, [r2, #4]
  swtimer_tbl[ch].enable = true;
 8000bd4:	181b      	adds	r3, r3, r0
 8000bd6:	009b      	lsls	r3, r3, #2
 8000bd8:	2201      	movs	r2, #1
 8000bda:	545a      	strb	r2, [r3, r1]

  return true;
 8000bdc:	2001      	movs	r0, #1
}
 8000bde:	bd10      	pop	{r4, pc}
     return false;
 8000be0:	2000      	movs	r0, #0
 8000be2:	e7fc      	b.n	8000bde <swtimerStart+0x22>
 8000be4:	2000022c 	.word	0x2000022c
 8000be8:	2000018c 	.word	0x2000018c

08000bec <swtimerISR>:
   return true;
}


void swtimerISR(void)
{
 8000bec:	b510      	push	{r4, lr}
  for(int i=0;i<swtimer_count;i++)
 8000bee:	2400      	movs	r4, #0
 8000bf0:	e000      	b.n	8000bf4 <swtimerISR+0x8>
 8000bf2:	3401      	adds	r4, #1
 8000bf4:	4b16      	ldr	r3, [pc, #88]	@ (8000c50 <swtimerISR+0x64>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	42a3      	cmp	r3, r4
 8000bfa:	dd28      	ble.n	8000c4e <swtimerISR+0x62>
  {
    if(swtimer_tbl[i].enable == true)
 8000bfc:	4a15      	ldr	r2, [pc, #84]	@ (8000c54 <swtimerISR+0x68>)
 8000bfe:	00a3      	lsls	r3, r4, #2
 8000c00:	191b      	adds	r3, r3, r4
 8000c02:	0099      	lsls	r1, r3, #2
 8000c04:	5c8b      	ldrb	r3, [r1, r2]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d0f3      	beq.n	8000bf2 <swtimerISR+0x6>
    {
      swtimer_tbl[i].counter++;
 8000c0a:	0013      	movs	r3, r2
 8000c0c:	185b      	adds	r3, r3, r1
 8000c0e:	685a      	ldr	r2, [r3, #4]
 8000c10:	3201      	adds	r2, #1
 8000c12:	605a      	str	r2, [r3, #4]
      if(swtimer_tbl[i].counter >= swtimer_tbl[i].reload)
 8000c14:	689b      	ldr	r3, [r3, #8]
 8000c16:	429a      	cmp	r2, r3
 8000c18:	d3eb      	bcc.n	8000bf2 <swtimerISR+0x6>
      {
        if(swtimer_tbl[i].func != NULL)
 8000c1a:	4b0e      	ldr	r3, [pc, #56]	@ (8000c54 <swtimerISR+0x68>)
 8000c1c:	185b      	adds	r3, r3, r1
 8000c1e:	68d9      	ldr	r1, [r3, #12]
 8000c20:	2900      	cmp	r1, #0
 8000c22:	d006      	beq.n	8000c32 <swtimerISR+0x46>
        {
          swtimer_tbl[i].func(swtimer_tbl[i].func_arg);
 8000c24:	4b0b      	ldr	r3, [pc, #44]	@ (8000c54 <swtimerISR+0x68>)
 8000c26:	00a2      	lsls	r2, r4, #2
 8000c28:	1912      	adds	r2, r2, r4
 8000c2a:	0090      	lsls	r0, r2, #2
 8000c2c:	181b      	adds	r3, r3, r0
 8000c2e:	6918      	ldr	r0, [r3, #16]
 8000c30:	4788      	blx	r1
        }
        swtimer_tbl[i].counter = 0;
 8000c32:	4b08      	ldr	r3, [pc, #32]	@ (8000c54 <swtimerISR+0x68>)
 8000c34:	00a2      	lsls	r2, r4, #2
 8000c36:	1912      	adds	r2, r2, r4
 8000c38:	0091      	lsls	r1, r2, #2
 8000c3a:	185b      	adds	r3, r3, r1
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	605a      	str	r2, [r3, #4]
        if(swtimer_tbl[i].mode == SWTIMER_ONETIME)
 8000c40:	785b      	ldrb	r3, [r3, #1]
 8000c42:	2b01      	cmp	r3, #1
 8000c44:	d1d5      	bne.n	8000bf2 <swtimerISR+0x6>
        {
          swtimer_tbl[i].enable = false;
 8000c46:	4a03      	ldr	r2, [pc, #12]	@ (8000c54 <swtimerISR+0x68>)
 8000c48:	2300      	movs	r3, #0
 8000c4a:	548b      	strb	r3, [r1, r2]
 8000c4c:	e7d1      	b.n	8000bf2 <swtimerISR+0x6>
        }
      }
    }
  }

}
 8000c4e:	bd10      	pop	{r4, pc}
 8000c50:	2000022c 	.word	0x2000022c
 8000c54:	2000018c 	.word	0x2000018c

08000c58 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c58:	b510      	push	{r4, lr}
  //1ms 호출 됨
  if(htim == &htim14)
 8000c5a:	4b03      	ldr	r3, [pc, #12]	@ (8000c68 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8000c5c:	4283      	cmp	r3, r0
 8000c5e:	d000      	beq.n	8000c62 <HAL_TIM_PeriodElapsedCallback+0xa>
  {
    swtimerISR();
  }
  return;

}
 8000c60:	bd10      	pop	{r4, pc}
    swtimerISR();
 8000c62:	f7ff ffc3 	bl	8000bec <swtimerISR>
  return;
 8000c66:	e7fb      	b.n	8000c60 <HAL_TIM_PeriodElapsedCallback+0x8>
 8000c68:	20000424 	.word	0x20000424

08000c6c <uartInit>:
static uint16_t q_out = 0;
static uint8_t q_buf[UART_Q_BUF_MAX];


bool     uartInit(void)
{
 8000c6c:	b510      	push	{r4, lr}
  HAL_UART_Receive_DMA(&huart1, &q_buf[0] , UART_Q_BUF_MAX);
 8000c6e:	2280      	movs	r2, #128	@ 0x80
 8000c70:	4903      	ldr	r1, [pc, #12]	@ (8000c80 <uartInit+0x14>)
 8000c72:	4804      	ldr	r0, [pc, #16]	@ (8000c84 <uartInit+0x18>)
 8000c74:	0052      	lsls	r2, r2, #1
 8000c76:	f002 ff83 	bl	8003b80 <HAL_UART_Receive_DMA>
  return true;
}
 8000c7a:	2001      	movs	r0, #1
 8000c7c:	bd10      	pop	{r4, pc}
 8000c7e:	46c0      	nop			@ (mov r8, r8)
 8000c80:	20000230 	.word	0x20000230
 8000c84:	20000390 	.word	0x20000390

08000c88 <uartWrite>:

uint32_t uartWrite(uint8_t ch,uint8_t* p_data,uint32_t length)
{
 8000c88:	b510      	push	{r4, lr}
 8000c8a:	0014      	movs	r4, r2
  uint32_t ret = 0;
  HAL_StatusTypeDef hal_ret;


  switch(ch)
 8000c8c:	2800      	cmp	r0, #0
 8000c8e:	d001      	beq.n	8000c94 <uartWrite+0xc>
  uint32_t ret = 0;
 8000c90:	2000      	movs	r0, #0
      }
      break;
  }

  return ret;
}
 8000c92:	bd10      	pop	{r4, pc}
      hal_ret = HAL_UART_Transmit(&huart1, p_data, length, 100);
 8000c94:	b292      	uxth	r2, r2
 8000c96:	4805      	ldr	r0, [pc, #20]	@ (8000cac <uartWrite+0x24>)
 8000c98:	2364      	movs	r3, #100	@ 0x64
 8000c9a:	f002 fdf6 	bl	800388a <HAL_UART_Transmit>
      if(hal_ret == HAL_OK)
 8000c9e:	2800      	cmp	r0, #0
 8000ca0:	d001      	beq.n	8000ca6 <uartWrite+0x1e>
  uint32_t ret = 0;
 8000ca2:	2000      	movs	r0, #0
 8000ca4:	e7f5      	b.n	8000c92 <uartWrite+0xa>
        ret = length;
 8000ca6:	0020      	movs	r0, r4
  return ret;
 8000ca8:	e7f3      	b.n	8000c92 <uartWrite+0xa>
 8000caa:	46c0      	nop			@ (mov r8, r8)
 8000cac:	20000390 	.word	0x20000390

08000cb0 <uartAvailable>:

uint32_t uartAvailable(uint8_t ch)
{
  uint32_t ret = 0;

  switch(ch)
 8000cb0:	2800      	cmp	r0, #0
 8000cb2:	d116      	bne.n	8000ce2 <uartAvailable+0x32>
  {
    case _DEF_CH1:
      q_in = (UART_Q_BUF_MAX - huart1.hdmarx->Instance->CNDTR) % UART_Q_BUF_MAX;
 8000cb4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ce8 <uartAvailable+0x38>)
 8000cb6:	2280      	movs	r2, #128	@ 0x80
 8000cb8:	589b      	ldr	r3, [r3, r2]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	685a      	ldr	r2, [r3, #4]
 8000cbe:	b292      	uxth	r2, r2
 8000cc0:	4252      	negs	r2, r2
 8000cc2:	23ff      	movs	r3, #255	@ 0xff
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	4a09      	ldr	r2, [pc, #36]	@ (8000cec <uartAvailable+0x3c>)
 8000cc8:	8013      	strh	r3, [r2, #0]
      ret = (UART_Q_BUF_MAX + q_in - q_out) % UART_Q_BUF_MAX;
 8000cca:	3301      	adds	r3, #1
 8000ccc:	33ff      	adds	r3, #255	@ 0xff
 8000cce:	4a08      	ldr	r2, [pc, #32]	@ (8000cf0 <uartAvailable+0x40>)
 8000cd0:	8812      	ldrh	r2, [r2, #0]
 8000cd2:	1a9b      	subs	r3, r3, r2
 8000cd4:	17da      	asrs	r2, r3, #31
 8000cd6:	0e12      	lsrs	r2, r2, #24
 8000cd8:	189b      	adds	r3, r3, r2
 8000cda:	30ff      	adds	r0, #255	@ 0xff
 8000cdc:	4018      	ands	r0, r3
 8000cde:	1a80      	subs	r0, r0, r2
      break;
  }

  return ret;
}
 8000ce0:	4770      	bx	lr
  uint32_t ret = 0;
 8000ce2:	2000      	movs	r0, #0
  return ret;
 8000ce4:	e7fc      	b.n	8000ce0 <uartAvailable+0x30>
 8000ce6:	46c0      	nop			@ (mov r8, r8)
 8000ce8:	20000390 	.word	0x20000390
 8000cec:	20000332 	.word	0x20000332
 8000cf0:	20000330 	.word	0x20000330

08000cf4 <uartRead>:

uint8_t  uartRead(uint8_t ch)
{
  uint8_t ret = 0;

  switch(ch)
 8000cf4:	2800      	cmp	r0, #0
 8000cf6:	d10d      	bne.n	8000d14 <uartRead+0x20>
  {
    case _DEF_CH1:
      if( q_out != q_in)
 8000cf8:	4b07      	ldr	r3, [pc, #28]	@ (8000d18 <uartRead+0x24>)
 8000cfa:	881b      	ldrh	r3, [r3, #0]
 8000cfc:	4a07      	ldr	r2, [pc, #28]	@ (8000d1c <uartRead+0x28>)
 8000cfe:	8812      	ldrh	r2, [r2, #0]
 8000d00:	4293      	cmp	r3, r2
 8000d02:	d008      	beq.n	8000d16 <uartRead+0x22>
      {
        ret = q_buf[q_out];
 8000d04:	4a06      	ldr	r2, [pc, #24]	@ (8000d20 <uartRead+0x2c>)
 8000d06:	5cd0      	ldrb	r0, [r2, r3]
        q_out = (q_out+1) % UART_Q_BUF_MAX;
 8000d08:	3301      	adds	r3, #1
 8000d0a:	22ff      	movs	r2, #255	@ 0xff
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	4a02      	ldr	r2, [pc, #8]	@ (8000d18 <uartRead+0x24>)
 8000d10:	8013      	strh	r3, [r2, #0]
 8000d12:	e000      	b.n	8000d16 <uartRead+0x22>
  uint8_t ret = 0;
 8000d14:	2000      	movs	r0, #0
      break;
  }


  return ret;
}
 8000d16:	4770      	bx	lr
 8000d18:	20000330 	.word	0x20000330
 8000d1c:	20000332 	.word	0x20000332
 8000d20:	20000230 	.word	0x20000230

08000d24 <uartPrintf>:


uint32_t uartPrintf(uint8_t ch,const char *fmt, ...)
{
 8000d24:	b40e      	push	{r1, r2, r3}
 8000d26:	b510      	push	{r4, lr}
 8000d28:	b0c3      	sub	sp, #268	@ 0x10c
 8000d2a:	0004      	movs	r4, r0
 8000d2c:	ab45      	add	r3, sp, #276	@ 0x114
 8000d2e:	cb04      	ldmia	r3!, {r2}
  uint32_t ret = 0;
  va_list arg;
  char print_buf[256];

  va_start(arg,fmt);
 8000d30:	9341      	str	r3, [sp, #260]	@ 0x104

  int len;
  len = vsnprintf(print_buf,256,fmt,arg);
 8000d32:	2180      	movs	r1, #128	@ 0x80
 8000d34:	0049      	lsls	r1, r1, #1
 8000d36:	a801      	add	r0, sp, #4
 8000d38:	f003 f8ac 	bl	8003e94 <vsniprintf>
 8000d3c:	1e02      	subs	r2, r0, #0

  va_end(arg);

  if(len>0)
 8000d3e:	dc05      	bgt.n	8000d4c <uartPrintf+0x28>
  uint32_t ret = 0;
 8000d40:	2000      	movs	r0, #0
  {
    ret = uartWrite(ch,(uint8_t *)print_buf,len);
  }

  return ret;
}
 8000d42:	b043      	add	sp, #268	@ 0x10c
 8000d44:	bc10      	pop	{r4}
 8000d46:	bc08      	pop	{r3}
 8000d48:	b003      	add	sp, #12
 8000d4a:	4718      	bx	r3
    ret = uartWrite(ch,(uint8_t *)print_buf,len);
 8000d4c:	a901      	add	r1, sp, #4
 8000d4e:	0020      	movs	r0, r4
 8000d50:	f7ff ff9a 	bl	8000c88 <uartWrite>
 8000d54:	e7f5      	b.n	8000d42 <uartPrintf+0x1e>

08000d56 <uartVPrintf>:


uint32_t uartVPrintf(uint8_t ch,const char *fmt, va_list arg)
{
 8000d56:	b510      	push	{r4, lr}
 8000d58:	b0c0      	sub	sp, #256	@ 0x100
 8000d5a:	0004      	movs	r4, r0
 8000d5c:	0013      	movs	r3, r2
  uint32_t ret = 0;
  char print_buf[256];

  int len;
  len = vsnprintf(print_buf,256,fmt,arg);
 8000d5e:	2080      	movs	r0, #128	@ 0x80
 8000d60:	000a      	movs	r2, r1
 8000d62:	0041      	lsls	r1, r0, #1
 8000d64:	4668      	mov	r0, sp
 8000d66:	f003 f895 	bl	8003e94 <vsniprintf>
 8000d6a:	1e02      	subs	r2, r0, #0

  if(len>0)
 8000d6c:	dc02      	bgt.n	8000d74 <uartVPrintf+0x1e>
  uint32_t ret = 0;
 8000d6e:	2000      	movs	r0, #0
  {
    ret = uartWrite(ch,(uint8_t *)print_buf,len);
  }

  return ret;
}
 8000d70:	b040      	add	sp, #256	@ 0x100
 8000d72:	bd10      	pop	{r4, pc}
    ret = uartWrite(ch,(uint8_t *)print_buf,len);
 8000d74:	4669      	mov	r1, sp
 8000d76:	0020      	movs	r0, r4
 8000d78:	f7ff ff86 	bl	8000c88 <uartWrite>
 8000d7c:	e7f8      	b.n	8000d70 <uartVPrintf+0x1a>

08000d7e <delay>:
#include "utils.h"



void delay(uint32_t time_ms)
{
 8000d7e:	b510      	push	{r4, lr}
  HAL_Delay(time_ms);
 8000d80:	f000 fc5a 	bl	8001638 <HAL_Delay>
}
 8000d84:	bd10      	pop	{r4, pc}

08000d86 <millis>:

uint32_t millis(void)
{
 8000d86:	b510      	push	{r4, lr}
  return HAL_GetTick();
 8000d88:	f000 fc50 	bl	800162c <HAL_GetTick>
}
 8000d8c:	bd10      	pop	{r4, pc}
	...

08000d90 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d90:	b082      	sub	sp, #8

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d92:	4a05      	ldr	r2, [pc, #20]	@ (8000da8 <MX_DMA_Init+0x18>)
 8000d94:	6b91      	ldr	r1, [r2, #56]	@ 0x38
 8000d96:	2301      	movs	r3, #1
 8000d98:	4319      	orrs	r1, r3
 8000d9a:	6391      	str	r1, [r2, #56]	@ 0x38
 8000d9c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8000d9e:	4013      	ands	r3, r2
 8000da0:	9301      	str	r3, [sp, #4]
 8000da2:	9b01      	ldr	r3, [sp, #4]

}
 8000da4:	b002      	add	sp, #8
 8000da6:	4770      	bx	lr
 8000da8:	40021000 	.word	0x40021000

08000dac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dac:	b084      	sub	sp, #16
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dae:	4b0d      	ldr	r3, [pc, #52]	@ (8000de4 <MX_GPIO_Init+0x38>)
 8000db0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000db2:	2204      	movs	r2, #4
 8000db4:	4311      	orrs	r1, r2
 8000db6:	6359      	str	r1, [r3, #52]	@ 0x34
 8000db8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000dba:	400a      	ands	r2, r1
 8000dbc:	9201      	str	r2, [sp, #4]
 8000dbe:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	4311      	orrs	r1, r2
 8000dc6:	6359      	str	r1, [r3, #52]	@ 0x34
 8000dc8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000dca:	400a      	ands	r2, r1
 8000dcc:	9202      	str	r2, [sp, #8]
 8000dce:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dd0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000dd2:	2202      	movs	r2, #2
 8000dd4:	4311      	orrs	r1, r2
 8000dd6:	6359      	str	r1, [r3, #52]	@ 0x34
 8000dd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000dda:	401a      	ands	r2, r3
 8000ddc:	9203      	str	r2, [sp, #12]
 8000dde:	9b03      	ldr	r3, [sp, #12]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000de0:	b004      	add	sp, #16
 8000de2:	4770      	bx	lr
 8000de4:	40021000 	.word	0x40021000

08000de8 <Error_Handler>:
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000de8:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dea:	e7fe      	b.n	8000dea <Error_Handler+0x2>

08000dec <MX_TIM1_Init>:
{
 8000dec:	b500      	push	{lr}
 8000dee:	b09d      	sub	sp, #116	@ 0x74
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000df0:	2210      	movs	r2, #16
 8000df2:	2100      	movs	r1, #0
 8000df4:	a818      	add	r0, sp, #96	@ 0x60
 8000df6:	f003 f859 	bl	8003eac <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dfa:	220c      	movs	r2, #12
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	a815      	add	r0, sp, #84	@ 0x54
 8000e00:	f003 f854 	bl	8003eac <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e04:	221c      	movs	r2, #28
 8000e06:	2100      	movs	r1, #0
 8000e08:	a80e      	add	r0, sp, #56	@ 0x38
 8000e0a:	f003 f84f 	bl	8003eac <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e0e:	2234      	movs	r2, #52	@ 0x34
 8000e10:	2100      	movs	r1, #0
 8000e12:	a801      	add	r0, sp, #4
 8000e14:	f003 f84a 	bl	8003eac <memset>
  htim1.Instance = TIM1;
 8000e18:	4830      	ldr	r0, [pc, #192]	@ (8000edc <MX_TIM1_Init+0xf0>)
 8000e1a:	4b31      	ldr	r3, [pc, #196]	@ (8000ee0 <MX_TIM1_Init+0xf4>)
 8000e1c:	6003      	str	r3, [r0, #0]
  htim1.Init.Prescaler = 47;
 8000e1e:	232f      	movs	r3, #47	@ 0x2f
 8000e20:	6043      	str	r3, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e22:	2300      	movs	r3, #0
 8000e24:	6083      	str	r3, [r0, #8]
  htim1.Init.Period = 99;
 8000e26:	2263      	movs	r2, #99	@ 0x63
 8000e28:	60c2      	str	r2, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e2a:	6103      	str	r3, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e2c:	6143      	str	r3, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e2e:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e30:	f001 ff8a 	bl	8002d48 <HAL_TIM_Base_Init>
 8000e34:	2800      	cmp	r0, #0
 8000e36:	d144      	bne.n	8000ec2 <MX_TIM1_Init+0xd6>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e38:	2380      	movs	r3, #128	@ 0x80
 8000e3a:	015b      	lsls	r3, r3, #5
 8000e3c:	9318      	str	r3, [sp, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000e3e:	4827      	ldr	r0, [pc, #156]	@ (8000edc <MX_TIM1_Init+0xf0>)
 8000e40:	a918      	add	r1, sp, #96	@ 0x60
 8000e42:	f002 f8cb 	bl	8002fdc <HAL_TIM_ConfigClockSource>
 8000e46:	2800      	cmp	r0, #0
 8000e48:	d13d      	bne.n	8000ec6 <MX_TIM1_Init+0xda>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000e4a:	4824      	ldr	r0, [pc, #144]	@ (8000edc <MX_TIM1_Init+0xf0>)
 8000e4c:	f001 ffac 	bl	8002da8 <HAL_TIM_PWM_Init>
 8000e50:	2800      	cmp	r0, #0
 8000e52:	d13a      	bne.n	8000eca <MX_TIM1_Init+0xde>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e54:	2300      	movs	r3, #0
 8000e56:	9315      	str	r3, [sp, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000e58:	9316      	str	r3, [sp, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e5a:	9317      	str	r3, [sp, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e5c:	481f      	ldr	r0, [pc, #124]	@ (8000edc <MX_TIM1_Init+0xf0>)
 8000e5e:	a915      	add	r1, sp, #84	@ 0x54
 8000e60:	f002 f9e0 	bl	8003224 <HAL_TIMEx_MasterConfigSynchronization>
 8000e64:	2800      	cmp	r0, #0
 8000e66:	d132      	bne.n	8000ece <MX_TIM1_Init+0xe2>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e68:	2360      	movs	r3, #96	@ 0x60
 8000e6a:	930e      	str	r3, [sp, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	930f      	str	r3, [sp, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e70:	9310      	str	r3, [sp, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e72:	9311      	str	r3, [sp, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e74:	9312      	str	r3, [sp, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e76:	9313      	str	r3, [sp, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e78:	9314      	str	r3, [sp, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e7a:	4818      	ldr	r0, [pc, #96]	@ (8000edc <MX_TIM1_Init+0xf0>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	a90e      	add	r1, sp, #56	@ 0x38
 8000e80:	f001 fffe 	bl	8002e80 <HAL_TIM_PWM_ConfigChannel>
 8000e84:	2800      	cmp	r0, #0
 8000e86:	d124      	bne.n	8000ed2 <MX_TIM1_Init+0xe6>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e8c:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e8e:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000e90:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e92:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e94:	2280      	movs	r2, #128	@ 0x80
 8000e96:	0192      	lsls	r2, r2, #6
 8000e98:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000e9a:	9307      	str	r3, [sp, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000e9c:	9308      	str	r3, [sp, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000e9e:	9309      	str	r3, [sp, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000ea0:	2280      	movs	r2, #128	@ 0x80
 8000ea2:	0492      	lsls	r2, r2, #18
 8000ea4:	920a      	str	r2, [sp, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000ea6:	930b      	str	r3, [sp, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000ea8:	930c      	str	r3, [sp, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000eaa:	930d      	str	r3, [sp, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000eac:	480b      	ldr	r0, [pc, #44]	@ (8000edc <MX_TIM1_Init+0xf0>)
 8000eae:	a901      	add	r1, sp, #4
 8000eb0:	f002 f9f0 	bl	8003294 <HAL_TIMEx_ConfigBreakDeadTime>
 8000eb4:	2800      	cmp	r0, #0
 8000eb6:	d10e      	bne.n	8000ed6 <MX_TIM1_Init+0xea>
  HAL_TIM_MspPostInit(&htim1);
 8000eb8:	4808      	ldr	r0, [pc, #32]	@ (8000edc <MX_TIM1_Init+0xf0>)
 8000eba:	f000 fa8d 	bl	80013d8 <HAL_TIM_MspPostInit>
}
 8000ebe:	b01d      	add	sp, #116	@ 0x74
 8000ec0:	bd00      	pop	{pc}
    Error_Handler();
 8000ec2:	f7ff ff91 	bl	8000de8 <Error_Handler>
    Error_Handler();
 8000ec6:	f7ff ff8f 	bl	8000de8 <Error_Handler>
    Error_Handler();
 8000eca:	f7ff ff8d 	bl	8000de8 <Error_Handler>
    Error_Handler();
 8000ece:	f7ff ff8b 	bl	8000de8 <Error_Handler>
    Error_Handler();
 8000ed2:	f7ff ff89 	bl	8000de8 <Error_Handler>
    Error_Handler();
 8000ed6:	f7ff ff87 	bl	8000de8 <Error_Handler>
 8000eda:	46c0      	nop			@ (mov r8, r8)
 8000edc:	20000470 	.word	0x20000470
 8000ee0:	40012c00 	.word	0x40012c00

08000ee4 <MX_ADC1_Init>:
{
 8000ee4:	b500      	push	{lr}
 8000ee6:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 8000ee8:	220c      	movs	r2, #12
 8000eea:	2100      	movs	r1, #0
 8000eec:	a801      	add	r0, sp, #4
 8000eee:	f002 ffdd 	bl	8003eac <memset>
  hadc1.Instance = ADC1;
 8000ef2:	4828      	ldr	r0, [pc, #160]	@ (8000f94 <MX_ADC1_Init+0xb0>)
 8000ef4:	4b28      	ldr	r3, [pc, #160]	@ (8000f98 <MX_ADC1_Init+0xb4>)
 8000ef6:	6003      	str	r3, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000ef8:	2380      	movs	r3, #128	@ 0x80
 8000efa:	05db      	lsls	r3, r3, #23
 8000efc:	6043      	str	r3, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000efe:	2300      	movs	r3, #0
 8000f00:	6083      	str	r3, [r0, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f02:	60c3      	str	r3, [r0, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000f04:	2280      	movs	r2, #128	@ 0x80
 8000f06:	0392      	lsls	r2, r2, #14
 8000f08:	6102      	str	r2, [r0, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f0a:	2204      	movs	r2, #4
 8000f0c:	6142      	str	r2, [r0, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f0e:	7603      	strb	r3, [r0, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000f10:	7643      	strb	r3, [r0, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000f12:	3a03      	subs	r2, #3
 8000f14:	7682      	strb	r2, [r0, #26]
  hadc1.Init.NbrOfConversion = 3;
 8000f16:	2103      	movs	r1, #3
 8000f18:	61c1      	str	r1, [r0, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f1a:	6243      	str	r3, [r0, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f1c:	6283      	str	r3, [r0, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000f1e:	3129      	adds	r1, #41	@ 0x29
 8000f20:	5442      	strb	r2, [r0, r1]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f22:	6303      	str	r3, [r0, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8000f24:	3925      	subs	r1, #37	@ 0x25
 8000f26:	6341      	str	r1, [r0, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000f28:	6383      	str	r3, [r0, #56]	@ 0x38
  hadc1.Init.OversamplingMode = ENABLE;
 8000f2a:	3135      	adds	r1, #53	@ 0x35
 8000f2c:	5442      	strb	r2, [r0, r1]
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_8;
 8000f2e:	3207      	adds	r2, #7
 8000f30:	6402      	str	r2, [r0, #64]	@ 0x40
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_3;
 8000f32:	3258      	adds	r2, #88	@ 0x58
 8000f34:	6442      	str	r2, [r0, #68]	@ 0x44
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8000f36:	6483      	str	r3, [r0, #72]	@ 0x48
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000f38:	64c3      	str	r3, [r0, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f3a:	f000 fb8f 	bl	800165c <HAL_ADC_Init>
 8000f3e:	2800      	cmp	r0, #0
 8000f40:	d120      	bne.n	8000f84 <MX_ADC1_Init+0xa0>
  sConfig.Channel = ADC_CHANNEL_4;
 8000f42:	4b16      	ldr	r3, [pc, #88]	@ (8000f9c <MX_ADC1_Init+0xb8>)
 8000f44:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f46:	2300      	movs	r3, #0
 8000f48:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000f4a:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f4c:	4811      	ldr	r0, [pc, #68]	@ (8000f94 <MX_ADC1_Init+0xb0>)
 8000f4e:	a901      	add	r1, sp, #4
 8000f50:	f000 fcfa 	bl	8001948 <HAL_ADC_ConfigChannel>
 8000f54:	2800      	cmp	r0, #0
 8000f56:	d117      	bne.n	8000f88 <MX_ADC1_Init+0xa4>
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000f58:	4b11      	ldr	r3, [pc, #68]	@ (8000fa0 <MX_ADC1_Init+0xbc>)
 8000f5a:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000f5c:	2304      	movs	r3, #4
 8000f5e:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f60:	480c      	ldr	r0, [pc, #48]	@ (8000f94 <MX_ADC1_Init+0xb0>)
 8000f62:	a901      	add	r1, sp, #4
 8000f64:	f000 fcf0 	bl	8001948 <HAL_ADC_ConfigChannel>
 8000f68:	2800      	cmp	r0, #0
 8000f6a:	d10f      	bne.n	8000f8c <MX_ADC1_Init+0xa8>
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000f6c:	4b0d      	ldr	r3, [pc, #52]	@ (8000fa4 <MX_ADC1_Init+0xc0>)
 8000f6e:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000f70:	2308      	movs	r3, #8
 8000f72:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f74:	4807      	ldr	r0, [pc, #28]	@ (8000f94 <MX_ADC1_Init+0xb0>)
 8000f76:	a901      	add	r1, sp, #4
 8000f78:	f000 fce6 	bl	8001948 <HAL_ADC_ConfigChannel>
 8000f7c:	2800      	cmp	r0, #0
 8000f7e:	d107      	bne.n	8000f90 <MX_ADC1_Init+0xac>
}
 8000f80:	b005      	add	sp, #20
 8000f82:	bd00      	pop	{pc}
    Error_Handler();
 8000f84:	f7ff ff30 	bl	8000de8 <Error_Handler>
    Error_Handler();
 8000f88:	f7ff ff2e 	bl	8000de8 <Error_Handler>
    Error_Handler();
 8000f8c:	f7ff ff2c 	bl	8000de8 <Error_Handler>
    Error_Handler();
 8000f90:	f7ff ff2a 	bl	8000de8 <Error_Handler>
 8000f94:	20000540 	.word	0x20000540
 8000f98:	40012400 	.word	0x40012400
 8000f9c:	10000010 	.word	0x10000010
 8000fa0:	a4000200 	.word	0xa4000200
 8000fa4:	a8000400 	.word	0xa8000400

08000fa8 <MX_USART1_UART_Init>:
{
 8000fa8:	b510      	push	{r4, lr}
  huart1.Instance = USART1;
 8000faa:	4817      	ldr	r0, [pc, #92]	@ (8001008 <MX_USART1_UART_Init+0x60>)
 8000fac:	4b17      	ldr	r3, [pc, #92]	@ (800100c <MX_USART1_UART_Init+0x64>)
 8000fae:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8000fb0:	23e1      	movs	r3, #225	@ 0xe1
 8000fb2:	025b      	lsls	r3, r3, #9
 8000fb4:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000fba:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000fbc:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000fbe:	220c      	movs	r2, #12
 8000fc0:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fc2:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fc4:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fc6:	6203      	str	r3, [r0, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000fc8:	6243      	str	r3, [r0, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fca:	6283      	str	r3, [r0, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000fcc:	f002 fd46 	bl	8003a5c <HAL_UART_Init>
 8000fd0:	2800      	cmp	r0, #0
 8000fd2:	d111      	bne.n	8000ff8 <MX_USART1_UART_Init+0x50>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fd4:	480c      	ldr	r0, [pc, #48]	@ (8001008 <MX_USART1_UART_Init+0x60>)
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	f002 fe4c 	bl	8003c74 <HAL_UARTEx_SetTxFifoThreshold>
 8000fdc:	2800      	cmp	r0, #0
 8000fde:	d10d      	bne.n	8000ffc <MX_USART1_UART_Init+0x54>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fe0:	4809      	ldr	r0, [pc, #36]	@ (8001008 <MX_USART1_UART_Init+0x60>)
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	f002 fe6c 	bl	8003cc0 <HAL_UARTEx_SetRxFifoThreshold>
 8000fe8:	2800      	cmp	r0, #0
 8000fea:	d109      	bne.n	8001000 <MX_USART1_UART_Init+0x58>
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000fec:	4806      	ldr	r0, [pc, #24]	@ (8001008 <MX_USART1_UART_Init+0x60>)
 8000fee:	f002 fe21 	bl	8003c34 <HAL_UARTEx_DisableFifoMode>
 8000ff2:	2800      	cmp	r0, #0
 8000ff4:	d106      	bne.n	8001004 <MX_USART1_UART_Init+0x5c>
}
 8000ff6:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000ff8:	f7ff fef6 	bl	8000de8 <Error_Handler>
    Error_Handler();
 8000ffc:	f7ff fef4 	bl	8000de8 <Error_Handler>
    Error_Handler();
 8001000:	f7ff fef2 	bl	8000de8 <Error_Handler>
    Error_Handler();
 8001004:	f7ff fef0 	bl	8000de8 <Error_Handler>
 8001008:	20000390 	.word	0x20000390
 800100c:	40013800 	.word	0x40013800

08001010 <MX_TIM14_Init>:
{
 8001010:	b510      	push	{r4, lr}
  htim14.Instance = TIM14;
 8001012:	4809      	ldr	r0, [pc, #36]	@ (8001038 <MX_TIM14_Init+0x28>)
 8001014:	4b09      	ldr	r3, [pc, #36]	@ (800103c <MX_TIM14_Init+0x2c>)
 8001016:	6003      	str	r3, [r0, #0]
  htim14.Init.Prescaler = 47;
 8001018:	232f      	movs	r3, #47	@ 0x2f
 800101a:	6043      	str	r3, [r0, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800101c:	2300      	movs	r3, #0
 800101e:	6083      	str	r3, [r0, #8]
  htim14.Init.Period = 999;
 8001020:	4a07      	ldr	r2, [pc, #28]	@ (8001040 <MX_TIM14_Init+0x30>)
 8001022:	60c2      	str	r2, [r0, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001024:	6103      	str	r3, [r0, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001026:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001028:	f001 fe8e 	bl	8002d48 <HAL_TIM_Base_Init>
 800102c:	2800      	cmp	r0, #0
 800102e:	d100      	bne.n	8001032 <MX_TIM14_Init+0x22>
}
 8001030:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001032:	f7ff fed9 	bl	8000de8 <Error_Handler>
 8001036:	46c0      	nop			@ (mov r8, r8)
 8001038:	20000424 	.word	0x20000424
 800103c:	40002000 	.word	0x40002000
 8001040:	000003e7 	.word	0x000003e7

08001044 <MX_RTC_Init>:
{
 8001044:	b500      	push	{lr}
 8001046:	b087      	sub	sp, #28
  RTC_TimeTypeDef sTime = {0};
 8001048:	2214      	movs	r2, #20
 800104a:	2100      	movs	r1, #0
 800104c:	a801      	add	r0, sp, #4
 800104e:	f002 ff2d 	bl	8003eac <memset>
  RTC_DateTypeDef sDate = {0};
 8001052:	2300      	movs	r3, #0
 8001054:	9300      	str	r3, [sp, #0]
  hrtc.Instance = RTC;
 8001056:	481b      	ldr	r0, [pc, #108]	@ (80010c4 <MX_RTC_Init+0x80>)
 8001058:	4a1b      	ldr	r2, [pc, #108]	@ (80010c8 <MX_RTC_Init+0x84>)
 800105a:	6002      	str	r2, [r0, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800105c:	6043      	str	r3, [r0, #4]
  hrtc.Init.AsynchPrediv = 127;
 800105e:	227f      	movs	r2, #127	@ 0x7f
 8001060:	6082      	str	r2, [r0, #8]
  hrtc.Init.SynchPrediv = 255;
 8001062:	3280      	adds	r2, #128	@ 0x80
 8001064:	60c2      	str	r2, [r0, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001066:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001068:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800106a:	6183      	str	r3, [r0, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800106c:	2280      	movs	r2, #128	@ 0x80
 800106e:	05d2      	lsls	r2, r2, #23
 8001070:	61c2      	str	r2, [r0, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001072:	6203      	str	r3, [r0, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001074:	f001 fa7a 	bl	800256c <HAL_RTC_Init>
 8001078:	2800      	cmp	r0, #0
 800107a:	d11d      	bne.n	80010b8 <MX_RTC_Init+0x74>
  sTime.Hours = 0;
 800107c:	a901      	add	r1, sp, #4
 800107e:	2300      	movs	r3, #0
 8001080:	700b      	strb	r3, [r1, #0]
  sTime.Minutes = 0;
 8001082:	704b      	strb	r3, [r1, #1]
  sTime.Seconds = 0;
 8001084:	708b      	strb	r3, [r1, #2]
  sTime.SubSeconds = 0;
 8001086:	604b      	str	r3, [r1, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001088:	60cb      	str	r3, [r1, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800108a:	610b      	str	r3, [r1, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800108c:	480d      	ldr	r0, [pc, #52]	@ (80010c4 <MX_RTC_Init+0x80>)
 800108e:	2200      	movs	r2, #0
 8001090:	f001 faca 	bl	8002628 <HAL_RTC_SetTime>
 8001094:	2800      	cmp	r0, #0
 8001096:	d111      	bne.n	80010bc <MX_RTC_Init+0x78>
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001098:	2301      	movs	r3, #1
 800109a:	466a      	mov	r2, sp
 800109c:	7013      	strb	r3, [r2, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800109e:	7053      	strb	r3, [r2, #1]
  sDate.Date = 1;
 80010a0:	7093      	strb	r3, [r2, #2]
  sDate.Year = 0;
 80010a2:	2300      	movs	r3, #0
 80010a4:	70d3      	strb	r3, [r2, #3]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80010a6:	4807      	ldr	r0, [pc, #28]	@ (80010c4 <MX_RTC_Init+0x80>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	4669      	mov	r1, sp
 80010ac:	f001 fb22 	bl	80026f4 <HAL_RTC_SetDate>
 80010b0:	2800      	cmp	r0, #0
 80010b2:	d105      	bne.n	80010c0 <MX_RTC_Init+0x7c>
}
 80010b4:	b007      	add	sp, #28
 80010b6:	bd00      	pop	{pc}
    Error_Handler();
 80010b8:	f7ff fe96 	bl	8000de8 <Error_Handler>
    Error_Handler();
 80010bc:	f7ff fe94 	bl	8000de8 <Error_Handler>
    Error_Handler();
 80010c0:	f7ff fe92 	bl	8000de8 <Error_Handler>
 80010c4:	200004bc 	.word	0x200004bc
 80010c8:	40002800 	.word	0x40002800

080010cc <SystemClock_Config>:
{
 80010cc:	b510      	push	{r4, lr}
  * @rmtoll FLASH_ACR    FLASH_ACR_PRFTEN        LL_FLASH_EnablePrefetch
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_EnablePrefetch(void)
{
  SET_BIT(FLASH->ACR, FLASH_ACR_PRFTEN);
 80010ce:	492d      	ldr	r1, [pc, #180]	@ (8001184 <SystemClock_Config+0xb8>)
 80010d0:	680b      	ldr	r3, [r1, #0]
 80010d2:	2280      	movs	r2, #128	@ 0x80
 80010d4:	0052      	lsls	r2, r2, #1
 80010d6:	4313      	orrs	r3, r2
 80010d8:	600b      	str	r3, [r1, #0]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80010da:	680b      	ldr	r3, [r1, #0]
 80010dc:	2007      	movs	r0, #7
 80010de:	4383      	bics	r3, r0
 80010e0:	3806      	subs	r0, #6
 80010e2:	4303      	orrs	r3, r0
 80010e4:	600b      	str	r3, [r1, #0]
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80010e6:	4b28      	ldr	r3, [pc, #160]	@ (8001188 <SystemClock_Config+0xbc>)
 80010e8:	6819      	ldr	r1, [r3, #0]
 80010ea:	430a      	orrs	r2, r1
 80010ec:	601a      	str	r2, [r3, #0]
}
 80010ee:	e001      	b.n	80010f4 <SystemClock_Config+0x28>
  while(LL_RCC_HSI_IsReady() != 1)
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	d009      	beq.n	8001108 <SystemClock_Config+0x3c>
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80010f4:	4b24      	ldr	r3, [pc, #144]	@ (8001188 <SystemClock_Config+0xbc>)
 80010f6:	6819      	ldr	r1, [r3, #0]
 80010f8:	2280      	movs	r2, #128	@ 0x80
 80010fa:	00d2      	lsls	r2, r2, #3
 80010fc:	000b      	movs	r3, r1
 80010fe:	4013      	ands	r3, r2
 8001100:	4211      	tst	r1, r2
 8001102:	d0f5      	beq.n	80010f0 <SystemClock_Config+0x24>
 8001104:	2301      	movs	r3, #1
 8001106:	e7f3      	b.n	80010f0 <SystemClock_Config+0x24>
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001108:	4a1f      	ldr	r2, [pc, #124]	@ (8001188 <SystemClock_Config+0xbc>)
 800110a:	6850      	ldr	r0, [r2, #4]
 800110c:	491f      	ldr	r1, [pc, #124]	@ (800118c <SystemClock_Config+0xc0>)
 800110e:	4008      	ands	r0, r1
 8001110:	2180      	movs	r1, #128	@ 0x80
 8001112:	01c9      	lsls	r1, r1, #7
 8001114:	4301      	orrs	r1, r0
 8001116:	6051      	str	r1, [r2, #4]
  *         @arg @ref LL_RCC_HSI_DIV_128
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetHSIDiv(uint32_t HSIDiv)
{
  MODIFY_REG(RCC->CR, RCC_CR_HSIDIV, HSIDiv);
 8001118:	6811      	ldr	r1, [r2, #0]
 800111a:	481d      	ldr	r0, [pc, #116]	@ (8001190 <SystemClock_Config+0xc4>)
 800111c:	4001      	ands	r1, r0
 800111e:	6011      	str	r1, [r2, #0]
  SET_BIT(RCC->CSR1, RCC_CSR1_LSEBYP);
 8001120:	6dd1      	ldr	r1, [r2, #92]	@ 0x5c
 8001122:	2004      	movs	r0, #4
 8001124:	4301      	orrs	r1, r0
 8001126:	65d1      	str	r1, [r2, #92]	@ 0x5c
  SET_BIT(RCC->CSR1, RCC_CSR1_LSEON);
 8001128:	6dd1      	ldr	r1, [r2, #92]	@ 0x5c
 800112a:	3803      	subs	r0, #3
 800112c:	4301      	orrs	r1, r0
 800112e:	65d1      	str	r1, [r2, #92]	@ 0x5c
}
 8001130:	e001      	b.n	8001136 <SystemClock_Config+0x6a>
  while(LL_RCC_LSE_IsReady() != 1)
 8001132:	2801      	cmp	r0, #1
 8001134:	d008      	beq.n	8001148 <SystemClock_Config+0x7c>
  return ((READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == (RCC_CSR1_LSERDY)) ? 1UL : 0UL);
 8001136:	4a14      	ldr	r2, [pc, #80]	@ (8001188 <SystemClock_Config+0xbc>)
 8001138:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800113a:	2102      	movs	r1, #2
 800113c:	0008      	movs	r0, r1
 800113e:	4010      	ands	r0, r2
 8001140:	4211      	tst	r1, r2
 8001142:	d0f6      	beq.n	8001132 <SystemClock_Config+0x66>
 8001144:	0018      	movs	r0, r3
 8001146:	e7f4      	b.n	8001132 <SystemClock_Config+0x66>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001148:	4b0f      	ldr	r3, [pc, #60]	@ (8001188 <SystemClock_Config+0xbc>)
 800114a:	689a      	ldr	r2, [r3, #8]
 800114c:	4911      	ldr	r1, [pc, #68]	@ (8001194 <SystemClock_Config+0xc8>)
 800114e:	400a      	ands	r2, r1
 8001150:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001152:	689a      	ldr	r2, [r3, #8]
 8001154:	2107      	movs	r1, #7
 8001156:	438a      	bics	r2, r1
 8001158:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800115a:	4b0b      	ldr	r3, [pc, #44]	@ (8001188 <SystemClock_Config+0xbc>)
 800115c:	689b      	ldr	r3, [r3, #8]
 800115e:	2238      	movs	r2, #56	@ 0x38
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8001160:	421a      	tst	r2, r3
 8001162:	d1fa      	bne.n	800115a <SystemClock_Config+0x8e>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, Prescaler);
 8001164:	4a08      	ldr	r2, [pc, #32]	@ (8001188 <SystemClock_Config+0xbc>)
 8001166:	6893      	ldr	r3, [r2, #8]
 8001168:	490b      	ldr	r1, [pc, #44]	@ (8001198 <SystemClock_Config+0xcc>)
 800116a:	400b      	ands	r3, r1
 800116c:	6093      	str	r3, [r2, #8]
  LL_SetSystemCoreClock(48000000);
 800116e:	480b      	ldr	r0, [pc, #44]	@ (800119c <SystemClock_Config+0xd0>)
 8001170:	f002 fdce 	bl	8003d10 <LL_SetSystemCoreClock>
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8001174:	2000      	movs	r0, #0
 8001176:	f000 fa0d 	bl	8001594 <HAL_InitTick>
 800117a:	2800      	cmp	r0, #0
 800117c:	d100      	bne.n	8001180 <SystemClock_Config+0xb4>
}
 800117e:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001180:	f7ff fe32 	bl	8000de8 <Error_Handler>
 8001184:	40022000 	.word	0x40022000
 8001188:	40021000 	.word	0x40021000
 800118c:	ffff80ff 	.word	0xffff80ff
 8001190:	ffffc7ff 	.word	0xffffc7ff
 8001194:	fffff0ff 	.word	0xfffff0ff
 8001198:	ffff8fff 	.word	0xffff8fff
 800119c:	02dc6c00 	.word	0x02dc6c00

080011a0 <main>:
{
 80011a0:	b510      	push	{r4, lr}
  HAL_Init();
 80011a2:	f000 fa23 	bl	80015ec <HAL_Init>
  SystemClock_Config();
 80011a6:	f7ff ff91 	bl	80010cc <SystemClock_Config>
  MX_GPIO_Init();
 80011aa:	f7ff fdff 	bl	8000dac <MX_GPIO_Init>
  MX_DMA_Init();
 80011ae:	f7ff fdef 	bl	8000d90 <MX_DMA_Init>
  MX_TIM1_Init();
 80011b2:	f7ff fe1b 	bl	8000dec <MX_TIM1_Init>
  MX_ADC1_Init();
 80011b6:	f7ff fe95 	bl	8000ee4 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 80011ba:	f7ff fef5 	bl	8000fa8 <MX_USART1_UART_Init>
  MX_TIM14_Init();
 80011be:	f7ff ff27 	bl	8001010 <MX_TIM14_Init>
  MX_RTC_Init();
 80011c2:	f7ff ff3f 	bl	8001044 <MX_RTC_Init>
  apInit();
 80011c6:	f7ff f9a1 	bl	800050c <apInit>
  apMain();
 80011ca:	f7ff f9d3 	bl	8000574 <apMain>
  while (1)
 80011ce:	e7fe      	b.n	80011ce <main+0x2e>

080011d0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011d0:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011d2:	4b0a      	ldr	r3, [pc, #40]	@ (80011fc <HAL_MspInit+0x2c>)
 80011d4:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80011d6:	2201      	movs	r2, #1
 80011d8:	4311      	orrs	r1, r2
 80011da:	6419      	str	r1, [r3, #64]	@ 0x40
 80011dc:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80011de:	400a      	ands	r2, r1
 80011e0:	9200      	str	r2, [sp, #0]
 80011e2:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011e4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80011e6:	2180      	movs	r1, #128	@ 0x80
 80011e8:	0549      	lsls	r1, r1, #21
 80011ea:	430a      	orrs	r2, r1
 80011ec:	63da      	str	r2, [r3, #60]	@ 0x3c
 80011ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80011f0:	400b      	ands	r3, r1
 80011f2:	9301      	str	r3, [sp, #4]
 80011f4:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011f6:	b002      	add	sp, #8
 80011f8:	4770      	bx	lr
 80011fa:	46c0      	nop			@ (mov r8, r8)
 80011fc:	40021000 	.word	0x40021000

08001200 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001200:	b510      	push	{r4, lr}
 8001202:	b088      	sub	sp, #32
 8001204:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001206:	2214      	movs	r2, #20
 8001208:	2100      	movs	r1, #0
 800120a:	a803      	add	r0, sp, #12
 800120c:	f002 fe4e 	bl	8003eac <memset>
  if(hadc->Instance==ADC1)
 8001210:	6822      	ldr	r2, [r4, #0]
 8001212:	4b20      	ldr	r3, [pc, #128]	@ (8001294 <HAL_ADC_MspInit+0x94>)
 8001214:	429a      	cmp	r2, r3
 8001216:	d001      	beq.n	800121c <HAL_ADC_MspInit+0x1c>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001218:	b008      	add	sp, #32
 800121a:	bd10      	pop	{r4, pc}
  *         @arg @ref LL_RCC_ADC_CLKSOURCE_HSIKER
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetADCClockSource(uint32_t ADCxSource)
{
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800121c:	4b1e      	ldr	r3, [pc, #120]	@ (8001298 <HAL_ADC_MspInit+0x98>)
 800121e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001220:	0092      	lsls	r2, r2, #2
 8001222:	0892      	lsrs	r2, r2, #2
 8001224:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_ADC_CLK_ENABLE();
 8001226:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001228:	2180      	movs	r1, #128	@ 0x80
 800122a:	0349      	lsls	r1, r1, #13
 800122c:	430a      	orrs	r2, r1
 800122e:	641a      	str	r2, [r3, #64]	@ 0x40
 8001230:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001232:	400a      	ands	r2, r1
 8001234:	9201      	str	r2, [sp, #4]
 8001236:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001238:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800123a:	2201      	movs	r2, #1
 800123c:	4311      	orrs	r1, r2
 800123e:	6359      	str	r1, [r3, #52]	@ 0x34
 8001240:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001242:	401a      	ands	r2, r3
 8001244:	9202      	str	r2, [sp, #8]
 8001246:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001248:	2310      	movs	r3, #16
 800124a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800124c:	3b0d      	subs	r3, #13
 800124e:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001250:	20a0      	movs	r0, #160	@ 0xa0
 8001252:	a903      	add	r1, sp, #12
 8001254:	05c0      	lsls	r0, r0, #23
 8001256:	f000 ffd9 	bl	800220c <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 800125a:	4810      	ldr	r0, [pc, #64]	@ (800129c <HAL_ADC_MspInit+0x9c>)
 800125c:	4b10      	ldr	r3, [pc, #64]	@ (80012a0 <HAL_ADC_MspInit+0xa0>)
 800125e:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001260:	2305      	movs	r3, #5
 8001262:	6043      	str	r3, [r0, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001264:	2300      	movs	r3, #0
 8001266:	6083      	str	r3, [r0, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001268:	60c3      	str	r3, [r0, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800126a:	2280      	movs	r2, #128	@ 0x80
 800126c:	6102      	str	r2, [r0, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800126e:	3280      	adds	r2, #128	@ 0x80
 8001270:	6142      	str	r2, [r0, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001272:	2280      	movs	r2, #128	@ 0x80
 8001274:	00d2      	lsls	r2, r2, #3
 8001276:	6182      	str	r2, [r0, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001278:	2220      	movs	r2, #32
 800127a:	61c2      	str	r2, [r0, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800127c:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800127e:	f000 ff1d 	bl	80020bc <HAL_DMA_Init>
 8001282:	2800      	cmp	r0, #0
 8001284:	d103      	bne.n	800128e <HAL_ADC_MspInit+0x8e>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001286:	4b05      	ldr	r3, [pc, #20]	@ (800129c <HAL_ADC_MspInit+0x9c>)
 8001288:	6523      	str	r3, [r4, #80]	@ 0x50
 800128a:	629c      	str	r4, [r3, #40]	@ 0x28
}
 800128c:	e7c4      	b.n	8001218 <HAL_ADC_MspInit+0x18>
      Error_Handler();
 800128e:	f7ff fdab 	bl	8000de8 <Error_Handler>
 8001292:	e7f8      	b.n	8001286 <HAL_ADC_MspInit+0x86>
 8001294:	40012400 	.word	0x40012400
 8001298:	40021000 	.word	0x40021000
 800129c:	200004e4 	.word	0x200004e4
 80012a0:	40020008 	.word	0x40020008

080012a4 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80012a4:	b082      	sub	sp, #8
  if(hrtc->Instance==RTC)
 80012a6:	6802      	ldr	r2, [r0, #0]
 80012a8:	4b2e      	ldr	r3, [pc, #184]	@ (8001364 <HAL_RTC_MspInit+0xc0>)
 80012aa:	429a      	cmp	r2, r3
 80012ac:	d001      	beq.n	80012b2 <HAL_RTC_MspInit+0xe>

    /* USER CODE END RTC_MspInit 1 */

  }

}
 80012ae:	b002      	add	sp, #8
 80012b0:	4770      	bx	lr
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_HSE_DIV32
  */
__STATIC_INLINE uint32_t LL_RCC_GetRTCClockSource(void)
{
  return (uint32_t)(READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL));
 80012b2:	4b2d      	ldr	r3, [pc, #180]	@ (8001368 <HAL_RTC_MspInit+0xc4>)
 80012b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012b6:	22c0      	movs	r2, #192	@ 0xc0
 80012b8:	0092      	lsls	r2, r2, #2
 80012ba:	4013      	ands	r3, r2
  if(LL_RCC_GetRTCClockSource() != LL_RCC_RTC_CLKSOURCE_LSE)
 80012bc:	2280      	movs	r2, #128	@ 0x80
 80012be:	0052      	lsls	r2, r2, #1
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d038      	beq.n	8001336 <HAL_RTC_MspInit+0x92>
  * @note (*) peripheral not available on all devices
  * @retval State of Periphs (1 or 0).
  */
__STATIC_INLINE uint32_t LL_APB1_GRP1_IsEnabledClock(uint32_t Periphs)
{
  return ((READ_BIT(RCC->APBENR1, Periphs) == (Periphs)) ? 1UL : 0UL);
 80012c4:	4b28      	ldr	r3, [pc, #160]	@ (8001368 <HAL_RTC_MspInit+0xc4>)
 80012c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80012c8:	00db      	lsls	r3, r3, #3
 80012ca:	d41d      	bmi.n	8001308 <HAL_RTC_MspInit+0x64>
  SET_BIT(RCC->APBENR1, Periphs);
 80012cc:	4b26      	ldr	r3, [pc, #152]	@ (8001368 <HAL_RTC_MspInit+0xc4>)
 80012ce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80012d0:	2180      	movs	r1, #128	@ 0x80
 80012d2:	0549      	lsls	r1, r1, #21
 80012d4:	430a      	orrs	r2, r1
 80012d6:	63da      	str	r2, [r3, #60]	@ 0x3c
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 80012d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80012da:	400b      	ands	r3, r1
 80012dc:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80012de:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80012e0:	2001      	movs	r0, #1
  * @rmtoll CSR1         RTCRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
  SET_BIT(RCC->CSR1, RCC_CSR1_RTCRST);
 80012e2:	4b21      	ldr	r3, [pc, #132]	@ (8001368 <HAL_RTC_MspInit+0xc4>)
 80012e4:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 80012e6:	2280      	movs	r2, #128	@ 0x80
 80012e8:	0252      	lsls	r2, r2, #9
 80012ea:	430a      	orrs	r2, r1
 80012ec:	65da      	str	r2, [r3, #92]	@ 0x5c
  * @rmtoll CSR1         RTCRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
  CLEAR_BIT(RCC->CSR1, RCC_CSR1_RTCRST);
 80012ee:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80012f0:	491e      	ldr	r1, [pc, #120]	@ (800136c <HAL_RTC_MspInit+0xc8>)
 80012f2:	400a      	ands	r2, r1
 80012f4:	65da      	str	r2, [r3, #92]	@ 0x5c
  SET_BIT(RCC->CSR1, RCC_CSR1_LSEBYP);
 80012f6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80012f8:	2104      	movs	r1, #4
 80012fa:	430a      	orrs	r2, r1
 80012fc:	65da      	str	r2, [r3, #92]	@ 0x5c
  SET_BIT(RCC->CSR1, RCC_CSR1_LSEON);
 80012fe:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001300:	3903      	subs	r1, #3
 8001302:	430a      	orrs	r2, r1
 8001304:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8001306:	e003      	b.n	8001310 <HAL_RTC_MspInit+0x6c>
    FlagStatus pwrclkchanged = RESET;
 8001308:	2000      	movs	r0, #0
 800130a:	e7ea      	b.n	80012e2 <HAL_RTC_MspInit+0x3e>
    while(LL_RCC_LSE_IsReady() != 1)
 800130c:	2901      	cmp	r1, #1
 800130e:	d008      	beq.n	8001322 <HAL_RTC_MspInit+0x7e>
  return ((READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == (RCC_CSR1_LSERDY)) ? 1UL : 0UL);
 8001310:	4b15      	ldr	r3, [pc, #84]	@ (8001368 <HAL_RTC_MspInit+0xc4>)
 8001312:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001314:	2202      	movs	r2, #2
 8001316:	0011      	movs	r1, r2
 8001318:	4019      	ands	r1, r3
 800131a:	421a      	tst	r2, r3
 800131c:	d0f6      	beq.n	800130c <HAL_RTC_MspInit+0x68>
 800131e:	2101      	movs	r1, #1
 8001320:	e7f4      	b.n	800130c <HAL_RTC_MspInit+0x68>
  MODIFY_REG(RCC->CSR1, RCC_CSR1_RTCSEL, Source);
 8001322:	4911      	ldr	r1, [pc, #68]	@ (8001368 <HAL_RTC_MspInit+0xc4>)
 8001324:	6dca      	ldr	r2, [r1, #92]	@ 0x5c
 8001326:	4b12      	ldr	r3, [pc, #72]	@ (8001370 <HAL_RTC_MspInit+0xcc>)
 8001328:	401a      	ands	r2, r3
 800132a:	2380      	movs	r3, #128	@ 0x80
 800132c:	005b      	lsls	r3, r3, #1
 800132e:	4313      	orrs	r3, r2
 8001330:	65cb      	str	r3, [r1, #92]	@ 0x5c
    if (pwrclkchanged == SET)
 8001332:	2801      	cmp	r0, #1
 8001334:	d00f      	beq.n	8001356 <HAL_RTC_MspInit+0xb2>
    __HAL_RCC_RTC_ENABLE();
 8001336:	4b0c      	ldr	r3, [pc, #48]	@ (8001368 <HAL_RTC_MspInit+0xc4>)
 8001338:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 800133a:	2280      	movs	r2, #128	@ 0x80
 800133c:	0212      	lsls	r2, r2, #8
 800133e:	430a      	orrs	r2, r1
 8001340:	65da      	str	r2, [r3, #92]	@ 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001342:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001344:	2180      	movs	r1, #128	@ 0x80
 8001346:	00c9      	lsls	r1, r1, #3
 8001348:	430a      	orrs	r2, r1
 800134a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800134c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800134e:	400b      	ands	r3, r1
 8001350:	9300      	str	r3, [sp, #0]
 8001352:	9b00      	ldr	r3, [sp, #0]
}
 8001354:	e7ab      	b.n	80012ae <HAL_RTC_MspInit+0xa>
  * @note (*) peripheral not available on all devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APBENR1, Periphs);
 8001356:	000a      	movs	r2, r1
 8001358:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
 800135a:	4906      	ldr	r1, [pc, #24]	@ (8001374 <HAL_RTC_MspInit+0xd0>)
 800135c:	400b      	ands	r3, r1
 800135e:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8001360:	e7e9      	b.n	8001336 <HAL_RTC_MspInit+0x92>
 8001362:	46c0      	nop			@ (mov r8, r8)
 8001364:	40002800 	.word	0x40002800
 8001368:	40021000 	.word	0x40021000
 800136c:	fffeffff 	.word	0xfffeffff
 8001370:	fffffcff 	.word	0xfffffcff
 8001374:	efffffff 	.word	0xefffffff

08001378 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001378:	b500      	push	{lr}
 800137a:	b083      	sub	sp, #12
  if(htim_base->Instance==TIM1)
 800137c:	6803      	ldr	r3, [r0, #0]
 800137e:	4a13      	ldr	r2, [pc, #76]	@ (80013cc <HAL_TIM_Base_MspInit+0x54>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d004      	beq.n	800138e <HAL_TIM_Base_MspInit+0x16>
    __HAL_RCC_TIM1_CLK_ENABLE();
    /* USER CODE BEGIN TIM1_MspInit 1 */

    /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM14)
 8001384:	4a12      	ldr	r2, [pc, #72]	@ (80013d0 <HAL_TIM_Base_MspInit+0x58>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d00c      	beq.n	80013a4 <HAL_TIM_Base_MspInit+0x2c>
    /* USER CODE BEGIN TIM14_MspInit 1 */

    /* USER CODE END TIM14_MspInit 1 */
  }

}
 800138a:	b003      	add	sp, #12
 800138c:	bd00      	pop	{pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 800138e:	4b11      	ldr	r3, [pc, #68]	@ (80013d4 <HAL_TIM_Base_MspInit+0x5c>)
 8001390:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001392:	2180      	movs	r1, #128	@ 0x80
 8001394:	0109      	lsls	r1, r1, #4
 8001396:	430a      	orrs	r2, r1
 8001398:	641a      	str	r2, [r3, #64]	@ 0x40
 800139a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800139c:	400b      	ands	r3, r1
 800139e:	9300      	str	r3, [sp, #0]
 80013a0:	9b00      	ldr	r3, [sp, #0]
 80013a2:	e7f2      	b.n	800138a <HAL_TIM_Base_MspInit+0x12>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80013a4:	4b0b      	ldr	r3, [pc, #44]	@ (80013d4 <HAL_TIM_Base_MspInit+0x5c>)
 80013a6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80013a8:	2180      	movs	r1, #128	@ 0x80
 80013aa:	0209      	lsls	r1, r1, #8
 80013ac:	430a      	orrs	r2, r1
 80013ae:	641a      	str	r2, [r3, #64]	@ 0x40
 80013b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013b2:	400b      	ands	r3, r1
 80013b4:	9301      	str	r3, [sp, #4]
 80013b6:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM14_IRQn, 3, 0);
 80013b8:	2200      	movs	r2, #0
 80013ba:	2103      	movs	r1, #3
 80013bc:	2013      	movs	r0, #19
 80013be:	f000 fe15 	bl	8001fec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 80013c2:	2013      	movs	r0, #19
 80013c4:	f000 fe16 	bl	8001ff4 <HAL_NVIC_EnableIRQ>
}
 80013c8:	e7df      	b.n	800138a <HAL_TIM_Base_MspInit+0x12>
 80013ca:	46c0      	nop			@ (mov r8, r8)
 80013cc:	40012c00 	.word	0x40012c00
 80013d0:	40002000 	.word	0x40002000
 80013d4:	40021000 	.word	0x40021000

080013d8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80013d8:	b510      	push	{r4, lr}
 80013da:	b086      	sub	sp, #24
 80013dc:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013de:	2214      	movs	r2, #20
 80013e0:	2100      	movs	r1, #0
 80013e2:	a801      	add	r0, sp, #4
 80013e4:	f002 fd62 	bl	8003eac <memset>
  if(htim->Instance==TIM1)
 80013e8:	6822      	ldr	r2, [r4, #0]
 80013ea:	4b0d      	ldr	r3, [pc, #52]	@ (8001420 <HAL_TIM_MspPostInit+0x48>)
 80013ec:	429a      	cmp	r2, r3
 80013ee:	d001      	beq.n	80013f4 <HAL_TIM_MspPostInit+0x1c>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80013f0:	b006      	add	sp, #24
 80013f2:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013f4:	4a0b      	ldr	r2, [pc, #44]	@ (8001424 <HAL_TIM_MspPostInit+0x4c>)
 80013f6:	6b51      	ldr	r1, [r2, #52]	@ 0x34
 80013f8:	2301      	movs	r3, #1
 80013fa:	4319      	orrs	r1, r3
 80013fc:	6351      	str	r1, [r2, #52]	@ 0x34
 80013fe:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001400:	4013      	ands	r3, r2
 8001402:	9300      	str	r3, [sp, #0]
 8001404:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001406:	2320      	movs	r3, #32
 8001408:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800140a:	3b1e      	subs	r3, #30
 800140c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM1;
 800140e:	3303      	adds	r3, #3
 8001410:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001412:	20a0      	movs	r0, #160	@ 0xa0
 8001414:	a901      	add	r1, sp, #4
 8001416:	05c0      	lsls	r0, r0, #23
 8001418:	f000 fef8 	bl	800220c <HAL_GPIO_Init>
}
 800141c:	e7e8      	b.n	80013f0 <HAL_TIM_MspPostInit+0x18>
 800141e:	46c0      	nop			@ (mov r8, r8)
 8001420:	40012c00 	.word	0x40012c00
 8001424:	40021000 	.word	0x40021000

08001428 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001428:	b510      	push	{r4, lr}
 800142a:	b088      	sub	sp, #32
 800142c:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800142e:	2214      	movs	r2, #20
 8001430:	2100      	movs	r1, #0
 8001432:	a803      	add	r0, sp, #12
 8001434:	f002 fd3a 	bl	8003eac <memset>
  if(huart->Instance==USART1)
 8001438:	6822      	ldr	r2, [r4, #0]
 800143a:	4b1e      	ldr	r3, [pc, #120]	@ (80014b4 <HAL_UART_MspInit+0x8c>)
 800143c:	429a      	cmp	r2, r3
 800143e:	d001      	beq.n	8001444 <HAL_UART_MspInit+0x1c>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001440:	b008      	add	sp, #32
 8001442:	bd10      	pop	{r4, pc}
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 8001444:	4b1c      	ldr	r3, [pc, #112]	@ (80014b8 <HAL_UART_MspInit+0x90>)
 8001446:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001448:	2103      	movs	r1, #3
 800144a:	438a      	bics	r2, r1
 800144c:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_USART1_CLK_ENABLE();
 800144e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001450:	2180      	movs	r1, #128	@ 0x80
 8001452:	01c9      	lsls	r1, r1, #7
 8001454:	430a      	orrs	r2, r1
 8001456:	641a      	str	r2, [r3, #64]	@ 0x40
 8001458:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800145a:	400a      	ands	r2, r1
 800145c:	9201      	str	r2, [sp, #4]
 800145e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001460:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001462:	2202      	movs	r2, #2
 8001464:	4311      	orrs	r1, r2
 8001466:	6359      	str	r1, [r3, #52]	@ 0x34
 8001468:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800146a:	4013      	ands	r3, r2
 800146c:	9302      	str	r3, [sp, #8]
 800146e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001470:	23c0      	movs	r3, #192	@ 0xc0
 8001472:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001474:	9204      	str	r2, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001476:	a903      	add	r1, sp, #12
 8001478:	4810      	ldr	r0, [pc, #64]	@ (80014bc <HAL_UART_MspInit+0x94>)
 800147a:	f000 fec7 	bl	800220c <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel2;
 800147e:	4810      	ldr	r0, [pc, #64]	@ (80014c0 <HAL_UART_MspInit+0x98>)
 8001480:	4b10      	ldr	r3, [pc, #64]	@ (80014c4 <HAL_UART_MspInit+0x9c>)
 8001482:	6003      	str	r3, [r0, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8001484:	2332      	movs	r3, #50	@ 0x32
 8001486:	6043      	str	r3, [r0, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001488:	2300      	movs	r3, #0
 800148a:	6083      	str	r3, [r0, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800148c:	60c3      	str	r3, [r0, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800148e:	2280      	movs	r2, #128	@ 0x80
 8001490:	6102      	str	r2, [r0, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001492:	6143      	str	r3, [r0, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001494:	6183      	str	r3, [r0, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001496:	3a60      	subs	r2, #96	@ 0x60
 8001498:	61c2      	str	r2, [r0, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800149a:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800149c:	f000 fe0e 	bl	80020bc <HAL_DMA_Init>
 80014a0:	2800      	cmp	r0, #0
 80014a2:	d104      	bne.n	80014ae <HAL_UART_MspInit+0x86>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80014a4:	4b06      	ldr	r3, [pc, #24]	@ (80014c0 <HAL_UART_MspInit+0x98>)
 80014a6:	2280      	movs	r2, #128	@ 0x80
 80014a8:	50a3      	str	r3, [r4, r2]
 80014aa:	629c      	str	r4, [r3, #40]	@ 0x28
}
 80014ac:	e7c8      	b.n	8001440 <HAL_UART_MspInit+0x18>
      Error_Handler();
 80014ae:	f7ff fc9b 	bl	8000de8 <Error_Handler>
 80014b2:	e7f7      	b.n	80014a4 <HAL_UART_MspInit+0x7c>
 80014b4:	40013800 	.word	0x40013800
 80014b8:	40021000 	.word	0x40021000
 80014bc:	50000400 	.word	0x50000400
 80014c0:	20000334 	.word	0x20000334
 80014c4:	4002001c 	.word	0x4002001c

080014c8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014c8:	e7fe      	b.n	80014c8 <NMI_Handler>

080014ca <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014ca:	e7fe      	b.n	80014ca <HardFault_Handler>

080014cc <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80014cc:	4770      	bx	lr

080014ce <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014ce:	4770      	bx	lr

080014d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014d0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014d2:	f000 f89f 	bl	8001614 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014d6:	bd10      	pop	{r4, pc}

080014d8 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 80014d8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80014da:	4802      	ldr	r0, [pc, #8]	@ (80014e4 <TIM14_IRQHandler+0xc>)
 80014dc:	f001 fb3e 	bl	8002b5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 80014e0:	bd10      	pop	{r4, pc}
 80014e2:	46c0      	nop			@ (mov r8, r8)
 80014e4:	20000424 	.word	0x20000424

080014e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014e8:	b510      	push	{r4, lr}
 80014ea:	0003      	movs	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014ec:	4a0c      	ldr	r2, [pc, #48]	@ (8001520 <_sbrk+0x38>)
 80014ee:	490d      	ldr	r1, [pc, #52]	@ (8001524 <_sbrk+0x3c>)
 80014f0:	1a52      	subs	r2, r2, r1
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014f2:	490d      	ldr	r1, [pc, #52]	@ (8001528 <_sbrk+0x40>)
 80014f4:	6809      	ldr	r1, [r1, #0]
 80014f6:	2900      	cmp	r1, #0
 80014f8:	d007      	beq.n	800150a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014fa:	490b      	ldr	r1, [pc, #44]	@ (8001528 <_sbrk+0x40>)
 80014fc:	6808      	ldr	r0, [r1, #0]
 80014fe:	18c3      	adds	r3, r0, r3
 8001500:	4293      	cmp	r3, r2
 8001502:	d806      	bhi.n	8001512 <_sbrk+0x2a>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001504:	4a08      	ldr	r2, [pc, #32]	@ (8001528 <_sbrk+0x40>)
 8001506:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8001508:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 800150a:	4907      	ldr	r1, [pc, #28]	@ (8001528 <_sbrk+0x40>)
 800150c:	4807      	ldr	r0, [pc, #28]	@ (800152c <_sbrk+0x44>)
 800150e:	6008      	str	r0, [r1, #0]
 8001510:	e7f3      	b.n	80014fa <_sbrk+0x12>
    errno = ENOMEM;
 8001512:	f002 fd19 	bl	8003f48 <__errno>
 8001516:	230c      	movs	r3, #12
 8001518:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800151a:	2001      	movs	r0, #1
 800151c:	4240      	negs	r0, r0
 800151e:	e7f3      	b.n	8001508 <_sbrk+0x20>
 8001520:	20003000 	.word	0x20003000
 8001524:	00000400 	.word	0x00000400
 8001528:	200005a4 	.word	0x200005a4
 800152c:	200006f8 	.word	0x200006f8

08001530 <SystemInit>:
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001530:	4b02      	ldr	r3, [pc, #8]	@ (800153c <SystemInit+0xc>)
 8001532:	2280      	movs	r2, #128	@ 0x80
 8001534:	0512      	lsls	r2, r2, #20
 8001536:	609a      	str	r2, [r3, #8]
#endif
}
 8001538:	4770      	bx	lr
 800153a:	46c0      	nop			@ (mov r8, r8)
 800153c:	e000ed00 	.word	0xe000ed00

08001540 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001540:	480d      	ldr	r0, [pc, #52]	@ (8001578 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001542:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001544:	f7ff fff4 	bl	8001530 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001548:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800154a:	e003      	b.n	8001554 <LoopCopyDataInit>

0800154c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800154c:	4b0b      	ldr	r3, [pc, #44]	@ (800157c <LoopForever+0x6>)
  ldr r3, [r3, r1]
 800154e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001550:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001552:	3104      	adds	r1, #4

08001554 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001554:	480a      	ldr	r0, [pc, #40]	@ (8001580 <LoopForever+0xa>)
  ldr r3, =_edata
 8001556:	4b0b      	ldr	r3, [pc, #44]	@ (8001584 <LoopForever+0xe>)
  adds r2, r0, r1
 8001558:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800155a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800155c:	d3f6      	bcc.n	800154c <CopyDataInit>
  ldr r2, =_sbss
 800155e:	4a0a      	ldr	r2, [pc, #40]	@ (8001588 <LoopForever+0x12>)
  b LoopFillZerobss
 8001560:	e002      	b.n	8001568 <LoopFillZerobss>

08001562 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001562:	2300      	movs	r3, #0
  str  r3, [r2]
 8001564:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001566:	3204      	adds	r2, #4

08001568 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8001568:	4b08      	ldr	r3, [pc, #32]	@ (800158c <LoopForever+0x16>)
  cmp r2, r3
 800156a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800156c:	d3f9      	bcc.n	8001562 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 800156e:	f002 fcf1 	bl	8003f54 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001572:	f7ff fe15 	bl	80011a0 <main>

08001576 <LoopForever>:

LoopForever:
    b LoopForever
 8001576:	e7fe      	b.n	8001576 <LoopForever>
  ldr   r0, =_estack
 8001578:	20003000 	.word	0x20003000
  ldr r3, =_sidata
 800157c:	08004c68 	.word	0x08004c68
  ldr r0, =_sdata
 8001580:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001584:	20000060 	.word	0x20000060
  ldr r2, =_sbss
 8001588:	20000060 	.word	0x20000060
  ldr r3, = _ebss
 800158c:	200006f4 	.word	0x200006f4

08001590 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001590:	e7fe      	b.n	8001590 <ADC1_IRQHandler>
	...

08001594 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001594:	b510      	push	{r4, lr}
 8001596:	0004      	movs	r4, r0
  HAL_StatusTypeDef  status = HAL_OK;

  if ((uint32_t)uwTickFreq != 0UL)
 8001598:	4b11      	ldr	r3, [pc, #68]	@ (80015e0 <HAL_InitTick+0x4c>)
 800159a:	7819      	ldrb	r1, [r3, #0]
 800159c:	2900      	cmp	r1, #0
 800159e:	d101      	bne.n	80015a4 <HAL_InitTick+0x10>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 80015a0:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 80015a2:	bd10      	pop	{r4, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 80015a4:	20fa      	movs	r0, #250	@ 0xfa
 80015a6:	0080      	lsls	r0, r0, #2
 80015a8:	f7fe fdc2 	bl	8000130 <__udivsi3>
 80015ac:	0001      	movs	r1, r0
 80015ae:	4b0d      	ldr	r3, [pc, #52]	@ (80015e4 <HAL_InitTick+0x50>)
 80015b0:	6818      	ldr	r0, [r3, #0]
 80015b2:	f7fe fdbd 	bl	8000130 <__udivsi3>
 80015b6:	f000 fd29 	bl	800200c <HAL_SYSTICK_Config>
 80015ba:	2800      	cmp	r0, #0
 80015bc:	d10d      	bne.n	80015da <HAL_InitTick+0x46>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015be:	2c03      	cmp	r4, #3
 80015c0:	d901      	bls.n	80015c6 <HAL_InitTick+0x32>
        status = HAL_ERROR;
 80015c2:	2001      	movs	r0, #1
 80015c4:	e7ed      	b.n	80015a2 <HAL_InitTick+0xe>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015c6:	3001      	adds	r0, #1
 80015c8:	2200      	movs	r2, #0
 80015ca:	0021      	movs	r1, r4
 80015cc:	4240      	negs	r0, r0
 80015ce:	f000 fd0d 	bl	8001fec <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015d2:	4b05      	ldr	r3, [pc, #20]	@ (80015e8 <HAL_InitTick+0x54>)
 80015d4:	601c      	str	r4, [r3, #0]
  HAL_StatusTypeDef  status = HAL_OK;
 80015d6:	2000      	movs	r0, #0
 80015d8:	e7e3      	b.n	80015a2 <HAL_InitTick+0xe>
      status = HAL_ERROR;
 80015da:	2001      	movs	r0, #1
 80015dc:	e7e1      	b.n	80015a2 <HAL_InitTick+0xe>
 80015de:	46c0      	nop			@ (mov r8, r8)
 80015e0:	20000008 	.word	0x20000008
 80015e4:	20000004 	.word	0x20000004
 80015e8:	2000000c 	.word	0x2000000c

080015ec <HAL_Init>:
{
 80015ec:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015ee:	4a08      	ldr	r2, [pc, #32]	@ (8001610 <HAL_Init+0x24>)
 80015f0:	6811      	ldr	r1, [r2, #0]
 80015f2:	2380      	movs	r3, #128	@ 0x80
 80015f4:	005b      	lsls	r3, r3, #1
 80015f6:	430b      	orrs	r3, r1
 80015f8:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015fa:	2000      	movs	r0, #0
 80015fc:	f7ff ffca 	bl	8001594 <HAL_InitTick>
 8001600:	1e04      	subs	r4, r0, #0
 8001602:	d002      	beq.n	800160a <HAL_Init+0x1e>
    status = HAL_ERROR;
 8001604:	2401      	movs	r4, #1
}
 8001606:	0020      	movs	r0, r4
 8001608:	bd10      	pop	{r4, pc}
    HAL_MspInit();
 800160a:	f7ff fde1 	bl	80011d0 <HAL_MspInit>
 800160e:	e7fa      	b.n	8001606 <HAL_Init+0x1a>
 8001610:	40022000 	.word	0x40022000

08001614 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8001614:	4b03      	ldr	r3, [pc, #12]	@ (8001624 <HAL_IncTick+0x10>)
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	4a03      	ldr	r2, [pc, #12]	@ (8001628 <HAL_IncTick+0x14>)
 800161a:	6811      	ldr	r1, [r2, #0]
 800161c:	185b      	adds	r3, r3, r1
 800161e:	6013      	str	r3, [r2, #0]
}
 8001620:	4770      	bx	lr
 8001622:	46c0      	nop			@ (mov r8, r8)
 8001624:	20000008 	.word	0x20000008
 8001628:	200005a8 	.word	0x200005a8

0800162c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800162c:	4b01      	ldr	r3, [pc, #4]	@ (8001634 <HAL_GetTick+0x8>)
 800162e:	6818      	ldr	r0, [r3, #0]
}
 8001630:	4770      	bx	lr
 8001632:	46c0      	nop			@ (mov r8, r8)
 8001634:	200005a8 	.word	0x200005a8

08001638 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001638:	b570      	push	{r4, r5, r6, lr}
 800163a:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800163c:	f7ff fff6 	bl	800162c <HAL_GetTick>
 8001640:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001642:	1c63      	adds	r3, r4, #1
 8001644:	d002      	beq.n	800164c <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8001646:	4b04      	ldr	r3, [pc, #16]	@ (8001658 <HAL_Delay+0x20>)
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	18e4      	adds	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800164c:	f7ff ffee 	bl	800162c <HAL_GetTick>
 8001650:	1b40      	subs	r0, r0, r5
 8001652:	42a0      	cmp	r0, r4
 8001654:	d3fa      	bcc.n	800164c <HAL_Delay+0x14>
  {
  }
}
 8001656:	bd70      	pop	{r4, r5, r6, pc}
 8001658:	20000008 	.word	0x20000008

0800165c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800165c:	b530      	push	{r4, r5, lr}
 800165e:	b083      	sub	sp, #12
 8001660:	0004      	movs	r4, r0
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR1 = 0UL;
  uint32_t tmpCFGR2 = 0UL;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001662:	2300      	movs	r3, #0
 8001664:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8001666:	2800      	cmp	r0, #0
 8001668:	d100      	bne.n	800166c <HAL_ADC_Init+0x10>
 800166a:	e105      	b.n	8001878 <HAL_ADC_Init+0x21c>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800166c:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 800166e:	2b00      	cmp	r3, #0
 8001670:	d012      	beq.n	8001698 <HAL_ADC_Init+0x3c>

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001672:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001674:	689a      	ldr	r2, [r3, #8]
 8001676:	00d2      	lsls	r2, r2, #3
 8001678:	d41b      	bmi.n	80016b2 <HAL_ADC_Init+0x56>
  MODIFY_REG(ADCx->CR,
 800167a:	6899      	ldr	r1, [r3, #8]
 800167c:	4a7f      	ldr	r2, [pc, #508]	@ (800187c <HAL_ADC_Init+0x220>)
 800167e:	4011      	ands	r1, r2
 8001680:	2280      	movs	r2, #128	@ 0x80
 8001682:	0552      	lsls	r2, r2, #21
 8001684:	430a      	orrs	r2, r1
 8001686:	609a      	str	r2, [r3, #8]
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001688:	4b7d      	ldr	r3, [pc, #500]	@ (8001880 <HAL_ADC_Init+0x224>)
 800168a:	6818      	ldr	r0, [r3, #0]
 800168c:	497d      	ldr	r1, [pc, #500]	@ (8001884 <HAL_ADC_Init+0x228>)
 800168e:	f7fe fd4f 	bl	8000130 <__udivsi3>
 8001692:	0040      	lsls	r0, r0, #1
 8001694:	9001      	str	r0, [sp, #4]
    while (wait_loop_index != 0UL)
 8001696:	e009      	b.n	80016ac <HAL_ADC_Init+0x50>
    HAL_ADC_MspInit(hadc);
 8001698:	f7ff fdb2 	bl	8001200 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 800169c:	2300      	movs	r3, #0
 800169e:	65e3      	str	r3, [r4, #92]	@ 0x5c
    hadc->Lock = HAL_UNLOCKED;
 80016a0:	2254      	movs	r2, #84	@ 0x54
 80016a2:	54a3      	strb	r3, [r4, r2]
 80016a4:	e7e5      	b.n	8001672 <HAL_ADC_Init+0x16>
    {
      wait_loop_index--;
 80016a6:	9b01      	ldr	r3, [sp, #4]
 80016a8:	3b01      	subs	r3, #1
 80016aa:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80016ac:	9b01      	ldr	r3, [sp, #4]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d1f9      	bne.n	80016a6 <HAL_ADC_Init+0x4a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80016b2:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80016b4:	689a      	ldr	r2, [r3, #8]
 80016b6:	00d2      	lsls	r2, r2, #3
 80016b8:	d500      	bpl.n	80016bc <HAL_ADC_Init+0x60>
 80016ba:	e09d      	b.n	80017f8 <HAL_ADC_Init+0x19c>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016bc:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 80016be:	2110      	movs	r1, #16
 80016c0:	430a      	orrs	r2, r1
 80016c2:	65a2      	str	r2, [r4, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016c4:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80016c6:	390f      	subs	r1, #15
 80016c8:	430a      	orrs	r2, r1
 80016ca:	65e2      	str	r2, [r4, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80016cc:	2001      	movs	r0, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80016ce:	689a      	ldr	r2, [r3, #8]
 80016d0:	2104      	movs	r1, #4
 80016d2:	000d      	movs	r5, r1
 80016d4:	4015      	ands	r5, r2
 80016d6:	4211      	tst	r1, r2
 80016d8:	d000      	beq.n	80016dc <HAL_ADC_Init+0x80>
 80016da:	2501      	movs	r5, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80016dc:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 80016de:	06d2      	lsls	r2, r2, #27
 80016e0:	d500      	bpl.n	80016e4 <HAL_ADC_Init+0x88>
 80016e2:	e0c2      	b.n	800186a <HAL_ADC_Init+0x20e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80016e4:	2d00      	cmp	r5, #0
 80016e6:	d000      	beq.n	80016ea <HAL_ADC_Init+0x8e>
 80016e8:	e0bf      	b.n	800186a <HAL_ADC_Init+0x20e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016ea:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 80016ec:	4966      	ldr	r1, [pc, #408]	@ (8001888 <HAL_ADC_Init+0x22c>)
 80016ee:	400a      	ands	r2, r1
 80016f0:	3106      	adds	r1, #6
 80016f2:	31ff      	adds	r1, #255	@ 0xff
 80016f4:	430a      	orrs	r2, r1
 80016f6:	65a2      	str	r2, [r4, #88]	@ 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80016f8:	689a      	ldr	r2, [r3, #8]
 80016fa:	07d2      	lsls	r2, r2, #31
 80016fc:	d452      	bmi.n	80017a4 <HAL_ADC_Init+0x148>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths: temperature sensor, Vref             */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80016fe:	68a2      	ldr	r2, [r4, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001700:	7e21      	ldrb	r1, [r4, #24]
 8001702:	0389      	lsls	r1, r1, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001704:	430a      	orrs	r2, r1
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001706:	7e61      	ldrb	r1, [r4, #25]
 8001708:	03c9      	lsls	r1, r1, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800170a:	430a      	orrs	r2, r1
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800170c:	7ea5      	ldrb	r5, [r4, #26]
 800170e:	0369      	lsls	r1, r5, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001710:	430a      	orrs	r2, r1
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001712:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8001714:	2900      	cmp	r1, #0
 8001716:	d001      	beq.n	800171c <HAL_ADC_Init+0xc0>
 8001718:	2180      	movs	r1, #128	@ 0x80
 800171a:	0149      	lsls	r1, r1, #5
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800171c:	430a      	orrs	r2, r1
                   hadc->Init.DataAlign                                           |
 800171e:	68e1      	ldr	r1, [r4, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001720:	430a      	orrs	r2, r1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001722:	6921      	ldr	r1, [r4, #16]
 8001724:	2900      	cmp	r1, #0
 8001726:	db69      	blt.n	80017fc <HAL_ADC_Init+0x1a0>
 8001728:	2180      	movs	r1, #128	@ 0x80
 800172a:	0389      	lsls	r1, r1, #14
                   hadc->Init.DataAlign                                           |
 800172c:	430a      	orrs	r2, r1
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800172e:	212c      	movs	r1, #44	@ 0x2c
 8001730:	5c61      	ldrb	r1, [r4, r1]
 8001732:	0049      	lsls	r1, r1, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001734:	430a      	orrs	r2, r1

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001736:	2120      	movs	r1, #32
 8001738:	5c61      	ldrb	r1, [r4, r1]
 800173a:	2901      	cmp	r1, #1
 800173c:	d061      	beq.n	8001802 <HAL_ADC_Init+0x1a6>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800173e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8001740:	2900      	cmp	r1, #0
 8001742:	d005      	beq.n	8001750 <HAL_ADC_Init+0xf4>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001744:	25e0      	movs	r5, #224	@ 0xe0
 8001746:	006d      	lsls	r5, r5, #1
 8001748:	4029      	ands	r1, r5
                     hadc->Init.ExternalTrigConvEdge);
 800174a:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800174c:	4329      	orrs	r1, r5
 800174e:	430a      	orrs	r2, r1
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001750:	68d9      	ldr	r1, [r3, #12]
 8001752:	4d4e      	ldr	r5, [pc, #312]	@ (800188c <HAL_ADC_Init+0x230>)
 8001754:	4029      	ands	r1, r5
 8001756:	430a      	orrs	r2, r1
 8001758:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800175a:	6863      	ldr	r3, [r4, #4]
 800175c:	0f9b      	lsrs	r3, r3, #30
 800175e:	079b      	lsls	r3, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8001760:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001762:	431a      	orrs	r2, r3
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001764:	213c      	movs	r1, #60	@ 0x3c
 8001766:	5c61      	ldrb	r1, [r4, r1]
 8001768:	2901      	cmp	r1, #1
 800176a:	d059      	beq.n	8001820 <HAL_ADC_Init+0x1c4>
                     hadc->Init.Oversampling.RightBitShift |
                     hadc->Init.Oversampling.TriggeredMode
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800176c:	6821      	ldr	r1, [r4, #0]
 800176e:	690b      	ldr	r3, [r1, #16]
 8001770:	4d47      	ldr	r5, [pc, #284]	@ (8001890 <HAL_ADC_Init+0x234>)
 8001772:	402b      	ands	r3, r5
 8001774:	4313      	orrs	r3, r2
 8001776:	610b      	str	r3, [r1, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001778:	6863      	ldr	r3, [r4, #4]
 800177a:	22c0      	movs	r2, #192	@ 0xc0
 800177c:	0612      	lsls	r2, r2, #24
 800177e:	4293      	cmp	r3, r2
 8001780:	d010      	beq.n	80017a4 <HAL_ADC_Init+0x148>
 8001782:	2280      	movs	r2, #128	@ 0x80
 8001784:	05d2      	lsls	r2, r2, #23
 8001786:	4293      	cmp	r3, r2
 8001788:	d00c      	beq.n	80017a4 <HAL_ADC_Init+0x148>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800178a:	2280      	movs	r2, #128	@ 0x80
 800178c:	0612      	lsls	r2, r2, #24
 800178e:	4293      	cmp	r3, r2
 8001790:	d008      	beq.n	80017a4 <HAL_ADC_Init+0x148>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001792:	4940      	ldr	r1, [pc, #256]	@ (8001894 <HAL_ADC_Init+0x238>)
 8001794:	680a      	ldr	r2, [r1, #0]
 8001796:	4d40      	ldr	r5, [pc, #256]	@ (8001898 <HAL_ADC_Init+0x23c>)
 8001798:	402a      	ands	r2, r5
 800179a:	25f0      	movs	r5, #240	@ 0xf0
 800179c:	03ad      	lsls	r5, r5, #14
 800179e:	402b      	ands	r3, r5
 80017a0:	4313      	orrs	r3, r2
 80017a2:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80017a4:	6821      	ldr	r1, [r4, #0]
 80017a6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
  MODIFY_REG(ADCx->SMPR,
 80017a8:	694a      	ldr	r2, [r1, #20]
 80017aa:	2507      	movs	r5, #7
 80017ac:	43aa      	bics	r2, r5
 80017ae:	4313      	orrs	r3, r2
 80017b0:	614b      	str	r3, [r1, #20]
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80017b2:	6821      	ldr	r1, [r4, #0]
 80017b4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80017b6:	694b      	ldr	r3, [r1, #20]
 80017b8:	3569      	adds	r5, #105	@ 0x69
 80017ba:	43ab      	bics	r3, r5
 80017bc:	0112      	lsls	r2, r2, #4
 80017be:	4313      	orrs	r3, r2
 80017c0:	614b      	str	r3, [r1, #20]
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80017c2:	6923      	ldr	r3, [r4, #16]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d135      	bne.n	8001834 <HAL_ADC_Init+0x1d8>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80017c8:	6822      	ldr	r2, [r4, #0]
 80017ca:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80017cc:	3b10      	subs	r3, #16
 80017ce:	430b      	orrs	r3, r1
 80017d0:	6293      	str	r3, [r2, #40]	@ 0x28
    {
      /* Nothing to do */
    }
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80017d2:	6823      	ldr	r3, [r4, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80017d4:	695a      	ldr	r2, [r3, #20]
 80017d6:	2307      	movs	r3, #7
 80017d8:	4013      	ands	r3, r2
        == hadc->Init.SamplingTimeCommon1)
 80017da:	6b62      	ldr	r2, [r4, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80017dc:	429a      	cmp	r2, r3
 80017de:	d03b      	beq.n	8001858 <HAL_ADC_Init+0x1fc>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80017e0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80017e2:	2212      	movs	r2, #18
 80017e4:	4393      	bics	r3, r2
 80017e6:	3a02      	subs	r2, #2
 80017e8:	4313      	orrs	r3, r2
 80017ea:	65a3      	str	r3, [r4, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017ec:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80017ee:	3a0f      	subs	r2, #15
 80017f0:	4313      	orrs	r3, r2
 80017f2:	65e3      	str	r3, [r4, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 80017f4:	2001      	movs	r0, #1
 80017f6:	e03d      	b.n	8001874 <HAL_ADC_Init+0x218>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017f8:	2000      	movs	r0, #0
 80017fa:	e768      	b.n	80016ce <HAL_ADC_Init+0x72>
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80017fc:	0049      	lsls	r1, r1, #1
 80017fe:	0849      	lsrs	r1, r1, #1
 8001800:	e794      	b.n	800172c <HAL_ADC_Init+0xd0>
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001802:	2d00      	cmp	r5, #0
 8001804:	d103      	bne.n	800180e <HAL_ADC_Init+0x1b2>
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001806:	2180      	movs	r1, #128	@ 0x80
 8001808:	0249      	lsls	r1, r1, #9
 800180a:	430a      	orrs	r2, r1
 800180c:	e797      	b.n	800173e <HAL_ADC_Init+0xe2>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800180e:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8001810:	2520      	movs	r5, #32
 8001812:	4329      	orrs	r1, r5
 8001814:	65a1      	str	r1, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001816:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 8001818:	3d1f      	subs	r5, #31
 800181a:	4329      	orrs	r1, r5
 800181c:	65e1      	str	r1, [r4, #92]	@ 0x5c
 800181e:	e78e      	b.n	800173e <HAL_ADC_Init+0xe2>
                     hadc->Init.Oversampling.Ratio         |
 8001820:	6c21      	ldr	r1, [r4, #64]	@ 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001822:	430b      	orrs	r3, r1
                     hadc->Init.Oversampling.RightBitShift |
 8001824:	6c61      	ldr	r1, [r4, #68]	@ 0x44
                     hadc->Init.Oversampling.Ratio         |
 8001826:	430b      	orrs	r3, r1
                     hadc->Init.Oversampling.TriggeredMode
 8001828:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
                     hadc->Init.Oversampling.RightBitShift |
 800182a:	430b      	orrs	r3, r1
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 800182c:	4313      	orrs	r3, r2
 800182e:	2201      	movs	r2, #1
 8001830:	431a      	orrs	r2, r3
 8001832:	e79b      	b.n	800176c <HAL_ADC_Init+0x110>
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001834:	2280      	movs	r2, #128	@ 0x80
 8001836:	0392      	lsls	r2, r2, #14
 8001838:	4293      	cmp	r3, r2
 800183a:	d1ca      	bne.n	80017d2 <HAL_ADC_Init+0x176>
      MODIFY_REG(hadc->Instance->CHSELR,
 800183c:	6821      	ldr	r1, [r4, #0]
 800183e:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 8001840:	69e3      	ldr	r3, [r4, #28]
 8001842:	3b01      	subs	r3, #1
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	221c      	movs	r2, #28
 8001848:	401a      	ands	r2, r3
 800184a:	2310      	movs	r3, #16
 800184c:	425b      	negs	r3, r3
 800184e:	4093      	lsls	r3, r2
 8001850:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8001852:	4313      	orrs	r3, r2
 8001854:	628b      	str	r3, [r1, #40]	@ 0x28
 8001856:	e7bc      	b.n	80017d2 <HAL_ADC_Init+0x176>
      ADC_CLEAR_ERRORCODE(hadc);
 8001858:	2300      	movs	r3, #0
 800185a:	65e3      	str	r3, [r4, #92]	@ 0x5c
      ADC_STATE_CLR_SET(hadc->State,
 800185c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800185e:	2203      	movs	r2, #3
 8001860:	4393      	bics	r3, r2
 8001862:	3a02      	subs	r2, #2
 8001864:	4313      	orrs	r3, r2
 8001866:	65a3      	str	r3, [r4, #88]	@ 0x58
 8001868:	e004      	b.n	8001874 <HAL_ADC_Init+0x218>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800186a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800186c:	2210      	movs	r2, #16
 800186e:	4313      	orrs	r3, r2
 8001870:	65a3      	str	r3, [r4, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001872:	2001      	movs	r0, #1
  }

  /* Return function status */
  return tmp_hal_status;
}
 8001874:	b003      	add	sp, #12
 8001876:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8001878:	2001      	movs	r0, #1
 800187a:	e7fb      	b.n	8001874 <HAL_ADC_Init+0x218>
 800187c:	6fffffe8 	.word	0x6fffffe8
 8001880:	20000004 	.word	0x20000004
 8001884:	00030d40 	.word	0x00030d40
 8001888:	fffffefd 	.word	0xfffffefd
 800188c:	ffde0201 	.word	0xffde0201
 8001890:	1ffffc02 	.word	0x1ffffc02
 8001894:	40012708 	.word	0x40012708
 8001898:	ffc3ffff 	.word	0xffc3ffff

0800189c <HAL_ADC_ConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800189c:	4770      	bx	lr

0800189e <HAL_ADC_ConvHalfCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800189e:	4770      	bx	lr

080018a0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80018a0:	b510      	push	{r4, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80018a2:	6a80      	ldr	r0, [r0, #40]	@ 0x28

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80018a4:	f7ff fffb 	bl	800189e <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80018a8:	bd10      	pop	{r4, pc}

080018aa <HAL_ADC_ErrorCallback>:
}
 80018aa:	4770      	bx	lr

080018ac <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80018ac:	b510      	push	{r4, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80018ae:	6a80      	ldr	r0, [r0, #40]	@ 0x28

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80018b0:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 80018b2:	2240      	movs	r2, #64	@ 0x40
 80018b4:	4313      	orrs	r3, r2
 80018b6:	6583      	str	r3, [r0, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80018b8:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 80018ba:	3a3c      	subs	r2, #60	@ 0x3c
 80018bc:	4313      	orrs	r3, r2
 80018be:	65c3      	str	r3, [r0, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80018c0:	f7ff fff3 	bl	80018aa <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80018c4:	bd10      	pop	{r4, pc}
	...

080018c8 <ADC_DMAConvCplt>:
{
 80018c8:	b510      	push	{r4, lr}
 80018ca:	0003      	movs	r3, r0
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80018cc:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80018ce:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 80018d0:	2150      	movs	r1, #80	@ 0x50
 80018d2:	4211      	tst	r1, r2
 80018d4:	d12a      	bne.n	800192c <ADC_DMAConvCplt+0x64>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80018d6:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 80018d8:	2380      	movs	r3, #128	@ 0x80
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	4313      	orrs	r3, r2
 80018de:	6583      	str	r3, [r0, #88]	@ 0x58
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80018e0:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80018e2:	68d9      	ldr	r1, [r3, #12]
 80018e4:	22c0      	movs	r2, #192	@ 0xc0
 80018e6:	0112      	lsls	r2, r2, #4
 80018e8:	4211      	tst	r1, r2
 80018ea:	d113      	bne.n	8001914 <ADC_DMAConvCplt+0x4c>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 80018ec:	7e82      	ldrb	r2, [r0, #26]
 80018ee:	2a00      	cmp	r2, #0
 80018f0:	d110      	bne.n	8001914 <ADC_DMAConvCplt+0x4c>
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	0712      	lsls	r2, r2, #28
 80018f6:	d50d      	bpl.n	8001914 <ADC_DMAConvCplt+0x4c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80018f8:	689a      	ldr	r2, [r3, #8]
 80018fa:	0752      	lsls	r2, r2, #29
 80018fc:	d40d      	bmi.n	800191a <ADC_DMAConvCplt+0x52>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80018fe:	685a      	ldr	r2, [r3, #4]
 8001900:	210c      	movs	r1, #12
 8001902:	438a      	bics	r2, r1
 8001904:	605a      	str	r2, [r3, #4]
          ADC_STATE_CLR_SET(hadc->State,
 8001906:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8001908:	4a0e      	ldr	r2, [pc, #56]	@ (8001944 <ADC_DMAConvCplt+0x7c>)
 800190a:	4013      	ands	r3, r2
 800190c:	3204      	adds	r2, #4
 800190e:	32ff      	adds	r2, #255	@ 0xff
 8001910:	4313      	orrs	r3, r2
 8001912:	6583      	str	r3, [r0, #88]	@ 0x58
    HAL_ADC_ConvCpltCallback(hadc);
 8001914:	f7ff ffc2 	bl	800189c <HAL_ADC_ConvCpltCallback>
}
 8001918:	bd10      	pop	{r4, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800191a:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 800191c:	2220      	movs	r2, #32
 800191e:	4313      	orrs	r3, r2
 8001920:	6583      	str	r3, [r0, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001922:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 8001924:	3a1f      	subs	r2, #31
 8001926:	4313      	orrs	r3, r2
 8001928:	65c3      	str	r3, [r0, #92]	@ 0x5c
 800192a:	e7f3      	b.n	8001914 <ADC_DMAConvCplt+0x4c>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800192c:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 800192e:	06d2      	lsls	r2, r2, #27
 8001930:	d404      	bmi.n	800193c <ADC_DMAConvCplt+0x74>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001932:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8001934:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001936:	0018      	movs	r0, r3
 8001938:	4790      	blx	r2
}
 800193a:	e7ed      	b.n	8001918 <ADC_DMAConvCplt+0x50>
      HAL_ADC_ErrorCallback(hadc);
 800193c:	f7ff ffb5 	bl	80018aa <HAL_ADC_ErrorCallback>
 8001940:	e7ea      	b.n	8001918 <ADC_DMAConvCplt+0x50>
 8001942:	46c0      	nop			@ (mov r8, r8)
 8001944:	fffffefe 	.word	0xfffffefe

08001948 <HAL_ADC_ConfigChannel>:
{
 8001948:	b5f0      	push	{r4, r5, r6, r7, lr}
 800194a:	b083      	sub	sp, #12
 800194c:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0UL;
 800194e:	2300      	movs	r3, #0
 8001950:	9301      	str	r3, [sp, #4]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001952:	6905      	ldr	r5, [r0, #16]
  __HAL_LOCK(hadc);
 8001954:	3354      	adds	r3, #84	@ 0x54
 8001956:	5cc3      	ldrb	r3, [r0, r3]
 8001958:	2b01      	cmp	r3, #1
 800195a:	d100      	bne.n	800195e <HAL_ADC_ConfigChannel+0x16>
 800195c:	e121      	b.n	8001ba2 <HAL_ADC_ConfigChannel+0x25a>
 800195e:	2354      	movs	r3, #84	@ 0x54
 8001960:	2201      	movs	r2, #1
 8001962:	54c2      	strb	r2, [r0, r3]
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001964:	6800      	ldr	r0, [r0, #0]
 8001966:	6883      	ldr	r3, [r0, #8]
 8001968:	3203      	adds	r2, #3
 800196a:	0016      	movs	r6, r2
 800196c:	401e      	ands	r6, r3
 800196e:	421a      	tst	r2, r3
 8001970:	d009      	beq.n	8001986 <HAL_ADC_ConfigChannel+0x3e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001972:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001974:	321c      	adds	r2, #28
 8001976:	4313      	orrs	r3, r2
 8001978:	65a3      	str	r3, [r4, #88]	@ 0x58
    tmp_hal_status = HAL_ERROR;
 800197a:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 800197c:	2354      	movs	r3, #84	@ 0x54
 800197e:	2200      	movs	r2, #0
 8001980:	54e2      	strb	r2, [r4, r3]
}
 8001982:	b003      	add	sp, #12
 8001984:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (sConfig->Rank != ADC_RANK_NONE)
 8001986:	684b      	ldr	r3, [r1, #4]
 8001988:	2b02      	cmp	r3, #2
 800198a:	d100      	bne.n	800198e <HAL_ADC_ConfigChannel+0x46>
 800198c:	e0d5      	b.n	8001b3a <HAL_ADC_ConfigChannel+0x1f2>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800198e:	2280      	movs	r2, #128	@ 0x80
 8001990:	0612      	lsls	r2, r2, #24
 8001992:	4295      	cmp	r5, r2
 8001994:	d025      	beq.n	80019e2 <HAL_ADC_ConfigChannel+0x9a>
 8001996:	4a84      	ldr	r2, [pc, #528]	@ (8001ba8 <HAL_ADC_ConfigChannel+0x260>)
 8001998:	4295      	cmp	r5, r2
 800199a:	d022      	beq.n	80019e2 <HAL_ADC_ConfigChannel+0x9a>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800199c:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 800199e:	271f      	movs	r7, #31
 80019a0:	401f      	ands	r7, r3
 80019a2:	250f      	movs	r5, #15
 80019a4:	40bd      	lsls	r5, r7
 80019a6:	43aa      	bics	r2, r5
 80019a8:	680b      	ldr	r3, [r1, #0]
 80019aa:	025d      	lsls	r5, r3, #9
 80019ac:	d12f      	bne.n	8001a0e <HAL_ADC_ConfigChannel+0xc6>
 80019ae:	0e9b      	lsrs	r3, r3, #26
 80019b0:	261f      	movs	r6, #31
 80019b2:	401e      	ands	r6, r3
 80019b4:	40be      	lsls	r6, r7
 80019b6:	4332      	orrs	r2, r6
 80019b8:	6622      	str	r2, [r4, #96]	@ 0x60
        if (((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80019ba:	684d      	ldr	r5, [r1, #4]
 80019bc:	08ab      	lsrs	r3, r5, #2
 80019be:	3301      	adds	r3, #1
 80019c0:	69e2      	ldr	r2, [r4, #28]
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d813      	bhi.n	80019ee <HAL_ADC_ConfigChannel+0xa6>
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80019c6:	680e      	ldr	r6, [r1, #0]
  MODIFY_REG(ADCx->CHSELR,
 80019c8:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 80019ca:	231f      	movs	r3, #31
 80019cc:	401d      	ands	r5, r3
 80019ce:	3b10      	subs	r3, #16
 80019d0:	001f      	movs	r7, r3
 80019d2:	40af      	lsls	r7, r5
 80019d4:	43ba      	bics	r2, r7
 80019d6:	0eb6      	lsrs	r6, r6, #26
 80019d8:	4033      	ands	r3, r6
 80019da:	40ab      	lsls	r3, r5
 80019dc:	4313      	orrs	r3, r2
 80019de:	6283      	str	r3, [r0, #40]	@ 0x28
}
 80019e0:	e005      	b.n	80019ee <HAL_ADC_ConfigChannel+0xa6>
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 80019e2:	680b      	ldr	r3, [r1, #0]
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80019e4:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 80019e6:	025b      	lsls	r3, r3, #9
 80019e8:	0a5b      	lsrs	r3, r3, #9
 80019ea:	4313      	orrs	r3, r2
 80019ec:	6283      	str	r3, [r0, #40]	@ 0x28
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80019ee:	6820      	ldr	r0, [r4, #0]
 80019f0:	680b      	ldr	r3, [r1, #0]
 80019f2:	688d      	ldr	r5, [r1, #8]
  MODIFY_REG(ADCx->SMPR,
 80019f4:	6942      	ldr	r2, [r0, #20]
 80019f6:	021b      	lsls	r3, r3, #8
 80019f8:	439a      	bics	r2, r3
 80019fa:	402b      	ands	r3, r5
 80019fc:	4d6b      	ldr	r5, [pc, #428]	@ (8001bac <HAL_ADC_ConfigChannel+0x264>)
 80019fe:	402b      	ands	r3, r5
 8001a00:	4313      	orrs	r3, r2
 8001a02:	6143      	str	r3, [r0, #20]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001a04:	680b      	ldr	r3, [r1, #0]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	db5f      	blt.n	8001aca <HAL_ADC_ConfigChannel+0x182>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a0a:	2000      	movs	r0, #0
 8001a0c:	e7b6      	b.n	800197c <HAL_ADC_ConfigChannel+0x34>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001a0e:	07dd      	lsls	r5, r3, #31
 8001a10:	d4d0      	bmi.n	80019b4 <HAL_ADC_ConfigChannel+0x6c>
 8001a12:	079d      	lsls	r5, r3, #30
 8001a14:	d42f      	bmi.n	8001a76 <HAL_ADC_ConfigChannel+0x12e>
 8001a16:	075d      	lsls	r5, r3, #29
 8001a18:	d42f      	bmi.n	8001a7a <HAL_ADC_ConfigChannel+0x132>
 8001a1a:	071d      	lsls	r5, r3, #28
 8001a1c:	d42f      	bmi.n	8001a7e <HAL_ADC_ConfigChannel+0x136>
 8001a1e:	06dd      	lsls	r5, r3, #27
 8001a20:	d42f      	bmi.n	8001a82 <HAL_ADC_ConfigChannel+0x13a>
 8001a22:	069d      	lsls	r5, r3, #26
 8001a24:	d42f      	bmi.n	8001a86 <HAL_ADC_ConfigChannel+0x13e>
 8001a26:	065d      	lsls	r5, r3, #25
 8001a28:	d42f      	bmi.n	8001a8a <HAL_ADC_ConfigChannel+0x142>
 8001a2a:	061d      	lsls	r5, r3, #24
 8001a2c:	d42f      	bmi.n	8001a8e <HAL_ADC_ConfigChannel+0x146>
 8001a2e:	05dd      	lsls	r5, r3, #23
 8001a30:	d42f      	bmi.n	8001a92 <HAL_ADC_ConfigChannel+0x14a>
 8001a32:	059d      	lsls	r5, r3, #22
 8001a34:	d42f      	bmi.n	8001a96 <HAL_ADC_ConfigChannel+0x14e>
 8001a36:	055d      	lsls	r5, r3, #21
 8001a38:	d42f      	bmi.n	8001a9a <HAL_ADC_ConfigChannel+0x152>
 8001a3a:	051d      	lsls	r5, r3, #20
 8001a3c:	d42f      	bmi.n	8001a9e <HAL_ADC_ConfigChannel+0x156>
 8001a3e:	04dd      	lsls	r5, r3, #19
 8001a40:	d42f      	bmi.n	8001aa2 <HAL_ADC_ConfigChannel+0x15a>
 8001a42:	049d      	lsls	r5, r3, #18
 8001a44:	d42f      	bmi.n	8001aa6 <HAL_ADC_ConfigChannel+0x15e>
 8001a46:	045d      	lsls	r5, r3, #17
 8001a48:	d42f      	bmi.n	8001aaa <HAL_ADC_ConfigChannel+0x162>
 8001a4a:	041d      	lsls	r5, r3, #16
 8001a4c:	d42f      	bmi.n	8001aae <HAL_ADC_ConfigChannel+0x166>
 8001a4e:	03dd      	lsls	r5, r3, #15
 8001a50:	d42f      	bmi.n	8001ab2 <HAL_ADC_ConfigChannel+0x16a>
 8001a52:	039d      	lsls	r5, r3, #14
 8001a54:	d42f      	bmi.n	8001ab6 <HAL_ADC_ConfigChannel+0x16e>
 8001a56:	035d      	lsls	r5, r3, #13
 8001a58:	d42f      	bmi.n	8001aba <HAL_ADC_ConfigChannel+0x172>
 8001a5a:	031d      	lsls	r5, r3, #12
 8001a5c:	d42f      	bmi.n	8001abe <HAL_ADC_ConfigChannel+0x176>
 8001a5e:	02dd      	lsls	r5, r3, #11
 8001a60:	d42f      	bmi.n	8001ac2 <HAL_ADC_ConfigChannel+0x17a>
 8001a62:	029d      	lsls	r5, r3, #10
 8001a64:	d42f      	bmi.n	8001ac6 <HAL_ADC_ConfigChannel+0x17e>
 8001a66:	2580      	movs	r5, #128	@ 0x80
 8001a68:	03ed      	lsls	r5, r5, #15
 8001a6a:	001e      	movs	r6, r3
 8001a6c:	402e      	ands	r6, r5
 8001a6e:	422b      	tst	r3, r5
 8001a70:	d0a0      	beq.n	80019b4 <HAL_ADC_ConfigChannel+0x6c>
 8001a72:	2616      	movs	r6, #22
 8001a74:	e79e      	b.n	80019b4 <HAL_ADC_ConfigChannel+0x6c>
 8001a76:	2601      	movs	r6, #1
 8001a78:	e79c      	b.n	80019b4 <HAL_ADC_ConfigChannel+0x6c>
 8001a7a:	2602      	movs	r6, #2
 8001a7c:	e79a      	b.n	80019b4 <HAL_ADC_ConfigChannel+0x6c>
 8001a7e:	2603      	movs	r6, #3
 8001a80:	e798      	b.n	80019b4 <HAL_ADC_ConfigChannel+0x6c>
 8001a82:	2604      	movs	r6, #4
 8001a84:	e796      	b.n	80019b4 <HAL_ADC_ConfigChannel+0x6c>
 8001a86:	2605      	movs	r6, #5
 8001a88:	e794      	b.n	80019b4 <HAL_ADC_ConfigChannel+0x6c>
 8001a8a:	2606      	movs	r6, #6
 8001a8c:	e792      	b.n	80019b4 <HAL_ADC_ConfigChannel+0x6c>
 8001a8e:	2607      	movs	r6, #7
 8001a90:	e790      	b.n	80019b4 <HAL_ADC_ConfigChannel+0x6c>
 8001a92:	2608      	movs	r6, #8
 8001a94:	e78e      	b.n	80019b4 <HAL_ADC_ConfigChannel+0x6c>
 8001a96:	2609      	movs	r6, #9
 8001a98:	e78c      	b.n	80019b4 <HAL_ADC_ConfigChannel+0x6c>
 8001a9a:	260a      	movs	r6, #10
 8001a9c:	e78a      	b.n	80019b4 <HAL_ADC_ConfigChannel+0x6c>
 8001a9e:	260b      	movs	r6, #11
 8001aa0:	e788      	b.n	80019b4 <HAL_ADC_ConfigChannel+0x6c>
 8001aa2:	260c      	movs	r6, #12
 8001aa4:	e786      	b.n	80019b4 <HAL_ADC_ConfigChannel+0x6c>
 8001aa6:	260d      	movs	r6, #13
 8001aa8:	e784      	b.n	80019b4 <HAL_ADC_ConfigChannel+0x6c>
 8001aaa:	260e      	movs	r6, #14
 8001aac:	e782      	b.n	80019b4 <HAL_ADC_ConfigChannel+0x6c>
 8001aae:	260f      	movs	r6, #15
 8001ab0:	e780      	b.n	80019b4 <HAL_ADC_ConfigChannel+0x6c>
 8001ab2:	2610      	movs	r6, #16
 8001ab4:	e77e      	b.n	80019b4 <HAL_ADC_ConfigChannel+0x6c>
 8001ab6:	2611      	movs	r6, #17
 8001ab8:	e77c      	b.n	80019b4 <HAL_ADC_ConfigChannel+0x6c>
 8001aba:	2612      	movs	r6, #18
 8001abc:	e77a      	b.n	80019b4 <HAL_ADC_ConfigChannel+0x6c>
 8001abe:	2613      	movs	r6, #19
 8001ac0:	e778      	b.n	80019b4 <HAL_ADC_ConfigChannel+0x6c>
 8001ac2:	2614      	movs	r6, #20
 8001ac4:	e776      	b.n	80019b4 <HAL_ADC_ConfigChannel+0x6c>
 8001ac6:	2615      	movs	r6, #21
 8001ac8:	e774      	b.n	80019b4 <HAL_ADC_ConfigChannel+0x6c>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN));
 8001aca:	4a39      	ldr	r2, [pc, #228]	@ (8001bb0 <HAL_ADC_ConfigChannel+0x268>)
 8001acc:	6811      	ldr	r1, [r2, #0]
 8001ace:	22c0      	movs	r2, #192	@ 0xc0
 8001ad0:	0412      	lsls	r2, r2, #16
 8001ad2:	400a      	ands	r2, r1
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001ad4:	4837      	ldr	r0, [pc, #220]	@ (8001bb4 <HAL_ADC_ConfigChannel+0x26c>)
 8001ad6:	4283      	cmp	r3, r0
 8001ad8:	d004      	beq.n	8001ae4 <HAL_ADC_ConfigChannel+0x19c>
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001ada:	4837      	ldr	r0, [pc, #220]	@ (8001bb8 <HAL_ADC_ConfigChannel+0x270>)
 8001adc:	4283      	cmp	r3, r0
 8001ade:	d01f      	beq.n	8001b20 <HAL_ADC_ConfigChannel+0x1d8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ae0:	2000      	movs	r0, #0
 8001ae2:	e74b      	b.n	800197c <HAL_ADC_ConfigChannel+0x34>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001ae4:	0208      	lsls	r0, r1, #8
 8001ae6:	d4f8      	bmi.n	8001ada <HAL_ADC_ConfigChannel+0x192>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ae8:	2380      	movs	r3, #128	@ 0x80
 8001aea:	041b      	lsls	r3, r3, #16
 8001aec:	4313      	orrs	r3, r2
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 8001aee:	4930      	ldr	r1, [pc, #192]	@ (8001bb0 <HAL_ADC_ConfigChannel+0x268>)
 8001af0:	680a      	ldr	r2, [r1, #0]
 8001af2:	4832      	ldr	r0, [pc, #200]	@ (8001bbc <HAL_ADC_ConfigChannel+0x274>)
 8001af4:	4002      	ands	r2, r0
 8001af6:	4313      	orrs	r3, r2
 8001af8:	600b      	str	r3, [r1, #0]
          wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 8001afa:	4b31      	ldr	r3, [pc, #196]	@ (8001bc0 <HAL_ADC_ConfigChannel+0x278>)
 8001afc:	6818      	ldr	r0, [r3, #0]
 8001afe:	4931      	ldr	r1, [pc, #196]	@ (8001bc4 <HAL_ADC_ConfigChannel+0x27c>)
 8001b00:	f7fe fb16 	bl	8000130 <__udivsi3>
 8001b04:	0043      	lsls	r3, r0, #1
 8001b06:	181b      	adds	r3, r3, r0
 8001b08:	009b      	lsls	r3, r3, #2
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	9301      	str	r3, [sp, #4]
          while (wait_loop_index != 0UL)
 8001b0e:	e002      	b.n	8001b16 <HAL_ADC_ConfigChannel+0x1ce>
            wait_loop_index--;
 8001b10:	9b01      	ldr	r3, [sp, #4]
 8001b12:	3b01      	subs	r3, #1
 8001b14:	9301      	str	r3, [sp, #4]
          while (wait_loop_index != 0UL)
 8001b16:	9b01      	ldr	r3, [sp, #4]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d1f9      	bne.n	8001b10 <HAL_ADC_ConfigChannel+0x1c8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b1c:	2000      	movs	r0, #0
 8001b1e:	e72d      	b.n	800197c <HAL_ADC_ConfigChannel+0x34>
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001b20:	0249      	lsls	r1, r1, #9
 8001b22:	d43c      	bmi.n	8001b9e <HAL_ADC_ConfigChannel+0x256>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001b24:	2380      	movs	r3, #128	@ 0x80
 8001b26:	03db      	lsls	r3, r3, #15
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	4921      	ldr	r1, [pc, #132]	@ (8001bb0 <HAL_ADC_ConfigChannel+0x268>)
 8001b2c:	680a      	ldr	r2, [r1, #0]
 8001b2e:	4823      	ldr	r0, [pc, #140]	@ (8001bbc <HAL_ADC_ConfigChannel+0x274>)
 8001b30:	4002      	ands	r2, r0
 8001b32:	4313      	orrs	r3, r2
 8001b34:	600b      	str	r3, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b36:	2000      	movs	r0, #0
}
 8001b38:	e720      	b.n	800197c <HAL_ADC_ConfigChannel+0x34>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001b3a:	2380      	movs	r3, #128	@ 0x80
 8001b3c:	061b      	lsls	r3, r3, #24
 8001b3e:	429d      	cmp	r5, r3
 8001b40:	d002      	beq.n	8001b48 <HAL_ADC_ConfigChannel+0x200>
 8001b42:	4b19      	ldr	r3, [pc, #100]	@ (8001ba8 <HAL_ADC_ConfigChannel+0x260>)
 8001b44:	429d      	cmp	r5, r3
 8001b46:	d105      	bne.n	8001b54 <HAL_ADC_ConfigChannel+0x20c>
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 8001b48:	680b      	ldr	r3, [r1, #0]
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001b4a:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 8001b4c:	025b      	lsls	r3, r3, #9
 8001b4e:	0a5b      	lsrs	r3, r3, #9
 8001b50:	439a      	bics	r2, r3
 8001b52:	6282      	str	r2, [r0, #40]	@ 0x28
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001b54:	680b      	ldr	r3, [r1, #0]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	db01      	blt.n	8001b5e <HAL_ADC_ConfigChannel+0x216>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b5a:	2000      	movs	r0, #0
 8001b5c:	e70e      	b.n	800197c <HAL_ADC_ConfigChannel+0x34>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN));
 8001b5e:	4a14      	ldr	r2, [pc, #80]	@ (8001bb0 <HAL_ADC_ConfigChannel+0x268>)
 8001b60:	6812      	ldr	r2, [r2, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b62:	4914      	ldr	r1, [pc, #80]	@ (8001bb4 <HAL_ADC_ConfigChannel+0x26c>)
 8001b64:	428b      	cmp	r3, r1
 8001b66:	d004      	beq.n	8001b72 <HAL_ADC_ConfigChannel+0x22a>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001b68:	4913      	ldr	r1, [pc, #76]	@ (8001bb8 <HAL_ADC_ConfigChannel+0x270>)
 8001b6a:	428b      	cmp	r3, r1
 8001b6c:	d00c      	beq.n	8001b88 <HAL_ADC_ConfigChannel+0x240>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b6e:	2000      	movs	r0, #0
 8001b70:	e704      	b.n	800197c <HAL_ADC_ConfigChannel+0x34>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001b72:	2380      	movs	r3, #128	@ 0x80
 8001b74:	03db      	lsls	r3, r3, #15
 8001b76:	401a      	ands	r2, r3
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 8001b78:	490d      	ldr	r1, [pc, #52]	@ (8001bb0 <HAL_ADC_ConfigChannel+0x268>)
 8001b7a:	680b      	ldr	r3, [r1, #0]
 8001b7c:	480f      	ldr	r0, [pc, #60]	@ (8001bbc <HAL_ADC_ConfigChannel+0x274>)
 8001b7e:	4003      	ands	r3, r0
 8001b80:	431a      	orrs	r2, r3
 8001b82:	600a      	str	r2, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b84:	2000      	movs	r0, #0
}
 8001b86:	e6f9      	b.n	800197c <HAL_ADC_ConfigChannel+0x34>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001b88:	2380      	movs	r3, #128	@ 0x80
 8001b8a:	041b      	lsls	r3, r3, #16
 8001b8c:	401a      	ands	r2, r3
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 8001b8e:	4908      	ldr	r1, [pc, #32]	@ (8001bb0 <HAL_ADC_ConfigChannel+0x268>)
 8001b90:	680b      	ldr	r3, [r1, #0]
 8001b92:	480a      	ldr	r0, [pc, #40]	@ (8001bbc <HAL_ADC_ConfigChannel+0x274>)
 8001b94:	4003      	ands	r3, r0
 8001b96:	431a      	orrs	r2, r3
 8001b98:	600a      	str	r2, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b9a:	2000      	movs	r0, #0
}
 8001b9c:	e6ee      	b.n	800197c <HAL_ADC_ConfigChannel+0x34>
 8001b9e:	2000      	movs	r0, #0
 8001ba0:	e6ec      	b.n	800197c <HAL_ADC_ConfigChannel+0x34>
  __HAL_LOCK(hadc);
 8001ba2:	2002      	movs	r0, #2
 8001ba4:	e6ed      	b.n	8001982 <HAL_ADC_ConfigChannel+0x3a>
 8001ba6:	46c0      	nop			@ (mov r8, r8)
 8001ba8:	80000004 	.word	0x80000004
 8001bac:	7fffff00 	.word	0x7fffff00
 8001bb0:	40012708 	.word	0x40012708
 8001bb4:	a4000200 	.word	0xa4000200
 8001bb8:	a8000400 	.word	0xa8000400
 8001bbc:	ff3fffff 	.word	0xff3fffff
 8001bc0:	20000004 	.word	0x20000004
 8001bc4:	00030d40 	.word	0x00030d40

08001bc8 <ADC_Enable>:
{
 8001bc8:	b530      	push	{r4, r5, lr}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0UL;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	9301      	str	r3, [sp, #4]
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001bd2:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001bd4:	689a      	ldr	r2, [r3, #8]
 8001bd6:	07d2      	lsls	r2, r2, #31
 8001bd8:	d44d      	bmi.n	8001c76 <ADC_Enable+0xae>
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001bda:	6899      	ldr	r1, [r3, #8]
 8001bdc:	4a27      	ldr	r2, [pc, #156]	@ (8001c7c <ADC_Enable+0xb4>)
 8001bde:	4211      	tst	r1, r2
 8001be0:	d111      	bne.n	8001c06 <ADC_Enable+0x3e>
  MODIFY_REG(ADCx->CR,
 8001be2:	689a      	ldr	r2, [r3, #8]
 8001be4:	4926      	ldr	r1, [pc, #152]	@ (8001c80 <ADC_Enable+0xb8>)
 8001be6:	400a      	ands	r2, r1
 8001be8:	2101      	movs	r1, #1
 8001bea:	430a      	orrs	r2, r1
 8001bec:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN));
 8001bee:	4b25      	ldr	r3, [pc, #148]	@ (8001c84 <ADC_Enable+0xbc>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8001bf2:	021b      	lsls	r3, r3, #8
 8001bf4:	d517      	bpl.n	8001c26 <ADC_Enable+0x5e>
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001bf6:	4b24      	ldr	r3, [pc, #144]	@ (8001c88 <ADC_Enable+0xc0>)
 8001bf8:	6818      	ldr	r0, [r3, #0]
 8001bfa:	4924      	ldr	r1, [pc, #144]	@ (8001c8c <ADC_Enable+0xc4>)
 8001bfc:	f7fe fa98 	bl	8000130 <__udivsi3>
 8001c00:	3001      	adds	r0, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8001c02:	9001      	str	r0, [sp, #4]
      while (wait_loop_index != 0UL)
 8001c04:	e00c      	b.n	8001c20 <ADC_Enable+0x58>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c06:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8001c08:	2210      	movs	r2, #16
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	6583      	str	r3, [r0, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c0e:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 8001c10:	3a0f      	subs	r2, #15
 8001c12:	4313      	orrs	r3, r2
 8001c14:	65c3      	str	r3, [r0, #92]	@ 0x5c
      return HAL_ERROR;
 8001c16:	2001      	movs	r0, #1
 8001c18:	e02e      	b.n	8001c78 <ADC_Enable+0xb0>
        wait_loop_index--;
 8001c1a:	9b01      	ldr	r3, [sp, #4]
 8001c1c:	3b01      	subs	r3, #1
 8001c1e:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 8001c20:	9b01      	ldr	r3, [sp, #4]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d1f9      	bne.n	8001c1a <ADC_Enable+0x52>
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001c26:	7e63      	ldrb	r3, [r4, #25]
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d101      	bne.n	8001c30 <ADC_Enable+0x68>
  return HAL_OK;
 8001c2c:	2000      	movs	r0, #0
 8001c2e:	e023      	b.n	8001c78 <ADC_Enable+0xb0>
      tickstart = HAL_GetTick();
 8001c30:	f7ff fcfc 	bl	800162c <HAL_GetTick>
 8001c34:	0005      	movs	r5, r0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001c36:	e004      	b.n	8001c42 <ADC_Enable+0x7a>
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001c38:	f7ff fcf8 	bl	800162c <HAL_GetTick>
 8001c3c:	1b40      	subs	r0, r0, r5
 8001c3e:	2802      	cmp	r0, #2
 8001c40:	d80d      	bhi.n	8001c5e <ADC_Enable+0x96>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001c42:	6823      	ldr	r3, [r4, #0]
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	07d2      	lsls	r2, r2, #31
 8001c48:	d413      	bmi.n	8001c72 <ADC_Enable+0xaa>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001c4a:	689a      	ldr	r2, [r3, #8]
 8001c4c:	07d2      	lsls	r2, r2, #31
 8001c4e:	d4f3      	bmi.n	8001c38 <ADC_Enable+0x70>
  MODIFY_REG(ADCx->CR,
 8001c50:	689a      	ldr	r2, [r3, #8]
 8001c52:	490b      	ldr	r1, [pc, #44]	@ (8001c80 <ADC_Enable+0xb8>)
 8001c54:	400a      	ands	r2, r1
 8001c56:	2101      	movs	r1, #1
 8001c58:	430a      	orrs	r2, r1
 8001c5a:	609a      	str	r2, [r3, #8]
}
 8001c5c:	e7ec      	b.n	8001c38 <ADC_Enable+0x70>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c5e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001c60:	2210      	movs	r2, #16
 8001c62:	4313      	orrs	r3, r2
 8001c64:	65a3      	str	r3, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c66:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8001c68:	3a0f      	subs	r2, #15
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	65e3      	str	r3, [r4, #92]	@ 0x5c
          return HAL_ERROR;
 8001c6e:	2001      	movs	r0, #1
 8001c70:	e002      	b.n	8001c78 <ADC_Enable+0xb0>
  return HAL_OK;
 8001c72:	2000      	movs	r0, #0
 8001c74:	e000      	b.n	8001c78 <ADC_Enable+0xb0>
 8001c76:	2000      	movs	r0, #0
}
 8001c78:	b003      	add	sp, #12
 8001c7a:	bd30      	pop	{r4, r5, pc}
 8001c7c:	80000017 	.word	0x80000017
 8001c80:	7fffffe8 	.word	0x7fffffe8
 8001c84:	40012708 	.word	0x40012708
 8001c88:	20000004 	.word	0x20000004
 8001c8c:	00030d40 	.word	0x00030d40

08001c90 <HAL_ADC_Start_DMA>:
{
 8001c90:	b570      	push	{r4, r5, r6, lr}
 8001c92:	0004      	movs	r4, r0
 8001c94:	000d      	movs	r5, r1
 8001c96:	0016      	movs	r6, r2
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001c98:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001c9a:	6893      	ldr	r3, [r2, #8]
 8001c9c:	075b      	lsls	r3, r3, #29
 8001c9e:	d447      	bmi.n	8001d30 <HAL_ADC_Start_DMA+0xa0>
    __HAL_LOCK(hadc);
 8001ca0:	2354      	movs	r3, #84	@ 0x54
 8001ca2:	5cc3      	ldrb	r3, [r0, r3]
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d045      	beq.n	8001d34 <HAL_ADC_Start_DMA+0xa4>
 8001ca8:	2301      	movs	r3, #1
 8001caa:	2154      	movs	r1, #84	@ 0x54
 8001cac:	5443      	strb	r3, [r0, r1]
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 8001cae:	68d1      	ldr	r1, [r2, #12]
 8001cb0:	420b      	tst	r3, r1
 8001cb2:	d10d      	bne.n	8001cd0 <HAL_ADC_Start_DMA+0x40>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001cb4:	6893      	ldr	r3, [r2, #8]
 8001cb6:	07db      	lsls	r3, r3, #31
 8001cb8:	d505      	bpl.n	8001cc6 <HAL_ADC_Start_DMA+0x36>
  MODIFY_REG(ADCx->CR,
 8001cba:	6893      	ldr	r3, [r2, #8]
 8001cbc:	491e      	ldr	r1, [pc, #120]	@ (8001d38 <HAL_ADC_Start_DMA+0xa8>)
 8001cbe:	400b      	ands	r3, r1
 8001cc0:	2102      	movs	r1, #2
 8001cc2:	430b      	orrs	r3, r1
 8001cc4:	6093      	str	r3, [r2, #8]
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8001cc6:	6822      	ldr	r2, [r4, #0]
 8001cc8:	68d3      	ldr	r3, [r2, #12]
 8001cca:	2101      	movs	r1, #1
 8001ccc:	430b      	orrs	r3, r1
 8001cce:	60d3      	str	r3, [r2, #12]
    tmp_hal_status = ADC_Enable(hadc);
 8001cd0:	0020      	movs	r0, r4
 8001cd2:	f7ff ff79 	bl	8001bc8 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8001cd6:	2800      	cmp	r0, #0
 8001cd8:	d12b      	bne.n	8001d32 <HAL_ADC_Start_DMA+0xa2>
      ADC_STATE_CLR_SET(hadc->State,
 8001cda:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8001cdc:	4b17      	ldr	r3, [pc, #92]	@ (8001d3c <HAL_ADC_Start_DMA+0xac>)
 8001cde:	401a      	ands	r2, r3
 8001ce0:	2380      	movs	r3, #128	@ 0x80
 8001ce2:	005b      	lsls	r3, r3, #1
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	65a3      	str	r3, [r4, #88]	@ 0x58
      ADC_CLEAR_ERRORCODE(hadc);
 8001ce8:	2300      	movs	r3, #0
 8001cea:	65e3      	str	r3, [r4, #92]	@ 0x5c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001cec:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8001cee:	4914      	ldr	r1, [pc, #80]	@ (8001d40 <HAL_ADC_Start_DMA+0xb0>)
 8001cf0:	62d1      	str	r1, [r2, #44]	@ 0x2c
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001cf2:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8001cf4:	4913      	ldr	r1, [pc, #76]	@ (8001d44 <HAL_ADC_Start_DMA+0xb4>)
 8001cf6:	6311      	str	r1, [r2, #48]	@ 0x30
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001cf8:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8001cfa:	4913      	ldr	r1, [pc, #76]	@ (8001d48 <HAL_ADC_Start_DMA+0xb8>)
 8001cfc:	6351      	str	r1, [r2, #52]	@ 0x34
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001cfe:	6822      	ldr	r2, [r4, #0]
 8001d00:	211c      	movs	r1, #28
 8001d02:	6011      	str	r1, [r2, #0]
      __HAL_UNLOCK(hadc);
 8001d04:	2254      	movs	r2, #84	@ 0x54
 8001d06:	54a3      	strb	r3, [r4, r2]
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001d08:	6822      	ldr	r2, [r4, #0]
 8001d0a:	6853      	ldr	r3, [r2, #4]
 8001d0c:	390c      	subs	r1, #12
 8001d0e:	430b      	orrs	r3, r1
 8001d10:	6053      	str	r3, [r2, #4]
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001d12:	6821      	ldr	r1, [r4, #0]
 8001d14:	3140      	adds	r1, #64	@ 0x40
 8001d16:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 8001d18:	0033      	movs	r3, r6
 8001d1a:	002a      	movs	r2, r5
 8001d1c:	f000 fa26 	bl	800216c <HAL_DMA_Start_IT>
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001d20:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8001d22:	6893      	ldr	r3, [r2, #8]
 8001d24:	4904      	ldr	r1, [pc, #16]	@ (8001d38 <HAL_ADC_Start_DMA+0xa8>)
 8001d26:	400b      	ands	r3, r1
 8001d28:	2104      	movs	r1, #4
 8001d2a:	430b      	orrs	r3, r1
 8001d2c:	6093      	str	r3, [r2, #8]
}
 8001d2e:	e000      	b.n	8001d32 <HAL_ADC_Start_DMA+0xa2>
    tmp_hal_status = HAL_BUSY;
 8001d30:	2002      	movs	r0, #2
}
 8001d32:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LOCK(hadc);
 8001d34:	2002      	movs	r0, #2
 8001d36:	e7fc      	b.n	8001d32 <HAL_ADC_Start_DMA+0xa2>
 8001d38:	7fffffe8 	.word	0x7fffffe8
 8001d3c:	fffff0fe 	.word	0xfffff0fe
 8001d40:	080018c9 	.word	0x080018c9
 8001d44:	080018a1 	.word	0x080018a1
 8001d48:	080018ad 	.word	0x080018ad

08001d4c <ADC_Disable>:
{
 8001d4c:	b570      	push	{r4, r5, r6, lr}
 8001d4e:	0004      	movs	r4, r0
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8001d50:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001d52:	689a      	ldr	r2, [r3, #8]
 8001d54:	2102      	movs	r1, #2
 8001d56:	0008      	movs	r0, r1
 8001d58:	4010      	ands	r0, r2
 8001d5a:	4211      	tst	r1, r2
 8001d5c:	d000      	beq.n	8001d60 <ADC_Disable+0x14>
 8001d5e:	2001      	movs	r0, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001d60:	689a      	ldr	r2, [r3, #8]
 8001d62:	07d2      	lsls	r2, r2, #31
 8001d64:	d531      	bpl.n	8001dca <ADC_Disable+0x7e>
      && (tmp_adc_is_disable_on_going == 0UL)
 8001d66:	2800      	cmp	r0, #0
 8001d68:	d131      	bne.n	8001dce <ADC_Disable+0x82>
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8001d6a:	6899      	ldr	r1, [r3, #8]
 8001d6c:	2205      	movs	r2, #5
 8001d6e:	400a      	ands	r2, r1
 8001d70:	2a01      	cmp	r2, #1
 8001d72:	d009      	beq.n	8001d88 <ADC_Disable+0x3c>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d74:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001d76:	2210      	movs	r2, #16
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	65a3      	str	r3, [r4, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d7c:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8001d7e:	3a0f      	subs	r2, #15
 8001d80:	4313      	orrs	r3, r2
 8001d82:	65e3      	str	r3, [r4, #92]	@ 0x5c
      return HAL_ERROR;
 8001d84:	2001      	movs	r0, #1
 8001d86:	e021      	b.n	8001dcc <ADC_Disable+0x80>
  MODIFY_REG(ADCx->CR,
 8001d88:	689a      	ldr	r2, [r3, #8]
 8001d8a:	4912      	ldr	r1, [pc, #72]	@ (8001dd4 <ADC_Disable+0x88>)
 8001d8c:	400a      	ands	r2, r1
 8001d8e:	2102      	movs	r1, #2
 8001d90:	430a      	orrs	r2, r1
 8001d92:	609a      	str	r2, [r3, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8001d94:	6823      	ldr	r3, [r4, #0]
 8001d96:	2203      	movs	r2, #3
 8001d98:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8001d9a:	f7ff fc47 	bl	800162c <HAL_GetTick>
 8001d9e:	0005      	movs	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001da0:	6823      	ldr	r3, [r4, #0]
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	07db      	lsls	r3, r3, #31
 8001da6:	d50e      	bpl.n	8001dc6 <ADC_Disable+0x7a>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001da8:	f7ff fc40 	bl	800162c <HAL_GetTick>
 8001dac:	1b40      	subs	r0, r0, r5
 8001dae:	2802      	cmp	r0, #2
 8001db0:	d9f6      	bls.n	8001da0 <ADC_Disable+0x54>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001db2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001db4:	2210      	movs	r2, #16
 8001db6:	4313      	orrs	r3, r2
 8001db8:	65a3      	str	r3, [r4, #88]	@ 0x58
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dba:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8001dbc:	3a0f      	subs	r2, #15
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	65e3      	str	r3, [r4, #92]	@ 0x5c
        return HAL_ERROR;
 8001dc2:	2001      	movs	r0, #1
 8001dc4:	e002      	b.n	8001dcc <ADC_Disable+0x80>
  return HAL_OK;
 8001dc6:	2000      	movs	r0, #0
 8001dc8:	e000      	b.n	8001dcc <ADC_Disable+0x80>
 8001dca:	2000      	movs	r0, #0
}
 8001dcc:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8001dce:	2000      	movs	r0, #0
 8001dd0:	e7fc      	b.n	8001dcc <ADC_Disable+0x80>
 8001dd2:	46c0      	nop			@ (mov r8, r8)
 8001dd4:	7fffffe8 	.word	0x7fffffe8

08001dd8 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8001dd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	0004      	movs	r4, r0
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8001dde:	2300      	movs	r3, #0
 8001de0:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001de2:	3354      	adds	r3, #84	@ 0x54
 8001de4:	5cc3      	ldrb	r3, [r0, r3]
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d100      	bne.n	8001dec <HAL_ADCEx_Calibration_Start+0x14>
 8001dea:	e0a6      	b.n	8001f3a <HAL_ADCEx_Calibration_Start+0x162>
 8001dec:	2601      	movs	r6, #1
 8001dee:	2354      	movs	r3, #84	@ 0x54
 8001df0:	54c6      	strb	r6, [r0, r3]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8001df2:	f7ff ffab 	bl	8001d4c <ADC_Disable>
 8001df6:	0005      	movs	r5, r0

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001df8:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001dfa:	689a      	ldr	r2, [r3, #8]
 8001dfc:	0031      	movs	r1, r6
 8001dfe:	4011      	ands	r1, r2
 8001e00:	4216      	tst	r6, r2
 8001e02:	d009      	beq.n	8001e18 <HAL_ADCEx_Calibration_Start+0x40>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e04:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001e06:	2210      	movs	r2, #16
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	65a3      	str	r3, [r4, #88]	@ 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e0c:	2354      	movs	r3, #84	@ 0x54
 8001e0e:	2200      	movs	r2, #0
 8001e10:	54e2      	strb	r2, [r4, r3]

  /* Return function status */
  return tmp_hal_status;
}
 8001e12:	0028      	movs	r0, r5
 8001e14:	b003      	add	sp, #12
 8001e16:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ADC_STATE_CLR_SET(hadc->State,
 8001e18:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8001e1a:	4849      	ldr	r0, [pc, #292]	@ (8001f40 <HAL_ADCEx_Calibration_Start+0x168>)
 8001e1c:	4002      	ands	r2, r0
 8001e1e:	3006      	adds	r0, #6
 8001e20:	30ff      	adds	r0, #255	@ 0xff
 8001e22:	4302      	orrs	r2, r0
 8001e24:	65a2      	str	r2, [r4, #88]	@ 0x58
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8001e26:	68de      	ldr	r6, [r3, #12]
 8001e28:	4a46      	ldr	r2, [pc, #280]	@ (8001f44 <HAL_ADCEx_Calibration_Start+0x16c>)
 8001e2a:	4016      	ands	r6, r2
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8001e2c:	68da      	ldr	r2, [r3, #12]
 8001e2e:	4846      	ldr	r0, [pc, #280]	@ (8001f48 <HAL_ADCEx_Calibration_Start+0x170>)
 8001e30:	4002      	ands	r2, r0
 8001e32:	60da      	str	r2, [r3, #12]
  uint32_t calibration_factor_accumulated = 0;
 8001e34:	0008      	movs	r0, r1
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8001e36:	e006      	b.n	8001e46 <HAL_ADCEx_Calibration_Start+0x6e>
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8001e38:	22b4      	movs	r2, #180	@ 0xb4
 8001e3a:	589a      	ldr	r2, [r3, r2]
 8001e3c:	237f      	movs	r3, #127	@ 0x7f
 8001e3e:	4013      	ands	r3, r2
      calibration_factor_accumulated += (LL_ADC_GetCalibrationFactor(hadc->Instance) + 1UL);
 8001e40:	3301      	adds	r3, #1
 8001e42:	18c0      	adds	r0, r0, r3
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8001e44:	3101      	adds	r1, #1
 8001e46:	2907      	cmp	r1, #7
 8001e48:	d81d      	bhi.n	8001e86 <HAL_ADCEx_Calibration_Start+0xae>
      LL_ADC_StartCalibration(hadc->Instance);
 8001e4a:	6827      	ldr	r7, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8001e4c:	68ba      	ldr	r2, [r7, #8]
 8001e4e:	4b3f      	ldr	r3, [pc, #252]	@ (8001f4c <HAL_ADCEx_Calibration_Start+0x174>)
 8001e50:	401a      	ands	r2, r3
 8001e52:	3318      	adds	r3, #24
 8001e54:	4313      	orrs	r3, r2
 8001e56:	60bb      	str	r3, [r7, #8]
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8001e58:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8001e5a:	689a      	ldr	r2, [r3, #8]
 8001e5c:	2a00      	cmp	r2, #0
 8001e5e:	daeb      	bge.n	8001e38 <HAL_ADCEx_Calibration_Start+0x60>
        wait_loop_index++;
 8001e60:	9b01      	ldr	r3, [sp, #4]
 8001e62:	3301      	adds	r3, #1
 8001e64:	9301      	str	r3, [sp, #4]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8001e66:	9a01      	ldr	r2, [sp, #4]
 8001e68:	23ae      	movs	r3, #174	@ 0xae
 8001e6a:	029b      	lsls	r3, r3, #10
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d3f3      	bcc.n	8001e58 <HAL_ADCEx_Calibration_Start+0x80>
          ADC_STATE_CLR_SET(hadc->State,
 8001e70:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001e72:	2212      	movs	r2, #18
 8001e74:	4393      	bics	r3, r2
 8001e76:	3a02      	subs	r2, #2
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	65a3      	str	r3, [r4, #88]	@ 0x58
          __HAL_UNLOCK(hadc);
 8001e7c:	2354      	movs	r3, #84	@ 0x54
 8001e7e:	2200      	movs	r2, #0
 8001e80:	54e2      	strb	r2, [r4, r3]
          return HAL_ERROR;
 8001e82:	2501      	movs	r5, #1
 8001e84:	e7c5      	b.n	8001e12 <HAL_ADCEx_Calibration_Start+0x3a>
    calibration_factor_accumulated += (calibration_index / 2UL);
 8001e86:	084b      	lsrs	r3, r1, #1
 8001e88:	1818      	adds	r0, r3, r0
    calibration_factor_accumulated /= calibration_index;
 8001e8a:	f7fe f951 	bl	8000130 <__udivsi3>
    LL_ADC_Enable(hadc->Instance);
 8001e8e:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8001e90:	6893      	ldr	r3, [r2, #8]
 8001e92:	492e      	ldr	r1, [pc, #184]	@ (8001f4c <HAL_ADCEx_Calibration_Start+0x174>)
 8001e94:	400b      	ands	r3, r1
 8001e96:	2101      	movs	r1, #1
 8001e98:	430b      	orrs	r3, r1
 8001e9a:	6093      	str	r3, [r2, #8]
    if (LL_ADC_GetClock(hadc->Instance) == LL_ADC_CLOCK_ASYNC)
 8001e9c:	6822      	ldr	r2, [r4, #0]
  return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_CKMODE));
 8001e9e:	6911      	ldr	r1, [r2, #16]
 8001ea0:	2380      	movs	r3, #128	@ 0x80
 8001ea2:	05db      	lsls	r3, r3, #23
 8001ea4:	4299      	cmp	r1, r3
 8001ea6:	d217      	bcs.n	8001ed8 <HAL_ADCEx_Calibration_Start+0x100>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_PRESC));
 8001ea8:	4b29      	ldr	r3, [pc, #164]	@ (8001f50 <HAL_ADCEx_Calibration_Start+0x178>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	21f0      	movs	r1, #240	@ 0xf0
 8001eae:	0389      	lsls	r1, r1, #14
 8001eb0:	400b      	ands	r3, r1
      if (adc_clk_async_presc >= LL_ADC_CLOCK_ASYNC_DIV16)
 8001eb2:	21e0      	movs	r1, #224	@ 0xe0
 8001eb4:	0349      	lsls	r1, r1, #13
 8001eb6:	428b      	cmp	r3, r1
 8001eb8:	d30e      	bcc.n	8001ed8 <HAL_ADCEx_Calibration_Start+0x100>
        delay_cpu_cycles = (1UL << ((adc_clk_async_presc >> ADC_CCR_PRESC_Pos) - 3UL));
 8001eba:	0c9b      	lsrs	r3, r3, #18
 8001ebc:	3b03      	subs	r3, #3
 8001ebe:	2101      	movs	r1, #1
 8001ec0:	4099      	lsls	r1, r3
 8001ec2:	9100      	str	r1, [sp, #0]
        delay_cpu_cycles >>= 1UL;
 8001ec4:	9b00      	ldr	r3, [sp, #0]
 8001ec6:	085b      	lsrs	r3, r3, #1
 8001ec8:	9300      	str	r3, [sp, #0]
        while (delay_cpu_cycles != 0UL)
 8001eca:	e002      	b.n	8001ed2 <HAL_ADCEx_Calibration_Start+0xfa>
          delay_cpu_cycles--;
 8001ecc:	9b00      	ldr	r3, [sp, #0]
 8001ece:	3b01      	subs	r3, #1
 8001ed0:	9300      	str	r3, [sp, #0]
        while (delay_cpu_cycles != 0UL)
 8001ed2:	9b00      	ldr	r3, [sp, #0]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d1f9      	bne.n	8001ecc <HAL_ADCEx_Calibration_Start+0xf4>
  MODIFY_REG(ADCx->CALFACT,
 8001ed8:	21b4      	movs	r1, #180	@ 0xb4
 8001eda:	5853      	ldr	r3, [r2, r1]
 8001edc:	277f      	movs	r7, #127	@ 0x7f
 8001ede:	43bb      	bics	r3, r7
 8001ee0:	4318      	orrs	r0, r3
 8001ee2:	5050      	str	r0, [r2, r1]
    LL_ADC_Disable(hadc->Instance);
 8001ee4:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8001ee6:	6893      	ldr	r3, [r2, #8]
 8001ee8:	4918      	ldr	r1, [pc, #96]	@ (8001f4c <HAL_ADCEx_Calibration_Start+0x174>)
 8001eea:	400b      	ands	r3, r1
 8001eec:	2102      	movs	r1, #2
 8001eee:	430b      	orrs	r3, r1
 8001ef0:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8001ef2:	f7ff fb9b 	bl	800162c <HAL_GetTick>
 8001ef6:	0007      	movs	r7, r0
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001ef8:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001efa:	689a      	ldr	r2, [r3, #8]
 8001efc:	07d2      	lsls	r2, r2, #31
 8001efe:	d409      	bmi.n	8001f14 <HAL_ADCEx_Calibration_Start+0x13c>
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8001f00:	68da      	ldr	r2, [r3, #12]
 8001f02:	4332      	orrs	r2, r6
 8001f04:	60da      	str	r2, [r3, #12]
    ADC_STATE_CLR_SET(hadc->State,
 8001f06:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001f08:	2203      	movs	r2, #3
 8001f0a:	4393      	bics	r3, r2
 8001f0c:	3a02      	subs	r2, #2
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	65a3      	str	r3, [r4, #88]	@ 0x58
 8001f12:	e77b      	b.n	8001e0c <HAL_ADCEx_Calibration_Start+0x34>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001f14:	f7ff fb8a 	bl	800162c <HAL_GetTick>
 8001f18:	1bc0      	subs	r0, r0, r7
 8001f1a:	2802      	cmp	r0, #2
 8001f1c:	d9ec      	bls.n	8001ef8 <HAL_ADCEx_Calibration_Start+0x120>
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001f1e:	6823      	ldr	r3, [r4, #0]
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	07db      	lsls	r3, r3, #31
 8001f24:	d5e8      	bpl.n	8001ef8 <HAL_ADCEx_Calibration_Start+0x120>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f26:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001f28:	2210      	movs	r2, #16
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	65a3      	str	r3, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f2e:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8001f30:	3a0f      	subs	r2, #15
 8001f32:	4313      	orrs	r3, r2
 8001f34:	65e3      	str	r3, [r4, #92]	@ 0x5c
          return HAL_ERROR;
 8001f36:	2501      	movs	r5, #1
 8001f38:	e76b      	b.n	8001e12 <HAL_ADCEx_Calibration_Start+0x3a>
  __HAL_LOCK(hadc);
 8001f3a:	2502      	movs	r5, #2
 8001f3c:	e769      	b.n	8001e12 <HAL_ADCEx_Calibration_Start+0x3a>
 8001f3e:	46c0      	nop			@ (mov r8, r8)
 8001f40:	fffffefd 	.word	0xfffffefd
 8001f44:	00008003 	.word	0x00008003
 8001f48:	ffff7ffc 	.word	0xffff7ffc
 8001f4c:	7fffffe8 	.word	0x7fffffe8
 8001f50:	40012708 	.word	0x40012708

08001f54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f54:	b570      	push	{r4, r5, r6, lr}
  if ((int32_t)(IRQn) >= 0)
 8001f56:	2800      	cmp	r0, #0
 8001f58:	db11      	blt.n	8001f7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f5a:	0883      	lsrs	r3, r0, #2
 8001f5c:	4d13      	ldr	r5, [pc, #76]	@ (8001fac <__NVIC_SetPriority+0x58>)
 8001f5e:	33c0      	adds	r3, #192	@ 0xc0
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	595c      	ldr	r4, [r3, r5]
 8001f64:	2203      	movs	r2, #3
 8001f66:	4010      	ands	r0, r2
 8001f68:	00c0      	lsls	r0, r0, #3
 8001f6a:	32fc      	adds	r2, #252	@ 0xfc
 8001f6c:	0016      	movs	r6, r2
 8001f6e:	4086      	lsls	r6, r0
 8001f70:	43b4      	bics	r4, r6
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001f72:	0189      	lsls	r1, r1, #6
 8001f74:	400a      	ands	r2, r1
 8001f76:	4082      	lsls	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f78:	4322      	orrs	r2, r4
 8001f7a:	515a      	str	r2, [r3, r5]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001f7c:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f7e:	230f      	movs	r3, #15
 8001f80:	4003      	ands	r3, r0
 8001f82:	3b08      	subs	r3, #8
 8001f84:	089b      	lsrs	r3, r3, #2
 8001f86:	3306      	adds	r3, #6
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	4a09      	ldr	r2, [pc, #36]	@ (8001fb0 <__NVIC_SetPriority+0x5c>)
 8001f8c:	4694      	mov	ip, r2
 8001f8e:	4463      	add	r3, ip
 8001f90:	685c      	ldr	r4, [r3, #4]
 8001f92:	2203      	movs	r2, #3
 8001f94:	4010      	ands	r0, r2
 8001f96:	00c0      	lsls	r0, r0, #3
 8001f98:	32fc      	adds	r2, #252	@ 0xfc
 8001f9a:	0015      	movs	r5, r2
 8001f9c:	4085      	lsls	r5, r0
 8001f9e:	43ac      	bics	r4, r5
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001fa0:	0189      	lsls	r1, r1, #6
 8001fa2:	400a      	ands	r2, r1
 8001fa4:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001fa6:	4322      	orrs	r2, r4
 8001fa8:	605a      	str	r2, [r3, #4]
}
 8001faa:	e7e7      	b.n	8001f7c <__NVIC_SetPriority+0x28>
 8001fac:	e000e100 	.word	0xe000e100
 8001fb0:	e000ed00 	.word	0xe000ed00

08001fb4 <SysTick_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fb4:	3801      	subs	r0, #1
 8001fb6:	2380      	movs	r3, #128	@ 0x80
 8001fb8:	045b      	lsls	r3, r3, #17
 8001fba:	4298      	cmp	r0, r3
 8001fbc:	d20f      	bcs.n	8001fde <SysTick_Config+0x2a>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fbe:	4a09      	ldr	r2, [pc, #36]	@ (8001fe4 <SysTick_Config+0x30>)
 8001fc0:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001fc2:	4809      	ldr	r0, [pc, #36]	@ (8001fe8 <SysTick_Config+0x34>)
 8001fc4:	6a03      	ldr	r3, [r0, #32]
 8001fc6:	021b      	lsls	r3, r3, #8
 8001fc8:	0a1b      	lsrs	r3, r3, #8
 8001fca:	21c0      	movs	r1, #192	@ 0xc0
 8001fcc:	0609      	lsls	r1, r1, #24
 8001fce:	430b      	orrs	r3, r1
 8001fd0:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fd6:	3307      	adds	r3, #7
 8001fd8:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fda:	2000      	movs	r0, #0
}
 8001fdc:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001fde:	2001      	movs	r0, #1
 8001fe0:	e7fc      	b.n	8001fdc <SysTick_Config+0x28>
 8001fe2:	46c0      	nop			@ (mov r8, r8)
 8001fe4:	e000e010 	.word	0xe000e010
 8001fe8:	e000ed00 	.word	0xe000ed00

08001fec <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fec:	b510      	push	{r4, lr}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001fee:	f7ff ffb1 	bl	8001f54 <__NVIC_SetPriority>
}
 8001ff2:	bd10      	pop	{r4, pc}

08001ff4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001ff4:	2800      	cmp	r0, #0
 8001ff6:	db05      	blt.n	8002004 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ff8:	221f      	movs	r2, #31
 8001ffa:	4002      	ands	r2, r0
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	4093      	lsls	r3, r2
 8002000:	4a01      	ldr	r2, [pc, #4]	@ (8002008 <HAL_NVIC_EnableIRQ+0x14>)
 8002002:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002004:	4770      	bx	lr
 8002006:	46c0      	nop			@ (mov r8, r8)
 8002008:	e000e100 	.word	0xe000e100

0800200c <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800200c:	b510      	push	{r4, lr}
  return SysTick_Config(TicksNumb);
 800200e:	f7ff ffd1 	bl	8001fb4 <SysTick_Config>
}
 8002012:	bd10      	pop	{r4, pc}

08002014 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002014:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002016:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 8002018:	6cc5      	ldr	r5, [r0, #76]	@ 0x4c
 800201a:	6065      	str	r5, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800201c:	6d04      	ldr	r4, [r0, #80]	@ 0x50
 800201e:	2c00      	cmp	r4, #0
 8002020:	d002      	beq.n	8002028 <DMA_SetConfig+0x14>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002022:	6d44      	ldr	r4, [r0, #84]	@ 0x54
 8002024:	6d85      	ldr	r5, [r0, #88]	@ 0x58
 8002026:	6065      	str	r5, [r4, #4]
  }

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 8002028:	4f0b      	ldr	r7, [pc, #44]	@ (8002058 <DMA_SetConfig+0x44>)
 800202a:	687c      	ldr	r4, [r7, #4]
 800202c:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 800202e:	261c      	movs	r6, #28
 8002030:	402e      	ands	r6, r5
 8002032:	2501      	movs	r5, #1
 8002034:	40b5      	lsls	r5, r6
 8002036:	432c      	orrs	r4, r5
 8002038:	607c      	str	r4, [r7, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800203a:	6804      	ldr	r4, [r0, #0]
 800203c:	6063      	str	r3, [r4, #4]

  /* Peripheral to Memory */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800203e:	6883      	ldr	r3, [r0, #8]
 8002040:	2b10      	cmp	r3, #16
 8002042:	d004      	beq.n	800204e <DMA_SetConfig+0x3a>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8002044:	6803      	ldr	r3, [r0, #0]
 8002046:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8002048:	6803      	ldr	r3, [r0, #0]
 800204a:	60da      	str	r2, [r3, #12]
  }
}
 800204c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->Instance->CPAR = DstAddress;
 800204e:	6803      	ldr	r3, [r0, #0]
 8002050:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8002052:	6803      	ldr	r3, [r0, #0]
 8002054:	60d9      	str	r1, [r3, #12]
 8002056:	e7f9      	b.n	800204c <DMA_SetConfig+0x38>
 8002058:	40020000 	.word	0x40020000

0800205c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800205c:	b510      	push	{r4, lr}
 800205e:	0004      	movs	r4, r0
  uint32_t channel_number;

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002060:	6803      	ldr	r3, [r0, #0]
 8002062:	20ff      	movs	r0, #255	@ 0xff
 8002064:	4018      	ands	r0, r3
 8002066:	3808      	subs	r0, #8
 8002068:	2114      	movs	r1, #20
 800206a:	f7fe f861 	bl	8000130 <__udivsi3>
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
                                                             ((hdma->ChannelIndex >> 2U) * \
 800206e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002070:	089b      	lsrs	r3, r3, #2
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
 8002072:	4a06      	ldr	r2, [pc, #24]	@ (800208c <DMA_CalcDMAMUXChannelBaseAndMask+0x30>)
 8002074:	4694      	mov	ip, r2
 8002076:	4463      	add	r3, ip
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	6463      	str	r3, [r4, #68]	@ 0x44
                                                              ((uint32_t)DMAMUX1_Channel1 - \
                                                               (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800207c:	4b04      	ldr	r3, [pc, #16]	@ (8002090 <DMA_CalcDMAMUXChannelBaseAndMask+0x34>)
 800207e:	64a3      	str	r3, [r4, #72]	@ 0x48
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 8002080:	231c      	movs	r3, #28
 8002082:	4018      	ands	r0, r3
 8002084:	3b1b      	subs	r3, #27
 8002086:	4083      	lsls	r3, r0
 8002088:	64e3      	str	r3, [r4, #76]	@ 0x4c
}
 800208a:	bd10      	pop	{r4, pc}
 800208c:	10008200 	.word	0x10008200
 8002090:	40020880 	.word	0x40020880

08002094 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002094:	6842      	ldr	r2, [r0, #4]
 8002096:	23ff      	movs	r3, #255	@ 0xff
 8002098:	4013      	ands	r3, r2

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + \
 800209a:	4a06      	ldr	r2, [pc, #24]	@ (80020b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x20>)
 800209c:	189a      	adds	r2, r3, r2
 800209e:	0092      	lsls	r2, r2, #2
 80020a0:	6502      	str	r2, [r0, #80]	@ 0x50
                                                                    ((request - 1U) * 4U)));

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80020a2:	4a05      	ldr	r2, [pc, #20]	@ (80020b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x24>)
 80020a4:	6542      	str	r2, [r0, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to 4, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80020a6:	3b01      	subs	r3, #1
 80020a8:	2203      	movs	r2, #3
 80020aa:	401a      	ands	r2, r3
 80020ac:	2301      	movs	r3, #1
 80020ae:	4093      	lsls	r3, r2
 80020b0:	6583      	str	r3, [r0, #88]	@ 0x58
}
 80020b2:	4770      	bx	lr
 80020b4:	1000823f 	.word	0x1000823f
 80020b8:	40020940 	.word	0x40020940

080020bc <HAL_DMA_Init>:
{
 80020bc:	b570      	push	{r4, r5, r6, lr}
 80020be:	1e04      	subs	r4, r0, #0
  if (hdma == NULL)
 80020c0:	d04d      	beq.n	800215e <HAL_DMA_Init+0xa2>
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 80020c2:	6805      	ldr	r5, [r0, #0]
 80020c4:	4b27      	ldr	r3, [pc, #156]	@ (8002164 <HAL_DMA_Init+0xa8>)
 80020c6:	18e8      	adds	r0, r5, r3
 80020c8:	2114      	movs	r1, #20
 80020ca:	f7fe f831 	bl	8000130 <__udivsi3>
                                                                                (uint32_t)DMA1_Channel1)) << 2U;
 80020ce:	0080      	lsls	r0, r0, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 80020d0:	6420      	str	r0, [r4, #64]	@ 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 80020d2:	2325      	movs	r3, #37	@ 0x25
 80020d4:	2202      	movs	r2, #2
 80020d6:	54e2      	strb	r2, [r4, r3]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80020d8:	682b      	ldr	r3, [r5, #0]
 80020da:	4a23      	ldr	r2, [pc, #140]	@ (8002168 <HAL_DMA_Init+0xac>)
 80020dc:	4013      	ands	r3, r2
 80020de:	602b      	str	r3, [r5, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80020e0:	6821      	ldr	r1, [r4, #0]
 80020e2:	680a      	ldr	r2, [r1, #0]
 80020e4:	68a3      	ldr	r3, [r4, #8]
 80020e6:	68e0      	ldr	r0, [r4, #12]
 80020e8:	4303      	orrs	r3, r0
 80020ea:	6920      	ldr	r0, [r4, #16]
 80020ec:	4303      	orrs	r3, r0
 80020ee:	6960      	ldr	r0, [r4, #20]
 80020f0:	4303      	orrs	r3, r0
 80020f2:	69a0      	ldr	r0, [r4, #24]
 80020f4:	4303      	orrs	r3, r0
 80020f6:	69e0      	ldr	r0, [r4, #28]
 80020f8:	4303      	orrs	r3, r0
 80020fa:	6a20      	ldr	r0, [r4, #32]
 80020fc:	4303      	orrs	r3, r0
 80020fe:	4313      	orrs	r3, r2
 8002100:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002102:	0020      	movs	r0, r4
 8002104:	f7ff ffaa 	bl	800205c <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002108:	68a2      	ldr	r2, [r4, #8]
 800210a:	2380      	movs	r3, #128	@ 0x80
 800210c:	01db      	lsls	r3, r3, #7
 800210e:	429a      	cmp	r2, r3
 8002110:	d018      	beq.n	8002144 <HAL_DMA_Init+0x88>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002112:	6861      	ldr	r1, [r4, #4]
 8002114:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8002116:	23ff      	movs	r3, #255	@ 0xff
 8002118:	400b      	ands	r3, r1
 800211a:	6013      	str	r3, [r2, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800211c:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800211e:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
 8002120:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request > 0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002122:	6863      	ldr	r3, [r4, #4]
 8002124:	3b01      	subs	r3, #1
 8002126:	2b03      	cmp	r3, #3
 8002128:	d90f      	bls.n	800214a <HAL_DMA_Init+0x8e>
    hdma->DMAmuxRequestGen = 0U;
 800212a:	2300      	movs	r3, #0
 800212c:	6523      	str	r3, [r4, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 800212e:	6563      	str	r3, [r4, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002130:	65a3      	str	r3, [r4, #88]	@ 0x58
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002132:	2300      	movs	r3, #0
 8002134:	63e3      	str	r3, [r4, #60]	@ 0x3c
  hdma->State  = HAL_DMA_STATE_READY;
 8002136:	2225      	movs	r2, #37	@ 0x25
 8002138:	2101      	movs	r1, #1
 800213a:	54a1      	strb	r1, [r4, r2]
  __HAL_UNLOCK(hdma);
 800213c:	3a01      	subs	r2, #1
 800213e:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 8002140:	2000      	movs	r0, #0
}
 8002142:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002144:	2300      	movs	r3, #0
 8002146:	6063      	str	r3, [r4, #4]
 8002148:	e7e3      	b.n	8002112 <HAL_DMA_Init+0x56>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800214a:	0020      	movs	r0, r4
 800214c:	f7ff ffa2 	bl	8002094 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002150:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8002152:	2200      	movs	r2, #0
 8002154:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002156:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8002158:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800215a:	605a      	str	r2, [r3, #4]
 800215c:	e7e9      	b.n	8002132 <HAL_DMA_Init+0x76>
    return HAL_ERROR;
 800215e:	2001      	movs	r0, #1
 8002160:	e7ef      	b.n	8002142 <HAL_DMA_Init+0x86>
 8002162:	46c0      	nop			@ (mov r8, r8)
 8002164:	bffdfff8 	.word	0xbffdfff8
 8002168:	ffff800f 	.word	0xffff800f

0800216c <HAL_DMA_Start_IT>:
{
 800216c:	b570      	push	{r4, r5, r6, lr}
 800216e:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 8002170:	2024      	movs	r0, #36	@ 0x24
 8002172:	5c20      	ldrb	r0, [r4, r0]
 8002174:	2801      	cmp	r0, #1
 8002176:	d046      	beq.n	8002206 <HAL_DMA_Start_IT+0x9a>
 8002178:	2024      	movs	r0, #36	@ 0x24
 800217a:	2501      	movs	r5, #1
 800217c:	5425      	strb	r5, [r4, r0]
  if (HAL_DMA_STATE_READY == hdma->State)
 800217e:	3001      	adds	r0, #1
 8002180:	5c20      	ldrb	r0, [r4, r0]
 8002182:	2801      	cmp	r0, #1
 8002184:	d007      	beq.n	8002196 <HAL_DMA_Start_IT+0x2a>
    __HAL_UNLOCK(hdma);
 8002186:	2324      	movs	r3, #36	@ 0x24
 8002188:	2200      	movs	r2, #0
 800218a:	54e2      	strb	r2, [r4, r3]
    status = HAL_BUSY;
 800218c:	2002      	movs	r0, #2
  __HAL_UNLOCK(hdma);
 800218e:	2324      	movs	r3, #36	@ 0x24
 8002190:	2200      	movs	r2, #0
 8002192:	54e2      	strb	r2, [r4, r3]
}
 8002194:	bd70      	pop	{r4, r5, r6, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8002196:	3024      	adds	r0, #36	@ 0x24
 8002198:	3501      	adds	r5, #1
 800219a:	5425      	strb	r5, [r4, r0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800219c:	2000      	movs	r0, #0
 800219e:	63e0      	str	r0, [r4, #60]	@ 0x3c
    __HAL_DMA_DISABLE(hdma);
 80021a0:	6825      	ldr	r5, [r4, #0]
 80021a2:	6828      	ldr	r0, [r5, #0]
 80021a4:	2601      	movs	r6, #1
 80021a6:	43b0      	bics	r0, r6
 80021a8:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80021aa:	0020      	movs	r0, r4
 80021ac:	f7ff ff32 	bl	8002014 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 80021b0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d01c      	beq.n	80021f0 <HAL_DMA_Start_IT+0x84>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021b6:	6822      	ldr	r2, [r4, #0]
 80021b8:	6813      	ldr	r3, [r2, #0]
 80021ba:	210e      	movs	r1, #14
 80021bc:	430b      	orrs	r3, r1
 80021be:	6013      	str	r3, [r2, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80021c0:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 80021c2:	6813      	ldr	r3, [r2, #0]
 80021c4:	03db      	lsls	r3, r3, #15
 80021c6:	d504      	bpl.n	80021d2 <HAL_DMA_Start_IT+0x66>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80021c8:	6811      	ldr	r1, [r2, #0]
 80021ca:	2380      	movs	r3, #128	@ 0x80
 80021cc:	005b      	lsls	r3, r3, #1
 80021ce:	430b      	orrs	r3, r1
 80021d0:	6013      	str	r3, [r2, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 80021d2:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d004      	beq.n	80021e2 <HAL_DMA_Start_IT+0x76>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80021d8:	6819      	ldr	r1, [r3, #0]
 80021da:	2280      	movs	r2, #128	@ 0x80
 80021dc:	0052      	lsls	r2, r2, #1
 80021de:	430a      	orrs	r2, r1
 80021e0:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 80021e2:	6822      	ldr	r2, [r4, #0]
 80021e4:	6813      	ldr	r3, [r2, #0]
 80021e6:	2101      	movs	r1, #1
 80021e8:	430b      	orrs	r3, r1
 80021ea:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80021ec:	2000      	movs	r0, #0
 80021ee:	e7ce      	b.n	800218e <HAL_DMA_Start_IT+0x22>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80021f0:	6822      	ldr	r2, [r4, #0]
 80021f2:	6813      	ldr	r3, [r2, #0]
 80021f4:	2104      	movs	r1, #4
 80021f6:	438b      	bics	r3, r1
 80021f8:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80021fa:	6822      	ldr	r2, [r4, #0]
 80021fc:	6813      	ldr	r3, [r2, #0]
 80021fe:	3106      	adds	r1, #6
 8002200:	430b      	orrs	r3, r1
 8002202:	6013      	str	r3, [r2, #0]
 8002204:	e7dc      	b.n	80021c0 <HAL_DMA_Start_IT+0x54>
  __HAL_LOCK(hdma);
 8002206:	2002      	movs	r0, #2
 8002208:	e7c4      	b.n	8002194 <HAL_DMA_Start_IT+0x28>
	...

0800220c <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 800220c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800220e:	46d6      	mov	lr, sl
 8002210:	464f      	mov	r7, r9
 8002212:	4646      	mov	r6, r8
 8002214:	b5c0      	push	{r6, r7, lr}
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8002216:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002218:	e03b      	b.n	8002292 <HAL_GPIO_Init+0x86>
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        tmp = EXTI->EXTICR[position >> 2U];
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 800221a:	2505      	movs	r5, #5
 800221c:	e000      	b.n	8002220 <HAL_GPIO_Init+0x14>
 800221e:	2500      	movs	r5, #0
 8002220:	40a5      	lsls	r5, r4
 8002222:	002c      	movs	r4, r5
 8002224:	433c      	orrs	r4, r7
        EXTI->EXTICR[position >> 2U] = tmp;
 8002226:	4d63      	ldr	r5, [pc, #396]	@ (80023b4 <HAL_GPIO_Init+0x1a8>)
 8002228:	3218      	adds	r2, #24
 800222a:	0092      	lsls	r2, r2, #2
 800222c:	5154      	str	r4, [r2, r5]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 800222e:	2280      	movs	r2, #128	@ 0x80
 8002230:	58af      	ldr	r7, [r5, r2]
        tmp &= ~((uint32_t)iocurrent);
 8002232:	464a      	mov	r2, r9
 8002234:	43d2      	mvns	r2, r2
 8002236:	003d      	movs	r5, r7
 8002238:	464c      	mov	r4, r9
 800223a:	43a5      	bics	r5, r4
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800223c:	684c      	ldr	r4, [r1, #4]
 800223e:	03e4      	lsls	r4, r4, #15
 8002240:	d502      	bpl.n	8002248 <HAL_GPIO_Init+0x3c>
        {
          tmp |= iocurrent;
 8002242:	003d      	movs	r5, r7
 8002244:	464c      	mov	r4, r9
 8002246:	4325      	orrs	r5, r4
        }
        EXTI->IMR1 = tmp;
 8002248:	4c5a      	ldr	r4, [pc, #360]	@ (80023b4 <HAL_GPIO_Init+0x1a8>)
 800224a:	2780      	movs	r7, #128	@ 0x80
 800224c:	51e5      	str	r5, [r4, r7]

        tmp = EXTI->EMR1;
 800224e:	2584      	movs	r5, #132	@ 0x84
 8002250:	5967      	ldr	r7, [r4, r5]
        tmp &= ~((uint32_t)iocurrent);
 8002252:	003d      	movs	r5, r7
 8002254:	4015      	ands	r5, r2
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002256:	684c      	ldr	r4, [r1, #4]
 8002258:	03a4      	lsls	r4, r4, #14
 800225a:	d502      	bpl.n	8002262 <HAL_GPIO_Init+0x56>
        {
          tmp |= iocurrent;
 800225c:	003d      	movs	r5, r7
 800225e:	464c      	mov	r4, r9
 8002260:	4325      	orrs	r5, r4
        }
        EXTI->EMR1 = tmp;
 8002262:	4c54      	ldr	r4, [pc, #336]	@ (80023b4 <HAL_GPIO_Init+0x1a8>)
 8002264:	2784      	movs	r7, #132	@ 0x84
 8002266:	51e5      	str	r5, [r4, r7]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8002268:	6827      	ldr	r7, [r4, #0]
        tmp &= ~((uint32_t)iocurrent);
 800226a:	003d      	movs	r5, r7
 800226c:	4015      	ands	r5, r2
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800226e:	684c      	ldr	r4, [r1, #4]
 8002270:	02e4      	lsls	r4, r4, #11
 8002272:	d502      	bpl.n	800227a <HAL_GPIO_Init+0x6e>
        {
          tmp |= iocurrent;
 8002274:	003d      	movs	r5, r7
 8002276:	464c      	mov	r4, r9
 8002278:	4325      	orrs	r5, r4
        }
        EXTI->RTSR1 = tmp;
 800227a:	4c4e      	ldr	r4, [pc, #312]	@ (80023b4 <HAL_GPIO_Init+0x1a8>)
 800227c:	6025      	str	r5, [r4, #0]

        tmp = EXTI->FTSR1;
 800227e:	6865      	ldr	r5, [r4, #4]
        tmp &= ~((uint32_t)iocurrent);
 8002280:	402a      	ands	r2, r5
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002282:	684c      	ldr	r4, [r1, #4]
 8002284:	02a4      	lsls	r4, r4, #10
 8002286:	d501      	bpl.n	800228c <HAL_GPIO_Init+0x80>
        {
          tmp |= iocurrent;
 8002288:	464a      	mov	r2, r9
 800228a:	432a      	orrs	r2, r5
        }
        EXTI->FTSR1 = tmp;
 800228c:	4c49      	ldr	r4, [pc, #292]	@ (80023b4 <HAL_GPIO_Init+0x1a8>)
 800228e:	6062      	str	r2, [r4, #4]
      }
    }

    position++;
 8002290:	3301      	adds	r3, #1
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002292:	680c      	ldr	r4, [r1, #0]
 8002294:	0022      	movs	r2, r4
 8002296:	40da      	lsrs	r2, r3
 8002298:	d100      	bne.n	800229c <HAL_GPIO_Init+0x90>
 800229a:	e086      	b.n	80023aa <HAL_GPIO_Init+0x19e>
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 800229c:	2201      	movs	r2, #1
 800229e:	409a      	lsls	r2, r3
 80022a0:	0026      	movs	r6, r4
 80022a2:	4016      	ands	r6, r2
 80022a4:	46b1      	mov	r9, r6
    if (iocurrent != 0U)
 80022a6:	4214      	tst	r4, r2
 80022a8:	d0f2      	beq.n	8002290 <HAL_GPIO_Init+0x84>
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022aa:	684c      	ldr	r4, [r1, #4]
 80022ac:	2c02      	cmp	r4, #2
 80022ae:	d001      	beq.n	80022b4 <HAL_GPIO_Init+0xa8>
 80022b0:	2c12      	cmp	r4, #18
 80022b2:	d118      	bne.n	80022e6 <HAL_GPIO_Init+0xda>
        tmp = GPIOx->AFR[position >> 3U];
 80022b4:	08dd      	lsrs	r5, r3, #3
 80022b6:	3508      	adds	r5, #8
 80022b8:	00ad      	lsls	r5, r5, #2
 80022ba:	582c      	ldr	r4, [r5, r0]
 80022bc:	46a4      	mov	ip, r4
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 80022be:	2707      	movs	r7, #7
 80022c0:	401f      	ands	r7, r3
 80022c2:	00bf      	lsls	r7, r7, #2
 80022c4:	240f      	movs	r4, #15
 80022c6:	46a2      	mov	sl, r4
 80022c8:	0026      	movs	r6, r4
 80022ca:	40be      	lsls	r6, r7
 80022cc:	46b0      	mov	r8, r6
 80022ce:	4666      	mov	r6, ip
 80022d0:	4644      	mov	r4, r8
 80022d2:	43a6      	bics	r6, r4
 80022d4:	46b4      	mov	ip, r6
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80022d6:	690c      	ldr	r4, [r1, #16]
 80022d8:	4656      	mov	r6, sl
 80022da:	4026      	ands	r6, r4
 80022dc:	0034      	movs	r4, r6
 80022de:	40bc      	lsls	r4, r7
 80022e0:	4666      	mov	r6, ip
 80022e2:	4334      	orrs	r4, r6
        GPIOx->AFR[position >> 3U] = tmp;
 80022e4:	502c      	str	r4, [r5, r0]
      tmp = GPIOx->MODER;
 80022e6:	6804      	ldr	r4, [r0, #0]
 80022e8:	46a4      	mov	ip, r4
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 80022ea:	005d      	lsls	r5, r3, #1
 80022ec:	2403      	movs	r4, #3
 80022ee:	46a2      	mov	sl, r4
 80022f0:	0027      	movs	r7, r4
 80022f2:	40af      	lsls	r7, r5
 80022f4:	46b8      	mov	r8, r7
 80022f6:	43ff      	mvns	r7, r7
 80022f8:	4666      	mov	r6, ip
 80022fa:	4644      	mov	r4, r8
 80022fc:	43a6      	bics	r6, r4
 80022fe:	46b4      	mov	ip, r6
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8002300:	684c      	ldr	r4, [r1, #4]
 8002302:	4656      	mov	r6, sl
 8002304:	4026      	ands	r6, r4
 8002306:	0034      	movs	r4, r6
 8002308:	40ac      	lsls	r4, r5
 800230a:	4666      	mov	r6, ip
 800230c:	4334      	orrs	r4, r6
      GPIOx->MODER = tmp;
 800230e:	6004      	str	r4, [r0, #0]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002310:	684c      	ldr	r4, [r1, #4]
 8002312:	1e66      	subs	r6, r4, #1
 8002314:	2e01      	cmp	r6, #1
 8002316:	d903      	bls.n	8002320 <HAL_GPIO_Init+0x114>
 8002318:	2c11      	cmp	r4, #17
 800231a:	d001      	beq.n	8002320 <HAL_GPIO_Init+0x114>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800231c:	2c12      	cmp	r4, #18
 800231e:	d112      	bne.n	8002346 <HAL_GPIO_Init+0x13a>
        tmp = GPIOx->OSPEEDR;
 8002320:	6884      	ldr	r4, [r0, #8]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002322:	403c      	ands	r4, r7
 8002324:	46a4      	mov	ip, r4
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002326:	68cc      	ldr	r4, [r1, #12]
 8002328:	40ac      	lsls	r4, r5
 800232a:	4666      	mov	r6, ip
 800232c:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = tmp;
 800232e:	6084      	str	r4, [r0, #8]
        tmp = GPIOx->OTYPER;
 8002330:	6844      	ldr	r4, [r0, #4]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002332:	4394      	bics	r4, r2
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002334:	684a      	ldr	r2, [r1, #4]
 8002336:	0912      	lsrs	r2, r2, #4
 8002338:	4694      	mov	ip, r2
 800233a:	2201      	movs	r2, #1
 800233c:	4666      	mov	r6, ip
 800233e:	4032      	ands	r2, r6
 8002340:	409a      	lsls	r2, r3
 8002342:	4322      	orrs	r2, r4
        GPIOx->OTYPER = tmp;
 8002344:	6042      	str	r2, [r0, #4]
      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8002346:	684a      	ldr	r2, [r1, #4]
 8002348:	2a03      	cmp	r2, #3
 800234a:	d005      	beq.n	8002358 <HAL_GPIO_Init+0x14c>
        tmp = GPIOx->PUPDR;
 800234c:	68c4      	ldr	r4, [r0, #12]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 800234e:	403c      	ands	r4, r7
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8002350:	688a      	ldr	r2, [r1, #8]
 8002352:	40aa      	lsls	r2, r5
 8002354:	4322      	orrs	r2, r4
        GPIOx->PUPDR = tmp;
 8002356:	60c2      	str	r2, [r0, #12]
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002358:	684a      	ldr	r2, [r1, #4]
 800235a:	00d2      	lsls	r2, r2, #3
 800235c:	d598      	bpl.n	8002290 <HAL_GPIO_Init+0x84>
        tmp = EXTI->EXTICR[position >> 2U];
 800235e:	089a      	lsrs	r2, r3, #2
 8002360:	0014      	movs	r4, r2
 8002362:	3418      	adds	r4, #24
 8002364:	00a4      	lsls	r4, r4, #2
 8002366:	4d13      	ldr	r5, [pc, #76]	@ (80023b4 <HAL_GPIO_Init+0x1a8>)
 8002368:	5967      	ldr	r7, [r4, r5]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 800236a:	2403      	movs	r4, #3
 800236c:	401c      	ands	r4, r3
 800236e:	00e4      	lsls	r4, r4, #3
 8002370:	250f      	movs	r5, #15
 8002372:	40a5      	lsls	r5, r4
 8002374:	43af      	bics	r7, r5
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002376:	25a0      	movs	r5, #160	@ 0xa0
 8002378:	05ed      	lsls	r5, r5, #23
 800237a:	42a8      	cmp	r0, r5
 800237c:	d100      	bne.n	8002380 <HAL_GPIO_Init+0x174>
 800237e:	e74e      	b.n	800221e <HAL_GPIO_Init+0x12>
 8002380:	4d0d      	ldr	r5, [pc, #52]	@ (80023b8 <HAL_GPIO_Init+0x1ac>)
 8002382:	42a8      	cmp	r0, r5
 8002384:	d00b      	beq.n	800239e <HAL_GPIO_Init+0x192>
 8002386:	4d0d      	ldr	r5, [pc, #52]	@ (80023bc <HAL_GPIO_Init+0x1b0>)
 8002388:	42a8      	cmp	r0, r5
 800238a:	d00a      	beq.n	80023a2 <HAL_GPIO_Init+0x196>
 800238c:	4d0c      	ldr	r5, [pc, #48]	@ (80023c0 <HAL_GPIO_Init+0x1b4>)
 800238e:	42a8      	cmp	r0, r5
 8002390:	d009      	beq.n	80023a6 <HAL_GPIO_Init+0x19a>
 8002392:	4d0c      	ldr	r5, [pc, #48]	@ (80023c4 <HAL_GPIO_Init+0x1b8>)
 8002394:	42a8      	cmp	r0, r5
 8002396:	d100      	bne.n	800239a <HAL_GPIO_Init+0x18e>
 8002398:	e73f      	b.n	800221a <HAL_GPIO_Init+0xe>
 800239a:	2506      	movs	r5, #6
 800239c:	e740      	b.n	8002220 <HAL_GPIO_Init+0x14>
 800239e:	2501      	movs	r5, #1
 80023a0:	e73e      	b.n	8002220 <HAL_GPIO_Init+0x14>
 80023a2:	2502      	movs	r5, #2
 80023a4:	e73c      	b.n	8002220 <HAL_GPIO_Init+0x14>
 80023a6:	2503      	movs	r5, #3
 80023a8:	e73a      	b.n	8002220 <HAL_GPIO_Init+0x14>
  }
}
 80023aa:	bce0      	pop	{r5, r6, r7}
 80023ac:	46ba      	mov	sl, r7
 80023ae:	46b1      	mov	r9, r6
 80023b0:	46a8      	mov	r8, r5
 80023b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023b4:	40021800 	.word	0x40021800
 80023b8:	50000400 	.word	0x50000400
 80023bc:	50000800 	.word	0x50000800
 80023c0:	50000c00 	.word	0x50000c00
 80023c4:	50001400 	.word	0x50001400

080023c8 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80023c8:	4b14      	ldr	r3, [pc, #80]	@ (800241c <HAL_RCC_GetSysClockFreq+0x54>)
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	2238      	movs	r2, #56	@ 0x38
 80023ce:	421a      	tst	r2, r3
 80023d0:	d107      	bne.n	80023e2 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80023d2:	4b12      	ldr	r3, [pc, #72]	@ (800241c <HAL_RCC_GetSysClockFreq+0x54>)
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	0ad2      	lsrs	r2, r2, #11
 80023d8:	2307      	movs	r3, #7
 80023da:	4013      	ands	r3, r2

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80023dc:	4810      	ldr	r0, [pc, #64]	@ (8002420 <HAL_RCC_GetSysClockFreq+0x58>)
 80023de:	40d8      	lsrs	r0, r3
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
}
 80023e0:	4770      	bx	lr
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80023e2:	4b0e      	ldr	r3, [pc, #56]	@ (800241c <HAL_RCC_GetSysClockFreq+0x54>)
 80023e4:	689a      	ldr	r2, [r3, #8]
 80023e6:	2338      	movs	r3, #56	@ 0x38
 80023e8:	4013      	ands	r3, r2
 80023ea:	2b08      	cmp	r3, #8
 80023ec:	d010      	beq.n	8002410 <HAL_RCC_GetSysClockFreq+0x48>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80023ee:	4b0b      	ldr	r3, [pc, #44]	@ (800241c <HAL_RCC_GetSysClockFreq+0x54>)
 80023f0:	689a      	ldr	r2, [r3, #8]
 80023f2:	2338      	movs	r3, #56	@ 0x38
 80023f4:	4013      	ands	r3, r2
 80023f6:	2b20      	cmp	r3, #32
 80023f8:	d00c      	beq.n	8002414 <HAL_RCC_GetSysClockFreq+0x4c>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80023fa:	4b08      	ldr	r3, [pc, #32]	@ (800241c <HAL_RCC_GetSysClockFreq+0x54>)
 80023fc:	689a      	ldr	r2, [r3, #8]
 80023fe:	2338      	movs	r3, #56	@ 0x38
 8002400:	4013      	ands	r3, r2
 8002402:	2b18      	cmp	r3, #24
 8002404:	d001      	beq.n	800240a <HAL_RCC_GetSysClockFreq+0x42>
    sysclockfreq = 0U;
 8002406:	2000      	movs	r0, #0
  return sysclockfreq;
 8002408:	e7ea      	b.n	80023e0 <HAL_RCC_GetSysClockFreq+0x18>
    sysclockfreq = LSI_VALUE;
 800240a:	20fa      	movs	r0, #250	@ 0xfa
 800240c:	01c0      	lsls	r0, r0, #7
 800240e:	e7e7      	b.n	80023e0 <HAL_RCC_GetSysClockFreq+0x18>
    sysclockfreq = HSE_VALUE;
 8002410:	4804      	ldr	r0, [pc, #16]	@ (8002424 <HAL_RCC_GetSysClockFreq+0x5c>)
 8002412:	e7e5      	b.n	80023e0 <HAL_RCC_GetSysClockFreq+0x18>
    sysclockfreq = LSE_VALUE;
 8002414:	2080      	movs	r0, #128	@ 0x80
 8002416:	0200      	lsls	r0, r0, #8
 8002418:	e7e2      	b.n	80023e0 <HAL_RCC_GetSysClockFreq+0x18>
 800241a:	46c0      	nop			@ (mov r8, r8)
 800241c:	40021000 	.word	0x40021000
 8002420:	02dc6c00 	.word	0x02dc6c00
 8002424:	007a1200 	.word	0x007a1200

08002428 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002428:	b510      	push	{r4, lr}
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 800242a:	f7ff ffcd 	bl	80023c8 <HAL_RCC_GetSysClockFreq>
 800242e:	4b07      	ldr	r3, [pc, #28]	@ (800244c <HAL_RCC_GetHCLKFreq+0x24>)
 8002430:	689a      	ldr	r2, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002432:	0a12      	lsrs	r2, r2, #8
 8002434:	230f      	movs	r3, #15
 8002436:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8002438:	4a05      	ldr	r2, [pc, #20]	@ (8002450 <HAL_RCC_GetHCLKFreq+0x28>)
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	589a      	ldr	r2, [r3, r2]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800243e:	231f      	movs	r3, #31
 8002440:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8002442:	40d8      	lsrs	r0, r3
 8002444:	4b03      	ldr	r3, [pc, #12]	@ (8002454 <HAL_RCC_GetHCLKFreq+0x2c>)
 8002446:	6018      	str	r0, [r3, #0]
  return SystemCoreClock;
}
 8002448:	bd10      	pop	{r4, pc}
 800244a:	46c0      	nop			@ (mov r8, r8)
 800244c:	40021000 	.word	0x40021000
 8002450:	080049e8 	.word	0x080049e8
 8002454:	20000004 	.word	0x20000004

08002458 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002458:	b510      	push	{r4, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 800245a:	f7ff ffe5 	bl	8002428 <HAL_RCC_GetHCLKFreq>
 800245e:	4b06      	ldr	r3, [pc, #24]	@ (8002478 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002460:	689a      	ldr	r2, [r3, #8]
 8002462:	0b12      	lsrs	r2, r2, #12
 8002464:	2307      	movs	r3, #7
 8002466:	4013      	ands	r3, r2
 8002468:	4a04      	ldr	r2, [pc, #16]	@ (800247c <HAL_RCC_GetPCLK1Freq+0x24>)
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	589a      	ldr	r2, [r3, r2]
 800246e:	231f      	movs	r3, #31
 8002470:	4013      	ands	r3, r2
 8002472:	40d8      	lsrs	r0, r3
}
 8002474:	bd10      	pop	{r4, pc}
 8002476:	46c0      	nop			@ (mov r8, r8)
 8002478:	40021000 	.word	0x40021000
 800247c:	080049c8 	.word	0x080049c8

08002480 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002480:	b570      	push	{r4, r5, r6, lr}
 8002482:	0004      	movs	r4, r0
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8002484:	4a0f      	ldr	r2, [pc, #60]	@ (80024c4 <HAL_RTC_WaitForSynchro+0x44>)
 8002486:	68d3      	ldr	r3, [r2, #12]
 8002488:	2120      	movs	r1, #32
 800248a:	438b      	bics	r3, r1
 800248c:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 800248e:	f7ff f8cd 	bl	800162c <HAL_GetTick>
 8002492:	0005      	movs	r5, r0

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8002494:	4b0b      	ldr	r3, [pc, #44]	@ (80024c4 <HAL_RTC_WaitForSynchro+0x44>)
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	069b      	lsls	r3, r3, #26
 800249a:	d411      	bmi.n	80024c0 <HAL_RTC_WaitForSynchro+0x40>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800249c:	f7ff f8c6 	bl	800162c <HAL_GetTick>
 80024a0:	1b40      	subs	r0, r0, r5
 80024a2:	23fa      	movs	r3, #250	@ 0xfa
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	4298      	cmp	r0, r3
 80024a8:	d9f4      	bls.n	8002494 <HAL_RTC_WaitForSynchro+0x14>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80024aa:	4b06      	ldr	r3, [pc, #24]	@ (80024c4 <HAL_RTC_WaitForSynchro+0x44>)
 80024ac:	68db      	ldr	r3, [r3, #12]
 80024ae:	069b      	lsls	r3, r3, #26
 80024b0:	d501      	bpl.n	80024b6 <HAL_RTC_WaitForSynchro+0x36>
        break;
      }
    }
  }

  return HAL_OK;
 80024b2:	2000      	movs	r0, #0
 80024b4:	e005      	b.n	80024c2 <HAL_RTC_WaitForSynchro+0x42>
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80024b6:	2325      	movs	r3, #37	@ 0x25
 80024b8:	2203      	movs	r2, #3
 80024ba:	54e2      	strb	r2, [r4, r3]
        return HAL_TIMEOUT;
 80024bc:	2003      	movs	r0, #3
 80024be:	e000      	b.n	80024c2 <HAL_RTC_WaitForSynchro+0x42>
  return HAL_OK;
 80024c0:	2000      	movs	r0, #0
}
 80024c2:	bd70      	pop	{r4, r5, r6, pc}
 80024c4:	40002800 	.word	0x40002800

080024c8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80024c8:	b570      	push	{r4, r5, r6, lr}
 80024ca:	0004      	movs	r4, r0
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80024cc:	4b12      	ldr	r3, [pc, #72]	@ (8002518 <RTC_EnterInitMode+0x50>)
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	065b      	lsls	r3, r3, #25
 80024d2:	d502      	bpl.n	80024da <RTC_EnterInitMode+0x12>
  HAL_StatusTypeDef status = HAL_OK;
 80024d4:	2500      	movs	r5, #0
      }
    }
  }

  return status;
}
 80024d6:	0028      	movs	r0, r5
 80024d8:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80024da:	4a0f      	ldr	r2, [pc, #60]	@ (8002518 <RTC_EnterInitMode+0x50>)
 80024dc:	68d3      	ldr	r3, [r2, #12]
 80024de:	2180      	movs	r1, #128	@ 0x80
 80024e0:	430b      	orrs	r3, r1
 80024e2:	60d3      	str	r3, [r2, #12]
    tickstart = HAL_GetTick();
 80024e4:	f7ff f8a2 	bl	800162c <HAL_GetTick>
 80024e8:	0006      	movs	r6, r0
  HAL_StatusTypeDef status = HAL_OK;
 80024ea:	2500      	movs	r5, #0
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80024ec:	4b0a      	ldr	r3, [pc, #40]	@ (8002518 <RTC_EnterInitMode+0x50>)
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	065b      	lsls	r3, r3, #25
 80024f2:	d4f0      	bmi.n	80024d6 <RTC_EnterInitMode+0xe>
 80024f4:	2d03      	cmp	r5, #3
 80024f6:	d0ee      	beq.n	80024d6 <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80024f8:	f7ff f898 	bl	800162c <HAL_GetTick>
 80024fc:	1b80      	subs	r0, r0, r6
 80024fe:	22fa      	movs	r2, #250	@ 0xfa
 8002500:	0092      	lsls	r2, r2, #2
 8002502:	4290      	cmp	r0, r2
 8002504:	d9f2      	bls.n	80024ec <RTC_EnterInitMode+0x24>
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8002506:	4b04      	ldr	r3, [pc, #16]	@ (8002518 <RTC_EnterInitMode+0x50>)
 8002508:	68db      	ldr	r3, [r3, #12]
 800250a:	065b      	lsls	r3, r3, #25
 800250c:	d4e3      	bmi.n	80024d6 <RTC_EnterInitMode+0xe>
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800250e:	2325      	movs	r3, #37	@ 0x25
 8002510:	2203      	movs	r2, #3
 8002512:	54e2      	strb	r2, [r4, r3]
          status = HAL_TIMEOUT;
 8002514:	2503      	movs	r5, #3
 8002516:	e7e9      	b.n	80024ec <RTC_EnterInitMode+0x24>
 8002518:	40002800 	.word	0x40002800

0800251c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800251c:	b510      	push	{r4, lr}
 800251e:	0004      	movs	r4, r0
  HAL_StatusTypeDef status = HAL_OK;

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8002520:	4b11      	ldr	r3, [pc, #68]	@ (8002568 <RTC_ExitInitMode+0x4c>)
 8002522:	68da      	ldr	r2, [r3, #12]
 8002524:	2180      	movs	r1, #128	@ 0x80
 8002526:	438a      	bics	r2, r1
 8002528:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800252a:	699b      	ldr	r3, [r3, #24]
 800252c:	069b      	lsls	r3, r3, #26
 800252e:	d408      	bmi.n	8002542 <RTC_ExitInitMode+0x26>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002530:	f7ff ffa6 	bl	8002480 <HAL_RTC_WaitForSynchro>
 8002534:	2800      	cmp	r0, #0
 8002536:	d016      	beq.n	8002566 <RTC_ExitInitMode+0x4a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002538:	2325      	movs	r3, #37	@ 0x25
 800253a:	2203      	movs	r2, #3
 800253c:	54e2      	strb	r2, [r4, r3]
      status = HAL_TIMEOUT;
 800253e:	2003      	movs	r0, #3
 8002540:	e011      	b.n	8002566 <RTC_ExitInitMode+0x4a>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002542:	4a09      	ldr	r2, [pc, #36]	@ (8002568 <RTC_ExitInitMode+0x4c>)
 8002544:	6993      	ldr	r3, [r2, #24]
 8002546:	2120      	movs	r1, #32
 8002548:	438b      	bics	r3, r1
 800254a:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800254c:	f7ff ff98 	bl	8002480 <HAL_RTC_WaitForSynchro>
 8002550:	2800      	cmp	r0, #0
 8002552:	d003      	beq.n	800255c <RTC_ExitInitMode+0x40>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002554:	2325      	movs	r3, #37	@ 0x25
 8002556:	2203      	movs	r2, #3
 8002558:	54e2      	strb	r2, [r4, r3]
      status = HAL_TIMEOUT;
 800255a:	2003      	movs	r0, #3
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800255c:	4a02      	ldr	r2, [pc, #8]	@ (8002568 <RTC_ExitInitMode+0x4c>)
 800255e:	6993      	ldr	r3, [r2, #24]
 8002560:	2120      	movs	r1, #32
 8002562:	430b      	orrs	r3, r1
 8002564:	6193      	str	r3, [r2, #24]
  }

  return status;
}
 8002566:	bd10      	pop	{r4, pc}
 8002568:	40002800 	.word	0x40002800

0800256c <HAL_RTC_Init>:
{
 800256c:	b570      	push	{r4, r5, r6, lr}
 800256e:	1e04      	subs	r4, r0, #0
  if (hrtc != NULL)
 8002570:	d048      	beq.n	8002604 <HAL_RTC_Init+0x98>
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8002572:	2325      	movs	r3, #37	@ 0x25
 8002574:	5cc3      	ldrb	r3, [r0, r3]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d00b      	beq.n	8002592 <HAL_RTC_Init+0x26>
    hrtc->State = HAL_RTC_STATE_BUSY;
 800257a:	2325      	movs	r3, #37	@ 0x25
 800257c:	2202      	movs	r2, #2
 800257e:	54e2      	strb	r2, [r4, r3]
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002580:	6822      	ldr	r2, [r4, #0]
 8002582:	68d3      	ldr	r3, [r2, #12]
 8002584:	06db      	lsls	r3, r3, #27
 8002586:	d50a      	bpl.n	800259e <HAL_RTC_Init+0x32>
      status = HAL_OK;
 8002588:	2000      	movs	r0, #0
      hrtc->State = HAL_RTC_STATE_READY;
 800258a:	2325      	movs	r3, #37	@ 0x25
 800258c:	2201      	movs	r2, #1
 800258e:	54e2      	strb	r2, [r4, r3]
}
 8002590:	bd70      	pop	{r4, r5, r6, pc}
      hrtc->Lock = HAL_UNLOCKED;
 8002592:	3324      	adds	r3, #36	@ 0x24
 8002594:	2200      	movs	r2, #0
 8002596:	54c2      	strb	r2, [r0, r3]
      HAL_RTC_MspInit(hrtc);
 8002598:	f7fe fe84 	bl	80012a4 <HAL_RTC_MspInit>
 800259c:	e7ed      	b.n	800257a <HAL_RTC_Init+0xe>
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800259e:	23ca      	movs	r3, #202	@ 0xca
 80025a0:	6253      	str	r3, [r2, #36]	@ 0x24
 80025a2:	6823      	ldr	r3, [r4, #0]
 80025a4:	2253      	movs	r2, #83	@ 0x53
 80025a6:	625a      	str	r2, [r3, #36]	@ 0x24
      status = RTC_EnterInitMode(hrtc);
 80025a8:	0020      	movs	r0, r4
 80025aa:	f7ff ff8d 	bl	80024c8 <RTC_EnterInitMode>
      if (status == HAL_OK)
 80025ae:	2800      	cmp	r0, #0
 80025b0:	d005      	beq.n	80025be <HAL_RTC_Init+0x52>
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80025b2:	6823      	ldr	r3, [r4, #0]
 80025b4:	22ff      	movs	r2, #255	@ 0xff
 80025b6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (status == HAL_OK)
 80025b8:	2800      	cmp	r0, #0
 80025ba:	d1e9      	bne.n	8002590 <HAL_RTC_Init+0x24>
 80025bc:	e7e5      	b.n	800258a <HAL_RTC_Init+0x1e>
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL));
 80025be:	4912      	ldr	r1, [pc, #72]	@ (8002608 <HAL_RTC_Init+0x9c>)
 80025c0:	698b      	ldr	r3, [r1, #24]
 80025c2:	4a12      	ldr	r2, [pc, #72]	@ (800260c <HAL_RTC_Init+0xa0>)
 80025c4:	4013      	ands	r3, r2
 80025c6:	618b      	str	r3, [r1, #24]
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 80025c8:	698a      	ldr	r2, [r1, #24]
 80025ca:	6863      	ldr	r3, [r4, #4]
 80025cc:	6920      	ldr	r0, [r4, #16]
 80025ce:	4303      	orrs	r3, r0
 80025d0:	69a0      	ldr	r0, [r4, #24]
 80025d2:	4303      	orrs	r3, r0
 80025d4:	4313      	orrs	r3, r2
 80025d6:	618b      	str	r3, [r1, #24]
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 80025d8:	68e3      	ldr	r3, [r4, #12]
 80025da:	68a2      	ldr	r2, [r4, #8]
 80025dc:	0412      	lsls	r2, r2, #16
 80025de:	4313      	orrs	r3, r2
 80025e0:	610b      	str	r3, [r1, #16]
        status = RTC_ExitInitMode(hrtc);
 80025e2:	0020      	movs	r0, r4
 80025e4:	f7ff ff9a 	bl	800251c <RTC_ExitInitMode>
      if (status == HAL_OK)
 80025e8:	2800      	cmp	r0, #0
 80025ea:	d1e2      	bne.n	80025b2 <HAL_RTC_Init+0x46>
        MODIFY_REG(RTC->CR, \
 80025ec:	4906      	ldr	r1, [pc, #24]	@ (8002608 <HAL_RTC_Init+0x9c>)
 80025ee:	698b      	ldr	r3, [r1, #24]
 80025f0:	00db      	lsls	r3, r3, #3
 80025f2:	08db      	lsrs	r3, r3, #3
 80025f4:	6a22      	ldr	r2, [r4, #32]
 80025f6:	69e5      	ldr	r5, [r4, #28]
 80025f8:	432a      	orrs	r2, r5
 80025fa:	6965      	ldr	r5, [r4, #20]
 80025fc:	432a      	orrs	r2, r5
 80025fe:	4313      	orrs	r3, r2
 8002600:	618b      	str	r3, [r1, #24]
 8002602:	e7d6      	b.n	80025b2 <HAL_RTC_Init+0x46>
  HAL_StatusTypeDef status = HAL_ERROR;
 8002604:	2001      	movs	r0, #1
 8002606:	e7c3      	b.n	8002590 <HAL_RTC_Init+0x24>
 8002608:	40002800 	.word	0x40002800
 800260c:	ff8fffbf 	.word	0xff8fffbf

08002610 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8002610:	2300      	movs	r3, #0
  uint8_t Param = Value;

  while (Param >= 10U)
 8002612:	e002      	b.n	800261a <RTC_ByteToBcd2+0xa>
  {
    bcdhigh++;
 8002614:	3301      	adds	r3, #1
    Param -= 10U;
 8002616:	380a      	subs	r0, #10
 8002618:	b2c0      	uxtb	r0, r0
  while (Param >= 10U)
 800261a:	2809      	cmp	r0, #9
 800261c:	d8fa      	bhi.n	8002614 <RTC_ByteToBcd2+0x4>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 800261e:	011b      	lsls	r3, r3, #4
 8002620:	b2db      	uxtb	r3, r3
 8002622:	4318      	orrs	r0, r3
}
 8002624:	4770      	bx	lr
	...

08002628 <HAL_RTC_SetTime>:
{
 8002628:	b570      	push	{r4, r5, r6, lr}
 800262a:	0004      	movs	r4, r0
 800262c:	000e      	movs	r6, r1
 800262e:	0015      	movs	r5, r2
  __HAL_LOCK(hrtc);
 8002630:	2324      	movs	r3, #36	@ 0x24
 8002632:	5cc3      	ldrb	r3, [r0, r3]
 8002634:	2b01      	cmp	r3, #1
 8002636:	d057      	beq.n	80026e8 <HAL_RTC_SetTime+0xc0>
 8002638:	2324      	movs	r3, #36	@ 0x24
 800263a:	2201      	movs	r2, #1
 800263c:	54c2      	strb	r2, [r0, r3]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800263e:	3301      	adds	r3, #1
 8002640:	3201      	adds	r2, #1
 8002642:	54c2      	strb	r2, [r0, r3]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002644:	6803      	ldr	r3, [r0, #0]
 8002646:	32c8      	adds	r2, #200	@ 0xc8
 8002648:	625a      	str	r2, [r3, #36]	@ 0x24
 800264a:	6803      	ldr	r3, [r0, #0]
 800264c:	3a77      	subs	r2, #119	@ 0x77
 800264e:	625a      	str	r2, [r3, #36]	@ 0x24
  status = RTC_EnterInitMode(hrtc);
 8002650:	f7ff ff3a 	bl	80024c8 <RTC_EnterInitMode>
  if (status == HAL_OK)
 8002654:	2800      	cmp	r0, #0
 8002656:	d12a      	bne.n	80026ae <HAL_RTC_SetTime+0x86>
    if (Format == RTC_FORMAT_BIN)
 8002658:	2d00      	cmp	r5, #0
 800265a:	d134      	bne.n	80026c6 <HAL_RTC_SetTime+0x9e>
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800265c:	6823      	ldr	r3, [r4, #0]
 800265e:	699b      	ldr	r3, [r3, #24]
 8002660:	065b      	lsls	r3, r3, #25
 8002662:	d401      	bmi.n	8002668 <HAL_RTC_SetTime+0x40>
        sTime->TimeFormat = 0x00U;
 8002664:	2300      	movs	r3, #0
 8002666:	70f3      	strb	r3, [r6, #3]
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002668:	7830      	ldrb	r0, [r6, #0]
 800266a:	f7ff ffd1 	bl	8002610 <RTC_ByteToBcd2>
 800266e:	0405      	lsls	r5, r0, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002670:	7870      	ldrb	r0, [r6, #1]
 8002672:	f7ff ffcd 	bl	8002610 <RTC_ByteToBcd2>
 8002676:	0200      	lsls	r0, r0, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002678:	4305      	orrs	r5, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800267a:	78b0      	ldrb	r0, [r6, #2]
 800267c:	f7ff ffc8 	bl	8002610 <RTC_ByteToBcd2>
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002680:	4328      	orrs	r0, r5
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002682:	78f3      	ldrb	r3, [r6, #3]
 8002684:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002686:	4318      	orrs	r0, r3
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002688:	6823      	ldr	r3, [r4, #0]
 800268a:	4a18      	ldr	r2, [pc, #96]	@ (80026ec <HAL_RTC_SetTime+0xc4>)
 800268c:	4010      	ands	r0, r2
 800268e:	6018      	str	r0, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8002690:	6822      	ldr	r2, [r4, #0]
 8002692:	6993      	ldr	r3, [r2, #24]
 8002694:	4916      	ldr	r1, [pc, #88]	@ (80026f0 <HAL_RTC_SetTime+0xc8>)
 8002696:	400b      	ands	r3, r1
 8002698:	6193      	str	r3, [r2, #24]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800269a:	6821      	ldr	r1, [r4, #0]
 800269c:	698b      	ldr	r3, [r1, #24]
 800269e:	68f2      	ldr	r2, [r6, #12]
 80026a0:	6930      	ldr	r0, [r6, #16]
 80026a2:	4302      	orrs	r2, r0
 80026a4:	4313      	orrs	r3, r2
 80026a6:	618b      	str	r3, [r1, #24]
    status = RTC_ExitInitMode(hrtc);
 80026a8:	0020      	movs	r0, r4
 80026aa:	f7ff ff37 	bl	800251c <RTC_ExitInitMode>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80026ae:	6823      	ldr	r3, [r4, #0]
 80026b0:	22ff      	movs	r2, #255	@ 0xff
 80026b2:	625a      	str	r2, [r3, #36]	@ 0x24
  if (status == HAL_OK)
 80026b4:	2800      	cmp	r0, #0
 80026b6:	d102      	bne.n	80026be <HAL_RTC_SetTime+0x96>
    hrtc->State = HAL_RTC_STATE_READY;
 80026b8:	2325      	movs	r3, #37	@ 0x25
 80026ba:	3afe      	subs	r2, #254	@ 0xfe
 80026bc:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hrtc);
 80026be:	2324      	movs	r3, #36	@ 0x24
 80026c0:	2200      	movs	r2, #0
 80026c2:	54e2      	strb	r2, [r4, r3]
}
 80026c4:	bd70      	pop	{r4, r5, r6, pc}
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80026c6:	6823      	ldr	r3, [r4, #0]
 80026c8:	699b      	ldr	r3, [r3, #24]
 80026ca:	065b      	lsls	r3, r3, #25
 80026cc:	d401      	bmi.n	80026d2 <HAL_RTC_SetTime+0xaa>
        sTime->TimeFormat = 0x00U;
 80026ce:	2300      	movs	r3, #0
 80026d0:	70f3      	strb	r3, [r6, #3]
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80026d2:	7830      	ldrb	r0, [r6, #0]
 80026d4:	0400      	lsls	r0, r0, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80026d6:	7873      	ldrb	r3, [r6, #1]
 80026d8:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80026da:	4318      	orrs	r0, r3
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80026dc:	78b3      	ldrb	r3, [r6, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80026de:	4318      	orrs	r0, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80026e0:	78f3      	ldrb	r3, [r6, #3]
 80026e2:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80026e4:	4318      	orrs	r0, r3
 80026e6:	e7cf      	b.n	8002688 <HAL_RTC_SetTime+0x60>
  __HAL_LOCK(hrtc);
 80026e8:	2002      	movs	r0, #2
 80026ea:	e7eb      	b.n	80026c4 <HAL_RTC_SetTime+0x9c>
 80026ec:	007f7f7f 	.word	0x007f7f7f
 80026f0:	fffbffff 	.word	0xfffbffff

080026f4 <HAL_RTC_SetDate>:
{
 80026f4:	b570      	push	{r4, r5, r6, lr}
 80026f6:	0004      	movs	r4, r0
 80026f8:	000e      	movs	r6, r1
  __HAL_LOCK(hrtc);
 80026fa:	2324      	movs	r3, #36	@ 0x24
 80026fc:	5cc3      	ldrb	r3, [r0, r3]
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d048      	beq.n	8002794 <HAL_RTC_SetDate+0xa0>
 8002702:	2324      	movs	r3, #36	@ 0x24
 8002704:	2101      	movs	r1, #1
 8002706:	54c1      	strb	r1, [r0, r3]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002708:	3301      	adds	r3, #1
 800270a:	3101      	adds	r1, #1
 800270c:	54c1      	strb	r1, [r0, r3]
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800270e:	2a00      	cmp	r2, #0
 8002710:	d020      	beq.n	8002754 <HAL_RTC_SetDate+0x60>
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002712:	78f5      	ldrb	r5, [r6, #3]
 8002714:	042d      	lsls	r5, r5, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8002716:	7873      	ldrb	r3, [r6, #1]
 8002718:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800271a:	431d      	orrs	r5, r3
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800271c:	78b3      	ldrb	r3, [r6, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800271e:	431d      	orrs	r5, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8002720:	7833      	ldrb	r3, [r6, #0]
 8002722:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002724:	431d      	orrs	r5, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002726:	6823      	ldr	r3, [r4, #0]
 8002728:	22ca      	movs	r2, #202	@ 0xca
 800272a:	625a      	str	r2, [r3, #36]	@ 0x24
 800272c:	6823      	ldr	r3, [r4, #0]
 800272e:	3a77      	subs	r2, #119	@ 0x77
 8002730:	625a      	str	r2, [r3, #36]	@ 0x24
  status = RTC_EnterInitMode(hrtc);
 8002732:	0020      	movs	r0, r4
 8002734:	f7ff fec8 	bl	80024c8 <RTC_EnterInitMode>
  if (status == HAL_OK)
 8002738:	2800      	cmp	r0, #0
 800273a:	d023      	beq.n	8002784 <HAL_RTC_SetDate+0x90>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800273c:	6823      	ldr	r3, [r4, #0]
 800273e:	22ff      	movs	r2, #255	@ 0xff
 8002740:	625a      	str	r2, [r3, #36]	@ 0x24
  if (status == HAL_OK)
 8002742:	2800      	cmp	r0, #0
 8002744:	d102      	bne.n	800274c <HAL_RTC_SetDate+0x58>
    hrtc->State = HAL_RTC_STATE_READY;
 8002746:	2325      	movs	r3, #37	@ 0x25
 8002748:	3afe      	subs	r2, #254	@ 0xfe
 800274a:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hrtc);
 800274c:	2324      	movs	r3, #36	@ 0x24
 800274e:	2200      	movs	r2, #0
 8002750:	54e2      	strb	r2, [r4, r3]
}
 8002752:	bd70      	pop	{r4, r5, r6, pc}
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002754:	7873      	ldrb	r3, [r6, #1]
 8002756:	06da      	lsls	r2, r3, #27
 8002758:	d503      	bpl.n	8002762 <HAL_RTC_SetDate+0x6e>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800275a:	2210      	movs	r2, #16
 800275c:	4393      	bics	r3, r2
 800275e:	330a      	adds	r3, #10
 8002760:	7073      	strb	r3, [r6, #1]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002762:	78f0      	ldrb	r0, [r6, #3]
 8002764:	f7ff ff54 	bl	8002610 <RTC_ByteToBcd2>
 8002768:	0405      	lsls	r5, r0, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800276a:	7870      	ldrb	r0, [r6, #1]
 800276c:	f7ff ff50 	bl	8002610 <RTC_ByteToBcd2>
 8002770:	0200      	lsls	r0, r0, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002772:	4305      	orrs	r5, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8002774:	78b0      	ldrb	r0, [r6, #2]
 8002776:	f7ff ff4b 	bl	8002610 <RTC_ByteToBcd2>
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800277a:	4305      	orrs	r5, r0
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800277c:	7833      	ldrb	r3, [r6, #0]
 800277e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002780:	431d      	orrs	r5, r3
 8002782:	e7d0      	b.n	8002726 <HAL_RTC_SetDate+0x32>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002784:	6823      	ldr	r3, [r4, #0]
 8002786:	4a04      	ldr	r2, [pc, #16]	@ (8002798 <HAL_RTC_SetDate+0xa4>)
 8002788:	4015      	ands	r5, r2
 800278a:	605d      	str	r5, [r3, #4]
    status = RTC_ExitInitMode(hrtc);
 800278c:	0020      	movs	r0, r4
 800278e:	f7ff fec5 	bl	800251c <RTC_ExitInitMode>
 8002792:	e7d3      	b.n	800273c <HAL_RTC_SetDate+0x48>
  __HAL_LOCK(hrtc);
 8002794:	2002      	movs	r0, #2
 8002796:	e7dc      	b.n	8002752 <HAL_RTC_SetDate+0x5e>
 8002798:	00ffff3f 	.word	0x00ffff3f

0800279c <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800279c:	0002      	movs	r2, r0
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 800279e:	0901      	lsrs	r1, r0, #4
 80027a0:	008b      	lsls	r3, r1, #2
 80027a2:	185b      	adds	r3, r3, r1
 80027a4:	005b      	lsls	r3, r3, #1
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 80027a6:	200f      	movs	r0, #15
 80027a8:	4010      	ands	r0, r2
 80027aa:	18c0      	adds	r0, r0, r3
 80027ac:	b2c0      	uxtb	r0, r0
}
 80027ae:	4770      	bx	lr

080027b0 <HAL_RTC_GetTime>:
{
 80027b0:	b570      	push	{r4, r5, r6, lr}
 80027b2:	000c      	movs	r4, r1
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80027b4:	6803      	ldr	r3, [r0, #0]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	604b      	str	r3, [r1, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80027ba:	6803      	ldr	r3, [r0, #0]
 80027bc:	691b      	ldr	r3, [r3, #16]
 80027be:	045b      	lsls	r3, r3, #17
 80027c0:	0c5b      	lsrs	r3, r3, #17
 80027c2:	608b      	str	r3, [r1, #8]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80027c4:	6803      	ldr	r3, [r0, #0]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	490e      	ldr	r1, [pc, #56]	@ (8002804 <HAL_RTC_GetTime+0x54>)
 80027ca:	400b      	ands	r3, r1
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 80027cc:	0c19      	lsrs	r1, r3, #16
 80027ce:	203f      	movs	r0, #63	@ 0x3f
 80027d0:	4008      	ands	r0, r1
 80027d2:	7020      	strb	r0, [r4, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80027d4:	0a1e      	lsrs	r6, r3, #8
 80027d6:	257f      	movs	r5, #127	@ 0x7f
 80027d8:	402e      	ands	r6, r5
 80027da:	7066      	strb	r6, [r4, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 80027dc:	401d      	ands	r5, r3
 80027de:	70a5      	strb	r5, [r4, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 80027e0:	0d9b      	lsrs	r3, r3, #22
 80027e2:	70e3      	strb	r3, [r4, #3]
  if (Format == RTC_FORMAT_BIN)
 80027e4:	2a00      	cmp	r2, #0
 80027e6:	d10a      	bne.n	80027fe <HAL_RTC_GetTime+0x4e>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80027e8:	f7ff ffd8 	bl	800279c <RTC_Bcd2ToByte>
 80027ec:	7020      	strb	r0, [r4, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80027ee:	0030      	movs	r0, r6
 80027f0:	f7ff ffd4 	bl	800279c <RTC_Bcd2ToByte>
 80027f4:	7060      	strb	r0, [r4, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80027f6:	0028      	movs	r0, r5
 80027f8:	f7ff ffd0 	bl	800279c <RTC_Bcd2ToByte>
 80027fc:	70a0      	strb	r0, [r4, #2]
}
 80027fe:	2000      	movs	r0, #0
 8002800:	bd70      	pop	{r4, r5, r6, pc}
 8002802:	46c0      	nop			@ (mov r8, r8)
 8002804:	007f7f7f 	.word	0x007f7f7f

08002808 <HAL_RTC_GetDate>:
{
 8002808:	b570      	push	{r4, r5, r6, lr}
 800280a:	000c      	movs	r4, r1
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800280c:	6803      	ldr	r3, [r0, #0]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	490e      	ldr	r1, [pc, #56]	@ (800284c <HAL_RTC_GetDate+0x44>)
 8002812:	400b      	ands	r3, r1
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8002814:	0c18      	lsrs	r0, r3, #16
 8002816:	70e0      	strb	r0, [r4, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8002818:	0a19      	lsrs	r1, r3, #8
 800281a:	261f      	movs	r6, #31
 800281c:	400e      	ands	r6, r1
 800281e:	7066      	strb	r6, [r4, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8002820:	253f      	movs	r5, #63	@ 0x3f
 8002822:	401d      	ands	r5, r3
 8002824:	70a5      	strb	r5, [r4, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8002826:	0b5b      	lsrs	r3, r3, #13
 8002828:	2107      	movs	r1, #7
 800282a:	400b      	ands	r3, r1
 800282c:	7023      	strb	r3, [r4, #0]
  if (Format == RTC_FORMAT_BIN)
 800282e:	2a00      	cmp	r2, #0
 8002830:	d10a      	bne.n	8002848 <HAL_RTC_GetDate+0x40>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002832:	f7ff ffb3 	bl	800279c <RTC_Bcd2ToByte>
 8002836:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002838:	0030      	movs	r0, r6
 800283a:	f7ff ffaf 	bl	800279c <RTC_Bcd2ToByte>
 800283e:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8002840:	0028      	movs	r0, r5
 8002842:	f7ff ffab 	bl	800279c <RTC_Bcd2ToByte>
 8002846:	70a0      	strb	r0, [r4, #2]
}
 8002848:	2000      	movs	r0, #0
 800284a:	bd70      	pop	{r4, r5, r6, pc}
 800284c:	00ffff3f 	.word	0x00ffff3f

08002850 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002850:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002852:	6a05      	ldr	r5, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002854:	6a03      	ldr	r3, [r0, #32]
 8002856:	2201      	movs	r2, #1
 8002858:	4393      	bics	r3, r2
 800285a:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800285c:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800285e:	6983      	ldr	r3, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002860:	4c16      	ldr	r4, [pc, #88]	@ (80028bc <TIM_OC1_SetConfig+0x6c>)
 8002862:	4023      	ands	r3, r4
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002864:	680c      	ldr	r4, [r1, #0]
 8002866:	431c      	orrs	r4, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002868:	2302      	movs	r3, #2
 800286a:	439d      	bics	r5, r3
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800286c:	688b      	ldr	r3, [r1, #8]
 800286e:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002870:	4d13      	ldr	r5, [pc, #76]	@ (80028c0 <TIM_OC1_SetConfig+0x70>)
 8002872:	42a8      	cmp	r0, r5
 8002874:	d005      	beq.n	8002882 <TIM_OC1_SetConfig+0x32>
 8002876:	4d13      	ldr	r5, [pc, #76]	@ (80028c4 <TIM_OC1_SetConfig+0x74>)
 8002878:	42a8      	cmp	r0, r5
 800287a:	d002      	beq.n	8002882 <TIM_OC1_SetConfig+0x32>
 800287c:	4d12      	ldr	r5, [pc, #72]	@ (80028c8 <TIM_OC1_SetConfig+0x78>)
 800287e:	42a8      	cmp	r0, r5
 8002880:	d106      	bne.n	8002890 <TIM_OC1_SetConfig+0x40>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002882:	2508      	movs	r5, #8
 8002884:	43ab      	bics	r3, r5
 8002886:	001d      	movs	r5, r3
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002888:	68cb      	ldr	r3, [r1, #12]
 800288a:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800288c:	2504      	movs	r5, #4
 800288e:	43ab      	bics	r3, r5
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002890:	4d0b      	ldr	r5, [pc, #44]	@ (80028c0 <TIM_OC1_SetConfig+0x70>)
 8002892:	42a8      	cmp	r0, r5
 8002894:	d005      	beq.n	80028a2 <TIM_OC1_SetConfig+0x52>
 8002896:	4d0b      	ldr	r5, [pc, #44]	@ (80028c4 <TIM_OC1_SetConfig+0x74>)
 8002898:	42a8      	cmp	r0, r5
 800289a:	d002      	beq.n	80028a2 <TIM_OC1_SetConfig+0x52>
 800289c:	4d0a      	ldr	r5, [pc, #40]	@ (80028c8 <TIM_OC1_SetConfig+0x78>)
 800289e:	42a8      	cmp	r0, r5
 80028a0:	d105      	bne.n	80028ae <TIM_OC1_SetConfig+0x5e>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80028a2:	4d0a      	ldr	r5, [pc, #40]	@ (80028cc <TIM_OC1_SetConfig+0x7c>)
 80028a4:	402a      	ands	r2, r5
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80028a6:	694d      	ldr	r5, [r1, #20]
 80028a8:	4315      	orrs	r5, r2
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80028aa:	698a      	ldr	r2, [r1, #24]
 80028ac:	432a      	orrs	r2, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028ae:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80028b0:	6184      	str	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80028b2:	684a      	ldr	r2, [r1, #4]
 80028b4:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028b6:	6203      	str	r3, [r0, #32]
}
 80028b8:	bd30      	pop	{r4, r5, pc}
 80028ba:	46c0      	nop			@ (mov r8, r8)
 80028bc:	fffeff8c 	.word	0xfffeff8c
 80028c0:	40012c00 	.word	0x40012c00
 80028c4:	40014400 	.word	0x40014400
 80028c8:	40014800 	.word	0x40014800
 80028cc:	fffffcff 	.word	0xfffffcff

080028d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80028d0:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028d2:	6a04      	ldr	r4, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80028d4:	6a03      	ldr	r3, [r0, #32]
 80028d6:	4a16      	ldr	r2, [pc, #88]	@ (8002930 <TIM_OC3_SetConfig+0x60>)
 80028d8:	4013      	ands	r3, r2
 80028da:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028dc:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80028de:	69c3      	ldr	r3, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80028e0:	4d14      	ldr	r5, [pc, #80]	@ (8002934 <TIM_OC3_SetConfig+0x64>)
 80028e2:	402b      	ands	r3, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80028e4:	680d      	ldr	r5, [r1, #0]
 80028e6:	431d      	orrs	r5, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80028e8:	4b13      	ldr	r3, [pc, #76]	@ (8002938 <TIM_OC3_SetConfig+0x68>)
 80028ea:	401c      	ands	r4, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80028ec:	688b      	ldr	r3, [r1, #8]
 80028ee:	021b      	lsls	r3, r3, #8
 80028f0:	4323      	orrs	r3, r4

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80028f2:	4c12      	ldr	r4, [pc, #72]	@ (800293c <TIM_OC3_SetConfig+0x6c>)
 80028f4:	42a0      	cmp	r0, r4
 80028f6:	d006      	beq.n	8002906 <TIM_OC3_SetConfig+0x36>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028f8:	4c11      	ldr	r4, [pc, #68]	@ (8002940 <TIM_OC3_SetConfig+0x70>)
 80028fa:	42a0      	cmp	r0, r4
 80028fc:	d00a      	beq.n	8002914 <TIM_OC3_SetConfig+0x44>
 80028fe:	4c11      	ldr	r4, [pc, #68]	@ (8002944 <TIM_OC3_SetConfig+0x74>)
 8002900:	42a0      	cmp	r0, r4
 8002902:	d10f      	bne.n	8002924 <TIM_OC3_SetConfig+0x54>
 8002904:	e006      	b.n	8002914 <TIM_OC3_SetConfig+0x44>
    tmpccer &= ~TIM_CCER_CC3NP;
 8002906:	4c10      	ldr	r4, [pc, #64]	@ (8002948 <TIM_OC3_SetConfig+0x78>)
 8002908:	401c      	ands	r4, r3
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800290a:	68cb      	ldr	r3, [r1, #12]
 800290c:	021b      	lsls	r3, r3, #8
 800290e:	4323      	orrs	r3, r4
    tmpccer &= ~TIM_CCER_CC3NE;
 8002910:	4c0e      	ldr	r4, [pc, #56]	@ (800294c <TIM_OC3_SetConfig+0x7c>)
 8002912:	4023      	ands	r3, r4
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002914:	4c0e      	ldr	r4, [pc, #56]	@ (8002950 <TIM_OC3_SetConfig+0x80>)
 8002916:	4022      	ands	r2, r4
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002918:	694c      	ldr	r4, [r1, #20]
 800291a:	0124      	lsls	r4, r4, #4
 800291c:	4314      	orrs	r4, r2
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800291e:	698a      	ldr	r2, [r1, #24]
 8002920:	0112      	lsls	r2, r2, #4
 8002922:	4322      	orrs	r2, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002924:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002926:	61c5      	str	r5, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002928:	684a      	ldr	r2, [r1, #4]
 800292a:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800292c:	6203      	str	r3, [r0, #32]
}
 800292e:	bd30      	pop	{r4, r5, pc}
 8002930:	fffffeff 	.word	0xfffffeff
 8002934:	fffeff8c 	.word	0xfffeff8c
 8002938:	fffffdff 	.word	0xfffffdff
 800293c:	40012c00 	.word	0x40012c00
 8002940:	40014400 	.word	0x40014400
 8002944:	40014800 	.word	0x40014800
 8002948:	fffff7ff 	.word	0xfffff7ff
 800294c:	fffffbff 	.word	0xfffffbff
 8002950:	ffffcfff 	.word	0xffffcfff

08002954 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002954:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002956:	6a04      	ldr	r4, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002958:	6a03      	ldr	r3, [r0, #32]
 800295a:	4a11      	ldr	r2, [pc, #68]	@ (80029a0 <TIM_OC4_SetConfig+0x4c>)
 800295c:	4013      	ands	r3, r2
 800295e:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002960:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002962:	69c3      	ldr	r3, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002964:	4a0f      	ldr	r2, [pc, #60]	@ (80029a4 <TIM_OC4_SetConfig+0x50>)
 8002966:	4013      	ands	r3, r2

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002968:	680a      	ldr	r2, [r1, #0]
 800296a:	0212      	lsls	r2, r2, #8
 800296c:	431a      	orrs	r2, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800296e:	4b0e      	ldr	r3, [pc, #56]	@ (80029a8 <TIM_OC4_SetConfig+0x54>)
 8002970:	401c      	ands	r4, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002972:	688b      	ldr	r3, [r1, #8]
 8002974:	031b      	lsls	r3, r3, #12
 8002976:	4323      	orrs	r3, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002978:	4c0c      	ldr	r4, [pc, #48]	@ (80029ac <TIM_OC4_SetConfig+0x58>)
 800297a:	42a0      	cmp	r0, r4
 800297c:	d005      	beq.n	800298a <TIM_OC4_SetConfig+0x36>
 800297e:	4c0c      	ldr	r4, [pc, #48]	@ (80029b0 <TIM_OC4_SetConfig+0x5c>)
 8002980:	42a0      	cmp	r0, r4
 8002982:	d002      	beq.n	800298a <TIM_OC4_SetConfig+0x36>
 8002984:	4c0b      	ldr	r4, [pc, #44]	@ (80029b4 <TIM_OC4_SetConfig+0x60>)
 8002986:	42a0      	cmp	r0, r4
 8002988:	d104      	bne.n	8002994 <TIM_OC4_SetConfig+0x40>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800298a:	4c0b      	ldr	r4, [pc, #44]	@ (80029b8 <TIM_OC4_SetConfig+0x64>)
 800298c:	402c      	ands	r4, r5

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800298e:	694d      	ldr	r5, [r1, #20]
 8002990:	01ad      	lsls	r5, r5, #6
 8002992:	4325      	orrs	r5, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002994:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002996:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002998:	684a      	ldr	r2, [r1, #4]
 800299a:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800299c:	6203      	str	r3, [r0, #32]
}
 800299e:	bd30      	pop	{r4, r5, pc}
 80029a0:	ffffefff 	.word	0xffffefff
 80029a4:	feff8cff 	.word	0xfeff8cff
 80029a8:	ffffdfff 	.word	0xffffdfff
 80029ac:	40012c00 	.word	0x40012c00
 80029b0:	40014400 	.word	0x40014400
 80029b4:	40014800 	.word	0x40014800
 80029b8:	ffffbfff 	.word	0xffffbfff

080029bc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80029bc:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029be:	6a04      	ldr	r4, [r0, #32]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80029c0:	6a03      	ldr	r3, [r0, #32]
 80029c2:	4a11      	ldr	r2, [pc, #68]	@ (8002a08 <TIM_OC5_SetConfig+0x4c>)
 80029c4:	4013      	ands	r3, r2
 80029c6:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029c8:	6842      	ldr	r2, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80029ca:	6d43      	ldr	r3, [r0, #84]	@ 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80029cc:	4d0f      	ldr	r5, [pc, #60]	@ (8002a0c <TIM_OC5_SetConfig+0x50>)
 80029ce:	402b      	ands	r3, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80029d0:	680d      	ldr	r5, [r1, #0]
 80029d2:	431d      	orrs	r5, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80029d4:	4b0e      	ldr	r3, [pc, #56]	@ (8002a10 <TIM_OC5_SetConfig+0x54>)
 80029d6:	401c      	ands	r4, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80029d8:	688b      	ldr	r3, [r1, #8]
 80029da:	041b      	lsls	r3, r3, #16
 80029dc:	4323      	orrs	r3, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029de:	4c0d      	ldr	r4, [pc, #52]	@ (8002a14 <TIM_OC5_SetConfig+0x58>)
 80029e0:	42a0      	cmp	r0, r4
 80029e2:	d005      	beq.n	80029f0 <TIM_OC5_SetConfig+0x34>
 80029e4:	4c0c      	ldr	r4, [pc, #48]	@ (8002a18 <TIM_OC5_SetConfig+0x5c>)
 80029e6:	42a0      	cmp	r0, r4
 80029e8:	d002      	beq.n	80029f0 <TIM_OC5_SetConfig+0x34>
 80029ea:	4c0c      	ldr	r4, [pc, #48]	@ (8002a1c <TIM_OC5_SetConfig+0x60>)
 80029ec:	42a0      	cmp	r0, r4
 80029ee:	d104      	bne.n	80029fa <TIM_OC5_SetConfig+0x3e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80029f0:	4c05      	ldr	r4, [pc, #20]	@ (8002a08 <TIM_OC5_SetConfig+0x4c>)
 80029f2:	4014      	ands	r4, r2
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80029f4:	694a      	ldr	r2, [r1, #20]
 80029f6:	0212      	lsls	r2, r2, #8
 80029f8:	4322      	orrs	r2, r4
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029fa:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80029fc:	6545      	str	r5, [r0, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80029fe:	684a      	ldr	r2, [r1, #4]
 8002a00:	6582      	str	r2, [r0, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a02:	6203      	str	r3, [r0, #32]
}
 8002a04:	bd30      	pop	{r4, r5, pc}
 8002a06:	46c0      	nop			@ (mov r8, r8)
 8002a08:	fffeffff 	.word	0xfffeffff
 8002a0c:	fffeff8f 	.word	0xfffeff8f
 8002a10:	fffdffff 	.word	0xfffdffff
 8002a14:	40012c00 	.word	0x40012c00
 8002a18:	40014400 	.word	0x40014400
 8002a1c:	40014800 	.word	0x40014800

08002a20 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002a20:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a22:	6a04      	ldr	r4, [r0, #32]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002a24:	6a03      	ldr	r3, [r0, #32]
 8002a26:	4a11      	ldr	r2, [pc, #68]	@ (8002a6c <TIM_OC6_SetConfig+0x4c>)
 8002a28:	4013      	ands	r3, r2
 8002a2a:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a2c:	6845      	ldr	r5, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002a2e:	6d43      	ldr	r3, [r0, #84]	@ 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002a30:	4a0f      	ldr	r2, [pc, #60]	@ (8002a70 <TIM_OC6_SetConfig+0x50>)
 8002a32:	4013      	ands	r3, r2
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a34:	680a      	ldr	r2, [r1, #0]
 8002a36:	0212      	lsls	r2, r2, #8
 8002a38:	431a      	orrs	r2, r3

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002a3a:	4b0e      	ldr	r3, [pc, #56]	@ (8002a74 <TIM_OC6_SetConfig+0x54>)
 8002a3c:	401c      	ands	r4, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002a3e:	688b      	ldr	r3, [r1, #8]
 8002a40:	051b      	lsls	r3, r3, #20
 8002a42:	4323      	orrs	r3, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a44:	4c0c      	ldr	r4, [pc, #48]	@ (8002a78 <TIM_OC6_SetConfig+0x58>)
 8002a46:	42a0      	cmp	r0, r4
 8002a48:	d005      	beq.n	8002a56 <TIM_OC6_SetConfig+0x36>
 8002a4a:	4c0c      	ldr	r4, [pc, #48]	@ (8002a7c <TIM_OC6_SetConfig+0x5c>)
 8002a4c:	42a0      	cmp	r0, r4
 8002a4e:	d002      	beq.n	8002a56 <TIM_OC6_SetConfig+0x36>
 8002a50:	4c0b      	ldr	r4, [pc, #44]	@ (8002a80 <TIM_OC6_SetConfig+0x60>)
 8002a52:	42a0      	cmp	r0, r4
 8002a54:	d104      	bne.n	8002a60 <TIM_OC6_SetConfig+0x40>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002a56:	4c0b      	ldr	r4, [pc, #44]	@ (8002a84 <TIM_OC6_SetConfig+0x64>)
 8002a58:	402c      	ands	r4, r5
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002a5a:	694d      	ldr	r5, [r1, #20]
 8002a5c:	02ad      	lsls	r5, r5, #10
 8002a5e:	4325      	orrs	r5, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a60:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002a62:	6542      	str	r2, [r0, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002a64:	684a      	ldr	r2, [r1, #4]
 8002a66:	65c2      	str	r2, [r0, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a68:	6203      	str	r3, [r0, #32]
}
 8002a6a:	bd30      	pop	{r4, r5, pc}
 8002a6c:	ffefffff 	.word	0xffefffff
 8002a70:	feff8fff 	.word	0xfeff8fff
 8002a74:	ffdfffff 	.word	0xffdfffff
 8002a78:	40012c00 	.word	0x40012c00
 8002a7c:	40014400 	.word	0x40014400
 8002a80:	40014800 	.word	0x40014800
 8002a84:	fffbffff 	.word	0xfffbffff

08002a88 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a88:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a8a:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a8c:	6a04      	ldr	r4, [r0, #32]
 8002a8e:	2501      	movs	r5, #1
 8002a90:	43ac      	bics	r4, r5
 8002a92:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a94:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a96:	35ef      	adds	r5, #239	@ 0xef
 8002a98:	43ac      	bics	r4, r5
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a9a:	0112      	lsls	r2, r2, #4
 8002a9c:	4322      	orrs	r2, r4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a9e:	240a      	movs	r4, #10
 8002aa0:	43a3      	bics	r3, r4
  tmpccer |= TIM_ICPolarity;
 8002aa2:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002aa4:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002aa6:	6203      	str	r3, [r0, #32]
}
 8002aa8:	bd30      	pop	{r4, r5, pc}
	...

08002aac <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002aac:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002aae:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ab0:	6a04      	ldr	r4, [r0, #32]
 8002ab2:	2510      	movs	r5, #16
 8002ab4:	43ac      	bics	r4, r5
 8002ab6:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ab8:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002aba:	4d05      	ldr	r5, [pc, #20]	@ (8002ad0 <TIM_TI2_ConfigInputStage+0x24>)
 8002abc:	402c      	ands	r4, r5
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002abe:	0312      	lsls	r2, r2, #12
 8002ac0:	4322      	orrs	r2, r4

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ac2:	24a0      	movs	r4, #160	@ 0xa0
 8002ac4:	43a3      	bics	r3, r4
  tmpccer |= (TIM_ICPolarity << 4U);
 8002ac6:	0109      	lsls	r1, r1, #4
 8002ac8:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002aca:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002acc:	6201      	str	r1, [r0, #32]
}
 8002ace:	bd30      	pop	{r4, r5, pc}
 8002ad0:	ffff0fff 	.word	0xffff0fff

08002ad4 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ad4:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ad6:	4a03      	ldr	r2, [pc, #12]	@ (8002ae4 <TIM_ITRx_SetConfig+0x10>)
 8002ad8:	4013      	ands	r3, r2
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ada:	430b      	orrs	r3, r1
 8002adc:	2207      	movs	r2, #7
 8002ade:	4313      	orrs	r3, r2
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ae0:	6083      	str	r3, [r0, #8]
}
 8002ae2:	4770      	bx	lr
 8002ae4:	ffcfff8f 	.word	0xffcfff8f

08002ae8 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8002ae8:	233d      	movs	r3, #61	@ 0x3d
 8002aea:	5cc3      	ldrb	r3, [r0, r3]
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d122      	bne.n	8002b36 <HAL_TIM_Base_Start_IT+0x4e>
  htim->State = HAL_TIM_STATE_BUSY;
 8002af0:	333c      	adds	r3, #60	@ 0x3c
 8002af2:	2202      	movs	r2, #2
 8002af4:	54c2      	strb	r2, [r0, r3]
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002af6:	6802      	ldr	r2, [r0, #0]
 8002af8:	68d3      	ldr	r3, [r2, #12]
 8002afa:	2101      	movs	r1, #1
 8002afc:	430b      	orrs	r3, r1
 8002afe:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b00:	6803      	ldr	r3, [r0, #0]
 8002b02:	4a10      	ldr	r2, [pc, #64]	@ (8002b44 <HAL_TIM_Base_Start_IT+0x5c>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d008      	beq.n	8002b1a <HAL_TIM_Base_Start_IT+0x32>
 8002b08:	4a0f      	ldr	r2, [pc, #60]	@ (8002b48 <HAL_TIM_Base_Start_IT+0x60>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d005      	beq.n	8002b1a <HAL_TIM_Base_Start_IT+0x32>
    __HAL_TIM_ENABLE(htim);
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	2101      	movs	r1, #1
 8002b12:	430a      	orrs	r2, r1
 8002b14:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002b16:	2000      	movs	r0, #0
 8002b18:	e00e      	b.n	8002b38 <HAL_TIM_Base_Start_IT+0x50>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b1a:	689a      	ldr	r2, [r3, #8]
 8002b1c:	490b      	ldr	r1, [pc, #44]	@ (8002b4c <HAL_TIM_Base_Start_IT+0x64>)
 8002b1e:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b20:	2a06      	cmp	r2, #6
 8002b22:	d00a      	beq.n	8002b3a <HAL_TIM_Base_Start_IT+0x52>
 8002b24:	3907      	subs	r1, #7
 8002b26:	428a      	cmp	r2, r1
 8002b28:	d009      	beq.n	8002b3e <HAL_TIM_Base_Start_IT+0x56>
      __HAL_TIM_ENABLE(htim);
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	2101      	movs	r1, #1
 8002b2e:	430a      	orrs	r2, r1
 8002b30:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002b32:	2000      	movs	r0, #0
 8002b34:	e000      	b.n	8002b38 <HAL_TIM_Base_Start_IT+0x50>
    return HAL_ERROR;
 8002b36:	2001      	movs	r0, #1
}
 8002b38:	4770      	bx	lr
  return HAL_OK;
 8002b3a:	2000      	movs	r0, #0
 8002b3c:	e7fc      	b.n	8002b38 <HAL_TIM_Base_Start_IT+0x50>
 8002b3e:	2000      	movs	r0, #0
 8002b40:	e7fa      	b.n	8002b38 <HAL_TIM_Base_Start_IT+0x50>
 8002b42:	46c0      	nop			@ (mov r8, r8)
 8002b44:	40012c00 	.word	0x40012c00
 8002b48:	40000400 	.word	0x40000400
 8002b4c:	00010007 	.word	0x00010007

08002b50 <HAL_TIM_PWM_MspInit>:
}
 8002b50:	4770      	bx	lr

08002b52 <HAL_TIM_OC_DelayElapsedCallback>:
}
 8002b52:	4770      	bx	lr

08002b54 <HAL_TIM_IC_CaptureCallback>:
}
 8002b54:	4770      	bx	lr

08002b56 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8002b56:	4770      	bx	lr

08002b58 <HAL_TIM_TriggerCallback>:
}
 8002b58:	4770      	bx	lr
	...

08002b5c <HAL_TIM_IRQHandler>:
{
 8002b5c:	b570      	push	{r4, r5, r6, lr}
 8002b5e:	0005      	movs	r5, r0
  uint32_t itsource = htim->Instance->DIER;
 8002b60:	6803      	ldr	r3, [r0, #0]
 8002b62:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002b64:	691c      	ldr	r4, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002b66:	07a2      	lsls	r2, r4, #30
 8002b68:	d50e      	bpl.n	8002b88 <HAL_TIM_IRQHandler+0x2c>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002b6a:	07b2      	lsls	r2, r6, #30
 8002b6c:	d50c      	bpl.n	8002b88 <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002b6e:	2203      	movs	r2, #3
 8002b70:	4252      	negs	r2, r2
 8002b72:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b74:	2301      	movs	r3, #1
 8002b76:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b78:	6803      	ldr	r3, [r0, #0]
 8002b7a:	699b      	ldr	r3, [r3, #24]
 8002b7c:	079b      	lsls	r3, r3, #30
 8002b7e:	d057      	beq.n	8002c30 <HAL_TIM_IRQHandler+0xd4>
          HAL_TIM_IC_CaptureCallback(htim);
 8002b80:	f7ff ffe8 	bl	8002b54 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b84:	2300      	movs	r3, #0
 8002b86:	772b      	strb	r3, [r5, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002b88:	0763      	lsls	r3, r4, #29
 8002b8a:	d512      	bpl.n	8002bb2 <HAL_TIM_IRQHandler+0x56>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002b8c:	0773      	lsls	r3, r6, #29
 8002b8e:	d510      	bpl.n	8002bb2 <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002b90:	682b      	ldr	r3, [r5, #0]
 8002b92:	2205      	movs	r2, #5
 8002b94:	4252      	negs	r2, r2
 8002b96:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b98:	2302      	movs	r3, #2
 8002b9a:	772b      	strb	r3, [r5, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b9c:	682b      	ldr	r3, [r5, #0]
 8002b9e:	699a      	ldr	r2, [r3, #24]
 8002ba0:	23c0      	movs	r3, #192	@ 0xc0
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	421a      	tst	r2, r3
 8002ba6:	d049      	beq.n	8002c3c <HAL_TIM_IRQHandler+0xe0>
        HAL_TIM_IC_CaptureCallback(htim);
 8002ba8:	0028      	movs	r0, r5
 8002baa:	f7ff ffd3 	bl	8002b54 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	772b      	strb	r3, [r5, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002bb2:	0723      	lsls	r3, r4, #28
 8002bb4:	d510      	bpl.n	8002bd8 <HAL_TIM_IRQHandler+0x7c>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002bb6:	0733      	lsls	r3, r6, #28
 8002bb8:	d50e      	bpl.n	8002bd8 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002bba:	682b      	ldr	r3, [r5, #0]
 8002bbc:	2209      	movs	r2, #9
 8002bbe:	4252      	negs	r2, r2
 8002bc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002bc2:	2304      	movs	r3, #4
 8002bc4:	772b      	strb	r3, [r5, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002bc6:	682b      	ldr	r3, [r5, #0]
 8002bc8:	69db      	ldr	r3, [r3, #28]
 8002bca:	079b      	lsls	r3, r3, #30
 8002bcc:	d03d      	beq.n	8002c4a <HAL_TIM_IRQHandler+0xee>
        HAL_TIM_IC_CaptureCallback(htim);
 8002bce:	0028      	movs	r0, r5
 8002bd0:	f7ff ffc0 	bl	8002b54 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	772b      	strb	r3, [r5, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002bd8:	06e3      	lsls	r3, r4, #27
 8002bda:	d512      	bpl.n	8002c02 <HAL_TIM_IRQHandler+0xa6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002bdc:	06f3      	lsls	r3, r6, #27
 8002bde:	d510      	bpl.n	8002c02 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002be0:	682b      	ldr	r3, [r5, #0]
 8002be2:	2211      	movs	r2, #17
 8002be4:	4252      	negs	r2, r2
 8002be6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002be8:	2308      	movs	r3, #8
 8002bea:	772b      	strb	r3, [r5, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002bec:	682b      	ldr	r3, [r5, #0]
 8002bee:	69da      	ldr	r2, [r3, #28]
 8002bf0:	23c0      	movs	r3, #192	@ 0xc0
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	421a      	tst	r2, r3
 8002bf6:	d02f      	beq.n	8002c58 <HAL_TIM_IRQHandler+0xfc>
        HAL_TIM_IC_CaptureCallback(htim);
 8002bf8:	0028      	movs	r0, r5
 8002bfa:	f7ff ffab 	bl	8002b54 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	772b      	strb	r3, [r5, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002c02:	07e3      	lsls	r3, r4, #31
 8002c04:	d501      	bpl.n	8002c0a <HAL_TIM_IRQHandler+0xae>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002c06:	07f3      	lsls	r3, r6, #31
 8002c08:	d42d      	bmi.n	8002c66 <HAL_TIM_IRQHandler+0x10a>
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002c0a:	2382      	movs	r3, #130	@ 0x82
 8002c0c:	019b      	lsls	r3, r3, #6
 8002c0e:	421c      	tst	r4, r3
 8002c10:	d001      	beq.n	8002c16 <HAL_TIM_IRQHandler+0xba>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002c12:	0633      	lsls	r3, r6, #24
 8002c14:	d42f      	bmi.n	8002c76 <HAL_TIM_IRQHandler+0x11a>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002c16:	05e3      	lsls	r3, r4, #23
 8002c18:	d501      	bpl.n	8002c1e <HAL_TIM_IRQHandler+0xc2>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002c1a:	0633      	lsls	r3, r6, #24
 8002c1c:	d432      	bmi.n	8002c84 <HAL_TIM_IRQHandler+0x128>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002c1e:	0663      	lsls	r3, r4, #25
 8002c20:	d501      	bpl.n	8002c26 <HAL_TIM_IRQHandler+0xca>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002c22:	0673      	lsls	r3, r6, #25
 8002c24:	d435      	bmi.n	8002c92 <HAL_TIM_IRQHandler+0x136>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002c26:	06a4      	lsls	r4, r4, #26
 8002c28:	d501      	bpl.n	8002c2e <HAL_TIM_IRQHandler+0xd2>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002c2a:	06b6      	lsls	r6, r6, #26
 8002c2c:	d439      	bmi.n	8002ca2 <HAL_TIM_IRQHandler+0x146>
}
 8002c2e:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c30:	f7ff ff8f 	bl	8002b52 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c34:	0028      	movs	r0, r5
 8002c36:	f7ff ff8e 	bl	8002b56 <HAL_TIM_PWM_PulseFinishedCallback>
 8002c3a:	e7a3      	b.n	8002b84 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c3c:	0028      	movs	r0, r5
 8002c3e:	f7ff ff88 	bl	8002b52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c42:	0028      	movs	r0, r5
 8002c44:	f7ff ff87 	bl	8002b56 <HAL_TIM_PWM_PulseFinishedCallback>
 8002c48:	e7b1      	b.n	8002bae <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c4a:	0028      	movs	r0, r5
 8002c4c:	f7ff ff81 	bl	8002b52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c50:	0028      	movs	r0, r5
 8002c52:	f7ff ff80 	bl	8002b56 <HAL_TIM_PWM_PulseFinishedCallback>
 8002c56:	e7bd      	b.n	8002bd4 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c58:	0028      	movs	r0, r5
 8002c5a:	f7ff ff7a 	bl	8002b52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c5e:	0028      	movs	r0, r5
 8002c60:	f7ff ff79 	bl	8002b56 <HAL_TIM_PWM_PulseFinishedCallback>
 8002c64:	e7cb      	b.n	8002bfe <HAL_TIM_IRQHandler+0xa2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002c66:	682b      	ldr	r3, [r5, #0]
 8002c68:	2202      	movs	r2, #2
 8002c6a:	4252      	negs	r2, r2
 8002c6c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c6e:	0028      	movs	r0, r5
 8002c70:	f7fd fff2 	bl	8000c58 <HAL_TIM_PeriodElapsedCallback>
 8002c74:	e7c9      	b.n	8002c0a <HAL_TIM_IRQHandler+0xae>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002c76:	682b      	ldr	r3, [r5, #0]
 8002c78:	4a0e      	ldr	r2, [pc, #56]	@ (8002cb4 <HAL_TIM_IRQHandler+0x158>)
 8002c7a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002c7c:	0028      	movs	r0, r5
 8002c7e:	f000 fb6c 	bl	800335a <HAL_TIMEx_BreakCallback>
 8002c82:	e7c8      	b.n	8002c16 <HAL_TIM_IRQHandler+0xba>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002c84:	682b      	ldr	r3, [r5, #0]
 8002c86:	4a0c      	ldr	r2, [pc, #48]	@ (8002cb8 <HAL_TIM_IRQHandler+0x15c>)
 8002c88:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8002c8a:	0028      	movs	r0, r5
 8002c8c:	f000 fb66 	bl	800335c <HAL_TIMEx_Break2Callback>
 8002c90:	e7c5      	b.n	8002c1e <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002c92:	682b      	ldr	r3, [r5, #0]
 8002c94:	2241      	movs	r2, #65	@ 0x41
 8002c96:	4252      	negs	r2, r2
 8002c98:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002c9a:	0028      	movs	r0, r5
 8002c9c:	f7ff ff5c 	bl	8002b58 <HAL_TIM_TriggerCallback>
 8002ca0:	e7c1      	b.n	8002c26 <HAL_TIM_IRQHandler+0xca>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002ca2:	682b      	ldr	r3, [r5, #0]
 8002ca4:	2221      	movs	r2, #33	@ 0x21
 8002ca6:	4252      	negs	r2, r2
 8002ca8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8002caa:	0028      	movs	r0, r5
 8002cac:	f000 fb54 	bl	8003358 <HAL_TIMEx_CommutCallback>
}
 8002cb0:	e7bd      	b.n	8002c2e <HAL_TIM_IRQHandler+0xd2>
 8002cb2:	46c0      	nop			@ (mov r8, r8)
 8002cb4:	ffffdf7f 	.word	0xffffdf7f
 8002cb8:	fffffeff 	.word	0xfffffeff

08002cbc <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8002cbc:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002cbe:	4a1c      	ldr	r2, [pc, #112]	@ (8002d30 <TIM_Base_SetConfig+0x74>)
 8002cc0:	4290      	cmp	r0, r2
 8002cc2:	d002      	beq.n	8002cca <TIM_Base_SetConfig+0xe>
 8002cc4:	4a1b      	ldr	r2, [pc, #108]	@ (8002d34 <TIM_Base_SetConfig+0x78>)
 8002cc6:	4290      	cmp	r0, r2
 8002cc8:	d103      	bne.n	8002cd2 <TIM_Base_SetConfig+0x16>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002cca:	2270      	movs	r2, #112	@ 0x70
 8002ccc:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8002cce:	684a      	ldr	r2, [r1, #4]
 8002cd0:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cd2:	4a17      	ldr	r2, [pc, #92]	@ (8002d30 <TIM_Base_SetConfig+0x74>)
 8002cd4:	4290      	cmp	r0, r2
 8002cd6:	d00b      	beq.n	8002cf0 <TIM_Base_SetConfig+0x34>
 8002cd8:	4a16      	ldr	r2, [pc, #88]	@ (8002d34 <TIM_Base_SetConfig+0x78>)
 8002cda:	4290      	cmp	r0, r2
 8002cdc:	d008      	beq.n	8002cf0 <TIM_Base_SetConfig+0x34>
 8002cde:	4a16      	ldr	r2, [pc, #88]	@ (8002d38 <TIM_Base_SetConfig+0x7c>)
 8002ce0:	4290      	cmp	r0, r2
 8002ce2:	d005      	beq.n	8002cf0 <TIM_Base_SetConfig+0x34>
 8002ce4:	4a15      	ldr	r2, [pc, #84]	@ (8002d3c <TIM_Base_SetConfig+0x80>)
 8002ce6:	4290      	cmp	r0, r2
 8002ce8:	d002      	beq.n	8002cf0 <TIM_Base_SetConfig+0x34>
 8002cea:	4a15      	ldr	r2, [pc, #84]	@ (8002d40 <TIM_Base_SetConfig+0x84>)
 8002cec:	4290      	cmp	r0, r2
 8002cee:	d103      	bne.n	8002cf8 <TIM_Base_SetConfig+0x3c>
    tmpcr1 &= ~TIM_CR1_CKD;
 8002cf0:	4a14      	ldr	r2, [pc, #80]	@ (8002d44 <TIM_Base_SetConfig+0x88>)
 8002cf2:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002cf4:	68ca      	ldr	r2, [r1, #12]
 8002cf6:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002cf8:	2280      	movs	r2, #128	@ 0x80
 8002cfa:	4393      	bics	r3, r2
 8002cfc:	694a      	ldr	r2, [r1, #20]
 8002cfe:	4313      	orrs	r3, r2
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d00:	688a      	ldr	r2, [r1, #8]
 8002d02:	62c2      	str	r2, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002d04:	680a      	ldr	r2, [r1, #0]
 8002d06:	6282      	str	r2, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d08:	4a09      	ldr	r2, [pc, #36]	@ (8002d30 <TIM_Base_SetConfig+0x74>)
 8002d0a:	4290      	cmp	r0, r2
 8002d0c:	d005      	beq.n	8002d1a <TIM_Base_SetConfig+0x5e>
 8002d0e:	4a0b      	ldr	r2, [pc, #44]	@ (8002d3c <TIM_Base_SetConfig+0x80>)
 8002d10:	4290      	cmp	r0, r2
 8002d12:	d002      	beq.n	8002d1a <TIM_Base_SetConfig+0x5e>
 8002d14:	4a0a      	ldr	r2, [pc, #40]	@ (8002d40 <TIM_Base_SetConfig+0x84>)
 8002d16:	4290      	cmp	r0, r2
 8002d18:	d101      	bne.n	8002d1e <TIM_Base_SetConfig+0x62>
    TIMx->RCR = Structure->RepetitionCounter;
 8002d1a:	690a      	ldr	r2, [r1, #16]
 8002d1c:	6302      	str	r2, [r0, #48]	@ 0x30
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002d1e:	6802      	ldr	r2, [r0, #0]
 8002d20:	2104      	movs	r1, #4
 8002d22:	430a      	orrs	r2, r1
 8002d24:	6002      	str	r2, [r0, #0]
  TIMx->EGR = TIM_EGR_UG;
 8002d26:	2201      	movs	r2, #1
 8002d28:	6142      	str	r2, [r0, #20]
  TIMx->CR1 = tmpcr1;
 8002d2a:	6003      	str	r3, [r0, #0]
}
 8002d2c:	4770      	bx	lr
 8002d2e:	46c0      	nop			@ (mov r8, r8)
 8002d30:	40012c00 	.word	0x40012c00
 8002d34:	40000400 	.word	0x40000400
 8002d38:	40002000 	.word	0x40002000
 8002d3c:	40014400 	.word	0x40014400
 8002d40:	40014800 	.word	0x40014800
 8002d44:	fffffcff 	.word	0xfffffcff

08002d48 <HAL_TIM_Base_Init>:
{
 8002d48:	b570      	push	{r4, r5, r6, lr}
 8002d4a:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 8002d4c:	d02a      	beq.n	8002da4 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002d4e:	233d      	movs	r3, #61	@ 0x3d
 8002d50:	5cc3      	ldrb	r3, [r0, r3]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d020      	beq.n	8002d98 <HAL_TIM_Base_Init+0x50>
  htim->State = HAL_TIM_STATE_BUSY;
 8002d56:	253d      	movs	r5, #61	@ 0x3d
 8002d58:	2302      	movs	r3, #2
 8002d5a:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d5c:	0021      	movs	r1, r4
 8002d5e:	c901      	ldmia	r1!, {r0}
 8002d60:	f7ff ffac 	bl	8002cbc <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d64:	2301      	movs	r3, #1
 8002d66:	2248      	movs	r2, #72	@ 0x48
 8002d68:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d6a:	3a0a      	subs	r2, #10
 8002d6c:	54a3      	strb	r3, [r4, r2]
 8002d6e:	3201      	adds	r2, #1
 8002d70:	54a3      	strb	r3, [r4, r2]
 8002d72:	3201      	adds	r2, #1
 8002d74:	54a3      	strb	r3, [r4, r2]
 8002d76:	3201      	adds	r2, #1
 8002d78:	54a3      	strb	r3, [r4, r2]
 8002d7a:	3201      	adds	r2, #1
 8002d7c:	54a3      	strb	r3, [r4, r2]
 8002d7e:	3201      	adds	r2, #1
 8002d80:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d82:	3201      	adds	r2, #1
 8002d84:	54a3      	strb	r3, [r4, r2]
 8002d86:	3201      	adds	r2, #1
 8002d88:	54a3      	strb	r3, [r4, r2]
 8002d8a:	3201      	adds	r2, #1
 8002d8c:	54a3      	strb	r3, [r4, r2]
 8002d8e:	3201      	adds	r2, #1
 8002d90:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 8002d92:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8002d94:	2000      	movs	r0, #0
}
 8002d96:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8002d98:	333c      	adds	r3, #60	@ 0x3c
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 8002d9e:	f7fe faeb 	bl	8001378 <HAL_TIM_Base_MspInit>
 8002da2:	e7d8      	b.n	8002d56 <HAL_TIM_Base_Init+0xe>
    return HAL_ERROR;
 8002da4:	2001      	movs	r0, #1
 8002da6:	e7f6      	b.n	8002d96 <HAL_TIM_Base_Init+0x4e>

08002da8 <HAL_TIM_PWM_Init>:
{
 8002da8:	b570      	push	{r4, r5, r6, lr}
 8002daa:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 8002dac:	d02a      	beq.n	8002e04 <HAL_TIM_PWM_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002dae:	233d      	movs	r3, #61	@ 0x3d
 8002db0:	5cc3      	ldrb	r3, [r0, r3]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d020      	beq.n	8002df8 <HAL_TIM_PWM_Init+0x50>
  htim->State = HAL_TIM_STATE_BUSY;
 8002db6:	253d      	movs	r5, #61	@ 0x3d
 8002db8:	2302      	movs	r3, #2
 8002dba:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002dbc:	0021      	movs	r1, r4
 8002dbe:	c901      	ldmia	r1!, {r0}
 8002dc0:	f7ff ff7c 	bl	8002cbc <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	2248      	movs	r2, #72	@ 0x48
 8002dc8:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dca:	3a0a      	subs	r2, #10
 8002dcc:	54a3      	strb	r3, [r4, r2]
 8002dce:	3201      	adds	r2, #1
 8002dd0:	54a3      	strb	r3, [r4, r2]
 8002dd2:	3201      	adds	r2, #1
 8002dd4:	54a3      	strb	r3, [r4, r2]
 8002dd6:	3201      	adds	r2, #1
 8002dd8:	54a3      	strb	r3, [r4, r2]
 8002dda:	3201      	adds	r2, #1
 8002ddc:	54a3      	strb	r3, [r4, r2]
 8002dde:	3201      	adds	r2, #1
 8002de0:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002de2:	3201      	adds	r2, #1
 8002de4:	54a3      	strb	r3, [r4, r2]
 8002de6:	3201      	adds	r2, #1
 8002de8:	54a3      	strb	r3, [r4, r2]
 8002dea:	3201      	adds	r2, #1
 8002dec:	54a3      	strb	r3, [r4, r2]
 8002dee:	3201      	adds	r2, #1
 8002df0:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 8002df2:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8002df4:	2000      	movs	r0, #0
}
 8002df6:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8002df8:	333c      	adds	r3, #60	@ 0x3c
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_PWM_MspInit(htim);
 8002dfe:	f7ff fea7 	bl	8002b50 <HAL_TIM_PWM_MspInit>
 8002e02:	e7d8      	b.n	8002db6 <HAL_TIM_PWM_Init+0xe>
    return HAL_ERROR;
 8002e04:	2001      	movs	r0, #1
 8002e06:	e7f6      	b.n	8002df6 <HAL_TIM_PWM_Init+0x4e>

08002e08 <TIM_OC2_SetConfig>:
{
 8002e08:	b570      	push	{r4, r5, r6, lr}
  tmpccer = TIMx->CCER;
 8002e0a:	6a02      	ldr	r2, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e0c:	6a03      	ldr	r3, [r0, #32]
 8002e0e:	2410      	movs	r4, #16
 8002e10:	43a3      	bics	r3, r4
 8002e12:	6203      	str	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8002e14:	6845      	ldr	r5, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8002e16:	6983      	ldr	r3, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002e18:	4c14      	ldr	r4, [pc, #80]	@ (8002e6c <TIM_OC2_SetConfig+0x64>)
 8002e1a:	4023      	ands	r3, r4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e1c:	680c      	ldr	r4, [r1, #0]
 8002e1e:	0224      	lsls	r4, r4, #8
 8002e20:	431c      	orrs	r4, r3
  tmpccer &= ~TIM_CCER_CC2P;
 8002e22:	2320      	movs	r3, #32
 8002e24:	439a      	bics	r2, r3
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002e26:	688b      	ldr	r3, [r1, #8]
 8002e28:	011b      	lsls	r3, r3, #4
 8002e2a:	4313      	orrs	r3, r2
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002e2c:	4a10      	ldr	r2, [pc, #64]	@ (8002e70 <TIM_OC2_SetConfig+0x68>)
 8002e2e:	4290      	cmp	r0, r2
 8002e30:	d006      	beq.n	8002e40 <TIM_OC2_SetConfig+0x38>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e32:	4a10      	ldr	r2, [pc, #64]	@ (8002e74 <TIM_OC2_SetConfig+0x6c>)
 8002e34:	4290      	cmp	r0, r2
 8002e36:	d00b      	beq.n	8002e50 <TIM_OC2_SetConfig+0x48>
 8002e38:	4a0f      	ldr	r2, [pc, #60]	@ (8002e78 <TIM_OC2_SetConfig+0x70>)
 8002e3a:	4290      	cmp	r0, r2
 8002e3c:	d110      	bne.n	8002e60 <TIM_OC2_SetConfig+0x58>
 8002e3e:	e007      	b.n	8002e50 <TIM_OC2_SetConfig+0x48>
    tmpccer &= ~TIM_CCER_CC2NP;
 8002e40:	2280      	movs	r2, #128	@ 0x80
 8002e42:	4393      	bics	r3, r2
 8002e44:	001e      	movs	r6, r3
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002e46:	68cb      	ldr	r3, [r1, #12]
 8002e48:	011b      	lsls	r3, r3, #4
 8002e4a:	4333      	orrs	r3, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8002e4c:	3a40      	subs	r2, #64	@ 0x40
 8002e4e:	4393      	bics	r3, r2
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002e50:	4a0a      	ldr	r2, [pc, #40]	@ (8002e7c <TIM_OC2_SetConfig+0x74>)
 8002e52:	4015      	ands	r5, r2
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002e54:	694a      	ldr	r2, [r1, #20]
 8002e56:	0092      	lsls	r2, r2, #2
 8002e58:	432a      	orrs	r2, r5
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002e5a:	698d      	ldr	r5, [r1, #24]
 8002e5c:	00ad      	lsls	r5, r5, #2
 8002e5e:	4315      	orrs	r5, r2
  TIMx->CR2 = tmpcr2;
 8002e60:	6045      	str	r5, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002e62:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8002e64:	684a      	ldr	r2, [r1, #4]
 8002e66:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 8002e68:	6203      	str	r3, [r0, #32]
}
 8002e6a:	bd70      	pop	{r4, r5, r6, pc}
 8002e6c:	feff8cff 	.word	0xfeff8cff
 8002e70:	40012c00 	.word	0x40012c00
 8002e74:	40014400 	.word	0x40014400
 8002e78:	40014800 	.word	0x40014800
 8002e7c:	fffff3ff 	.word	0xfffff3ff

08002e80 <HAL_TIM_PWM_ConfigChannel>:
{
 8002e80:	b570      	push	{r4, r5, r6, lr}
 8002e82:	0004      	movs	r4, r0
 8002e84:	000d      	movs	r5, r1
  __HAL_LOCK(htim);
 8002e86:	233c      	movs	r3, #60	@ 0x3c
 8002e88:	5cc3      	ldrb	r3, [r0, r3]
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d100      	bne.n	8002e90 <HAL_TIM_PWM_ConfigChannel+0x10>
 8002e8e:	e092      	b.n	8002fb6 <HAL_TIM_PWM_ConfigChannel+0x136>
 8002e90:	233c      	movs	r3, #60	@ 0x3c
 8002e92:	2101      	movs	r1, #1
 8002e94:	54c1      	strb	r1, [r0, r3]
  switch (Channel)
 8002e96:	2a14      	cmp	r2, #20
 8002e98:	d900      	bls.n	8002e9c <HAL_TIM_PWM_ConfigChannel+0x1c>
 8002e9a:	e087      	b.n	8002fac <HAL_TIM_PWM_ConfigChannel+0x12c>
 8002e9c:	0092      	lsls	r2, r2, #2
 8002e9e:	4b47      	ldr	r3, [pc, #284]	@ (8002fbc <HAL_TIM_PWM_ConfigChannel+0x13c>)
 8002ea0:	589b      	ldr	r3, [r3, r2]
 8002ea2:	469f      	mov	pc, r3
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002ea4:	6800      	ldr	r0, [r0, #0]
 8002ea6:	0029      	movs	r1, r5
 8002ea8:	f7ff fcd2 	bl	8002850 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002eac:	6822      	ldr	r2, [r4, #0]
 8002eae:	6993      	ldr	r3, [r2, #24]
 8002eb0:	2108      	movs	r1, #8
 8002eb2:	430b      	orrs	r3, r1
 8002eb4:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002eb6:	6822      	ldr	r2, [r4, #0]
 8002eb8:	6993      	ldr	r3, [r2, #24]
 8002eba:	3904      	subs	r1, #4
 8002ebc:	438b      	bics	r3, r1
 8002ebe:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002ec0:	6822      	ldr	r2, [r4, #0]
 8002ec2:	6993      	ldr	r3, [r2, #24]
 8002ec4:	6929      	ldr	r1, [r5, #16]
 8002ec6:	430b      	orrs	r3, r1
 8002ec8:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8002eca:	2000      	movs	r0, #0
      break;
 8002ecc:	e06f      	b.n	8002fae <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002ece:	6800      	ldr	r0, [r0, #0]
 8002ed0:	0029      	movs	r1, r5
 8002ed2:	f7ff ff99 	bl	8002e08 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002ed6:	6822      	ldr	r2, [r4, #0]
 8002ed8:	6991      	ldr	r1, [r2, #24]
 8002eda:	2380      	movs	r3, #128	@ 0x80
 8002edc:	011b      	lsls	r3, r3, #4
 8002ede:	430b      	orrs	r3, r1
 8002ee0:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002ee2:	6822      	ldr	r2, [r4, #0]
 8002ee4:	6993      	ldr	r3, [r2, #24]
 8002ee6:	4936      	ldr	r1, [pc, #216]	@ (8002fc0 <HAL_TIM_PWM_ConfigChannel+0x140>)
 8002ee8:	400b      	ands	r3, r1
 8002eea:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002eec:	6821      	ldr	r1, [r4, #0]
 8002eee:	698b      	ldr	r3, [r1, #24]
 8002ef0:	692a      	ldr	r2, [r5, #16]
 8002ef2:	0212      	lsls	r2, r2, #8
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	618b      	str	r3, [r1, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8002ef8:	2000      	movs	r0, #0
      break;
 8002efa:	e058      	b.n	8002fae <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002efc:	6800      	ldr	r0, [r0, #0]
 8002efe:	0029      	movs	r1, r5
 8002f00:	f7ff fce6 	bl	80028d0 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002f04:	6822      	ldr	r2, [r4, #0]
 8002f06:	69d3      	ldr	r3, [r2, #28]
 8002f08:	2108      	movs	r1, #8
 8002f0a:	430b      	orrs	r3, r1
 8002f0c:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002f0e:	6822      	ldr	r2, [r4, #0]
 8002f10:	69d3      	ldr	r3, [r2, #28]
 8002f12:	3904      	subs	r1, #4
 8002f14:	438b      	bics	r3, r1
 8002f16:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002f18:	6822      	ldr	r2, [r4, #0]
 8002f1a:	69d3      	ldr	r3, [r2, #28]
 8002f1c:	6929      	ldr	r1, [r5, #16]
 8002f1e:	430b      	orrs	r3, r1
 8002f20:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8002f22:	2000      	movs	r0, #0
      break;
 8002f24:	e043      	b.n	8002fae <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002f26:	6800      	ldr	r0, [r0, #0]
 8002f28:	0029      	movs	r1, r5
 8002f2a:	f7ff fd13 	bl	8002954 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002f2e:	6822      	ldr	r2, [r4, #0]
 8002f30:	69d1      	ldr	r1, [r2, #28]
 8002f32:	2380      	movs	r3, #128	@ 0x80
 8002f34:	011b      	lsls	r3, r3, #4
 8002f36:	430b      	orrs	r3, r1
 8002f38:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002f3a:	6822      	ldr	r2, [r4, #0]
 8002f3c:	69d3      	ldr	r3, [r2, #28]
 8002f3e:	4920      	ldr	r1, [pc, #128]	@ (8002fc0 <HAL_TIM_PWM_ConfigChannel+0x140>)
 8002f40:	400b      	ands	r3, r1
 8002f42:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002f44:	6821      	ldr	r1, [r4, #0]
 8002f46:	69cb      	ldr	r3, [r1, #28]
 8002f48:	692a      	ldr	r2, [r5, #16]
 8002f4a:	0212      	lsls	r2, r2, #8
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	61cb      	str	r3, [r1, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8002f50:	2000      	movs	r0, #0
      break;
 8002f52:	e02c      	b.n	8002fae <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002f54:	6800      	ldr	r0, [r0, #0]
 8002f56:	0029      	movs	r1, r5
 8002f58:	f7ff fd30 	bl	80029bc <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002f5c:	6822      	ldr	r2, [r4, #0]
 8002f5e:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8002f60:	2108      	movs	r1, #8
 8002f62:	430b      	orrs	r3, r1
 8002f64:	6553      	str	r3, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002f66:	6822      	ldr	r2, [r4, #0]
 8002f68:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8002f6a:	3904      	subs	r1, #4
 8002f6c:	438b      	bics	r3, r1
 8002f6e:	6553      	str	r3, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002f70:	6822      	ldr	r2, [r4, #0]
 8002f72:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8002f74:	6929      	ldr	r1, [r5, #16]
 8002f76:	430b      	orrs	r3, r1
 8002f78:	6553      	str	r3, [r2, #84]	@ 0x54
  HAL_StatusTypeDef status = HAL_OK;
 8002f7a:	2000      	movs	r0, #0
      break;
 8002f7c:	e017      	b.n	8002fae <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002f7e:	6800      	ldr	r0, [r0, #0]
 8002f80:	0029      	movs	r1, r5
 8002f82:	f7ff fd4d 	bl	8002a20 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002f86:	6822      	ldr	r2, [r4, #0]
 8002f88:	6d51      	ldr	r1, [r2, #84]	@ 0x54
 8002f8a:	2380      	movs	r3, #128	@ 0x80
 8002f8c:	011b      	lsls	r3, r3, #4
 8002f8e:	430b      	orrs	r3, r1
 8002f90:	6553      	str	r3, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002f92:	6822      	ldr	r2, [r4, #0]
 8002f94:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8002f96:	490a      	ldr	r1, [pc, #40]	@ (8002fc0 <HAL_TIM_PWM_ConfigChannel+0x140>)
 8002f98:	400b      	ands	r3, r1
 8002f9a:	6553      	str	r3, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002f9c:	6821      	ldr	r1, [r4, #0]
 8002f9e:	6d4b      	ldr	r3, [r1, #84]	@ 0x54
 8002fa0:	692a      	ldr	r2, [r5, #16]
 8002fa2:	0212      	lsls	r2, r2, #8
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	654b      	str	r3, [r1, #84]	@ 0x54
  HAL_StatusTypeDef status = HAL_OK;
 8002fa8:	2000      	movs	r0, #0
      break;
 8002faa:	e000      	b.n	8002fae <HAL_TIM_PWM_ConfigChannel+0x12e>
  switch (Channel)
 8002fac:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8002fae:	233c      	movs	r3, #60	@ 0x3c
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	54e2      	strb	r2, [r4, r3]
}
 8002fb4:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(htim);
 8002fb6:	2002      	movs	r0, #2
 8002fb8:	e7fc      	b.n	8002fb4 <HAL_TIM_PWM_ConfigChannel+0x134>
 8002fba:	46c0      	nop			@ (mov r8, r8)
 8002fbc:	08004a28 	.word	0x08004a28
 8002fc0:	fffffbff 	.word	0xfffffbff

08002fc4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002fc4:	b530      	push	{r4, r5, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002fc6:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fc8:	4d03      	ldr	r5, [pc, #12]	@ (8002fd8 <TIM_ETR_SetConfig+0x14>)
 8002fca:	402c      	ands	r4, r5

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002fcc:	021b      	lsls	r3, r3, #8
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	430b      	orrs	r3, r1
 8002fd2:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002fd4:	6083      	str	r3, [r0, #8]
}
 8002fd6:	bd30      	pop	{r4, r5, pc}
 8002fd8:	ffff00ff 	.word	0xffff00ff

08002fdc <HAL_TIM_ConfigClockSource>:
{
 8002fdc:	b510      	push	{r4, lr}
 8002fde:	0004      	movs	r4, r0
 8002fe0:	000b      	movs	r3, r1
  __HAL_LOCK(htim);
 8002fe2:	223c      	movs	r2, #60	@ 0x3c
 8002fe4:	5c82      	ldrb	r2, [r0, r2]
 8002fe6:	2a01      	cmp	r2, #1
 8002fe8:	d100      	bne.n	8002fec <HAL_TIM_ConfigClockSource+0x10>
 8002fea:	e077      	b.n	80030dc <HAL_TIM_ConfigClockSource+0x100>
 8002fec:	223c      	movs	r2, #60	@ 0x3c
 8002fee:	2101      	movs	r1, #1
 8002ff0:	5481      	strb	r1, [r0, r2]
  htim->State = HAL_TIM_STATE_BUSY;
 8002ff2:	3201      	adds	r2, #1
 8002ff4:	3101      	adds	r1, #1
 8002ff6:	5481      	strb	r1, [r0, r2]
  tmpsmcr = htim->Instance->SMCR;
 8002ff8:	6801      	ldr	r1, [r0, #0]
 8002ffa:	688a      	ldr	r2, [r1, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ffc:	4838      	ldr	r0, [pc, #224]	@ (80030e0 <HAL_TIM_ConfigClockSource+0x104>)
 8002ffe:	4002      	ands	r2, r0
  htim->Instance->SMCR = tmpsmcr;
 8003000:	608a      	str	r2, [r1, #8]
  switch (sClockSourceConfig->ClockSource)
 8003002:	6819      	ldr	r1, [r3, #0]
 8003004:	2960      	cmp	r1, #96	@ 0x60
 8003006:	d04f      	beq.n	80030a8 <HAL_TIM_ConfigClockSource+0xcc>
 8003008:	d823      	bhi.n	8003052 <HAL_TIM_ConfigClockSource+0x76>
 800300a:	2940      	cmp	r1, #64	@ 0x40
 800300c:	d057      	beq.n	80030be <HAL_TIM_ConfigClockSource+0xe2>
 800300e:	d811      	bhi.n	8003034 <HAL_TIM_ConfigClockSource+0x58>
 8003010:	2920      	cmp	r1, #32
 8003012:	d004      	beq.n	800301e <HAL_TIM_ConfigClockSource+0x42>
 8003014:	d80a      	bhi.n	800302c <HAL_TIM_ConfigClockSource+0x50>
 8003016:	2900      	cmp	r1, #0
 8003018:	d001      	beq.n	800301e <HAL_TIM_ConfigClockSource+0x42>
 800301a:	2910      	cmp	r1, #16
 800301c:	d104      	bne.n	8003028 <HAL_TIM_ConfigClockSource+0x4c>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800301e:	6820      	ldr	r0, [r4, #0]
 8003020:	f7ff fd58 	bl	8002ad4 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8003024:	2000      	movs	r0, #0
      break;
 8003026:	e02a      	b.n	800307e <HAL_TIM_ConfigClockSource+0xa2>
      status = HAL_ERROR;
 8003028:	2001      	movs	r0, #1
 800302a:	e028      	b.n	800307e <HAL_TIM_ConfigClockSource+0xa2>
  switch (sClockSourceConfig->ClockSource)
 800302c:	2930      	cmp	r1, #48	@ 0x30
 800302e:	d0f6      	beq.n	800301e <HAL_TIM_ConfigClockSource+0x42>
      status = HAL_ERROR;
 8003030:	2001      	movs	r0, #1
 8003032:	e024      	b.n	800307e <HAL_TIM_ConfigClockSource+0xa2>
  switch (sClockSourceConfig->ClockSource)
 8003034:	2950      	cmp	r1, #80	@ 0x50
 8003036:	d10a      	bne.n	800304e <HAL_TIM_ConfigClockSource+0x72>
                               sClockSourceConfig->ClockPolarity,
 8003038:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800303a:	68da      	ldr	r2, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800303c:	6820      	ldr	r0, [r4, #0]
 800303e:	f7ff fd23 	bl	8002a88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003042:	6820      	ldr	r0, [r4, #0]
 8003044:	2150      	movs	r1, #80	@ 0x50
 8003046:	f7ff fd45 	bl	8002ad4 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800304a:	2000      	movs	r0, #0
      break;
 800304c:	e017      	b.n	800307e <HAL_TIM_ConfigClockSource+0xa2>
      status = HAL_ERROR;
 800304e:	2001      	movs	r0, #1
 8003050:	e015      	b.n	800307e <HAL_TIM_ConfigClockSource+0xa2>
  switch (sClockSourceConfig->ClockSource)
 8003052:	2280      	movs	r2, #128	@ 0x80
 8003054:	0152      	lsls	r2, r2, #5
 8003056:	4291      	cmp	r1, r2
 8003058:	d03c      	beq.n	80030d4 <HAL_TIM_ConfigClockSource+0xf8>
 800305a:	2280      	movs	r2, #128	@ 0x80
 800305c:	0192      	lsls	r2, r2, #6
 800305e:	4291      	cmp	r1, r2
 8003060:	d014      	beq.n	800308c <HAL_TIM_ConfigClockSource+0xb0>
 8003062:	2970      	cmp	r1, #112	@ 0x70
 8003064:	d138      	bne.n	80030d8 <HAL_TIM_ConfigClockSource+0xfc>
                        sClockSourceConfig->ClockPrescaler,
 8003066:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003068:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800306a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800306c:	6820      	ldr	r0, [r4, #0]
 800306e:	f7ff ffa9 	bl	8002fc4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003072:	6822      	ldr	r2, [r4, #0]
 8003074:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003076:	2177      	movs	r1, #119	@ 0x77
 8003078:	430b      	orrs	r3, r1
      htim->Instance->SMCR = tmpsmcr;
 800307a:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800307c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800307e:	233d      	movs	r3, #61	@ 0x3d
 8003080:	2201      	movs	r2, #1
 8003082:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(htim);
 8003084:	3b01      	subs	r3, #1
 8003086:	2200      	movs	r2, #0
 8003088:	54e2      	strb	r2, [r4, r3]
}
 800308a:	bd10      	pop	{r4, pc}
                        sClockSourceConfig->ClockPrescaler,
 800308c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800308e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003090:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003092:	6820      	ldr	r0, [r4, #0]
 8003094:	f7ff ff96 	bl	8002fc4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003098:	6822      	ldr	r2, [r4, #0]
 800309a:	6891      	ldr	r1, [r2, #8]
 800309c:	2380      	movs	r3, #128	@ 0x80
 800309e:	01db      	lsls	r3, r3, #7
 80030a0:	430b      	orrs	r3, r1
 80030a2:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80030a4:	2000      	movs	r0, #0
      break;
 80030a6:	e7ea      	b.n	800307e <HAL_TIM_ConfigClockSource+0xa2>
                               sClockSourceConfig->ClockPolarity,
 80030a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80030aa:	68da      	ldr	r2, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80030ac:	6820      	ldr	r0, [r4, #0]
 80030ae:	f7ff fcfd 	bl	8002aac <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80030b2:	6820      	ldr	r0, [r4, #0]
 80030b4:	2160      	movs	r1, #96	@ 0x60
 80030b6:	f7ff fd0d 	bl	8002ad4 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80030ba:	2000      	movs	r0, #0
      break;
 80030bc:	e7df      	b.n	800307e <HAL_TIM_ConfigClockSource+0xa2>
                               sClockSourceConfig->ClockPolarity,
 80030be:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80030c0:	68da      	ldr	r2, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030c2:	6820      	ldr	r0, [r4, #0]
 80030c4:	f7ff fce0 	bl	8002a88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80030c8:	6820      	ldr	r0, [r4, #0]
 80030ca:	2140      	movs	r1, #64	@ 0x40
 80030cc:	f7ff fd02 	bl	8002ad4 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80030d0:	2000      	movs	r0, #0
      break;
 80030d2:	e7d4      	b.n	800307e <HAL_TIM_ConfigClockSource+0xa2>
  switch (sClockSourceConfig->ClockSource)
 80030d4:	2000      	movs	r0, #0
 80030d6:	e7d2      	b.n	800307e <HAL_TIM_ConfigClockSource+0xa2>
      status = HAL_ERROR;
 80030d8:	2001      	movs	r0, #1
 80030da:	e7d0      	b.n	800307e <HAL_TIM_ConfigClockSource+0xa2>
  __HAL_LOCK(htim);
 80030dc:	2002      	movs	r0, #2
 80030de:	e7d4      	b.n	800308a <HAL_TIM_ConfigClockSource+0xae>
 80030e0:	ffce0088 	.word	0xffce0088

080030e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80030e4:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80030e6:	231f      	movs	r3, #31
 80030e8:	4019      	ands	r1, r3
 80030ea:	2401      	movs	r4, #1
 80030ec:	408c      	lsls	r4, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80030ee:	6a03      	ldr	r3, [r0, #32]
 80030f0:	43a3      	bics	r3, r4
 80030f2:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80030f4:	6a03      	ldr	r3, [r0, #32]
 80030f6:	408a      	lsls	r2, r1
 80030f8:	4313      	orrs	r3, r2
 80030fa:	6203      	str	r3, [r0, #32]
}
 80030fc:	bd10      	pop	{r4, pc}
	...

08003100 <HAL_TIM_PWM_Start>:
{
 8003100:	b510      	push	{r4, lr}
 8003102:	0004      	movs	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003104:	2910      	cmp	r1, #16
 8003106:	d82d      	bhi.n	8003164 <HAL_TIM_PWM_Start+0x64>
 8003108:	008b      	lsls	r3, r1, #2
 800310a:	4a3f      	ldr	r2, [pc, #252]	@ (8003208 <HAL_TIM_PWM_Start+0x108>)
 800310c:	58d3      	ldr	r3, [r2, r3]
 800310e:	469f      	mov	pc, r3
 8003110:	233e      	movs	r3, #62	@ 0x3e
 8003112:	5cc3      	ldrb	r3, [r0, r3]
 8003114:	3b01      	subs	r3, #1
 8003116:	1e5a      	subs	r2, r3, #1
 8003118:	4193      	sbcs	r3, r2
 800311a:	b2db      	uxtb	r3, r3
 800311c:	2b00      	cmp	r3, #0
 800311e:	d16d      	bne.n	80031fc <HAL_TIM_PWM_Start+0xfc>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003120:	2910      	cmp	r1, #16
 8003122:	d859      	bhi.n	80031d8 <HAL_TIM_PWM_Start+0xd8>
 8003124:	008b      	lsls	r3, r1, #2
 8003126:	4a39      	ldr	r2, [pc, #228]	@ (800320c <HAL_TIM_PWM_Start+0x10c>)
 8003128:	58d3      	ldr	r3, [r2, r3]
 800312a:	469f      	mov	pc, r3
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800312c:	233f      	movs	r3, #63	@ 0x3f
 800312e:	5cc3      	ldrb	r3, [r0, r3]
 8003130:	3b01      	subs	r3, #1
 8003132:	1e5a      	subs	r2, r3, #1
 8003134:	4193      	sbcs	r3, r2
 8003136:	b2db      	uxtb	r3, r3
 8003138:	e7f0      	b.n	800311c <HAL_TIM_PWM_Start+0x1c>
 800313a:	2340      	movs	r3, #64	@ 0x40
 800313c:	5cc3      	ldrb	r3, [r0, r3]
 800313e:	3b01      	subs	r3, #1
 8003140:	1e5a      	subs	r2, r3, #1
 8003142:	4193      	sbcs	r3, r2
 8003144:	b2db      	uxtb	r3, r3
 8003146:	e7e9      	b.n	800311c <HAL_TIM_PWM_Start+0x1c>
 8003148:	2341      	movs	r3, #65	@ 0x41
 800314a:	5cc3      	ldrb	r3, [r0, r3]
 800314c:	3b01      	subs	r3, #1
 800314e:	1e5a      	subs	r2, r3, #1
 8003150:	4193      	sbcs	r3, r2
 8003152:	b2db      	uxtb	r3, r3
 8003154:	e7e2      	b.n	800311c <HAL_TIM_PWM_Start+0x1c>
 8003156:	2342      	movs	r3, #66	@ 0x42
 8003158:	5cc3      	ldrb	r3, [r0, r3]
 800315a:	3b01      	subs	r3, #1
 800315c:	1e5a      	subs	r2, r3, #1
 800315e:	4193      	sbcs	r3, r2
 8003160:	b2db      	uxtb	r3, r3
 8003162:	e7db      	b.n	800311c <HAL_TIM_PWM_Start+0x1c>
 8003164:	2343      	movs	r3, #67	@ 0x43
 8003166:	5ce3      	ldrb	r3, [r4, r3]
 8003168:	3b01      	subs	r3, #1
 800316a:	1e5a      	subs	r2, r3, #1
 800316c:	4193      	sbcs	r3, r2
 800316e:	b2db      	uxtb	r3, r3
 8003170:	e7d4      	b.n	800311c <HAL_TIM_PWM_Start+0x1c>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003172:	233e      	movs	r3, #62	@ 0x3e
 8003174:	2202      	movs	r2, #2
 8003176:	54e2      	strb	r2, [r4, r3]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003178:	6820      	ldr	r0, [r4, #0]
 800317a:	2201      	movs	r2, #1
 800317c:	f7ff ffb2 	bl	80030e4 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003180:	6823      	ldr	r3, [r4, #0]
 8003182:	4a23      	ldr	r2, [pc, #140]	@ (8003210 <HAL_TIM_PWM_Start+0x110>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d005      	beq.n	8003194 <HAL_TIM_PWM_Start+0x94>
 8003188:	4a22      	ldr	r2, [pc, #136]	@ (8003214 <HAL_TIM_PWM_Start+0x114>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d002      	beq.n	8003194 <HAL_TIM_PWM_Start+0x94>
 800318e:	4a22      	ldr	r2, [pc, #136]	@ (8003218 <HAL_TIM_PWM_Start+0x118>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d104      	bne.n	800319e <HAL_TIM_PWM_Start+0x9e>
    __HAL_TIM_MOE_ENABLE(htim);
 8003194:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8003196:	2280      	movs	r2, #128	@ 0x80
 8003198:	0212      	lsls	r2, r2, #8
 800319a:	430a      	orrs	r2, r1
 800319c:	645a      	str	r2, [r3, #68]	@ 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800319e:	6823      	ldr	r3, [r4, #0]
 80031a0:	4a1b      	ldr	r2, [pc, #108]	@ (8003210 <HAL_TIM_PWM_Start+0x110>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d01c      	beq.n	80031e0 <HAL_TIM_PWM_Start+0xe0>
 80031a6:	4a1d      	ldr	r2, [pc, #116]	@ (800321c <HAL_TIM_PWM_Start+0x11c>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d019      	beq.n	80031e0 <HAL_TIM_PWM_Start+0xe0>
    __HAL_TIM_ENABLE(htim);
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	2101      	movs	r1, #1
 80031b0:	430a      	orrs	r2, r1
 80031b2:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80031b4:	2000      	movs	r0, #0
 80031b6:	e022      	b.n	80031fe <HAL_TIM_PWM_Start+0xfe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80031b8:	233f      	movs	r3, #63	@ 0x3f
 80031ba:	2202      	movs	r2, #2
 80031bc:	54e2      	strb	r2, [r4, r3]
 80031be:	e7db      	b.n	8003178 <HAL_TIM_PWM_Start+0x78>
 80031c0:	2340      	movs	r3, #64	@ 0x40
 80031c2:	2202      	movs	r2, #2
 80031c4:	54e2      	strb	r2, [r4, r3]
 80031c6:	e7d7      	b.n	8003178 <HAL_TIM_PWM_Start+0x78>
 80031c8:	2341      	movs	r3, #65	@ 0x41
 80031ca:	2202      	movs	r2, #2
 80031cc:	54e2      	strb	r2, [r4, r3]
 80031ce:	e7d3      	b.n	8003178 <HAL_TIM_PWM_Start+0x78>
 80031d0:	2342      	movs	r3, #66	@ 0x42
 80031d2:	2202      	movs	r2, #2
 80031d4:	54e2      	strb	r2, [r4, r3]
 80031d6:	e7cf      	b.n	8003178 <HAL_TIM_PWM_Start+0x78>
 80031d8:	2343      	movs	r3, #67	@ 0x43
 80031da:	2202      	movs	r2, #2
 80031dc:	54e2      	strb	r2, [r4, r3]
 80031de:	e7cb      	b.n	8003178 <HAL_TIM_PWM_Start+0x78>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031e0:	689a      	ldr	r2, [r3, #8]
 80031e2:	490f      	ldr	r1, [pc, #60]	@ (8003220 <HAL_TIM_PWM_Start+0x120>)
 80031e4:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031e6:	2a06      	cmp	r2, #6
 80031e8:	d00a      	beq.n	8003200 <HAL_TIM_PWM_Start+0x100>
 80031ea:	3907      	subs	r1, #7
 80031ec:	428a      	cmp	r2, r1
 80031ee:	d009      	beq.n	8003204 <HAL_TIM_PWM_Start+0x104>
      __HAL_TIM_ENABLE(htim);
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	2101      	movs	r1, #1
 80031f4:	430a      	orrs	r2, r1
 80031f6:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80031f8:	2000      	movs	r0, #0
 80031fa:	e000      	b.n	80031fe <HAL_TIM_PWM_Start+0xfe>
    return HAL_ERROR;
 80031fc:	2001      	movs	r0, #1
}
 80031fe:	bd10      	pop	{r4, pc}
  return HAL_OK;
 8003200:	2000      	movs	r0, #0
 8003202:	e7fc      	b.n	80031fe <HAL_TIM_PWM_Start+0xfe>
 8003204:	2000      	movs	r0, #0
 8003206:	e7fa      	b.n	80031fe <HAL_TIM_PWM_Start+0xfe>
 8003208:	08004a7c 	.word	0x08004a7c
 800320c:	08004ac0 	.word	0x08004ac0
 8003210:	40012c00 	.word	0x40012c00
 8003214:	40014400 	.word	0x40014400
 8003218:	40014800 	.word	0x40014800
 800321c:	40000400 	.word	0x40000400
 8003220:	00010007 	.word	0x00010007

08003224 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003224:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003226:	233c      	movs	r3, #60	@ 0x3c
 8003228:	5cc3      	ldrb	r3, [r0, r3]
 800322a:	2b01      	cmp	r3, #1
 800322c:	d029      	beq.n	8003282 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 800322e:	233c      	movs	r3, #60	@ 0x3c
 8003230:	2201      	movs	r2, #1
 8003232:	54c2      	strb	r2, [r0, r3]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003234:	3301      	adds	r3, #1
 8003236:	3201      	adds	r2, #1
 8003238:	54c2      	strb	r2, [r0, r3]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800323a:	6802      	ldr	r2, [r0, #0]
 800323c:	6853      	ldr	r3, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800323e:	6895      	ldr	r5, [r2, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003240:	4c11      	ldr	r4, [pc, #68]	@ (8003288 <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 8003242:	42a2      	cmp	r2, r4
 8003244:	d018      	beq.n	8003278 <HAL_TIMEx_MasterConfigSynchronization+0x54>
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003246:	2470      	movs	r4, #112	@ 0x70
 8003248:	43a3      	bics	r3, r4
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800324a:	680c      	ldr	r4, [r1, #0]
 800324c:	4323      	orrs	r3, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800324e:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003250:	6803      	ldr	r3, [r0, #0]
 8003252:	4a0d      	ldr	r2, [pc, #52]	@ (8003288 <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d002      	beq.n	800325e <HAL_TIMEx_MasterConfigSynchronization+0x3a>
 8003258:	4a0c      	ldr	r2, [pc, #48]	@ (800328c <HAL_TIMEx_MasterConfigSynchronization+0x68>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d104      	bne.n	8003268 <HAL_TIMEx_MasterConfigSynchronization+0x44>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800325e:	2280      	movs	r2, #128	@ 0x80
 8003260:	4395      	bics	r5, r2
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003262:	688a      	ldr	r2, [r1, #8]
 8003264:	432a      	orrs	r2, r5

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003266:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003268:	233d      	movs	r3, #61	@ 0x3d
 800326a:	2201      	movs	r2, #1
 800326c:	54c2      	strb	r2, [r0, r3]

  __HAL_UNLOCK(htim);
 800326e:	3b01      	subs	r3, #1
 8003270:	2200      	movs	r2, #0
 8003272:	54c2      	strb	r2, [r0, r3]

  return HAL_OK;
 8003274:	2000      	movs	r0, #0
}
 8003276:	bd30      	pop	{r4, r5, pc}
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003278:	4c05      	ldr	r4, [pc, #20]	@ (8003290 <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
 800327a:	4023      	ands	r3, r4
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800327c:	684c      	ldr	r4, [r1, #4]
 800327e:	4323      	orrs	r3, r4
 8003280:	e7e1      	b.n	8003246 <HAL_TIMEx_MasterConfigSynchronization+0x22>
  __HAL_LOCK(htim);
 8003282:	2002      	movs	r0, #2
 8003284:	e7f7      	b.n	8003276 <HAL_TIMEx_MasterConfigSynchronization+0x52>
 8003286:	46c0      	nop			@ (mov r8, r8)
 8003288:	40012c00 	.word	0x40012c00
 800328c:	40000400 	.word	0x40000400
 8003290:	ff0fffff 	.word	0xff0fffff

08003294 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003294:	b510      	push	{r4, lr}
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003296:	233c      	movs	r3, #60	@ 0x3c
 8003298:	5cc3      	ldrb	r3, [r0, r3]
 800329a:	2b01      	cmp	r3, #1
 800329c:	d040      	beq.n	8003320 <HAL_TIMEx_ConfigBreakDeadTime+0x8c>
 800329e:	233c      	movs	r3, #60	@ 0x3c
 80032a0:	2201      	movs	r2, #1
 80032a2:	54c2      	strb	r2, [r0, r3]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80032a4:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80032a6:	4a1f      	ldr	r2, [pc, #124]	@ (8003324 <HAL_TIMEx_ConfigBreakDeadTime+0x90>)
 80032a8:	4013      	ands	r3, r2
 80032aa:	688a      	ldr	r2, [r1, #8]
 80032ac:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80032ae:	4a1e      	ldr	r2, [pc, #120]	@ (8003328 <HAL_TIMEx_ConfigBreakDeadTime+0x94>)
 80032b0:	4013      	ands	r3, r2
 80032b2:	684a      	ldr	r2, [r1, #4]
 80032b4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80032b6:	4a1d      	ldr	r2, [pc, #116]	@ (800332c <HAL_TIMEx_ConfigBreakDeadTime+0x98>)
 80032b8:	4013      	ands	r3, r2
 80032ba:	680a      	ldr	r2, [r1, #0]
 80032bc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80032be:	4a1c      	ldr	r2, [pc, #112]	@ (8003330 <HAL_TIMEx_ConfigBreakDeadTime+0x9c>)
 80032c0:	4013      	ands	r3, r2
 80032c2:	690a      	ldr	r2, [r1, #16]
 80032c4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80032c6:	4a1b      	ldr	r2, [pc, #108]	@ (8003334 <HAL_TIMEx_ConfigBreakDeadTime+0xa0>)
 80032c8:	4013      	ands	r3, r2
 80032ca:	694a      	ldr	r2, [r1, #20]
 80032cc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80032ce:	4a1a      	ldr	r2, [pc, #104]	@ (8003338 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 80032d0:	4013      	ands	r3, r2
 80032d2:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 80032d4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80032d6:	4a19      	ldr	r2, [pc, #100]	@ (800333c <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 80032d8:	4013      	ands	r3, r2
 80032da:	698a      	ldr	r2, [r1, #24]
 80032dc:	0412      	lsls	r2, r2, #16
 80032de:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80032e0:	4a17      	ldr	r2, [pc, #92]	@ (8003340 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 80032e2:	4013      	ands	r3, r2
 80032e4:	69ca      	ldr	r2, [r1, #28]
 80032e6:	4313      	orrs	r3, r2

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80032e8:	6802      	ldr	r2, [r0, #0]
 80032ea:	4c16      	ldr	r4, [pc, #88]	@ (8003344 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 80032ec:	42a2      	cmp	r2, r4
 80032ee:	d005      	beq.n	80032fc <HAL_TIMEx_ConfigBreakDeadTime+0x68>
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80032f0:	6453      	str	r3, [r2, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80032f2:	233c      	movs	r3, #60	@ 0x3c
 80032f4:	2200      	movs	r2, #0
 80032f6:	54c2      	strb	r2, [r0, r3]

  return HAL_OK;
 80032f8:	2000      	movs	r0, #0
}
 80032fa:	bd10      	pop	{r4, pc}
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80032fc:	4c12      	ldr	r4, [pc, #72]	@ (8003348 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 80032fe:	4023      	ands	r3, r4
 8003300:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 8003302:	0524      	lsls	r4, r4, #20
 8003304:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003306:	4c11      	ldr	r4, [pc, #68]	@ (800334c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8003308:	4023      	ands	r3, r4
 800330a:	6a0c      	ldr	r4, [r1, #32]
 800330c:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800330e:	4c10      	ldr	r4, [pc, #64]	@ (8003350 <HAL_TIMEx_ConfigBreakDeadTime+0xbc>)
 8003310:	4023      	ands	r3, r4
 8003312:	6a4c      	ldr	r4, [r1, #36]	@ 0x24
 8003314:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8003316:	4c0f      	ldr	r4, [pc, #60]	@ (8003354 <HAL_TIMEx_ConfigBreakDeadTime+0xc0>)
 8003318:	4023      	ands	r3, r4
 800331a:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
 800331c:	430b      	orrs	r3, r1
 800331e:	e7e7      	b.n	80032f0 <HAL_TIMEx_ConfigBreakDeadTime+0x5c>
  __HAL_LOCK(htim);
 8003320:	2002      	movs	r0, #2
 8003322:	e7ea      	b.n	80032fa <HAL_TIMEx_ConfigBreakDeadTime+0x66>
 8003324:	fffffcff 	.word	0xfffffcff
 8003328:	fffffbff 	.word	0xfffffbff
 800332c:	fffff7ff 	.word	0xfffff7ff
 8003330:	ffffefff 	.word	0xffffefff
 8003334:	ffffdfff 	.word	0xffffdfff
 8003338:	ffffbfff 	.word	0xffffbfff
 800333c:	fff0ffff 	.word	0xfff0ffff
 8003340:	efffffff 	.word	0xefffffff
 8003344:	40012c00 	.word	0x40012c00
 8003348:	ff0fffff 	.word	0xff0fffff
 800334c:	feffffff 	.word	0xfeffffff
 8003350:	fdffffff 	.word	0xfdffffff
 8003354:	dfffffff 	.word	0xdfffffff

08003358 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003358:	4770      	bx	lr

0800335a <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800335a:	4770      	bx	lr

0800335c <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800335c:	4770      	bx	lr
	...

08003360 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003360:	b530      	push	{r4, r5, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003362:	f3ef 8410 	mrs	r4, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003366:	2201      	movs	r2, #1
 8003368:	f382 8810 	msr	PRIMASK, r2
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800336c:	6801      	ldr	r1, [r0, #0]
 800336e:	680b      	ldr	r3, [r1, #0]
 8003370:	25c0      	movs	r5, #192	@ 0xc0
 8003372:	43ab      	bics	r3, r5
 8003374:	600b      	str	r3, [r1, #0]
 8003376:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800337a:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800337e:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8003382:	6802      	ldr	r2, [r0, #0]
 8003384:	6893      	ldr	r3, [r2, #8]
 8003386:	4c04      	ldr	r4, [pc, #16]	@ (8003398 <UART_EndTxTransfer+0x38>)
 8003388:	4023      	ands	r3, r4
 800338a:	6093      	str	r3, [r2, #8]
 800338c:	f381 8810 	msr	PRIMASK, r1

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003390:	2388      	movs	r3, #136	@ 0x88
 8003392:	2220      	movs	r2, #32
 8003394:	50c2      	str	r2, [r0, r3]
}
 8003396:	bd30      	pop	{r4, r5, pc}
 8003398:	ff7fffff 	.word	0xff7fffff

0800339c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800339c:	b530      	push	{r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800339e:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033a2:	2201      	movs	r2, #1
 80033a4:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80033a8:	6801      	ldr	r1, [r0, #0]
 80033aa:	680b      	ldr	r3, [r1, #0]
 80033ac:	4d12      	ldr	r5, [pc, #72]	@ (80033f8 <UART_EndRxTransfer+0x5c>)
 80033ae:	402b      	ands	r3, r5
 80033b0:	600b      	str	r3, [r1, #0]
 80033b2:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80033b6:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033ba:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80033be:	6802      	ldr	r2, [r0, #0]
 80033c0:	6893      	ldr	r3, [r2, #8]
 80033c2:	4c0e      	ldr	r4, [pc, #56]	@ (80033fc <UART_EndRxTransfer+0x60>)
 80033c4:	4023      	ands	r3, r4
 80033c6:	6093      	str	r3, [r2, #8]
 80033c8:	f381 8810 	msr	PRIMASK, r1

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033cc:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d006      	beq.n	80033e0 <UART_EndRxTransfer+0x44>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80033d2:	238c      	movs	r3, #140	@ 0x8c
 80033d4:	2220      	movs	r2, #32
 80033d6:	50c2      	str	r2, [r0, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033d8:	2300      	movs	r3, #0
 80033da:	66c3      	str	r3, [r0, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80033dc:	6743      	str	r3, [r0, #116]	@ 0x74
}
 80033de:	bd30      	pop	{r4, r5, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80033e0:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033e4:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033e8:	6802      	ldr	r2, [r0, #0]
 80033ea:	6813      	ldr	r3, [r2, #0]
 80033ec:	2410      	movs	r4, #16
 80033ee:	43a3      	bics	r3, r4
 80033f0:	6013      	str	r3, [r2, #0]
 80033f2:	f381 8810 	msr	PRIMASK, r1
}
 80033f6:	e7ec      	b.n	80033d2 <UART_EndRxTransfer+0x36>
 80033f8:	fffffedf 	.word	0xfffffedf
 80033fc:	effffffe 	.word	0xeffffffe

08003400 <HAL_UART_RxCpltCallback>:
}
 8003400:	4770      	bx	lr

08003402 <HAL_UART_RxHalfCpltCallback>:
}
 8003402:	4770      	bx	lr

08003404 <HAL_UART_ErrorCallback>:
}
 8003404:	4770      	bx	lr

08003406 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003406:	b570      	push	{r4, r5, r6, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003408:	6a84      	ldr	r4, [r0, #40]	@ 0x28

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800340a:	2388      	movs	r3, #136	@ 0x88
 800340c:	58e2      	ldr	r2, [r4, r3]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800340e:	3304      	adds	r3, #4
 8003410:	58e5      	ldr	r5, [r4, r3]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003412:	6823      	ldr	r3, [r4, #0]
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	061b      	lsls	r3, r3, #24
 8003418:	d501      	bpl.n	800341e <UART_DMAError+0x18>
 800341a:	2a21      	cmp	r2, #33	@ 0x21
 800341c:	d00e      	beq.n	800343c <UART_DMAError+0x36>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800341e:	6823      	ldr	r3, [r4, #0]
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	065b      	lsls	r3, r3, #25
 8003424:	d501      	bpl.n	800342a <UART_DMAError+0x24>
 8003426:	2d22      	cmp	r5, #34	@ 0x22
 8003428:	d00f      	beq.n	800344a <UART_DMAError+0x44>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800342a:	2290      	movs	r2, #144	@ 0x90
 800342c:	58a3      	ldr	r3, [r4, r2]
 800342e:	2110      	movs	r1, #16
 8003430:	430b      	orrs	r3, r1
 8003432:	50a3      	str	r3, [r4, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003434:	0020      	movs	r0, r4
 8003436:	f7ff ffe5 	bl	8003404 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800343a:	bd70      	pop	{r4, r5, r6, pc}
    huart->TxXferCount = 0U;
 800343c:	2356      	movs	r3, #86	@ 0x56
 800343e:	2200      	movs	r2, #0
 8003440:	52e2      	strh	r2, [r4, r3]
    UART_EndTxTransfer(huart);
 8003442:	0020      	movs	r0, r4
 8003444:	f7ff ff8c 	bl	8003360 <UART_EndTxTransfer>
 8003448:	e7e9      	b.n	800341e <UART_DMAError+0x18>
    huart->RxXferCount = 0U;
 800344a:	235e      	movs	r3, #94	@ 0x5e
 800344c:	2200      	movs	r2, #0
 800344e:	52e2      	strh	r2, [r4, r3]
    UART_EndRxTransfer(huart);
 8003450:	0020      	movs	r0, r4
 8003452:	f7ff ffa3 	bl	800339c <UART_EndRxTransfer>
 8003456:	e7e8      	b.n	800342a <UART_DMAError+0x24>

08003458 <HAL_UARTEx_RxEventCallback>:
}
 8003458:	4770      	bx	lr

0800345a <UART_DMARxHalfCplt>:
{
 800345a:	b510      	push	{r4, lr}
 800345c:	0003      	movs	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800345e:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8003460:	2201      	movs	r2, #1
 8003462:	6702      	str	r2, [r0, #112]	@ 0x70
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003464:	6ec2      	ldr	r2, [r0, #108]	@ 0x6c
 8003466:	2a01      	cmp	r2, #1
 8003468:	d111      	bne.n	800348e <UART_DMARxHalfCplt+0x34>
    huart->RxXferCount = huart->RxXferSize / 2U;
 800346a:	325b      	adds	r2, #91	@ 0x5b
 800346c:	5a81      	ldrh	r1, [r0, r2]
 800346e:	084c      	lsrs	r4, r1, #1
 8003470:	3202      	adds	r2, #2
 8003472:	5284      	strh	r4, [r0, r2]
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	b29b      	uxth	r3, r3
    if (nb_remaining_rx_data <= huart->RxXferSize)
 800347a:	4299      	cmp	r1, r3
 800347c:	d300      	bcc.n	8003480 <UART_DMARxHalfCplt+0x26>
      huart->RxXferCount = nb_remaining_rx_data;
 800347e:	5283      	strh	r3, [r0, r2]
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003480:	235e      	movs	r3, #94	@ 0x5e
 8003482:	5ac3      	ldrh	r3, [r0, r3]
 8003484:	1ac9      	subs	r1, r1, r3
 8003486:	b289      	uxth	r1, r1
 8003488:	f7ff ffe6 	bl	8003458 <HAL_UARTEx_RxEventCallback>
}
 800348c:	bd10      	pop	{r4, pc}
    HAL_UART_RxHalfCpltCallback(huart);
 800348e:	f7ff ffb8 	bl	8003402 <HAL_UART_RxHalfCpltCallback>
}
 8003492:	e7fb      	b.n	800348c <UART_DMARxHalfCplt+0x32>

08003494 <UART_DMAReceiveCplt>:
{
 8003494:	b570      	push	{r4, r5, r6, lr}
 8003496:	0003      	movs	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003498:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	6812      	ldr	r2, [r2, #0]
 800349e:	0692      	lsls	r2, r2, #26
 80034a0:	d429      	bmi.n	80034f6 <UART_DMAReceiveCplt+0x62>
    huart->RxXferCount = 0U;
 80034a2:	225e      	movs	r2, #94	@ 0x5e
 80034a4:	2100      	movs	r1, #0
 80034a6:	5281      	strh	r1, [r0, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80034a8:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034ac:	3a5d      	subs	r2, #93	@ 0x5d
 80034ae:	f382 8810 	msr	PRIMASK, r2
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80034b2:	6804      	ldr	r4, [r0, #0]
 80034b4:	6821      	ldr	r1, [r4, #0]
 80034b6:	4e23      	ldr	r6, [pc, #140]	@ (8003544 <UART_DMAReceiveCplt+0xb0>)
 80034b8:	4031      	ands	r1, r6
 80034ba:	6021      	str	r1, [r4, #0]
 80034bc:	f385 8810 	msr	PRIMASK, r5
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80034c0:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034c4:	f382 8810 	msr	PRIMASK, r2
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034c8:	6804      	ldr	r4, [r0, #0]
 80034ca:	68a1      	ldr	r1, [r4, #8]
 80034cc:	4391      	bics	r1, r2
 80034ce:	60a1      	str	r1, [r4, #8]
 80034d0:	f385 8810 	msr	PRIMASK, r5
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80034d4:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034d8:	f382 8810 	msr	PRIMASK, r2
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034dc:	6801      	ldr	r1, [r0, #0]
 80034de:	688a      	ldr	r2, [r1, #8]
 80034e0:	2540      	movs	r5, #64	@ 0x40
 80034e2:	43aa      	bics	r2, r5
 80034e4:	608a      	str	r2, [r1, #8]
 80034e6:	f384 8810 	msr	PRIMASK, r4
    huart->RxState = HAL_UART_STATE_READY;
 80034ea:	228c      	movs	r2, #140	@ 0x8c
 80034ec:	2120      	movs	r1, #32
 80034ee:	5081      	str	r1, [r0, r2]
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034f0:	6ec2      	ldr	r2, [r0, #108]	@ 0x6c
 80034f2:	2a01      	cmp	r2, #1
 80034f4:	d017      	beq.n	8003526 <UART_DMAReceiveCplt+0x92>
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80034f6:	2200      	movs	r2, #0
 80034f8:	6702      	str	r2, [r0, #112]	@ 0x70
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034fa:	6ec2      	ldr	r2, [r0, #108]	@ 0x6c
 80034fc:	2a01      	cmp	r2, #1
 80034fe:	d11e      	bne.n	800353e <UART_DMAReceiveCplt+0xaa>
    huart->RxXferCount = 0;
 8003500:	325d      	adds	r2, #93	@ 0x5d
 8003502:	2100      	movs	r1, #0
 8003504:	5281      	strh	r1, [r0, r2]
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	b29b      	uxth	r3, r3
    if (nb_remaining_rx_data < huart->RxXferSize)
 800350c:	3a02      	subs	r2, #2
 800350e:	5a81      	ldrh	r1, [r0, r2]
 8003510:	4299      	cmp	r1, r3
 8003512:	d901      	bls.n	8003518 <UART_DMAReceiveCplt+0x84>
      huart->RxXferCount = nb_remaining_rx_data;
 8003514:	3202      	adds	r2, #2
 8003516:	5283      	strh	r3, [r0, r2]
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003518:	235e      	movs	r3, #94	@ 0x5e
 800351a:	5ac3      	ldrh	r3, [r0, r3]
 800351c:	1ac9      	subs	r1, r1, r3
 800351e:	b289      	uxth	r1, r1
 8003520:	f7ff ff9a 	bl	8003458 <HAL_UARTEx_RxEventCallback>
}
 8003524:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003526:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800352a:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800352e:	6801      	ldr	r1, [r0, #0]
 8003530:	680a      	ldr	r2, [r1, #0]
 8003532:	3d30      	subs	r5, #48	@ 0x30
 8003534:	43aa      	bics	r2, r5
 8003536:	600a      	str	r2, [r1, #0]
 8003538:	f384 8810 	msr	PRIMASK, r4
}
 800353c:	e7db      	b.n	80034f6 <UART_DMAReceiveCplt+0x62>
    HAL_UART_RxCpltCallback(huart);
 800353e:	f7ff ff5f 	bl	8003400 <HAL_UART_RxCpltCallback>
}
 8003542:	e7ef      	b.n	8003524 <UART_DMAReceiveCplt+0x90>
 8003544:	fffffeff 	.word	0xfffffeff

08003548 <UART_SetConfig>:
{
 8003548:	b510      	push	{r4, lr}
 800354a:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800354c:	6883      	ldr	r3, [r0, #8]
 800354e:	6902      	ldr	r2, [r0, #16]
 8003550:	4313      	orrs	r3, r2
 8003552:	6942      	ldr	r2, [r0, #20]
 8003554:	4313      	orrs	r3, r2
 8003556:	69c2      	ldr	r2, [r0, #28]
 8003558:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800355a:	6801      	ldr	r1, [r0, #0]
 800355c:	680a      	ldr	r2, [r1, #0]
 800355e:	4862      	ldr	r0, [pc, #392]	@ (80036e8 <UART_SetConfig+0x1a0>)
 8003560:	4002      	ands	r2, r0
 8003562:	4313      	orrs	r3, r2
 8003564:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003566:	6822      	ldr	r2, [r4, #0]
 8003568:	6853      	ldr	r3, [r2, #4]
 800356a:	4960      	ldr	r1, [pc, #384]	@ (80036ec <UART_SetConfig+0x1a4>)
 800356c:	400b      	ands	r3, r1
 800356e:	68e1      	ldr	r1, [r4, #12]
 8003570:	430b      	orrs	r3, r1
 8003572:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003574:	69a3      	ldr	r3, [r4, #24]
  tmpreg |= huart->Init.OneBitSampling;
 8003576:	6a22      	ldr	r2, [r4, #32]
 8003578:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800357a:	6821      	ldr	r1, [r4, #0]
 800357c:	688b      	ldr	r3, [r1, #8]
 800357e:	485c      	ldr	r0, [pc, #368]	@ (80036f0 <UART_SetConfig+0x1a8>)
 8003580:	4003      	ands	r3, r0
 8003582:	4313      	orrs	r3, r2
 8003584:	608b      	str	r3, [r1, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003586:	6822      	ldr	r2, [r4, #0]
 8003588:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800358a:	210f      	movs	r1, #15
 800358c:	438b      	bics	r3, r1
 800358e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8003590:	430b      	orrs	r3, r1
 8003592:	62d3      	str	r3, [r2, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003594:	6823      	ldr	r3, [r4, #0]
 8003596:	4a57      	ldr	r2, [pc, #348]	@ (80036f4 <UART_SetConfig+0x1ac>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d030      	beq.n	80035fe <UART_SetConfig+0xb6>
 800359c:	4a56      	ldr	r2, [pc, #344]	@ (80036f8 <UART_SetConfig+0x1b0>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d03e      	beq.n	8003620 <UART_SetConfig+0xd8>
 80035a2:	2310      	movs	r3, #16
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035a4:	69e0      	ldr	r0, [r4, #28]
 80035a6:	2280      	movs	r2, #128	@ 0x80
 80035a8:	0212      	lsls	r2, r2, #8
 80035aa:	4290      	cmp	r0, r2
 80035ac:	d042      	beq.n	8003634 <UART_SetConfig+0xec>
    switch (clocksource)
 80035ae:	2b04      	cmp	r3, #4
 80035b0:	d100      	bne.n	80035b4 <UART_SetConfig+0x6c>
 80035b2:	e089      	b.n	80036c8 <UART_SetConfig+0x180>
 80035b4:	d87b      	bhi.n	80036ae <UART_SetConfig+0x166>
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d100      	bne.n	80035bc <UART_SetConfig+0x74>
 80035ba:	e07f      	b.n	80036bc <UART_SetConfig+0x174>
 80035bc:	2b02      	cmp	r3, #2
 80035be:	d174      	bne.n	80036aa <UART_SetConfig+0x162>
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 80035c0:	4b4e      	ldr	r3, [pc, #312]	@ (80036fc <UART_SetConfig+0x1b4>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	095b      	lsrs	r3, r3, #5
 80035c6:	2107      	movs	r1, #7
 80035c8:	4019      	ands	r1, r3
 80035ca:	3101      	adds	r1, #1
 80035cc:	484c      	ldr	r0, [pc, #304]	@ (8003700 <UART_SetConfig+0x1b8>)
 80035ce:	f7fc fdaf 	bl	8000130 <__udivsi3>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80035d2:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80035d4:	4b4b      	ldr	r3, [pc, #300]	@ (8003704 <UART_SetConfig+0x1bc>)
 80035d6:	0052      	lsls	r2, r2, #1
 80035d8:	5ad1      	ldrh	r1, [r2, r3]
 80035da:	f7fc fda9 	bl	8000130 <__udivsi3>
 80035de:	6861      	ldr	r1, [r4, #4]
 80035e0:	084b      	lsrs	r3, r1, #1
 80035e2:	18c0      	adds	r0, r0, r3
 80035e4:	f7fc fda4 	bl	8000130 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035e8:	0002      	movs	r2, r0
 80035ea:	3a10      	subs	r2, #16
 80035ec:	4b46      	ldr	r3, [pc, #280]	@ (8003708 <UART_SetConfig+0x1c0>)
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d86f      	bhi.n	80036d2 <UART_SetConfig+0x18a>
        huart->Instance->BRR = (uint16_t)usartdiv;
 80035f2:	6823      	ldr	r3, [r4, #0]
 80035f4:	0400      	lsls	r0, r0, #16
 80035f6:	0c00      	lsrs	r0, r0, #16
 80035f8:	60d8      	str	r0, [r3, #12]
 80035fa:	2000      	movs	r0, #0
 80035fc:	e06a      	b.n	80036d4 <UART_SetConfig+0x18c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80035fe:	4b3f      	ldr	r3, [pc, #252]	@ (80036fc <UART_SetConfig+0x1b4>)
 8003600:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003602:	2303      	movs	r3, #3
 8003604:	4013      	ands	r3, r2
 8003606:	2b02      	cmp	r3, #2
 8003608:	d00c      	beq.n	8003624 <UART_SetConfig+0xdc>
 800360a:	d805      	bhi.n	8003618 <UART_SetConfig+0xd0>
 800360c:	2b00      	cmp	r3, #0
 800360e:	d00b      	beq.n	8003628 <UART_SetConfig+0xe0>
 8003610:	2b01      	cmp	r3, #1
 8003612:	d10b      	bne.n	800362c <UART_SetConfig+0xe4>
 8003614:	3303      	adds	r3, #3
 8003616:	e7c5      	b.n	80035a4 <UART_SetConfig+0x5c>
 8003618:	2b03      	cmp	r3, #3
 800361a:	d109      	bne.n	8003630 <UART_SetConfig+0xe8>
 800361c:	3305      	adds	r3, #5
 800361e:	e7c1      	b.n	80035a4 <UART_SetConfig+0x5c>
 8003620:	2300      	movs	r3, #0
 8003622:	e7bf      	b.n	80035a4 <UART_SetConfig+0x5c>
 8003624:	2302      	movs	r3, #2
 8003626:	e7bd      	b.n	80035a4 <UART_SetConfig+0x5c>
 8003628:	2300      	movs	r3, #0
 800362a:	e7bb      	b.n	80035a4 <UART_SetConfig+0x5c>
 800362c:	2310      	movs	r3, #16
 800362e:	e7b9      	b.n	80035a4 <UART_SetConfig+0x5c>
 8003630:	2310      	movs	r3, #16
 8003632:	e7b7      	b.n	80035a4 <UART_SetConfig+0x5c>
    switch (clocksource)
 8003634:	2b04      	cmp	r3, #4
 8003636:	d035      	beq.n	80036a4 <UART_SetConfig+0x15c>
 8003638:	d82a      	bhi.n	8003690 <UART_SetConfig+0x148>
 800363a:	2b00      	cmp	r3, #0
 800363c:	d02c      	beq.n	8003698 <UART_SetConfig+0x150>
 800363e:	2b02      	cmp	r3, #2
 8003640:	d124      	bne.n	800368c <UART_SetConfig+0x144>
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8003642:	4b2e      	ldr	r3, [pc, #184]	@ (80036fc <UART_SetConfig+0x1b4>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	095b      	lsrs	r3, r3, #5
 8003648:	2107      	movs	r1, #7
 800364a:	4019      	ands	r1, r3
 800364c:	3101      	adds	r1, #1
 800364e:	482c      	ldr	r0, [pc, #176]	@ (8003700 <UART_SetConfig+0x1b8>)
 8003650:	f7fc fd6e 	bl	8000130 <__udivsi3>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003654:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8003656:	4b2b      	ldr	r3, [pc, #172]	@ (8003704 <UART_SetConfig+0x1bc>)
 8003658:	0052      	lsls	r2, r2, #1
 800365a:	5ad1      	ldrh	r1, [r2, r3]
 800365c:	f7fc fd68 	bl	8000130 <__udivsi3>
 8003660:	0040      	lsls	r0, r0, #1
 8003662:	6861      	ldr	r1, [r4, #4]
 8003664:	084b      	lsrs	r3, r1, #1
 8003666:	18c0      	adds	r0, r0, r3
 8003668:	f7fc fd62 	bl	8000130 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800366c:	0002      	movs	r2, r0
 800366e:	3a10      	subs	r2, #16
 8003670:	4b25      	ldr	r3, [pc, #148]	@ (8003708 <UART_SetConfig+0x1c0>)
 8003672:	429a      	cmp	r2, r3
 8003674:	d82b      	bhi.n	80036ce <UART_SetConfig+0x186>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003676:	b282      	uxth	r2, r0
 8003678:	230f      	movs	r3, #15
 800367a:	439a      	bics	r2, r3
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800367c:	0840      	lsrs	r0, r0, #1
 800367e:	3b08      	subs	r3, #8
 8003680:	4003      	ands	r3, r0
 8003682:	4313      	orrs	r3, r2
        huart->Instance->BRR = brrtemp;
 8003684:	6822      	ldr	r2, [r4, #0]
 8003686:	60d3      	str	r3, [r2, #12]
 8003688:	2000      	movs	r0, #0
 800368a:	e023      	b.n	80036d4 <UART_SetConfig+0x18c>
    switch (clocksource)
 800368c:	2001      	movs	r0, #1
 800368e:	e021      	b.n	80036d4 <UART_SetConfig+0x18c>
 8003690:	2b08      	cmp	r3, #8
 8003692:	d0df      	beq.n	8003654 <UART_SetConfig+0x10c>
 8003694:	2001      	movs	r0, #1
 8003696:	e01d      	b.n	80036d4 <UART_SetConfig+0x18c>
        pclk = HAL_RCC_GetPCLK1Freq();
 8003698:	f7fe fede 	bl	8002458 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800369c:	2800      	cmp	r0, #0
 800369e:	d1d9      	bne.n	8003654 <UART_SetConfig+0x10c>
 80036a0:	2000      	movs	r0, #0
 80036a2:	e017      	b.n	80036d4 <UART_SetConfig+0x18c>
        pclk = HAL_RCC_GetSysClockFreq();
 80036a4:	f7fe fe90 	bl	80023c8 <HAL_RCC_GetSysClockFreq>
        break;
 80036a8:	e7f8      	b.n	800369c <UART_SetConfig+0x154>
    switch (clocksource)
 80036aa:	2001      	movs	r0, #1
 80036ac:	e012      	b.n	80036d4 <UART_SetConfig+0x18c>
 80036ae:	2b08      	cmp	r3, #8
 80036b0:	d102      	bne.n	80036b8 <UART_SetConfig+0x170>
 80036b2:	2080      	movs	r0, #128	@ 0x80
 80036b4:	0200      	lsls	r0, r0, #8
 80036b6:	e78c      	b.n	80035d2 <UART_SetConfig+0x8a>
 80036b8:	2001      	movs	r0, #1
 80036ba:	e00b      	b.n	80036d4 <UART_SetConfig+0x18c>
        pclk = HAL_RCC_GetPCLK1Freq();
 80036bc:	f7fe fecc 	bl	8002458 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80036c0:	2800      	cmp	r0, #0
 80036c2:	d186      	bne.n	80035d2 <UART_SetConfig+0x8a>
 80036c4:	2000      	movs	r0, #0
 80036c6:	e005      	b.n	80036d4 <UART_SetConfig+0x18c>
        pclk = HAL_RCC_GetSysClockFreq();
 80036c8:	f7fe fe7e 	bl	80023c8 <HAL_RCC_GetSysClockFreq>
        break;
 80036cc:	e7f8      	b.n	80036c0 <UART_SetConfig+0x178>
        ret = HAL_ERROR;
 80036ce:	2001      	movs	r0, #1
 80036d0:	e000      	b.n	80036d4 <UART_SetConfig+0x18c>
        ret = HAL_ERROR;
 80036d2:	2001      	movs	r0, #1
  huart->NbTxDataToProcess = 1;
 80036d4:	2301      	movs	r3, #1
 80036d6:	226a      	movs	r2, #106	@ 0x6a
 80036d8:	52a3      	strh	r3, [r4, r2]
  huart->NbRxDataToProcess = 1;
 80036da:	3a02      	subs	r2, #2
 80036dc:	52a3      	strh	r3, [r4, r2]
  huart->RxISR = NULL;
 80036de:	2300      	movs	r3, #0
 80036e0:	6763      	str	r3, [r4, #116]	@ 0x74
  huart->TxISR = NULL;
 80036e2:	67a3      	str	r3, [r4, #120]	@ 0x78
}
 80036e4:	bd10      	pop	{r4, pc}
 80036e6:	46c0      	nop			@ (mov r8, r8)
 80036e8:	cfff69f3 	.word	0xcfff69f3
 80036ec:	ffffcfff 	.word	0xffffcfff
 80036f0:	11fff4ff 	.word	0x11fff4ff
 80036f4:	40013800 	.word	0x40013800
 80036f8:	40004400 	.word	0x40004400
 80036fc:	40021000 	.word	0x40021000
 8003700:	02dc6c00 	.word	0x02dc6c00
 8003704:	08004b04 	.word	0x08004b04
 8003708:	0000ffef 	.word	0x0000ffef

0800370c <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800370c:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800370e:	071b      	lsls	r3, r3, #28
 8003710:	d506      	bpl.n	8003720 <UART_AdvFeatureConfig+0x14>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003712:	6802      	ldr	r2, [r0, #0]
 8003714:	6853      	ldr	r3, [r2, #4]
 8003716:	492c      	ldr	r1, [pc, #176]	@ (80037c8 <UART_AdvFeatureConfig+0xbc>)
 8003718:	400b      	ands	r3, r1
 800371a:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 800371c:	430b      	orrs	r3, r1
 800371e:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003720:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8003722:	07db      	lsls	r3, r3, #31
 8003724:	d506      	bpl.n	8003734 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003726:	6802      	ldr	r2, [r0, #0]
 8003728:	6853      	ldr	r3, [r2, #4]
 800372a:	4928      	ldr	r1, [pc, #160]	@ (80037cc <UART_AdvFeatureConfig+0xc0>)
 800372c:	400b      	ands	r3, r1
 800372e:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8003730:	430b      	orrs	r3, r1
 8003732:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003734:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8003736:	079b      	lsls	r3, r3, #30
 8003738:	d506      	bpl.n	8003748 <UART_AdvFeatureConfig+0x3c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800373a:	6802      	ldr	r2, [r0, #0]
 800373c:	6853      	ldr	r3, [r2, #4]
 800373e:	4924      	ldr	r1, [pc, #144]	@ (80037d0 <UART_AdvFeatureConfig+0xc4>)
 8003740:	400b      	ands	r3, r1
 8003742:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 8003744:	430b      	orrs	r3, r1
 8003746:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003748:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800374a:	075b      	lsls	r3, r3, #29
 800374c:	d506      	bpl.n	800375c <UART_AdvFeatureConfig+0x50>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800374e:	6802      	ldr	r2, [r0, #0]
 8003750:	6853      	ldr	r3, [r2, #4]
 8003752:	4920      	ldr	r1, [pc, #128]	@ (80037d4 <UART_AdvFeatureConfig+0xc8>)
 8003754:	400b      	ands	r3, r1
 8003756:	6b41      	ldr	r1, [r0, #52]	@ 0x34
 8003758:	430b      	orrs	r3, r1
 800375a:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800375c:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800375e:	06db      	lsls	r3, r3, #27
 8003760:	d506      	bpl.n	8003770 <UART_AdvFeatureConfig+0x64>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003762:	6802      	ldr	r2, [r0, #0]
 8003764:	6893      	ldr	r3, [r2, #8]
 8003766:	491c      	ldr	r1, [pc, #112]	@ (80037d8 <UART_AdvFeatureConfig+0xcc>)
 8003768:	400b      	ands	r3, r1
 800376a:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 800376c:	430b      	orrs	r3, r1
 800376e:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003770:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8003772:	069b      	lsls	r3, r3, #26
 8003774:	d506      	bpl.n	8003784 <UART_AdvFeatureConfig+0x78>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003776:	6802      	ldr	r2, [r0, #0]
 8003778:	6893      	ldr	r3, [r2, #8]
 800377a:	4918      	ldr	r1, [pc, #96]	@ (80037dc <UART_AdvFeatureConfig+0xd0>)
 800377c:	400b      	ands	r3, r1
 800377e:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8003780:	430b      	orrs	r3, r1
 8003782:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003784:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8003786:	065b      	lsls	r3, r3, #25
 8003788:	d50b      	bpl.n	80037a2 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800378a:	6802      	ldr	r2, [r0, #0]
 800378c:	6853      	ldr	r3, [r2, #4]
 800378e:	4914      	ldr	r1, [pc, #80]	@ (80037e0 <UART_AdvFeatureConfig+0xd4>)
 8003790:	400b      	ands	r3, r1
 8003792:	6c41      	ldr	r1, [r0, #68]	@ 0x44
 8003794:	430b      	orrs	r3, r1
 8003796:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003798:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 800379a:	2380      	movs	r3, #128	@ 0x80
 800379c:	035b      	lsls	r3, r3, #13
 800379e:	429a      	cmp	r2, r3
 80037a0:	d00a      	beq.n	80037b8 <UART_AdvFeatureConfig+0xac>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80037a2:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80037a4:	061b      	lsls	r3, r3, #24
 80037a6:	d506      	bpl.n	80037b6 <UART_AdvFeatureConfig+0xaa>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80037a8:	6802      	ldr	r2, [r0, #0]
 80037aa:	6853      	ldr	r3, [r2, #4]
 80037ac:	490d      	ldr	r1, [pc, #52]	@ (80037e4 <UART_AdvFeatureConfig+0xd8>)
 80037ae:	400b      	ands	r3, r1
 80037b0:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 80037b2:	430b      	orrs	r3, r1
 80037b4:	6053      	str	r3, [r2, #4]
}
 80037b6:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80037b8:	6802      	ldr	r2, [r0, #0]
 80037ba:	6853      	ldr	r3, [r2, #4]
 80037bc:	490a      	ldr	r1, [pc, #40]	@ (80037e8 <UART_AdvFeatureConfig+0xdc>)
 80037be:	400b      	ands	r3, r1
 80037c0:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 80037c2:	430b      	orrs	r3, r1
 80037c4:	6053      	str	r3, [r2, #4]
 80037c6:	e7ec      	b.n	80037a2 <UART_AdvFeatureConfig+0x96>
 80037c8:	ffff7fff 	.word	0xffff7fff
 80037cc:	fffdffff 	.word	0xfffdffff
 80037d0:	fffeffff 	.word	0xfffeffff
 80037d4:	fffbffff 	.word	0xfffbffff
 80037d8:	ffffefff 	.word	0xffffefff
 80037dc:	ffffdfff 	.word	0xffffdfff
 80037e0:	ffefffff 	.word	0xffefffff
 80037e4:	fff7ffff 	.word	0xfff7ffff
 80037e8:	ff9fffff 	.word	0xff9fffff

080037ec <UART_WaitOnFlagUntilTimeout>:
{
 80037ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037ee:	46ce      	mov	lr, r9
 80037f0:	4647      	mov	r7, r8
 80037f2:	b580      	push	{r7, lr}
 80037f4:	0006      	movs	r6, r0
 80037f6:	000d      	movs	r5, r1
 80037f8:	0017      	movs	r7, r2
 80037fa:	4699      	mov	r9, r3
 80037fc:	9b08      	ldr	r3, [sp, #32]
 80037fe:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003800:	6833      	ldr	r3, [r6, #0]
 8003802:	69dc      	ldr	r4, [r3, #28]
 8003804:	402c      	ands	r4, r5
 8003806:	1b64      	subs	r4, r4, r5
 8003808:	4263      	negs	r3, r4
 800380a:	415c      	adcs	r4, r3
 800380c:	42bc      	cmp	r4, r7
 800380e:	d133      	bne.n	8003878 <UART_WaitOnFlagUntilTimeout+0x8c>
    if (Timeout != HAL_MAX_DELAY)
 8003810:	4643      	mov	r3, r8
 8003812:	3301      	adds	r3, #1
 8003814:	d0f4      	beq.n	8003800 <UART_WaitOnFlagUntilTimeout+0x14>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003816:	f7fd ff09 	bl	800162c <HAL_GetTick>
 800381a:	464b      	mov	r3, r9
 800381c:	1ac0      	subs	r0, r0, r3
 800381e:	4540      	cmp	r0, r8
 8003820:	d82f      	bhi.n	8003882 <UART_WaitOnFlagUntilTimeout+0x96>
 8003822:	4643      	mov	r3, r8
 8003824:	2b00      	cmp	r3, #0
 8003826:	d02e      	beq.n	8003886 <UART_WaitOnFlagUntilTimeout+0x9a>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003828:	6832      	ldr	r2, [r6, #0]
 800382a:	6813      	ldr	r3, [r2, #0]
 800382c:	075b      	lsls	r3, r3, #29
 800382e:	d5e7      	bpl.n	8003800 <UART_WaitOnFlagUntilTimeout+0x14>
 8003830:	2d80      	cmp	r5, #128	@ 0x80
 8003832:	d0e5      	beq.n	8003800 <UART_WaitOnFlagUntilTimeout+0x14>
 8003834:	2d40      	cmp	r5, #64	@ 0x40
 8003836:	d0e3      	beq.n	8003800 <UART_WaitOnFlagUntilTimeout+0x14>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003838:	69d3      	ldr	r3, [r2, #28]
 800383a:	071b      	lsls	r3, r3, #28
 800383c:	d410      	bmi.n	8003860 <UART_WaitOnFlagUntilTimeout+0x74>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800383e:	69d3      	ldr	r3, [r2, #28]
 8003840:	051b      	lsls	r3, r3, #20
 8003842:	d5dd      	bpl.n	8003800 <UART_WaitOnFlagUntilTimeout+0x14>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003844:	2380      	movs	r3, #128	@ 0x80
 8003846:	011b      	lsls	r3, r3, #4
 8003848:	6213      	str	r3, [r2, #32]
          UART_EndRxTransfer(huart);
 800384a:	0030      	movs	r0, r6
 800384c:	f7ff fda6 	bl	800339c <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003850:	2390      	movs	r3, #144	@ 0x90
 8003852:	2220      	movs	r2, #32
 8003854:	50f2      	str	r2, [r6, r3]
          __HAL_UNLOCK(huart);
 8003856:	3b0c      	subs	r3, #12
 8003858:	2200      	movs	r2, #0
 800385a:	54f2      	strb	r2, [r6, r3]
          return HAL_TIMEOUT;
 800385c:	2003      	movs	r0, #3
 800385e:	e00c      	b.n	800387a <UART_WaitOnFlagUntilTimeout+0x8e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003860:	2408      	movs	r4, #8
 8003862:	6214      	str	r4, [r2, #32]
          UART_EndRxTransfer(huart);
 8003864:	0030      	movs	r0, r6
 8003866:	f7ff fd99 	bl	800339c <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800386a:	2390      	movs	r3, #144	@ 0x90
 800386c:	50f4      	str	r4, [r6, r3]
          __HAL_UNLOCK(huart);
 800386e:	3b0c      	subs	r3, #12
 8003870:	2200      	movs	r2, #0
 8003872:	54f2      	strb	r2, [r6, r3]
          return HAL_ERROR;
 8003874:	2001      	movs	r0, #1
 8003876:	e000      	b.n	800387a <UART_WaitOnFlagUntilTimeout+0x8e>
  return HAL_OK;
 8003878:	2000      	movs	r0, #0
}
 800387a:	bcc0      	pop	{r6, r7}
 800387c:	46b9      	mov	r9, r7
 800387e:	46b0      	mov	r8, r6
 8003880:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8003882:	2003      	movs	r0, #3
 8003884:	e7f9      	b.n	800387a <UART_WaitOnFlagUntilTimeout+0x8e>
 8003886:	2003      	movs	r0, #3
 8003888:	e7f7      	b.n	800387a <UART_WaitOnFlagUntilTimeout+0x8e>

0800388a <HAL_UART_Transmit>:
{
 800388a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800388c:	46c6      	mov	lr, r8
 800388e:	b500      	push	{lr}
 8003890:	b082      	sub	sp, #8
 8003892:	0004      	movs	r4, r0
 8003894:	000d      	movs	r5, r1
 8003896:	4690      	mov	r8, r2
 8003898:	001e      	movs	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800389a:	2388      	movs	r3, #136	@ 0x88
 800389c:	58c3      	ldr	r3, [r0, r3]
 800389e:	2b20      	cmp	r3, #32
 80038a0:	d166      	bne.n	8003970 <HAL_UART_Transmit+0xe6>
    if ((pData == NULL) || (Size == 0U))
 80038a2:	2900      	cmp	r1, #0
 80038a4:	d069      	beq.n	800397a <HAL_UART_Transmit+0xf0>
 80038a6:	2a00      	cmp	r2, #0
 80038a8:	d069      	beq.n	800397e <HAL_UART_Transmit+0xf4>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038aa:	6882      	ldr	r2, [r0, #8]
 80038ac:	2380      	movs	r3, #128	@ 0x80
 80038ae:	015b      	lsls	r3, r3, #5
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d104      	bne.n	80038be <HAL_UART_Transmit+0x34>
 80038b4:	6903      	ldr	r3, [r0, #16]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d101      	bne.n	80038be <HAL_UART_Transmit+0x34>
      if ((((uint32_t)pData) & 1U) != 0U)
 80038ba:	07cb      	lsls	r3, r1, #31
 80038bc:	d461      	bmi.n	8003982 <HAL_UART_Transmit+0xf8>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038be:	2390      	movs	r3, #144	@ 0x90
 80038c0:	2200      	movs	r2, #0
 80038c2:	50e2      	str	r2, [r4, r3]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038c4:	3b08      	subs	r3, #8
 80038c6:	3221      	adds	r2, #33	@ 0x21
 80038c8:	50e2      	str	r2, [r4, r3]
    tickstart = HAL_GetTick();
 80038ca:	f7fd feaf 	bl	800162c <HAL_GetTick>
 80038ce:	0007      	movs	r7, r0
    huart->TxXferSize  = Size;
 80038d0:	2354      	movs	r3, #84	@ 0x54
 80038d2:	4642      	mov	r2, r8
 80038d4:	52e2      	strh	r2, [r4, r3]
    huart->TxXferCount = Size;
 80038d6:	3302      	adds	r3, #2
 80038d8:	52e2      	strh	r2, [r4, r3]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038da:	68a2      	ldr	r2, [r4, #8]
 80038dc:	2380      	movs	r3, #128	@ 0x80
 80038de:	015b      	lsls	r3, r3, #5
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d002      	beq.n	80038ea <HAL_UART_Transmit+0x60>
      pdata16bits = NULL;
 80038e4:	2300      	movs	r3, #0
 80038e6:	4698      	mov	r8, r3
 80038e8:	e018      	b.n	800391c <HAL_UART_Transmit+0x92>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038ea:	6923      	ldr	r3, [r4, #16]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d02a      	beq.n	8003946 <HAL_UART_Transmit+0xbc>
      pdata16bits = NULL;
 80038f0:	2300      	movs	r3, #0
 80038f2:	4698      	mov	r8, r3
 80038f4:	e012      	b.n	800391c <HAL_UART_Transmit+0x92>
        huart->gState = HAL_UART_STATE_READY;
 80038f6:	2388      	movs	r3, #136	@ 0x88
 80038f8:	2220      	movs	r2, #32
 80038fa:	50e2      	str	r2, [r4, r3]
        return HAL_TIMEOUT;
 80038fc:	2003      	movs	r0, #3
 80038fe:	e038      	b.n	8003972 <HAL_UART_Transmit+0xe8>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003900:	4643      	mov	r3, r8
 8003902:	881b      	ldrh	r3, [r3, #0]
 8003904:	6822      	ldr	r2, [r4, #0]
 8003906:	05db      	lsls	r3, r3, #23
 8003908:	0ddb      	lsrs	r3, r3, #23
 800390a:	6293      	str	r3, [r2, #40]	@ 0x28
        pdata16bits++;
 800390c:	2302      	movs	r3, #2
 800390e:	469c      	mov	ip, r3
 8003910:	44e0      	add	r8, ip
      huart->TxXferCount--;
 8003912:	2356      	movs	r3, #86	@ 0x56
 8003914:	5ae2      	ldrh	r2, [r4, r3]
 8003916:	3a01      	subs	r2, #1
 8003918:	b292      	uxth	r2, r2
 800391a:	52e2      	strh	r2, [r4, r3]
    while (huart->TxXferCount > 0U)
 800391c:	2356      	movs	r3, #86	@ 0x56
 800391e:	5ae3      	ldrh	r3, [r4, r3]
 8003920:	b29b      	uxth	r3, r3
 8003922:	2b00      	cmp	r3, #0
 8003924:	d012      	beq.n	800394c <HAL_UART_Transmit+0xc2>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003926:	9600      	str	r6, [sp, #0]
 8003928:	003b      	movs	r3, r7
 800392a:	2200      	movs	r2, #0
 800392c:	2180      	movs	r1, #128	@ 0x80
 800392e:	0020      	movs	r0, r4
 8003930:	f7ff ff5c 	bl	80037ec <UART_WaitOnFlagUntilTimeout>
 8003934:	2800      	cmp	r0, #0
 8003936:	d1de      	bne.n	80038f6 <HAL_UART_Transmit+0x6c>
      if (pdata8bits == NULL)
 8003938:	2d00      	cmp	r5, #0
 800393a:	d0e1      	beq.n	8003900 <HAL_UART_Transmit+0x76>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800393c:	782a      	ldrb	r2, [r5, #0]
 800393e:	6823      	ldr	r3, [r4, #0]
 8003940:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003942:	3501      	adds	r5, #1
 8003944:	e7e5      	b.n	8003912 <HAL_UART_Transmit+0x88>
      pdata16bits = (const uint16_t *) pData;
 8003946:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8003948:	2500      	movs	r5, #0
 800394a:	e7e7      	b.n	800391c <HAL_UART_Transmit+0x92>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800394c:	9600      	str	r6, [sp, #0]
 800394e:	003b      	movs	r3, r7
 8003950:	2200      	movs	r2, #0
 8003952:	2140      	movs	r1, #64	@ 0x40
 8003954:	0020      	movs	r0, r4
 8003956:	f7ff ff49 	bl	80037ec <UART_WaitOnFlagUntilTimeout>
 800395a:	2800      	cmp	r0, #0
 800395c:	d103      	bne.n	8003966 <HAL_UART_Transmit+0xdc>
    huart->gState = HAL_UART_STATE_READY;
 800395e:	2388      	movs	r3, #136	@ 0x88
 8003960:	2220      	movs	r2, #32
 8003962:	50e2      	str	r2, [r4, r3]
    return HAL_OK;
 8003964:	e005      	b.n	8003972 <HAL_UART_Transmit+0xe8>
      huart->gState = HAL_UART_STATE_READY;
 8003966:	2388      	movs	r3, #136	@ 0x88
 8003968:	2220      	movs	r2, #32
 800396a:	50e2      	str	r2, [r4, r3]
      return HAL_TIMEOUT;
 800396c:	2003      	movs	r0, #3
 800396e:	e000      	b.n	8003972 <HAL_UART_Transmit+0xe8>
    return HAL_BUSY;
 8003970:	2002      	movs	r0, #2
}
 8003972:	b002      	add	sp, #8
 8003974:	bc80      	pop	{r7}
 8003976:	46b8      	mov	r8, r7
 8003978:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return  HAL_ERROR;
 800397a:	2001      	movs	r0, #1
 800397c:	e7f9      	b.n	8003972 <HAL_UART_Transmit+0xe8>
 800397e:	2001      	movs	r0, #1
 8003980:	e7f7      	b.n	8003972 <HAL_UART_Transmit+0xe8>
        return  HAL_ERROR;
 8003982:	2001      	movs	r0, #1
 8003984:	e7f5      	b.n	8003972 <HAL_UART_Transmit+0xe8>
	...

08003988 <UART_CheckIdleState>:
{
 8003988:	b530      	push	{r4, r5, lr}
 800398a:	b083      	sub	sp, #12
 800398c:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800398e:	2390      	movs	r3, #144	@ 0x90
 8003990:	2200      	movs	r2, #0
 8003992:	50c2      	str	r2, [r0, r3]
  tickstart = HAL_GetTick();
 8003994:	f7fd fe4a 	bl	800162c <HAL_GetTick>
 8003998:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800399a:	6823      	ldr	r3, [r4, #0]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	071b      	lsls	r3, r3, #28
 80039a0:	d410      	bmi.n	80039c4 <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80039a2:	6823      	ldr	r3, [r4, #0]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	075b      	lsls	r3, r3, #29
 80039a8:	d42b      	bmi.n	8003a02 <UART_CheckIdleState+0x7a>
  huart->gState = HAL_UART_STATE_READY;
 80039aa:	2320      	movs	r3, #32
 80039ac:	2288      	movs	r2, #136	@ 0x88
 80039ae:	50a3      	str	r3, [r4, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80039b0:	3204      	adds	r2, #4
 80039b2:	50a3      	str	r3, [r4, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039b4:	2300      	movs	r3, #0
 80039b6:	66e3      	str	r3, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80039b8:	6723      	str	r3, [r4, #112]	@ 0x70
  __HAL_UNLOCK(huart);
 80039ba:	3a08      	subs	r2, #8
 80039bc:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 80039be:	2000      	movs	r0, #0
}
 80039c0:	b003      	add	sp, #12
 80039c2:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039c4:	2180      	movs	r1, #128	@ 0x80
 80039c6:	4b23      	ldr	r3, [pc, #140]	@ (8003a54 <UART_CheckIdleState+0xcc>)
 80039c8:	9300      	str	r3, [sp, #0]
 80039ca:	0003      	movs	r3, r0
 80039cc:	2200      	movs	r2, #0
 80039ce:	0389      	lsls	r1, r1, #14
 80039d0:	0020      	movs	r0, r4
 80039d2:	f7ff ff0b 	bl	80037ec <UART_WaitOnFlagUntilTimeout>
 80039d6:	2800      	cmp	r0, #0
 80039d8:	d0e3      	beq.n	80039a2 <UART_CheckIdleState+0x1a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80039da:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039de:	2301      	movs	r3, #1
 80039e0:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80039e4:	6822      	ldr	r2, [r4, #0]
 80039e6:	6813      	ldr	r3, [r2, #0]
 80039e8:	2080      	movs	r0, #128	@ 0x80
 80039ea:	4383      	bics	r3, r0
 80039ec:	6013      	str	r3, [r2, #0]
 80039ee:	f381 8810 	msr	PRIMASK, r1
      huart->gState = HAL_UART_STATE_READY;
 80039f2:	2388      	movs	r3, #136	@ 0x88
 80039f4:	2220      	movs	r2, #32
 80039f6:	50e2      	str	r2, [r4, r3]
      __HAL_UNLOCK(huart);
 80039f8:	3b04      	subs	r3, #4
 80039fa:	2200      	movs	r2, #0
 80039fc:	54e2      	strb	r2, [r4, r3]
      return HAL_TIMEOUT;
 80039fe:	387d      	subs	r0, #125	@ 0x7d
 8003a00:	e7de      	b.n	80039c0 <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a02:	2180      	movs	r1, #128	@ 0x80
 8003a04:	4b13      	ldr	r3, [pc, #76]	@ (8003a54 <UART_CheckIdleState+0xcc>)
 8003a06:	9300      	str	r3, [sp, #0]
 8003a08:	002b      	movs	r3, r5
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	03c9      	lsls	r1, r1, #15
 8003a0e:	0020      	movs	r0, r4
 8003a10:	f7ff feec 	bl	80037ec <UART_WaitOnFlagUntilTimeout>
 8003a14:	2800      	cmp	r0, #0
 8003a16:	d0c8      	beq.n	80039aa <UART_CheckIdleState+0x22>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003a18:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003a22:	6821      	ldr	r1, [r4, #0]
 8003a24:	680b      	ldr	r3, [r1, #0]
 8003a26:	4d0c      	ldr	r5, [pc, #48]	@ (8003a58 <UART_CheckIdleState+0xd0>)
 8003a28:	402b      	ands	r3, r5
 8003a2a:	600b      	str	r3, [r1, #0]
 8003a2c:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003a30:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a34:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a38:	6821      	ldr	r1, [r4, #0]
 8003a3a:	688b      	ldr	r3, [r1, #8]
 8003a3c:	4393      	bics	r3, r2
 8003a3e:	608b      	str	r3, [r1, #8]
 8003a40:	f380 8810 	msr	PRIMASK, r0
      huart->RxState = HAL_UART_STATE_READY;
 8003a44:	238c      	movs	r3, #140	@ 0x8c
 8003a46:	321f      	adds	r2, #31
 8003a48:	50e2      	str	r2, [r4, r3]
      __HAL_UNLOCK(huart);
 8003a4a:	3b08      	subs	r3, #8
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	54e2      	strb	r2, [r4, r3]
      return HAL_TIMEOUT;
 8003a50:	2003      	movs	r0, #3
 8003a52:	e7b5      	b.n	80039c0 <UART_CheckIdleState+0x38>
 8003a54:	01ffffff 	.word	0x01ffffff
 8003a58:	fffffedf 	.word	0xfffffedf

08003a5c <HAL_UART_Init>:
{
 8003a5c:	b510      	push	{r4, lr}
 8003a5e:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8003a60:	d030      	beq.n	8003ac4 <HAL_UART_Init+0x68>
  if (huart->gState == HAL_UART_STATE_RESET)
 8003a62:	2388      	movs	r3, #136	@ 0x88
 8003a64:	58c3      	ldr	r3, [r0, r3]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d022      	beq.n	8003ab0 <HAL_UART_Init+0x54>
  huart->gState = HAL_UART_STATE_BUSY;
 8003a6a:	2388      	movs	r3, #136	@ 0x88
 8003a6c:	2224      	movs	r2, #36	@ 0x24
 8003a6e:	50e2      	str	r2, [r4, r3]
  __HAL_UART_DISABLE(huart);
 8003a70:	6822      	ldr	r2, [r4, #0]
 8003a72:	6813      	ldr	r3, [r2, #0]
 8003a74:	2101      	movs	r1, #1
 8003a76:	438b      	bics	r3, r1
 8003a78:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a7a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d11d      	bne.n	8003abc <HAL_UART_Init+0x60>
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a80:	0020      	movs	r0, r4
 8003a82:	f7ff fd61 	bl	8003548 <UART_SetConfig>
 8003a86:	2801      	cmp	r0, #1
 8003a88:	d011      	beq.n	8003aae <HAL_UART_Init+0x52>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a8a:	6822      	ldr	r2, [r4, #0]
 8003a8c:	6853      	ldr	r3, [r2, #4]
 8003a8e:	490e      	ldr	r1, [pc, #56]	@ (8003ac8 <HAL_UART_Init+0x6c>)
 8003a90:	400b      	ands	r3, r1
 8003a92:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a94:	6822      	ldr	r2, [r4, #0]
 8003a96:	6893      	ldr	r3, [r2, #8]
 8003a98:	212a      	movs	r1, #42	@ 0x2a
 8003a9a:	438b      	bics	r3, r1
 8003a9c:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8003a9e:	6822      	ldr	r2, [r4, #0]
 8003aa0:	6813      	ldr	r3, [r2, #0]
 8003aa2:	3929      	subs	r1, #41	@ 0x29
 8003aa4:	430b      	orrs	r3, r1
 8003aa6:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8003aa8:	0020      	movs	r0, r4
 8003aaa:	f7ff ff6d 	bl	8003988 <UART_CheckIdleState>
}
 8003aae:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8003ab0:	3384      	adds	r3, #132	@ 0x84
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	54c2      	strb	r2, [r0, r3]
    HAL_UART_MspInit(huart);
 8003ab6:	f7fd fcb7 	bl	8001428 <HAL_UART_MspInit>
 8003aba:	e7d6      	b.n	8003a6a <HAL_UART_Init+0xe>
    UART_AdvFeatureConfig(huart);
 8003abc:	0020      	movs	r0, r4
 8003abe:	f7ff fe25 	bl	800370c <UART_AdvFeatureConfig>
 8003ac2:	e7dd      	b.n	8003a80 <HAL_UART_Init+0x24>
    return HAL_ERROR;
 8003ac4:	2001      	movs	r0, #1
 8003ac6:	e7f2      	b.n	8003aae <HAL_UART_Init+0x52>
 8003ac8:	ffffb7ff 	.word	0xffffb7ff

08003acc <UART_Start_Receive_DMA>:
{
 8003acc:	b510      	push	{r4, lr}
 8003ace:	0004      	movs	r4, r0
 8003ad0:	0013      	movs	r3, r2
  huart->pRxBuffPtr = pData;
 8003ad2:	6581      	str	r1, [r0, #88]	@ 0x58
  huart->RxXferSize = Size;
 8003ad4:	225c      	movs	r2, #92	@ 0x5c
 8003ad6:	5283      	strh	r3, [r0, r2]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ad8:	3234      	adds	r2, #52	@ 0x34
 8003ada:	2100      	movs	r1, #0
 8003adc:	5081      	str	r1, [r0, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003ade:	3a04      	subs	r2, #4
 8003ae0:	3122      	adds	r1, #34	@ 0x22
 8003ae2:	5081      	str	r1, [r0, r2]
  if (huart->hdmarx != NULL)
 8003ae4:	3a0c      	subs	r2, #12
 8003ae6:	5882      	ldr	r2, [r0, r2]
 8003ae8:	2a00      	cmp	r2, #0
 8003aea:	d013      	beq.n	8003b14 <UART_Start_Receive_DMA+0x48>
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003aec:	4921      	ldr	r1, [pc, #132]	@ (8003b74 <UART_Start_Receive_DMA+0xa8>)
 8003aee:	62d1      	str	r1, [r2, #44]	@ 0x2c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003af0:	2080      	movs	r0, #128	@ 0x80
 8003af2:	5822      	ldr	r2, [r4, r0]
 8003af4:	4920      	ldr	r1, [pc, #128]	@ (8003b78 <UART_Start_Receive_DMA+0xac>)
 8003af6:	6311      	str	r1, [r2, #48]	@ 0x30
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003af8:	5822      	ldr	r2, [r4, r0]
 8003afa:	4920      	ldr	r1, [pc, #128]	@ (8003b7c <UART_Start_Receive_DMA+0xb0>)
 8003afc:	6351      	str	r1, [r2, #52]	@ 0x34
    huart->hdmarx->XferAbortCallback = NULL;
 8003afe:	5822      	ldr	r2, [r4, r0]
 8003b00:	2100      	movs	r1, #0
 8003b02:	6391      	str	r1, [r2, #56]	@ 0x38
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8003b04:	6821      	ldr	r1, [r4, #0]
 8003b06:	3124      	adds	r1, #36	@ 0x24
 8003b08:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8003b0a:	5820      	ldr	r0, [r4, r0]
 8003b0c:	f7fe fb2e 	bl	800216c <HAL_DMA_Start_IT>
 8003b10:	2800      	cmp	r0, #0
 8003b12:	d126      	bne.n	8003b62 <UART_Start_Receive_DMA+0x96>
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003b14:	6923      	ldr	r3, [r4, #16]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d00b      	beq.n	8003b32 <UART_Start_Receive_DMA+0x66>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003b1a:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b1e:	2301      	movs	r3, #1
 8003b20:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b24:	6822      	ldr	r2, [r4, #0]
 8003b26:	6810      	ldr	r0, [r2, #0]
 8003b28:	33ff      	adds	r3, #255	@ 0xff
 8003b2a:	4303      	orrs	r3, r0
 8003b2c:	6013      	str	r3, [r2, #0]
 8003b2e:	f381 8810 	msr	PRIMASK, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003b32:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b36:	2301      	movs	r3, #1
 8003b38:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b3c:	6821      	ldr	r1, [r4, #0]
 8003b3e:	688a      	ldr	r2, [r1, #8]
 8003b40:	431a      	orrs	r2, r3
 8003b42:	608a      	str	r2, [r1, #8]
 8003b44:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003b48:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b4c:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b50:	6822      	ldr	r2, [r4, #0]
 8003b52:	6893      	ldr	r3, [r2, #8]
 8003b54:	2040      	movs	r0, #64	@ 0x40
 8003b56:	4303      	orrs	r3, r0
 8003b58:	6093      	str	r3, [r2, #8]
 8003b5a:	f381 8810 	msr	PRIMASK, r1
  return HAL_OK;
 8003b5e:	2000      	movs	r0, #0
}
 8003b60:	bd10      	pop	{r4, pc}
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003b62:	2390      	movs	r3, #144	@ 0x90
 8003b64:	2210      	movs	r2, #16
 8003b66:	50e2      	str	r2, [r4, r3]
      huart->RxState = HAL_UART_STATE_READY;
 8003b68:	3b04      	subs	r3, #4
 8003b6a:	3210      	adds	r2, #16
 8003b6c:	50e2      	str	r2, [r4, r3]
      return HAL_ERROR;
 8003b6e:	2001      	movs	r0, #1
 8003b70:	e7f6      	b.n	8003b60 <UART_Start_Receive_DMA+0x94>
 8003b72:	46c0      	nop			@ (mov r8, r8)
 8003b74:	08003495 	.word	0x08003495
 8003b78:	0800345b 	.word	0x0800345b
 8003b7c:	08003407 	.word	0x08003407

08003b80 <HAL_UART_Receive_DMA>:
{
 8003b80:	b570      	push	{r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8003b82:	238c      	movs	r3, #140	@ 0x8c
 8003b84:	58c3      	ldr	r3, [r0, r3]
 8003b86:	2b20      	cmp	r3, #32
 8003b88:	d123      	bne.n	8003bd2 <HAL_UART_Receive_DMA+0x52>
    if ((pData == NULL) || (Size == 0U))
 8003b8a:	2900      	cmp	r1, #0
 8003b8c:	d023      	beq.n	8003bd6 <HAL_UART_Receive_DMA+0x56>
 8003b8e:	2a00      	cmp	r2, #0
 8003b90:	d023      	beq.n	8003bda <HAL_UART_Receive_DMA+0x5a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b92:	6884      	ldr	r4, [r0, #8]
 8003b94:	2380      	movs	r3, #128	@ 0x80
 8003b96:	015b      	lsls	r3, r3, #5
 8003b98:	429c      	cmp	r4, r3
 8003b9a:	d104      	bne.n	8003ba6 <HAL_UART_Receive_DMA+0x26>
 8003b9c:	6903      	ldr	r3, [r0, #16]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d101      	bne.n	8003ba6 <HAL_UART_Receive_DMA+0x26>
      if ((((uint32_t)pData) & 1U) != 0U)
 8003ba2:	07cb      	lsls	r3, r1, #31
 8003ba4:	d41b      	bmi.n	8003bde <HAL_UART_Receive_DMA+0x5e>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	66c3      	str	r3, [r0, #108]	@ 0x6c
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003baa:	6803      	ldr	r3, [r0, #0]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	021b      	lsls	r3, r3, #8
 8003bb0:	d50c      	bpl.n	8003bcc <HAL_UART_Receive_DMA+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003bb2:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003bbc:	6804      	ldr	r4, [r0, #0]
 8003bbe:	6825      	ldr	r5, [r4, #0]
 8003bc0:	2380      	movs	r3, #128	@ 0x80
 8003bc2:	04db      	lsls	r3, r3, #19
 8003bc4:	432b      	orrs	r3, r5
 8003bc6:	6023      	str	r3, [r4, #0]
 8003bc8:	f38c 8810 	msr	PRIMASK, ip
    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003bcc:	f7ff ff7e 	bl	8003acc <UART_Start_Receive_DMA>
 8003bd0:	e000      	b.n	8003bd4 <HAL_UART_Receive_DMA+0x54>
    return HAL_BUSY;
 8003bd2:	2002      	movs	r0, #2
}
 8003bd4:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8003bd6:	2001      	movs	r0, #1
 8003bd8:	e7fc      	b.n	8003bd4 <HAL_UART_Receive_DMA+0x54>
 8003bda:	2001      	movs	r0, #1
 8003bdc:	e7fa      	b.n	8003bd4 <HAL_UART_Receive_DMA+0x54>
        return  HAL_ERROR;
 8003bde:	2001      	movs	r0, #1
 8003be0:	e7f8      	b.n	8003bd4 <HAL_UART_Receive_DMA+0x54>
	...

08003be4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003be6:	0004      	movs	r4, r0
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003be8:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d105      	bne.n	8003bfa <UARTEx_SetNbDataToProcess+0x16>
  {
    huart->NbTxDataToProcess = 1U;
 8003bee:	3301      	adds	r3, #1
 8003bf0:	226a      	movs	r2, #106	@ 0x6a
 8003bf2:	5283      	strh	r3, [r0, r2]
    huart->NbRxDataToProcess = 1U;
 8003bf4:	3a02      	subs	r2, #2
 8003bf6:	5283      	strh	r3, [r0, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003bf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003bfa:	6802      	ldr	r2, [r0, #0]
 8003bfc:	6895      	ldr	r5, [r2, #8]
 8003bfe:	0e6d      	lsrs	r5, r5, #25
 8003c00:	2307      	movs	r3, #7
 8003c02:	401d      	ands	r5, r3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003c04:	6892      	ldr	r2, [r2, #8]
 8003c06:	0f52      	lsrs	r2, r2, #29
 8003c08:	4013      	ands	r3, r2
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003c0a:	4f08      	ldr	r7, [pc, #32]	@ (8003c2c <UARTEx_SetNbDataToProcess+0x48>)
 8003c0c:	5cf8      	ldrb	r0, [r7, r3]
 8003c0e:	00c0      	lsls	r0, r0, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003c10:	4e07      	ldr	r6, [pc, #28]	@ (8003c30 <UARTEx_SetNbDataToProcess+0x4c>)
 8003c12:	5cf1      	ldrb	r1, [r6, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003c14:	f7fc fb16 	bl	8000244 <__divsi3>
 8003c18:	236a      	movs	r3, #106	@ 0x6a
 8003c1a:	52e0      	strh	r0, [r4, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003c1c:	5d78      	ldrb	r0, [r7, r5]
 8003c1e:	00c0      	lsls	r0, r0, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003c20:	5d71      	ldrb	r1, [r6, r5]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003c22:	f7fc fb0f 	bl	8000244 <__divsi3>
 8003c26:	2368      	movs	r3, #104	@ 0x68
 8003c28:	52e0      	strh	r0, [r4, r3]
}
 8003c2a:	e7e5      	b.n	8003bf8 <UARTEx_SetNbDataToProcess+0x14>
 8003c2c:	08004b24 	.word	0x08004b24
 8003c30:	08004b1c 	.word	0x08004b1c

08003c34 <HAL_UARTEx_DisableFifoMode>:
{
 8003c34:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 8003c36:	2384      	movs	r3, #132	@ 0x84
 8003c38:	5cc3      	ldrb	r3, [r0, r3]
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d015      	beq.n	8003c6a <HAL_UARTEx_DisableFifoMode+0x36>
 8003c3e:	2484      	movs	r4, #132	@ 0x84
 8003c40:	2601      	movs	r6, #1
 8003c42:	5506      	strb	r6, [r0, r4]
  huart->gState = HAL_UART_STATE_BUSY;
 8003c44:	2588      	movs	r5, #136	@ 0x88
 8003c46:	2324      	movs	r3, #36	@ 0x24
 8003c48:	5143      	str	r3, [r0, r5]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003c4a:	6802      	ldr	r2, [r0, #0]
 8003c4c:	6813      	ldr	r3, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8003c4e:	6811      	ldr	r1, [r2, #0]
 8003c50:	43b1      	bics	r1, r6
 8003c52:	6011      	str	r1, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003c54:	4a06      	ldr	r2, [pc, #24]	@ (8003c70 <HAL_UARTEx_DisableFifoMode+0x3c>)
 8003c56:	4013      	ands	r3, r2
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003c58:	2200      	movs	r2, #0
 8003c5a:	6642      	str	r2, [r0, #100]	@ 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003c5c:	6801      	ldr	r1, [r0, #0]
 8003c5e:	600b      	str	r3, [r1, #0]
  huart->gState = HAL_UART_STATE_READY;
 8003c60:	2320      	movs	r3, #32
 8003c62:	5143      	str	r3, [r0, r5]
  __HAL_UNLOCK(huart);
 8003c64:	5502      	strb	r2, [r0, r4]
  return HAL_OK;
 8003c66:	2000      	movs	r0, #0
}
 8003c68:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(huart);
 8003c6a:	2002      	movs	r0, #2
 8003c6c:	e7fc      	b.n	8003c68 <HAL_UARTEx_DisableFifoMode+0x34>
 8003c6e:	46c0      	nop			@ (mov r8, r8)
 8003c70:	dfffffff 	.word	0xdfffffff

08003c74 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8003c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c76:	0004      	movs	r4, r0
 8003c78:	000a      	movs	r2, r1
  __HAL_LOCK(huart);
 8003c7a:	2384      	movs	r3, #132	@ 0x84
 8003c7c:	5cc3      	ldrb	r3, [r0, r3]
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d01b      	beq.n	8003cba <HAL_UARTEx_SetTxFifoThreshold+0x46>
 8003c82:	2584      	movs	r5, #132	@ 0x84
 8003c84:	2001      	movs	r0, #1
 8003c86:	5560      	strb	r0, [r4, r5]
  huart->gState = HAL_UART_STATE_BUSY;
 8003c88:	2688      	movs	r6, #136	@ 0x88
 8003c8a:	2324      	movs	r3, #36	@ 0x24
 8003c8c:	51a3      	str	r3, [r4, r6]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003c8e:	6823      	ldr	r3, [r4, #0]
 8003c90:	681f      	ldr	r7, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8003c92:	6819      	ldr	r1, [r3, #0]
 8003c94:	4381      	bics	r1, r0
 8003c96:	6019      	str	r1, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003c98:	6820      	ldr	r0, [r4, #0]
 8003c9a:	6883      	ldr	r3, [r0, #8]
 8003c9c:	00db      	lsls	r3, r3, #3
 8003c9e:	08d9      	lsrs	r1, r3, #3
 8003ca0:	4311      	orrs	r1, r2
 8003ca2:	6081      	str	r1, [r0, #8]
  UARTEx_SetNbDataToProcess(huart);
 8003ca4:	0020      	movs	r0, r4
 8003ca6:	f7ff ff9d 	bl	8003be4 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003caa:	6823      	ldr	r3, [r4, #0]
 8003cac:	601f      	str	r7, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8003cae:	2320      	movs	r3, #32
 8003cb0:	51a3      	str	r3, [r4, r6]
  __HAL_UNLOCK(huart);
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8003cb6:	2000      	movs	r0, #0
}
 8003cb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(huart);
 8003cba:	2002      	movs	r0, #2
 8003cbc:	e7fc      	b.n	8003cb8 <HAL_UARTEx_SetTxFifoThreshold+0x44>
	...

08003cc0 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8003cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cc2:	0004      	movs	r4, r0
 8003cc4:	000b      	movs	r3, r1
  __HAL_LOCK(huart);
 8003cc6:	2284      	movs	r2, #132	@ 0x84
 8003cc8:	5c82      	ldrb	r2, [r0, r2]
 8003cca:	2a01      	cmp	r2, #1
 8003ccc:	d01b      	beq.n	8003d06 <HAL_UARTEx_SetRxFifoThreshold+0x46>
 8003cce:	2584      	movs	r5, #132	@ 0x84
 8003cd0:	2001      	movs	r0, #1
 8003cd2:	5560      	strb	r0, [r4, r5]
  huart->gState = HAL_UART_STATE_BUSY;
 8003cd4:	2688      	movs	r6, #136	@ 0x88
 8003cd6:	2224      	movs	r2, #36	@ 0x24
 8003cd8:	51a2      	str	r2, [r4, r6]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003cda:	6822      	ldr	r2, [r4, #0]
 8003cdc:	6817      	ldr	r7, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8003cde:	6811      	ldr	r1, [r2, #0]
 8003ce0:	4381      	bics	r1, r0
 8003ce2:	6011      	str	r1, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003ce4:	6822      	ldr	r2, [r4, #0]
 8003ce6:	6891      	ldr	r1, [r2, #8]
 8003ce8:	4808      	ldr	r0, [pc, #32]	@ (8003d0c <HAL_UARTEx_SetRxFifoThreshold+0x4c>)
 8003cea:	4001      	ands	r1, r0
 8003cec:	4319      	orrs	r1, r3
 8003cee:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8003cf0:	0020      	movs	r0, r4
 8003cf2:	f7ff ff77 	bl	8003be4 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003cf6:	6823      	ldr	r3, [r4, #0]
 8003cf8:	601f      	str	r7, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8003cfa:	2320      	movs	r3, #32
 8003cfc:	51a3      	str	r3, [r4, r6]
  __HAL_UNLOCK(huart);
 8003cfe:	2300      	movs	r3, #0
 8003d00:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8003d02:	2000      	movs	r0, #0
}
 8003d04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(huart);
 8003d06:	2002      	movs	r0, #2
 8003d08:	e7fc      	b.n	8003d04 <HAL_UARTEx_SetRxFifoThreshold+0x44>
 8003d0a:	46c0      	nop			@ (mov r8, r8)
 8003d0c:	f1ffffff 	.word	0xf1ffffff

08003d10 <LL_SetSystemCoreClock>:
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8003d10:	4b01      	ldr	r3, [pc, #4]	@ (8003d18 <LL_SetSystemCoreClock+0x8>)
 8003d12:	6018      	str	r0, [r3, #0]
}
 8003d14:	4770      	bx	lr
 8003d16:	46c0      	nop			@ (mov r8, r8)
 8003d18:	20000004 	.word	0x20000004

08003d1c <_strtoul_l.isra.0>:
 8003d1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d1e:	001e      	movs	r6, r3
 8003d20:	4b3e      	ldr	r3, [pc, #248]	@ (8003e1c <_strtoul_l.isra.0+0x100>)
 8003d22:	0017      	movs	r7, r2
 8003d24:	000c      	movs	r4, r1
 8003d26:	469c      	mov	ip, r3
 8003d28:	2208      	movs	r2, #8
 8003d2a:	b085      	sub	sp, #20
 8003d2c:	9003      	str	r0, [sp, #12]
 8003d2e:	9100      	str	r1, [sp, #0]
 8003d30:	0023      	movs	r3, r4
 8003d32:	4661      	mov	r1, ip
 8003d34:	781d      	ldrb	r5, [r3, #0]
 8003d36:	3401      	adds	r4, #1
 8003d38:	5d48      	ldrb	r0, [r1, r5]
 8003d3a:	0001      	movs	r1, r0
 8003d3c:	4011      	ands	r1, r2
 8003d3e:	4210      	tst	r0, r2
 8003d40:	d1f6      	bne.n	8003d30 <_strtoul_l.isra.0+0x14>
 8003d42:	2d2d      	cmp	r5, #45	@ 0x2d
 8003d44:	d112      	bne.n	8003d6c <_strtoul_l.isra.0+0x50>
 8003d46:	7825      	ldrb	r5, [r4, #0]
 8003d48:	1c9c      	adds	r4, r3, #2
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	9302      	str	r3, [sp, #8]
 8003d4e:	2210      	movs	r2, #16
 8003d50:	0033      	movs	r3, r6
 8003d52:	4393      	bics	r3, r2
 8003d54:	d116      	bne.n	8003d84 <_strtoul_l.isra.0+0x68>
 8003d56:	2d30      	cmp	r5, #48	@ 0x30
 8003d58:	d10e      	bne.n	8003d78 <_strtoul_l.isra.0+0x5c>
 8003d5a:	2120      	movs	r1, #32
 8003d5c:	7823      	ldrb	r3, [r4, #0]
 8003d5e:	438b      	bics	r3, r1
 8003d60:	2b58      	cmp	r3, #88	@ 0x58
 8003d62:	d109      	bne.n	8003d78 <_strtoul_l.isra.0+0x5c>
 8003d64:	7865      	ldrb	r5, [r4, #1]
 8003d66:	3402      	adds	r4, #2
 8003d68:	2610      	movs	r6, #16
 8003d6a:	e00b      	b.n	8003d84 <_strtoul_l.isra.0+0x68>
 8003d6c:	9102      	str	r1, [sp, #8]
 8003d6e:	2d2b      	cmp	r5, #43	@ 0x2b
 8003d70:	d1ed      	bne.n	8003d4e <_strtoul_l.isra.0+0x32>
 8003d72:	7825      	ldrb	r5, [r4, #0]
 8003d74:	1c9c      	adds	r4, r3, #2
 8003d76:	e7ea      	b.n	8003d4e <_strtoul_l.isra.0+0x32>
 8003d78:	2e00      	cmp	r6, #0
 8003d7a:	d1f5      	bne.n	8003d68 <_strtoul_l.isra.0+0x4c>
 8003d7c:	360a      	adds	r6, #10
 8003d7e:	2d30      	cmp	r5, #48	@ 0x30
 8003d80:	d100      	bne.n	8003d84 <_strtoul_l.isra.0+0x68>
 8003d82:	3e02      	subs	r6, #2
 8003d84:	2001      	movs	r0, #1
 8003d86:	0031      	movs	r1, r6
 8003d88:	4240      	negs	r0, r0
 8003d8a:	f7fc f9d1 	bl	8000130 <__udivsi3>
 8003d8e:	9001      	str	r0, [sp, #4]
 8003d90:	2001      	movs	r0, #1
 8003d92:	0031      	movs	r1, r6
 8003d94:	4240      	negs	r0, r0
 8003d96:	f7fc fa51 	bl	800023c <__aeabi_uidivmod>
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	0018      	movs	r0, r3
 8003da0:	4694      	mov	ip, r2
 8003da2:	002a      	movs	r2, r5
 8003da4:	3a30      	subs	r2, #48	@ 0x30
 8003da6:	2a09      	cmp	r2, #9
 8003da8:	d812      	bhi.n	8003dd0 <_strtoul_l.isra.0+0xb4>
 8003daa:	0015      	movs	r5, r2
 8003dac:	42ae      	cmp	r6, r5
 8003dae:	dd1e      	ble.n	8003dee <_strtoul_l.isra.0+0xd2>
 8003db0:	1c5a      	adds	r2, r3, #1
 8003db2:	d00a      	beq.n	8003dca <_strtoul_l.isra.0+0xae>
 8003db4:	2301      	movs	r3, #1
 8003db6:	9a01      	ldr	r2, [sp, #4]
 8003db8:	425b      	negs	r3, r3
 8003dba:	4282      	cmp	r2, r0
 8003dbc:	d305      	bcc.n	8003dca <_strtoul_l.isra.0+0xae>
 8003dbe:	d101      	bne.n	8003dc4 <_strtoul_l.isra.0+0xa8>
 8003dc0:	42a9      	cmp	r1, r5
 8003dc2:	db11      	blt.n	8003de8 <_strtoul_l.isra.0+0xcc>
 8003dc4:	4663      	mov	r3, ip
 8003dc6:	4370      	muls	r0, r6
 8003dc8:	1828      	adds	r0, r5, r0
 8003dca:	7825      	ldrb	r5, [r4, #0]
 8003dcc:	3401      	adds	r4, #1
 8003dce:	e7e8      	b.n	8003da2 <_strtoul_l.isra.0+0x86>
 8003dd0:	002a      	movs	r2, r5
 8003dd2:	3a41      	subs	r2, #65	@ 0x41
 8003dd4:	2a19      	cmp	r2, #25
 8003dd6:	d801      	bhi.n	8003ddc <_strtoul_l.isra.0+0xc0>
 8003dd8:	3d37      	subs	r5, #55	@ 0x37
 8003dda:	e7e7      	b.n	8003dac <_strtoul_l.isra.0+0x90>
 8003ddc:	002a      	movs	r2, r5
 8003dde:	3a61      	subs	r2, #97	@ 0x61
 8003de0:	2a19      	cmp	r2, #25
 8003de2:	d804      	bhi.n	8003dee <_strtoul_l.isra.0+0xd2>
 8003de4:	3d57      	subs	r5, #87	@ 0x57
 8003de6:	e7e1      	b.n	8003dac <_strtoul_l.isra.0+0x90>
 8003de8:	2301      	movs	r3, #1
 8003dea:	425b      	negs	r3, r3
 8003dec:	e7ed      	b.n	8003dca <_strtoul_l.isra.0+0xae>
 8003dee:	1c5a      	adds	r2, r3, #1
 8003df0:	d107      	bne.n	8003e02 <_strtoul_l.isra.0+0xe6>
 8003df2:	2222      	movs	r2, #34	@ 0x22
 8003df4:	9903      	ldr	r1, [sp, #12]
 8003df6:	0018      	movs	r0, r3
 8003df8:	600a      	str	r2, [r1, #0]
 8003dfa:	2f00      	cmp	r7, #0
 8003dfc:	d109      	bne.n	8003e12 <_strtoul_l.isra.0+0xf6>
 8003dfe:	b005      	add	sp, #20
 8003e00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e02:	9a02      	ldr	r2, [sp, #8]
 8003e04:	2a00      	cmp	r2, #0
 8003e06:	d000      	beq.n	8003e0a <_strtoul_l.isra.0+0xee>
 8003e08:	4240      	negs	r0, r0
 8003e0a:	2f00      	cmp	r7, #0
 8003e0c:	d0f7      	beq.n	8003dfe <_strtoul_l.isra.0+0xe2>
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d001      	beq.n	8003e16 <_strtoul_l.isra.0+0xfa>
 8003e12:	1e63      	subs	r3, r4, #1
 8003e14:	9300      	str	r3, [sp, #0]
 8003e16:	9b00      	ldr	r3, [sp, #0]
 8003e18:	603b      	str	r3, [r7, #0]
 8003e1a:	e7f0      	b.n	8003dfe <_strtoul_l.isra.0+0xe2>
 8003e1c:	08004b2d 	.word	0x08004b2d

08003e20 <strtoul>:
 8003e20:	b510      	push	{r4, lr}
 8003e22:	4c04      	ldr	r4, [pc, #16]	@ (8003e34 <strtoul+0x14>)
 8003e24:	0013      	movs	r3, r2
 8003e26:	000a      	movs	r2, r1
 8003e28:	0001      	movs	r1, r0
 8003e2a:	6820      	ldr	r0, [r4, #0]
 8003e2c:	f7ff ff76 	bl	8003d1c <_strtoul_l.isra.0>
 8003e30:	bd10      	pop	{r4, pc}
 8003e32:	46c0      	nop			@ (mov r8, r8)
 8003e34:	20000010 	.word	0x20000010

08003e38 <_vsniprintf_r>:
 8003e38:	b530      	push	{r4, r5, lr}
 8003e3a:	0005      	movs	r5, r0
 8003e3c:	0014      	movs	r4, r2
 8003e3e:	0008      	movs	r0, r1
 8003e40:	001a      	movs	r2, r3
 8003e42:	b09b      	sub	sp, #108	@ 0x6c
 8003e44:	2c00      	cmp	r4, #0
 8003e46:	da05      	bge.n	8003e54 <_vsniprintf_r+0x1c>
 8003e48:	238b      	movs	r3, #139	@ 0x8b
 8003e4a:	2001      	movs	r0, #1
 8003e4c:	602b      	str	r3, [r5, #0]
 8003e4e:	4240      	negs	r0, r0
 8003e50:	b01b      	add	sp, #108	@ 0x6c
 8003e52:	bd30      	pop	{r4, r5, pc}
 8003e54:	2382      	movs	r3, #130	@ 0x82
 8003e56:	4669      	mov	r1, sp
 8003e58:	009b      	lsls	r3, r3, #2
 8003e5a:	818b      	strh	r3, [r1, #12]
 8003e5c:	2100      	movs	r1, #0
 8003e5e:	9000      	str	r0, [sp, #0]
 8003e60:	9119      	str	r1, [sp, #100]	@ 0x64
 8003e62:	9004      	str	r0, [sp, #16]
 8003e64:	428c      	cmp	r4, r1
 8003e66:	d000      	beq.n	8003e6a <_vsniprintf_r+0x32>
 8003e68:	1e61      	subs	r1, r4, #1
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	9102      	str	r1, [sp, #8]
 8003e6e:	9105      	str	r1, [sp, #20]
 8003e70:	4669      	mov	r1, sp
 8003e72:	425b      	negs	r3, r3
 8003e74:	81cb      	strh	r3, [r1, #14]
 8003e76:	0028      	movs	r0, r5
 8003e78:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8003e7a:	f000 f9ed 	bl	8004258 <_svfiprintf_r>
 8003e7e:	1c43      	adds	r3, r0, #1
 8003e80:	da01      	bge.n	8003e86 <_vsniprintf_r+0x4e>
 8003e82:	238b      	movs	r3, #139	@ 0x8b
 8003e84:	602b      	str	r3, [r5, #0]
 8003e86:	2c00      	cmp	r4, #0
 8003e88:	d0e2      	beq.n	8003e50 <_vsniprintf_r+0x18>
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	9b00      	ldr	r3, [sp, #0]
 8003e8e:	701a      	strb	r2, [r3, #0]
 8003e90:	e7de      	b.n	8003e50 <_vsniprintf_r+0x18>
	...

08003e94 <vsniprintf>:
 8003e94:	b513      	push	{r0, r1, r4, lr}
 8003e96:	4c04      	ldr	r4, [pc, #16]	@ (8003ea8 <vsniprintf+0x14>)
 8003e98:	9300      	str	r3, [sp, #0]
 8003e9a:	0013      	movs	r3, r2
 8003e9c:	000a      	movs	r2, r1
 8003e9e:	0001      	movs	r1, r0
 8003ea0:	6820      	ldr	r0, [r4, #0]
 8003ea2:	f7ff ffc9 	bl	8003e38 <_vsniprintf_r>
 8003ea6:	bd16      	pop	{r1, r2, r4, pc}
 8003ea8:	20000010 	.word	0x20000010

08003eac <memset>:
 8003eac:	0003      	movs	r3, r0
 8003eae:	1882      	adds	r2, r0, r2
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d100      	bne.n	8003eb6 <memset+0xa>
 8003eb4:	4770      	bx	lr
 8003eb6:	7019      	strb	r1, [r3, #0]
 8003eb8:	3301      	adds	r3, #1
 8003eba:	e7f9      	b.n	8003eb0 <memset+0x4>

08003ebc <strncpy>:
 8003ebc:	0003      	movs	r3, r0
 8003ebe:	b530      	push	{r4, r5, lr}
 8003ec0:	001d      	movs	r5, r3
 8003ec2:	2a00      	cmp	r2, #0
 8003ec4:	d006      	beq.n	8003ed4 <strncpy+0x18>
 8003ec6:	780c      	ldrb	r4, [r1, #0]
 8003ec8:	3a01      	subs	r2, #1
 8003eca:	3301      	adds	r3, #1
 8003ecc:	702c      	strb	r4, [r5, #0]
 8003ece:	3101      	adds	r1, #1
 8003ed0:	2c00      	cmp	r4, #0
 8003ed2:	d1f5      	bne.n	8003ec0 <strncpy+0x4>
 8003ed4:	2100      	movs	r1, #0
 8003ed6:	189a      	adds	r2, r3, r2
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d100      	bne.n	8003ede <strncpy+0x22>
 8003edc:	bd30      	pop	{r4, r5, pc}
 8003ede:	7019      	strb	r1, [r3, #0]
 8003ee0:	3301      	adds	r3, #1
 8003ee2:	e7f9      	b.n	8003ed8 <strncpy+0x1c>

08003ee4 <__strtok_r>:
 8003ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ee6:	1e04      	subs	r4, r0, #0
 8003ee8:	d102      	bne.n	8003ef0 <__strtok_r+0xc>
 8003eea:	6814      	ldr	r4, [r2, #0]
 8003eec:	2c00      	cmp	r4, #0
 8003eee:	d009      	beq.n	8003f04 <__strtok_r+0x20>
 8003ef0:	0020      	movs	r0, r4
 8003ef2:	000e      	movs	r6, r1
 8003ef4:	7805      	ldrb	r5, [r0, #0]
 8003ef6:	3401      	adds	r4, #1
 8003ef8:	7837      	ldrb	r7, [r6, #0]
 8003efa:	2f00      	cmp	r7, #0
 8003efc:	d104      	bne.n	8003f08 <__strtok_r+0x24>
 8003efe:	2d00      	cmp	r5, #0
 8003f00:	d10d      	bne.n	8003f1e <__strtok_r+0x3a>
 8003f02:	6015      	str	r5, [r2, #0]
 8003f04:	2000      	movs	r0, #0
 8003f06:	e006      	b.n	8003f16 <__strtok_r+0x32>
 8003f08:	3601      	adds	r6, #1
 8003f0a:	42bd      	cmp	r5, r7
 8003f0c:	d1f4      	bne.n	8003ef8 <__strtok_r+0x14>
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d1ee      	bne.n	8003ef0 <__strtok_r+0xc>
 8003f12:	6014      	str	r4, [r2, #0]
 8003f14:	7003      	strb	r3, [r0, #0]
 8003f16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f18:	3301      	adds	r3, #1
 8003f1a:	2d00      	cmp	r5, #0
 8003f1c:	d103      	bne.n	8003f26 <__strtok_r+0x42>
 8003f1e:	0026      	movs	r6, r4
 8003f20:	000b      	movs	r3, r1
 8003f22:	7837      	ldrb	r7, [r6, #0]
 8003f24:	3401      	adds	r4, #1
 8003f26:	781d      	ldrb	r5, [r3, #0]
 8003f28:	42af      	cmp	r7, r5
 8003f2a:	d1f5      	bne.n	8003f18 <__strtok_r+0x34>
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	0019      	movs	r1, r3
 8003f30:	429f      	cmp	r7, r3
 8003f32:	d001      	beq.n	8003f38 <__strtok_r+0x54>
 8003f34:	0023      	movs	r3, r4
 8003f36:	7031      	strb	r1, [r6, #0]
 8003f38:	6013      	str	r3, [r2, #0]
 8003f3a:	e7ec      	b.n	8003f16 <__strtok_r+0x32>

08003f3c <strtok_r>:
 8003f3c:	b510      	push	{r4, lr}
 8003f3e:	2301      	movs	r3, #1
 8003f40:	f7ff ffd0 	bl	8003ee4 <__strtok_r>
 8003f44:	bd10      	pop	{r4, pc}
	...

08003f48 <__errno>:
 8003f48:	4b01      	ldr	r3, [pc, #4]	@ (8003f50 <__errno+0x8>)
 8003f4a:	6818      	ldr	r0, [r3, #0]
 8003f4c:	4770      	bx	lr
 8003f4e:	46c0      	nop			@ (mov r8, r8)
 8003f50:	20000010 	.word	0x20000010

08003f54 <__libc_init_array>:
 8003f54:	b570      	push	{r4, r5, r6, lr}
 8003f56:	2600      	movs	r6, #0
 8003f58:	4c0c      	ldr	r4, [pc, #48]	@ (8003f8c <__libc_init_array+0x38>)
 8003f5a:	4d0d      	ldr	r5, [pc, #52]	@ (8003f90 <__libc_init_array+0x3c>)
 8003f5c:	1b64      	subs	r4, r4, r5
 8003f5e:	10a4      	asrs	r4, r4, #2
 8003f60:	42a6      	cmp	r6, r4
 8003f62:	d109      	bne.n	8003f78 <__libc_init_array+0x24>
 8003f64:	2600      	movs	r6, #0
 8003f66:	f000 fc61 	bl	800482c <_init>
 8003f6a:	4c0a      	ldr	r4, [pc, #40]	@ (8003f94 <__libc_init_array+0x40>)
 8003f6c:	4d0a      	ldr	r5, [pc, #40]	@ (8003f98 <__libc_init_array+0x44>)
 8003f6e:	1b64      	subs	r4, r4, r5
 8003f70:	10a4      	asrs	r4, r4, #2
 8003f72:	42a6      	cmp	r6, r4
 8003f74:	d105      	bne.n	8003f82 <__libc_init_array+0x2e>
 8003f76:	bd70      	pop	{r4, r5, r6, pc}
 8003f78:	00b3      	lsls	r3, r6, #2
 8003f7a:	58eb      	ldr	r3, [r5, r3]
 8003f7c:	4798      	blx	r3
 8003f7e:	3601      	adds	r6, #1
 8003f80:	e7ee      	b.n	8003f60 <__libc_init_array+0xc>
 8003f82:	00b3      	lsls	r3, r6, #2
 8003f84:	58eb      	ldr	r3, [r5, r3]
 8003f86:	4798      	blx	r3
 8003f88:	3601      	adds	r6, #1
 8003f8a:	e7f2      	b.n	8003f72 <__libc_init_array+0x1e>
 8003f8c:	08004c60 	.word	0x08004c60
 8003f90:	08004c60 	.word	0x08004c60
 8003f94:	08004c64 	.word	0x08004c64
 8003f98:	08004c60 	.word	0x08004c60

08003f9c <__retarget_lock_acquire_recursive>:
 8003f9c:	4770      	bx	lr

08003f9e <__retarget_lock_release_recursive>:
 8003f9e:	4770      	bx	lr

08003fa0 <_free_r>:
 8003fa0:	b570      	push	{r4, r5, r6, lr}
 8003fa2:	0005      	movs	r5, r0
 8003fa4:	1e0c      	subs	r4, r1, #0
 8003fa6:	d010      	beq.n	8003fca <_free_r+0x2a>
 8003fa8:	3c04      	subs	r4, #4
 8003faa:	6823      	ldr	r3, [r4, #0]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	da00      	bge.n	8003fb2 <_free_r+0x12>
 8003fb0:	18e4      	adds	r4, r4, r3
 8003fb2:	0028      	movs	r0, r5
 8003fb4:	f000 f8e0 	bl	8004178 <__malloc_lock>
 8003fb8:	4a1d      	ldr	r2, [pc, #116]	@ (8004030 <_free_r+0x90>)
 8003fba:	6813      	ldr	r3, [r2, #0]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d105      	bne.n	8003fcc <_free_r+0x2c>
 8003fc0:	6063      	str	r3, [r4, #4]
 8003fc2:	6014      	str	r4, [r2, #0]
 8003fc4:	0028      	movs	r0, r5
 8003fc6:	f000 f8df 	bl	8004188 <__malloc_unlock>
 8003fca:	bd70      	pop	{r4, r5, r6, pc}
 8003fcc:	42a3      	cmp	r3, r4
 8003fce:	d908      	bls.n	8003fe2 <_free_r+0x42>
 8003fd0:	6820      	ldr	r0, [r4, #0]
 8003fd2:	1821      	adds	r1, r4, r0
 8003fd4:	428b      	cmp	r3, r1
 8003fd6:	d1f3      	bne.n	8003fc0 <_free_r+0x20>
 8003fd8:	6819      	ldr	r1, [r3, #0]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	1809      	adds	r1, r1, r0
 8003fde:	6021      	str	r1, [r4, #0]
 8003fe0:	e7ee      	b.n	8003fc0 <_free_r+0x20>
 8003fe2:	001a      	movs	r2, r3
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d001      	beq.n	8003fee <_free_r+0x4e>
 8003fea:	42a3      	cmp	r3, r4
 8003fec:	d9f9      	bls.n	8003fe2 <_free_r+0x42>
 8003fee:	6811      	ldr	r1, [r2, #0]
 8003ff0:	1850      	adds	r0, r2, r1
 8003ff2:	42a0      	cmp	r0, r4
 8003ff4:	d10b      	bne.n	800400e <_free_r+0x6e>
 8003ff6:	6820      	ldr	r0, [r4, #0]
 8003ff8:	1809      	adds	r1, r1, r0
 8003ffa:	1850      	adds	r0, r2, r1
 8003ffc:	6011      	str	r1, [r2, #0]
 8003ffe:	4283      	cmp	r3, r0
 8004000:	d1e0      	bne.n	8003fc4 <_free_r+0x24>
 8004002:	6818      	ldr	r0, [r3, #0]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	1841      	adds	r1, r0, r1
 8004008:	6011      	str	r1, [r2, #0]
 800400a:	6053      	str	r3, [r2, #4]
 800400c:	e7da      	b.n	8003fc4 <_free_r+0x24>
 800400e:	42a0      	cmp	r0, r4
 8004010:	d902      	bls.n	8004018 <_free_r+0x78>
 8004012:	230c      	movs	r3, #12
 8004014:	602b      	str	r3, [r5, #0]
 8004016:	e7d5      	b.n	8003fc4 <_free_r+0x24>
 8004018:	6820      	ldr	r0, [r4, #0]
 800401a:	1821      	adds	r1, r4, r0
 800401c:	428b      	cmp	r3, r1
 800401e:	d103      	bne.n	8004028 <_free_r+0x88>
 8004020:	6819      	ldr	r1, [r3, #0]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	1809      	adds	r1, r1, r0
 8004026:	6021      	str	r1, [r4, #0]
 8004028:	6063      	str	r3, [r4, #4]
 800402a:	6054      	str	r4, [r2, #4]
 800402c:	e7ca      	b.n	8003fc4 <_free_r+0x24>
 800402e:	46c0      	nop			@ (mov r8, r8)
 8004030:	200006f0 	.word	0x200006f0

08004034 <sbrk_aligned>:
 8004034:	b570      	push	{r4, r5, r6, lr}
 8004036:	4e0f      	ldr	r6, [pc, #60]	@ (8004074 <sbrk_aligned+0x40>)
 8004038:	000d      	movs	r5, r1
 800403a:	6831      	ldr	r1, [r6, #0]
 800403c:	0004      	movs	r4, r0
 800403e:	2900      	cmp	r1, #0
 8004040:	d102      	bne.n	8004048 <sbrk_aligned+0x14>
 8004042:	f000 fb95 	bl	8004770 <_sbrk_r>
 8004046:	6030      	str	r0, [r6, #0]
 8004048:	0029      	movs	r1, r5
 800404a:	0020      	movs	r0, r4
 800404c:	f000 fb90 	bl	8004770 <_sbrk_r>
 8004050:	1c43      	adds	r3, r0, #1
 8004052:	d103      	bne.n	800405c <sbrk_aligned+0x28>
 8004054:	2501      	movs	r5, #1
 8004056:	426d      	negs	r5, r5
 8004058:	0028      	movs	r0, r5
 800405a:	bd70      	pop	{r4, r5, r6, pc}
 800405c:	2303      	movs	r3, #3
 800405e:	1cc5      	adds	r5, r0, #3
 8004060:	439d      	bics	r5, r3
 8004062:	42a8      	cmp	r0, r5
 8004064:	d0f8      	beq.n	8004058 <sbrk_aligned+0x24>
 8004066:	1a29      	subs	r1, r5, r0
 8004068:	0020      	movs	r0, r4
 800406a:	f000 fb81 	bl	8004770 <_sbrk_r>
 800406e:	3001      	adds	r0, #1
 8004070:	d1f2      	bne.n	8004058 <sbrk_aligned+0x24>
 8004072:	e7ef      	b.n	8004054 <sbrk_aligned+0x20>
 8004074:	200006ec 	.word	0x200006ec

08004078 <_malloc_r>:
 8004078:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800407a:	2203      	movs	r2, #3
 800407c:	1ccb      	adds	r3, r1, #3
 800407e:	4393      	bics	r3, r2
 8004080:	3308      	adds	r3, #8
 8004082:	0005      	movs	r5, r0
 8004084:	001f      	movs	r7, r3
 8004086:	2b0c      	cmp	r3, #12
 8004088:	d234      	bcs.n	80040f4 <_malloc_r+0x7c>
 800408a:	270c      	movs	r7, #12
 800408c:	42b9      	cmp	r1, r7
 800408e:	d833      	bhi.n	80040f8 <_malloc_r+0x80>
 8004090:	0028      	movs	r0, r5
 8004092:	f000 f871 	bl	8004178 <__malloc_lock>
 8004096:	4e37      	ldr	r6, [pc, #220]	@ (8004174 <_malloc_r+0xfc>)
 8004098:	6833      	ldr	r3, [r6, #0]
 800409a:	001c      	movs	r4, r3
 800409c:	2c00      	cmp	r4, #0
 800409e:	d12f      	bne.n	8004100 <_malloc_r+0x88>
 80040a0:	0039      	movs	r1, r7
 80040a2:	0028      	movs	r0, r5
 80040a4:	f7ff ffc6 	bl	8004034 <sbrk_aligned>
 80040a8:	0004      	movs	r4, r0
 80040aa:	1c43      	adds	r3, r0, #1
 80040ac:	d15f      	bne.n	800416e <_malloc_r+0xf6>
 80040ae:	6834      	ldr	r4, [r6, #0]
 80040b0:	9400      	str	r4, [sp, #0]
 80040b2:	9b00      	ldr	r3, [sp, #0]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d14a      	bne.n	800414e <_malloc_r+0xd6>
 80040b8:	2c00      	cmp	r4, #0
 80040ba:	d052      	beq.n	8004162 <_malloc_r+0xea>
 80040bc:	6823      	ldr	r3, [r4, #0]
 80040be:	0028      	movs	r0, r5
 80040c0:	18e3      	adds	r3, r4, r3
 80040c2:	9900      	ldr	r1, [sp, #0]
 80040c4:	9301      	str	r3, [sp, #4]
 80040c6:	f000 fb53 	bl	8004770 <_sbrk_r>
 80040ca:	9b01      	ldr	r3, [sp, #4]
 80040cc:	4283      	cmp	r3, r0
 80040ce:	d148      	bne.n	8004162 <_malloc_r+0xea>
 80040d0:	6823      	ldr	r3, [r4, #0]
 80040d2:	0028      	movs	r0, r5
 80040d4:	1aff      	subs	r7, r7, r3
 80040d6:	0039      	movs	r1, r7
 80040d8:	f7ff ffac 	bl	8004034 <sbrk_aligned>
 80040dc:	3001      	adds	r0, #1
 80040de:	d040      	beq.n	8004162 <_malloc_r+0xea>
 80040e0:	6823      	ldr	r3, [r4, #0]
 80040e2:	19db      	adds	r3, r3, r7
 80040e4:	6023      	str	r3, [r4, #0]
 80040e6:	6833      	ldr	r3, [r6, #0]
 80040e8:	685a      	ldr	r2, [r3, #4]
 80040ea:	2a00      	cmp	r2, #0
 80040ec:	d133      	bne.n	8004156 <_malloc_r+0xde>
 80040ee:	9b00      	ldr	r3, [sp, #0]
 80040f0:	6033      	str	r3, [r6, #0]
 80040f2:	e019      	b.n	8004128 <_malloc_r+0xb0>
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	dac9      	bge.n	800408c <_malloc_r+0x14>
 80040f8:	230c      	movs	r3, #12
 80040fa:	602b      	str	r3, [r5, #0]
 80040fc:	2000      	movs	r0, #0
 80040fe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004100:	6821      	ldr	r1, [r4, #0]
 8004102:	1bc9      	subs	r1, r1, r7
 8004104:	d420      	bmi.n	8004148 <_malloc_r+0xd0>
 8004106:	290b      	cmp	r1, #11
 8004108:	d90a      	bls.n	8004120 <_malloc_r+0xa8>
 800410a:	19e2      	adds	r2, r4, r7
 800410c:	6027      	str	r7, [r4, #0]
 800410e:	42a3      	cmp	r3, r4
 8004110:	d104      	bne.n	800411c <_malloc_r+0xa4>
 8004112:	6032      	str	r2, [r6, #0]
 8004114:	6863      	ldr	r3, [r4, #4]
 8004116:	6011      	str	r1, [r2, #0]
 8004118:	6053      	str	r3, [r2, #4]
 800411a:	e005      	b.n	8004128 <_malloc_r+0xb0>
 800411c:	605a      	str	r2, [r3, #4]
 800411e:	e7f9      	b.n	8004114 <_malloc_r+0x9c>
 8004120:	6862      	ldr	r2, [r4, #4]
 8004122:	42a3      	cmp	r3, r4
 8004124:	d10e      	bne.n	8004144 <_malloc_r+0xcc>
 8004126:	6032      	str	r2, [r6, #0]
 8004128:	0028      	movs	r0, r5
 800412a:	f000 f82d 	bl	8004188 <__malloc_unlock>
 800412e:	0020      	movs	r0, r4
 8004130:	2207      	movs	r2, #7
 8004132:	300b      	adds	r0, #11
 8004134:	1d23      	adds	r3, r4, #4
 8004136:	4390      	bics	r0, r2
 8004138:	1ac2      	subs	r2, r0, r3
 800413a:	4298      	cmp	r0, r3
 800413c:	d0df      	beq.n	80040fe <_malloc_r+0x86>
 800413e:	1a1b      	subs	r3, r3, r0
 8004140:	50a3      	str	r3, [r4, r2]
 8004142:	e7dc      	b.n	80040fe <_malloc_r+0x86>
 8004144:	605a      	str	r2, [r3, #4]
 8004146:	e7ef      	b.n	8004128 <_malloc_r+0xb0>
 8004148:	0023      	movs	r3, r4
 800414a:	6864      	ldr	r4, [r4, #4]
 800414c:	e7a6      	b.n	800409c <_malloc_r+0x24>
 800414e:	9c00      	ldr	r4, [sp, #0]
 8004150:	6863      	ldr	r3, [r4, #4]
 8004152:	9300      	str	r3, [sp, #0]
 8004154:	e7ad      	b.n	80040b2 <_malloc_r+0x3a>
 8004156:	001a      	movs	r2, r3
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	42a3      	cmp	r3, r4
 800415c:	d1fb      	bne.n	8004156 <_malloc_r+0xde>
 800415e:	2300      	movs	r3, #0
 8004160:	e7da      	b.n	8004118 <_malloc_r+0xa0>
 8004162:	230c      	movs	r3, #12
 8004164:	0028      	movs	r0, r5
 8004166:	602b      	str	r3, [r5, #0]
 8004168:	f000 f80e 	bl	8004188 <__malloc_unlock>
 800416c:	e7c6      	b.n	80040fc <_malloc_r+0x84>
 800416e:	6007      	str	r7, [r0, #0]
 8004170:	e7da      	b.n	8004128 <_malloc_r+0xb0>
 8004172:	46c0      	nop			@ (mov r8, r8)
 8004174:	200006f0 	.word	0x200006f0

08004178 <__malloc_lock>:
 8004178:	b510      	push	{r4, lr}
 800417a:	4802      	ldr	r0, [pc, #8]	@ (8004184 <__malloc_lock+0xc>)
 800417c:	f7ff ff0e 	bl	8003f9c <__retarget_lock_acquire_recursive>
 8004180:	bd10      	pop	{r4, pc}
 8004182:	46c0      	nop			@ (mov r8, r8)
 8004184:	200006e8 	.word	0x200006e8

08004188 <__malloc_unlock>:
 8004188:	b510      	push	{r4, lr}
 800418a:	4802      	ldr	r0, [pc, #8]	@ (8004194 <__malloc_unlock+0xc>)
 800418c:	f7ff ff07 	bl	8003f9e <__retarget_lock_release_recursive>
 8004190:	bd10      	pop	{r4, pc}
 8004192:	46c0      	nop			@ (mov r8, r8)
 8004194:	200006e8 	.word	0x200006e8

08004198 <__ssputs_r>:
 8004198:	b5f0      	push	{r4, r5, r6, r7, lr}
 800419a:	688e      	ldr	r6, [r1, #8]
 800419c:	b085      	sub	sp, #20
 800419e:	001f      	movs	r7, r3
 80041a0:	000c      	movs	r4, r1
 80041a2:	680b      	ldr	r3, [r1, #0]
 80041a4:	9002      	str	r0, [sp, #8]
 80041a6:	9203      	str	r2, [sp, #12]
 80041a8:	42be      	cmp	r6, r7
 80041aa:	d830      	bhi.n	800420e <__ssputs_r+0x76>
 80041ac:	210c      	movs	r1, #12
 80041ae:	5e62      	ldrsh	r2, [r4, r1]
 80041b0:	2190      	movs	r1, #144	@ 0x90
 80041b2:	00c9      	lsls	r1, r1, #3
 80041b4:	420a      	tst	r2, r1
 80041b6:	d028      	beq.n	800420a <__ssputs_r+0x72>
 80041b8:	2003      	movs	r0, #3
 80041ba:	6921      	ldr	r1, [r4, #16]
 80041bc:	1a5b      	subs	r3, r3, r1
 80041be:	9301      	str	r3, [sp, #4]
 80041c0:	6963      	ldr	r3, [r4, #20]
 80041c2:	4343      	muls	r3, r0
 80041c4:	9801      	ldr	r0, [sp, #4]
 80041c6:	0fdd      	lsrs	r5, r3, #31
 80041c8:	18ed      	adds	r5, r5, r3
 80041ca:	1c7b      	adds	r3, r7, #1
 80041cc:	181b      	adds	r3, r3, r0
 80041ce:	106d      	asrs	r5, r5, #1
 80041d0:	42ab      	cmp	r3, r5
 80041d2:	d900      	bls.n	80041d6 <__ssputs_r+0x3e>
 80041d4:	001d      	movs	r5, r3
 80041d6:	0552      	lsls	r2, r2, #21
 80041d8:	d528      	bpl.n	800422c <__ssputs_r+0x94>
 80041da:	0029      	movs	r1, r5
 80041dc:	9802      	ldr	r0, [sp, #8]
 80041de:	f7ff ff4b 	bl	8004078 <_malloc_r>
 80041e2:	1e06      	subs	r6, r0, #0
 80041e4:	d02c      	beq.n	8004240 <__ssputs_r+0xa8>
 80041e6:	9a01      	ldr	r2, [sp, #4]
 80041e8:	6921      	ldr	r1, [r4, #16]
 80041ea:	f000 fade 	bl	80047aa <memcpy>
 80041ee:	89a2      	ldrh	r2, [r4, #12]
 80041f0:	4b18      	ldr	r3, [pc, #96]	@ (8004254 <__ssputs_r+0xbc>)
 80041f2:	401a      	ands	r2, r3
 80041f4:	2380      	movs	r3, #128	@ 0x80
 80041f6:	4313      	orrs	r3, r2
 80041f8:	81a3      	strh	r3, [r4, #12]
 80041fa:	9b01      	ldr	r3, [sp, #4]
 80041fc:	6126      	str	r6, [r4, #16]
 80041fe:	18f6      	adds	r6, r6, r3
 8004200:	6026      	str	r6, [r4, #0]
 8004202:	003e      	movs	r6, r7
 8004204:	6165      	str	r5, [r4, #20]
 8004206:	1aed      	subs	r5, r5, r3
 8004208:	60a5      	str	r5, [r4, #8]
 800420a:	42be      	cmp	r6, r7
 800420c:	d900      	bls.n	8004210 <__ssputs_r+0x78>
 800420e:	003e      	movs	r6, r7
 8004210:	0032      	movs	r2, r6
 8004212:	9903      	ldr	r1, [sp, #12]
 8004214:	6820      	ldr	r0, [r4, #0]
 8004216:	f000 fa99 	bl	800474c <memmove>
 800421a:	2000      	movs	r0, #0
 800421c:	68a3      	ldr	r3, [r4, #8]
 800421e:	1b9b      	subs	r3, r3, r6
 8004220:	60a3      	str	r3, [r4, #8]
 8004222:	6823      	ldr	r3, [r4, #0]
 8004224:	199b      	adds	r3, r3, r6
 8004226:	6023      	str	r3, [r4, #0]
 8004228:	b005      	add	sp, #20
 800422a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800422c:	002a      	movs	r2, r5
 800422e:	9802      	ldr	r0, [sp, #8]
 8004230:	f000 fac4 	bl	80047bc <_realloc_r>
 8004234:	1e06      	subs	r6, r0, #0
 8004236:	d1e0      	bne.n	80041fa <__ssputs_r+0x62>
 8004238:	6921      	ldr	r1, [r4, #16]
 800423a:	9802      	ldr	r0, [sp, #8]
 800423c:	f7ff feb0 	bl	8003fa0 <_free_r>
 8004240:	230c      	movs	r3, #12
 8004242:	2001      	movs	r0, #1
 8004244:	9a02      	ldr	r2, [sp, #8]
 8004246:	4240      	negs	r0, r0
 8004248:	6013      	str	r3, [r2, #0]
 800424a:	89a2      	ldrh	r2, [r4, #12]
 800424c:	3334      	adds	r3, #52	@ 0x34
 800424e:	4313      	orrs	r3, r2
 8004250:	81a3      	strh	r3, [r4, #12]
 8004252:	e7e9      	b.n	8004228 <__ssputs_r+0x90>
 8004254:	fffffb7f 	.word	0xfffffb7f

08004258 <_svfiprintf_r>:
 8004258:	b5f0      	push	{r4, r5, r6, r7, lr}
 800425a:	b0a1      	sub	sp, #132	@ 0x84
 800425c:	9003      	str	r0, [sp, #12]
 800425e:	001d      	movs	r5, r3
 8004260:	898b      	ldrh	r3, [r1, #12]
 8004262:	000f      	movs	r7, r1
 8004264:	0016      	movs	r6, r2
 8004266:	061b      	lsls	r3, r3, #24
 8004268:	d511      	bpl.n	800428e <_svfiprintf_r+0x36>
 800426a:	690b      	ldr	r3, [r1, #16]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d10e      	bne.n	800428e <_svfiprintf_r+0x36>
 8004270:	2140      	movs	r1, #64	@ 0x40
 8004272:	f7ff ff01 	bl	8004078 <_malloc_r>
 8004276:	6038      	str	r0, [r7, #0]
 8004278:	6138      	str	r0, [r7, #16]
 800427a:	2800      	cmp	r0, #0
 800427c:	d105      	bne.n	800428a <_svfiprintf_r+0x32>
 800427e:	230c      	movs	r3, #12
 8004280:	9a03      	ldr	r2, [sp, #12]
 8004282:	6013      	str	r3, [r2, #0]
 8004284:	2001      	movs	r0, #1
 8004286:	4240      	negs	r0, r0
 8004288:	e0cf      	b.n	800442a <_svfiprintf_r+0x1d2>
 800428a:	2340      	movs	r3, #64	@ 0x40
 800428c:	617b      	str	r3, [r7, #20]
 800428e:	2300      	movs	r3, #0
 8004290:	ac08      	add	r4, sp, #32
 8004292:	6163      	str	r3, [r4, #20]
 8004294:	3320      	adds	r3, #32
 8004296:	7663      	strb	r3, [r4, #25]
 8004298:	3310      	adds	r3, #16
 800429a:	76a3      	strb	r3, [r4, #26]
 800429c:	9507      	str	r5, [sp, #28]
 800429e:	0035      	movs	r5, r6
 80042a0:	782b      	ldrb	r3, [r5, #0]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d001      	beq.n	80042aa <_svfiprintf_r+0x52>
 80042a6:	2b25      	cmp	r3, #37	@ 0x25
 80042a8:	d148      	bne.n	800433c <_svfiprintf_r+0xe4>
 80042aa:	1bab      	subs	r3, r5, r6
 80042ac:	9305      	str	r3, [sp, #20]
 80042ae:	42b5      	cmp	r5, r6
 80042b0:	d00b      	beq.n	80042ca <_svfiprintf_r+0x72>
 80042b2:	0032      	movs	r2, r6
 80042b4:	0039      	movs	r1, r7
 80042b6:	9803      	ldr	r0, [sp, #12]
 80042b8:	f7ff ff6e 	bl	8004198 <__ssputs_r>
 80042bc:	3001      	adds	r0, #1
 80042be:	d100      	bne.n	80042c2 <_svfiprintf_r+0x6a>
 80042c0:	e0ae      	b.n	8004420 <_svfiprintf_r+0x1c8>
 80042c2:	6963      	ldr	r3, [r4, #20]
 80042c4:	9a05      	ldr	r2, [sp, #20]
 80042c6:	189b      	adds	r3, r3, r2
 80042c8:	6163      	str	r3, [r4, #20]
 80042ca:	782b      	ldrb	r3, [r5, #0]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d100      	bne.n	80042d2 <_svfiprintf_r+0x7a>
 80042d0:	e0a6      	b.n	8004420 <_svfiprintf_r+0x1c8>
 80042d2:	2201      	movs	r2, #1
 80042d4:	2300      	movs	r3, #0
 80042d6:	4252      	negs	r2, r2
 80042d8:	6062      	str	r2, [r4, #4]
 80042da:	a904      	add	r1, sp, #16
 80042dc:	3254      	adds	r2, #84	@ 0x54
 80042de:	1852      	adds	r2, r2, r1
 80042e0:	1c6e      	adds	r6, r5, #1
 80042e2:	6023      	str	r3, [r4, #0]
 80042e4:	60e3      	str	r3, [r4, #12]
 80042e6:	60a3      	str	r3, [r4, #8]
 80042e8:	7013      	strb	r3, [r2, #0]
 80042ea:	65a3      	str	r3, [r4, #88]	@ 0x58
 80042ec:	4b54      	ldr	r3, [pc, #336]	@ (8004440 <_svfiprintf_r+0x1e8>)
 80042ee:	2205      	movs	r2, #5
 80042f0:	0018      	movs	r0, r3
 80042f2:	7831      	ldrb	r1, [r6, #0]
 80042f4:	9305      	str	r3, [sp, #20]
 80042f6:	f000 fa4d 	bl	8004794 <memchr>
 80042fa:	1c75      	adds	r5, r6, #1
 80042fc:	2800      	cmp	r0, #0
 80042fe:	d11f      	bne.n	8004340 <_svfiprintf_r+0xe8>
 8004300:	6822      	ldr	r2, [r4, #0]
 8004302:	06d3      	lsls	r3, r2, #27
 8004304:	d504      	bpl.n	8004310 <_svfiprintf_r+0xb8>
 8004306:	2353      	movs	r3, #83	@ 0x53
 8004308:	a904      	add	r1, sp, #16
 800430a:	185b      	adds	r3, r3, r1
 800430c:	2120      	movs	r1, #32
 800430e:	7019      	strb	r1, [r3, #0]
 8004310:	0713      	lsls	r3, r2, #28
 8004312:	d504      	bpl.n	800431e <_svfiprintf_r+0xc6>
 8004314:	2353      	movs	r3, #83	@ 0x53
 8004316:	a904      	add	r1, sp, #16
 8004318:	185b      	adds	r3, r3, r1
 800431a:	212b      	movs	r1, #43	@ 0x2b
 800431c:	7019      	strb	r1, [r3, #0]
 800431e:	7833      	ldrb	r3, [r6, #0]
 8004320:	2b2a      	cmp	r3, #42	@ 0x2a
 8004322:	d016      	beq.n	8004352 <_svfiprintf_r+0xfa>
 8004324:	0035      	movs	r5, r6
 8004326:	2100      	movs	r1, #0
 8004328:	200a      	movs	r0, #10
 800432a:	68e3      	ldr	r3, [r4, #12]
 800432c:	782a      	ldrb	r2, [r5, #0]
 800432e:	1c6e      	adds	r6, r5, #1
 8004330:	3a30      	subs	r2, #48	@ 0x30
 8004332:	2a09      	cmp	r2, #9
 8004334:	d950      	bls.n	80043d8 <_svfiprintf_r+0x180>
 8004336:	2900      	cmp	r1, #0
 8004338:	d111      	bne.n	800435e <_svfiprintf_r+0x106>
 800433a:	e017      	b.n	800436c <_svfiprintf_r+0x114>
 800433c:	3501      	adds	r5, #1
 800433e:	e7af      	b.n	80042a0 <_svfiprintf_r+0x48>
 8004340:	9b05      	ldr	r3, [sp, #20]
 8004342:	6822      	ldr	r2, [r4, #0]
 8004344:	1ac0      	subs	r0, r0, r3
 8004346:	2301      	movs	r3, #1
 8004348:	4083      	lsls	r3, r0
 800434a:	4313      	orrs	r3, r2
 800434c:	002e      	movs	r6, r5
 800434e:	6023      	str	r3, [r4, #0]
 8004350:	e7cc      	b.n	80042ec <_svfiprintf_r+0x94>
 8004352:	9b07      	ldr	r3, [sp, #28]
 8004354:	1d19      	adds	r1, r3, #4
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	9107      	str	r1, [sp, #28]
 800435a:	2b00      	cmp	r3, #0
 800435c:	db01      	blt.n	8004362 <_svfiprintf_r+0x10a>
 800435e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004360:	e004      	b.n	800436c <_svfiprintf_r+0x114>
 8004362:	425b      	negs	r3, r3
 8004364:	60e3      	str	r3, [r4, #12]
 8004366:	2302      	movs	r3, #2
 8004368:	4313      	orrs	r3, r2
 800436a:	6023      	str	r3, [r4, #0]
 800436c:	782b      	ldrb	r3, [r5, #0]
 800436e:	2b2e      	cmp	r3, #46	@ 0x2e
 8004370:	d10c      	bne.n	800438c <_svfiprintf_r+0x134>
 8004372:	786b      	ldrb	r3, [r5, #1]
 8004374:	2b2a      	cmp	r3, #42	@ 0x2a
 8004376:	d134      	bne.n	80043e2 <_svfiprintf_r+0x18a>
 8004378:	9b07      	ldr	r3, [sp, #28]
 800437a:	3502      	adds	r5, #2
 800437c:	1d1a      	adds	r2, r3, #4
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	9207      	str	r2, [sp, #28]
 8004382:	2b00      	cmp	r3, #0
 8004384:	da01      	bge.n	800438a <_svfiprintf_r+0x132>
 8004386:	2301      	movs	r3, #1
 8004388:	425b      	negs	r3, r3
 800438a:	9309      	str	r3, [sp, #36]	@ 0x24
 800438c:	4e2d      	ldr	r6, [pc, #180]	@ (8004444 <_svfiprintf_r+0x1ec>)
 800438e:	2203      	movs	r2, #3
 8004390:	0030      	movs	r0, r6
 8004392:	7829      	ldrb	r1, [r5, #0]
 8004394:	f000 f9fe 	bl	8004794 <memchr>
 8004398:	2800      	cmp	r0, #0
 800439a:	d006      	beq.n	80043aa <_svfiprintf_r+0x152>
 800439c:	2340      	movs	r3, #64	@ 0x40
 800439e:	1b80      	subs	r0, r0, r6
 80043a0:	4083      	lsls	r3, r0
 80043a2:	6822      	ldr	r2, [r4, #0]
 80043a4:	3501      	adds	r5, #1
 80043a6:	4313      	orrs	r3, r2
 80043a8:	6023      	str	r3, [r4, #0]
 80043aa:	7829      	ldrb	r1, [r5, #0]
 80043ac:	2206      	movs	r2, #6
 80043ae:	4826      	ldr	r0, [pc, #152]	@ (8004448 <_svfiprintf_r+0x1f0>)
 80043b0:	1c6e      	adds	r6, r5, #1
 80043b2:	7621      	strb	r1, [r4, #24]
 80043b4:	f000 f9ee 	bl	8004794 <memchr>
 80043b8:	2800      	cmp	r0, #0
 80043ba:	d038      	beq.n	800442e <_svfiprintf_r+0x1d6>
 80043bc:	4b23      	ldr	r3, [pc, #140]	@ (800444c <_svfiprintf_r+0x1f4>)
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d122      	bne.n	8004408 <_svfiprintf_r+0x1b0>
 80043c2:	2207      	movs	r2, #7
 80043c4:	9b07      	ldr	r3, [sp, #28]
 80043c6:	3307      	adds	r3, #7
 80043c8:	4393      	bics	r3, r2
 80043ca:	3308      	adds	r3, #8
 80043cc:	9307      	str	r3, [sp, #28]
 80043ce:	6963      	ldr	r3, [r4, #20]
 80043d0:	9a04      	ldr	r2, [sp, #16]
 80043d2:	189b      	adds	r3, r3, r2
 80043d4:	6163      	str	r3, [r4, #20]
 80043d6:	e762      	b.n	800429e <_svfiprintf_r+0x46>
 80043d8:	4343      	muls	r3, r0
 80043da:	0035      	movs	r5, r6
 80043dc:	2101      	movs	r1, #1
 80043de:	189b      	adds	r3, r3, r2
 80043e0:	e7a4      	b.n	800432c <_svfiprintf_r+0xd4>
 80043e2:	2300      	movs	r3, #0
 80043e4:	200a      	movs	r0, #10
 80043e6:	0019      	movs	r1, r3
 80043e8:	3501      	adds	r5, #1
 80043ea:	6063      	str	r3, [r4, #4]
 80043ec:	782a      	ldrb	r2, [r5, #0]
 80043ee:	1c6e      	adds	r6, r5, #1
 80043f0:	3a30      	subs	r2, #48	@ 0x30
 80043f2:	2a09      	cmp	r2, #9
 80043f4:	d903      	bls.n	80043fe <_svfiprintf_r+0x1a6>
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d0c8      	beq.n	800438c <_svfiprintf_r+0x134>
 80043fa:	9109      	str	r1, [sp, #36]	@ 0x24
 80043fc:	e7c6      	b.n	800438c <_svfiprintf_r+0x134>
 80043fe:	4341      	muls	r1, r0
 8004400:	0035      	movs	r5, r6
 8004402:	2301      	movs	r3, #1
 8004404:	1889      	adds	r1, r1, r2
 8004406:	e7f1      	b.n	80043ec <_svfiprintf_r+0x194>
 8004408:	aa07      	add	r2, sp, #28
 800440a:	9200      	str	r2, [sp, #0]
 800440c:	0021      	movs	r1, r4
 800440e:	003a      	movs	r2, r7
 8004410:	4b0f      	ldr	r3, [pc, #60]	@ (8004450 <_svfiprintf_r+0x1f8>)
 8004412:	9803      	ldr	r0, [sp, #12]
 8004414:	e000      	b.n	8004418 <_svfiprintf_r+0x1c0>
 8004416:	bf00      	nop
 8004418:	9004      	str	r0, [sp, #16]
 800441a:	9b04      	ldr	r3, [sp, #16]
 800441c:	3301      	adds	r3, #1
 800441e:	d1d6      	bne.n	80043ce <_svfiprintf_r+0x176>
 8004420:	89bb      	ldrh	r3, [r7, #12]
 8004422:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8004424:	065b      	lsls	r3, r3, #25
 8004426:	d500      	bpl.n	800442a <_svfiprintf_r+0x1d2>
 8004428:	e72c      	b.n	8004284 <_svfiprintf_r+0x2c>
 800442a:	b021      	add	sp, #132	@ 0x84
 800442c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800442e:	aa07      	add	r2, sp, #28
 8004430:	9200      	str	r2, [sp, #0]
 8004432:	0021      	movs	r1, r4
 8004434:	003a      	movs	r2, r7
 8004436:	4b06      	ldr	r3, [pc, #24]	@ (8004450 <_svfiprintf_r+0x1f8>)
 8004438:	9803      	ldr	r0, [sp, #12]
 800443a:	f000 f87b 	bl	8004534 <_printf_i>
 800443e:	e7eb      	b.n	8004418 <_svfiprintf_r+0x1c0>
 8004440:	08004c2d 	.word	0x08004c2d
 8004444:	08004c33 	.word	0x08004c33
 8004448:	08004c37 	.word	0x08004c37
 800444c:	00000000 	.word	0x00000000
 8004450:	08004199 	.word	0x08004199

08004454 <_printf_common>:
 8004454:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004456:	0016      	movs	r6, r2
 8004458:	9301      	str	r3, [sp, #4]
 800445a:	688a      	ldr	r2, [r1, #8]
 800445c:	690b      	ldr	r3, [r1, #16]
 800445e:	000c      	movs	r4, r1
 8004460:	9000      	str	r0, [sp, #0]
 8004462:	4293      	cmp	r3, r2
 8004464:	da00      	bge.n	8004468 <_printf_common+0x14>
 8004466:	0013      	movs	r3, r2
 8004468:	0022      	movs	r2, r4
 800446a:	6033      	str	r3, [r6, #0]
 800446c:	3243      	adds	r2, #67	@ 0x43
 800446e:	7812      	ldrb	r2, [r2, #0]
 8004470:	2a00      	cmp	r2, #0
 8004472:	d001      	beq.n	8004478 <_printf_common+0x24>
 8004474:	3301      	adds	r3, #1
 8004476:	6033      	str	r3, [r6, #0]
 8004478:	6823      	ldr	r3, [r4, #0]
 800447a:	069b      	lsls	r3, r3, #26
 800447c:	d502      	bpl.n	8004484 <_printf_common+0x30>
 800447e:	6833      	ldr	r3, [r6, #0]
 8004480:	3302      	adds	r3, #2
 8004482:	6033      	str	r3, [r6, #0]
 8004484:	6822      	ldr	r2, [r4, #0]
 8004486:	2306      	movs	r3, #6
 8004488:	0015      	movs	r5, r2
 800448a:	401d      	ands	r5, r3
 800448c:	421a      	tst	r2, r3
 800448e:	d027      	beq.n	80044e0 <_printf_common+0x8c>
 8004490:	0023      	movs	r3, r4
 8004492:	3343      	adds	r3, #67	@ 0x43
 8004494:	781b      	ldrb	r3, [r3, #0]
 8004496:	1e5a      	subs	r2, r3, #1
 8004498:	4193      	sbcs	r3, r2
 800449a:	6822      	ldr	r2, [r4, #0]
 800449c:	0692      	lsls	r2, r2, #26
 800449e:	d430      	bmi.n	8004502 <_printf_common+0xae>
 80044a0:	0022      	movs	r2, r4
 80044a2:	9901      	ldr	r1, [sp, #4]
 80044a4:	9800      	ldr	r0, [sp, #0]
 80044a6:	9d08      	ldr	r5, [sp, #32]
 80044a8:	3243      	adds	r2, #67	@ 0x43
 80044aa:	47a8      	blx	r5
 80044ac:	3001      	adds	r0, #1
 80044ae:	d025      	beq.n	80044fc <_printf_common+0xa8>
 80044b0:	2206      	movs	r2, #6
 80044b2:	6823      	ldr	r3, [r4, #0]
 80044b4:	2500      	movs	r5, #0
 80044b6:	4013      	ands	r3, r2
 80044b8:	2b04      	cmp	r3, #4
 80044ba:	d105      	bne.n	80044c8 <_printf_common+0x74>
 80044bc:	6833      	ldr	r3, [r6, #0]
 80044be:	68e5      	ldr	r5, [r4, #12]
 80044c0:	1aed      	subs	r5, r5, r3
 80044c2:	43eb      	mvns	r3, r5
 80044c4:	17db      	asrs	r3, r3, #31
 80044c6:	401d      	ands	r5, r3
 80044c8:	68a3      	ldr	r3, [r4, #8]
 80044ca:	6922      	ldr	r2, [r4, #16]
 80044cc:	4293      	cmp	r3, r2
 80044ce:	dd01      	ble.n	80044d4 <_printf_common+0x80>
 80044d0:	1a9b      	subs	r3, r3, r2
 80044d2:	18ed      	adds	r5, r5, r3
 80044d4:	2600      	movs	r6, #0
 80044d6:	42b5      	cmp	r5, r6
 80044d8:	d120      	bne.n	800451c <_printf_common+0xc8>
 80044da:	2000      	movs	r0, #0
 80044dc:	e010      	b.n	8004500 <_printf_common+0xac>
 80044de:	3501      	adds	r5, #1
 80044e0:	68e3      	ldr	r3, [r4, #12]
 80044e2:	6832      	ldr	r2, [r6, #0]
 80044e4:	1a9b      	subs	r3, r3, r2
 80044e6:	42ab      	cmp	r3, r5
 80044e8:	ddd2      	ble.n	8004490 <_printf_common+0x3c>
 80044ea:	0022      	movs	r2, r4
 80044ec:	2301      	movs	r3, #1
 80044ee:	9901      	ldr	r1, [sp, #4]
 80044f0:	9800      	ldr	r0, [sp, #0]
 80044f2:	9f08      	ldr	r7, [sp, #32]
 80044f4:	3219      	adds	r2, #25
 80044f6:	47b8      	blx	r7
 80044f8:	3001      	adds	r0, #1
 80044fa:	d1f0      	bne.n	80044de <_printf_common+0x8a>
 80044fc:	2001      	movs	r0, #1
 80044fe:	4240      	negs	r0, r0
 8004500:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004502:	2030      	movs	r0, #48	@ 0x30
 8004504:	18e1      	adds	r1, r4, r3
 8004506:	3143      	adds	r1, #67	@ 0x43
 8004508:	7008      	strb	r0, [r1, #0]
 800450a:	0021      	movs	r1, r4
 800450c:	1c5a      	adds	r2, r3, #1
 800450e:	3145      	adds	r1, #69	@ 0x45
 8004510:	7809      	ldrb	r1, [r1, #0]
 8004512:	18a2      	adds	r2, r4, r2
 8004514:	3243      	adds	r2, #67	@ 0x43
 8004516:	3302      	adds	r3, #2
 8004518:	7011      	strb	r1, [r2, #0]
 800451a:	e7c1      	b.n	80044a0 <_printf_common+0x4c>
 800451c:	0022      	movs	r2, r4
 800451e:	2301      	movs	r3, #1
 8004520:	9901      	ldr	r1, [sp, #4]
 8004522:	9800      	ldr	r0, [sp, #0]
 8004524:	9f08      	ldr	r7, [sp, #32]
 8004526:	321a      	adds	r2, #26
 8004528:	47b8      	blx	r7
 800452a:	3001      	adds	r0, #1
 800452c:	d0e6      	beq.n	80044fc <_printf_common+0xa8>
 800452e:	3601      	adds	r6, #1
 8004530:	e7d1      	b.n	80044d6 <_printf_common+0x82>
	...

08004534 <_printf_i>:
 8004534:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004536:	b08b      	sub	sp, #44	@ 0x2c
 8004538:	9206      	str	r2, [sp, #24]
 800453a:	000a      	movs	r2, r1
 800453c:	3243      	adds	r2, #67	@ 0x43
 800453e:	9307      	str	r3, [sp, #28]
 8004540:	9005      	str	r0, [sp, #20]
 8004542:	9203      	str	r2, [sp, #12]
 8004544:	7e0a      	ldrb	r2, [r1, #24]
 8004546:	000c      	movs	r4, r1
 8004548:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800454a:	2a78      	cmp	r2, #120	@ 0x78
 800454c:	d809      	bhi.n	8004562 <_printf_i+0x2e>
 800454e:	2a62      	cmp	r2, #98	@ 0x62
 8004550:	d80b      	bhi.n	800456a <_printf_i+0x36>
 8004552:	2a00      	cmp	r2, #0
 8004554:	d100      	bne.n	8004558 <_printf_i+0x24>
 8004556:	e0ba      	b.n	80046ce <_printf_i+0x19a>
 8004558:	497a      	ldr	r1, [pc, #488]	@ (8004744 <_printf_i+0x210>)
 800455a:	9104      	str	r1, [sp, #16]
 800455c:	2a58      	cmp	r2, #88	@ 0x58
 800455e:	d100      	bne.n	8004562 <_printf_i+0x2e>
 8004560:	e08e      	b.n	8004680 <_printf_i+0x14c>
 8004562:	0025      	movs	r5, r4
 8004564:	3542      	adds	r5, #66	@ 0x42
 8004566:	702a      	strb	r2, [r5, #0]
 8004568:	e022      	b.n	80045b0 <_printf_i+0x7c>
 800456a:	0010      	movs	r0, r2
 800456c:	3863      	subs	r0, #99	@ 0x63
 800456e:	2815      	cmp	r0, #21
 8004570:	d8f7      	bhi.n	8004562 <_printf_i+0x2e>
 8004572:	f7fb fdd3 	bl	800011c <__gnu_thumb1_case_shi>
 8004576:	0016      	.short	0x0016
 8004578:	fff6001f 	.word	0xfff6001f
 800457c:	fff6fff6 	.word	0xfff6fff6
 8004580:	001ffff6 	.word	0x001ffff6
 8004584:	fff6fff6 	.word	0xfff6fff6
 8004588:	fff6fff6 	.word	0xfff6fff6
 800458c:	0036009f 	.word	0x0036009f
 8004590:	fff6007e 	.word	0xfff6007e
 8004594:	00b0fff6 	.word	0x00b0fff6
 8004598:	0036fff6 	.word	0x0036fff6
 800459c:	fff6fff6 	.word	0xfff6fff6
 80045a0:	0082      	.short	0x0082
 80045a2:	0025      	movs	r5, r4
 80045a4:	681a      	ldr	r2, [r3, #0]
 80045a6:	3542      	adds	r5, #66	@ 0x42
 80045a8:	1d11      	adds	r1, r2, #4
 80045aa:	6019      	str	r1, [r3, #0]
 80045ac:	6813      	ldr	r3, [r2, #0]
 80045ae:	702b      	strb	r3, [r5, #0]
 80045b0:	2301      	movs	r3, #1
 80045b2:	e09e      	b.n	80046f2 <_printf_i+0x1be>
 80045b4:	6818      	ldr	r0, [r3, #0]
 80045b6:	6809      	ldr	r1, [r1, #0]
 80045b8:	1d02      	adds	r2, r0, #4
 80045ba:	060d      	lsls	r5, r1, #24
 80045bc:	d50b      	bpl.n	80045d6 <_printf_i+0xa2>
 80045be:	6806      	ldr	r6, [r0, #0]
 80045c0:	601a      	str	r2, [r3, #0]
 80045c2:	2e00      	cmp	r6, #0
 80045c4:	da03      	bge.n	80045ce <_printf_i+0x9a>
 80045c6:	232d      	movs	r3, #45	@ 0x2d
 80045c8:	9a03      	ldr	r2, [sp, #12]
 80045ca:	4276      	negs	r6, r6
 80045cc:	7013      	strb	r3, [r2, #0]
 80045ce:	4b5d      	ldr	r3, [pc, #372]	@ (8004744 <_printf_i+0x210>)
 80045d0:	270a      	movs	r7, #10
 80045d2:	9304      	str	r3, [sp, #16]
 80045d4:	e018      	b.n	8004608 <_printf_i+0xd4>
 80045d6:	6806      	ldr	r6, [r0, #0]
 80045d8:	601a      	str	r2, [r3, #0]
 80045da:	0649      	lsls	r1, r1, #25
 80045dc:	d5f1      	bpl.n	80045c2 <_printf_i+0x8e>
 80045de:	b236      	sxth	r6, r6
 80045e0:	e7ef      	b.n	80045c2 <_printf_i+0x8e>
 80045e2:	6808      	ldr	r0, [r1, #0]
 80045e4:	6819      	ldr	r1, [r3, #0]
 80045e6:	c940      	ldmia	r1!, {r6}
 80045e8:	0605      	lsls	r5, r0, #24
 80045ea:	d402      	bmi.n	80045f2 <_printf_i+0xbe>
 80045ec:	0640      	lsls	r0, r0, #25
 80045ee:	d500      	bpl.n	80045f2 <_printf_i+0xbe>
 80045f0:	b2b6      	uxth	r6, r6
 80045f2:	6019      	str	r1, [r3, #0]
 80045f4:	4b53      	ldr	r3, [pc, #332]	@ (8004744 <_printf_i+0x210>)
 80045f6:	270a      	movs	r7, #10
 80045f8:	9304      	str	r3, [sp, #16]
 80045fa:	2a6f      	cmp	r2, #111	@ 0x6f
 80045fc:	d100      	bne.n	8004600 <_printf_i+0xcc>
 80045fe:	3f02      	subs	r7, #2
 8004600:	0023      	movs	r3, r4
 8004602:	2200      	movs	r2, #0
 8004604:	3343      	adds	r3, #67	@ 0x43
 8004606:	701a      	strb	r2, [r3, #0]
 8004608:	6863      	ldr	r3, [r4, #4]
 800460a:	60a3      	str	r3, [r4, #8]
 800460c:	2b00      	cmp	r3, #0
 800460e:	db06      	blt.n	800461e <_printf_i+0xea>
 8004610:	2104      	movs	r1, #4
 8004612:	6822      	ldr	r2, [r4, #0]
 8004614:	9d03      	ldr	r5, [sp, #12]
 8004616:	438a      	bics	r2, r1
 8004618:	6022      	str	r2, [r4, #0]
 800461a:	4333      	orrs	r3, r6
 800461c:	d00c      	beq.n	8004638 <_printf_i+0x104>
 800461e:	9d03      	ldr	r5, [sp, #12]
 8004620:	0030      	movs	r0, r6
 8004622:	0039      	movs	r1, r7
 8004624:	f7fb fe0a 	bl	800023c <__aeabi_uidivmod>
 8004628:	9b04      	ldr	r3, [sp, #16]
 800462a:	3d01      	subs	r5, #1
 800462c:	5c5b      	ldrb	r3, [r3, r1]
 800462e:	702b      	strb	r3, [r5, #0]
 8004630:	0033      	movs	r3, r6
 8004632:	0006      	movs	r6, r0
 8004634:	429f      	cmp	r7, r3
 8004636:	d9f3      	bls.n	8004620 <_printf_i+0xec>
 8004638:	2f08      	cmp	r7, #8
 800463a:	d109      	bne.n	8004650 <_printf_i+0x11c>
 800463c:	6823      	ldr	r3, [r4, #0]
 800463e:	07db      	lsls	r3, r3, #31
 8004640:	d506      	bpl.n	8004650 <_printf_i+0x11c>
 8004642:	6862      	ldr	r2, [r4, #4]
 8004644:	6923      	ldr	r3, [r4, #16]
 8004646:	429a      	cmp	r2, r3
 8004648:	dc02      	bgt.n	8004650 <_printf_i+0x11c>
 800464a:	2330      	movs	r3, #48	@ 0x30
 800464c:	3d01      	subs	r5, #1
 800464e:	702b      	strb	r3, [r5, #0]
 8004650:	9b03      	ldr	r3, [sp, #12]
 8004652:	1b5b      	subs	r3, r3, r5
 8004654:	6123      	str	r3, [r4, #16]
 8004656:	9b07      	ldr	r3, [sp, #28]
 8004658:	0021      	movs	r1, r4
 800465a:	9300      	str	r3, [sp, #0]
 800465c:	9805      	ldr	r0, [sp, #20]
 800465e:	9b06      	ldr	r3, [sp, #24]
 8004660:	aa09      	add	r2, sp, #36	@ 0x24
 8004662:	f7ff fef7 	bl	8004454 <_printf_common>
 8004666:	3001      	adds	r0, #1
 8004668:	d148      	bne.n	80046fc <_printf_i+0x1c8>
 800466a:	2001      	movs	r0, #1
 800466c:	4240      	negs	r0, r0
 800466e:	b00b      	add	sp, #44	@ 0x2c
 8004670:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004672:	2220      	movs	r2, #32
 8004674:	6809      	ldr	r1, [r1, #0]
 8004676:	430a      	orrs	r2, r1
 8004678:	6022      	str	r2, [r4, #0]
 800467a:	2278      	movs	r2, #120	@ 0x78
 800467c:	4932      	ldr	r1, [pc, #200]	@ (8004748 <_printf_i+0x214>)
 800467e:	9104      	str	r1, [sp, #16]
 8004680:	0021      	movs	r1, r4
 8004682:	3145      	adds	r1, #69	@ 0x45
 8004684:	700a      	strb	r2, [r1, #0]
 8004686:	6819      	ldr	r1, [r3, #0]
 8004688:	6822      	ldr	r2, [r4, #0]
 800468a:	c940      	ldmia	r1!, {r6}
 800468c:	0610      	lsls	r0, r2, #24
 800468e:	d402      	bmi.n	8004696 <_printf_i+0x162>
 8004690:	0650      	lsls	r0, r2, #25
 8004692:	d500      	bpl.n	8004696 <_printf_i+0x162>
 8004694:	b2b6      	uxth	r6, r6
 8004696:	6019      	str	r1, [r3, #0]
 8004698:	07d3      	lsls	r3, r2, #31
 800469a:	d502      	bpl.n	80046a2 <_printf_i+0x16e>
 800469c:	2320      	movs	r3, #32
 800469e:	4313      	orrs	r3, r2
 80046a0:	6023      	str	r3, [r4, #0]
 80046a2:	2e00      	cmp	r6, #0
 80046a4:	d001      	beq.n	80046aa <_printf_i+0x176>
 80046a6:	2710      	movs	r7, #16
 80046a8:	e7aa      	b.n	8004600 <_printf_i+0xcc>
 80046aa:	2220      	movs	r2, #32
 80046ac:	6823      	ldr	r3, [r4, #0]
 80046ae:	4393      	bics	r3, r2
 80046b0:	6023      	str	r3, [r4, #0]
 80046b2:	e7f8      	b.n	80046a6 <_printf_i+0x172>
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	680d      	ldr	r5, [r1, #0]
 80046b8:	1d10      	adds	r0, r2, #4
 80046ba:	6949      	ldr	r1, [r1, #20]
 80046bc:	6018      	str	r0, [r3, #0]
 80046be:	6813      	ldr	r3, [r2, #0]
 80046c0:	062e      	lsls	r6, r5, #24
 80046c2:	d501      	bpl.n	80046c8 <_printf_i+0x194>
 80046c4:	6019      	str	r1, [r3, #0]
 80046c6:	e002      	b.n	80046ce <_printf_i+0x19a>
 80046c8:	066d      	lsls	r5, r5, #25
 80046ca:	d5fb      	bpl.n	80046c4 <_printf_i+0x190>
 80046cc:	8019      	strh	r1, [r3, #0]
 80046ce:	2300      	movs	r3, #0
 80046d0:	9d03      	ldr	r5, [sp, #12]
 80046d2:	6123      	str	r3, [r4, #16]
 80046d4:	e7bf      	b.n	8004656 <_printf_i+0x122>
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	1d11      	adds	r1, r2, #4
 80046da:	6019      	str	r1, [r3, #0]
 80046dc:	6815      	ldr	r5, [r2, #0]
 80046de:	2100      	movs	r1, #0
 80046e0:	0028      	movs	r0, r5
 80046e2:	6862      	ldr	r2, [r4, #4]
 80046e4:	f000 f856 	bl	8004794 <memchr>
 80046e8:	2800      	cmp	r0, #0
 80046ea:	d001      	beq.n	80046f0 <_printf_i+0x1bc>
 80046ec:	1b40      	subs	r0, r0, r5
 80046ee:	6060      	str	r0, [r4, #4]
 80046f0:	6863      	ldr	r3, [r4, #4]
 80046f2:	6123      	str	r3, [r4, #16]
 80046f4:	2300      	movs	r3, #0
 80046f6:	9a03      	ldr	r2, [sp, #12]
 80046f8:	7013      	strb	r3, [r2, #0]
 80046fa:	e7ac      	b.n	8004656 <_printf_i+0x122>
 80046fc:	002a      	movs	r2, r5
 80046fe:	6923      	ldr	r3, [r4, #16]
 8004700:	9906      	ldr	r1, [sp, #24]
 8004702:	9805      	ldr	r0, [sp, #20]
 8004704:	9d07      	ldr	r5, [sp, #28]
 8004706:	47a8      	blx	r5
 8004708:	3001      	adds	r0, #1
 800470a:	d0ae      	beq.n	800466a <_printf_i+0x136>
 800470c:	6823      	ldr	r3, [r4, #0]
 800470e:	079b      	lsls	r3, r3, #30
 8004710:	d415      	bmi.n	800473e <_printf_i+0x20a>
 8004712:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004714:	68e0      	ldr	r0, [r4, #12]
 8004716:	4298      	cmp	r0, r3
 8004718:	daa9      	bge.n	800466e <_printf_i+0x13a>
 800471a:	0018      	movs	r0, r3
 800471c:	e7a7      	b.n	800466e <_printf_i+0x13a>
 800471e:	0022      	movs	r2, r4
 8004720:	2301      	movs	r3, #1
 8004722:	9906      	ldr	r1, [sp, #24]
 8004724:	9805      	ldr	r0, [sp, #20]
 8004726:	9e07      	ldr	r6, [sp, #28]
 8004728:	3219      	adds	r2, #25
 800472a:	47b0      	blx	r6
 800472c:	3001      	adds	r0, #1
 800472e:	d09c      	beq.n	800466a <_printf_i+0x136>
 8004730:	3501      	adds	r5, #1
 8004732:	68e3      	ldr	r3, [r4, #12]
 8004734:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004736:	1a9b      	subs	r3, r3, r2
 8004738:	42ab      	cmp	r3, r5
 800473a:	dcf0      	bgt.n	800471e <_printf_i+0x1ea>
 800473c:	e7e9      	b.n	8004712 <_printf_i+0x1de>
 800473e:	2500      	movs	r5, #0
 8004740:	e7f7      	b.n	8004732 <_printf_i+0x1fe>
 8004742:	46c0      	nop			@ (mov r8, r8)
 8004744:	08004c3e 	.word	0x08004c3e
 8004748:	08004c4f 	.word	0x08004c4f

0800474c <memmove>:
 800474c:	b510      	push	{r4, lr}
 800474e:	4288      	cmp	r0, r1
 8004750:	d902      	bls.n	8004758 <memmove+0xc>
 8004752:	188b      	adds	r3, r1, r2
 8004754:	4298      	cmp	r0, r3
 8004756:	d308      	bcc.n	800476a <memmove+0x1e>
 8004758:	2300      	movs	r3, #0
 800475a:	429a      	cmp	r2, r3
 800475c:	d007      	beq.n	800476e <memmove+0x22>
 800475e:	5ccc      	ldrb	r4, [r1, r3]
 8004760:	54c4      	strb	r4, [r0, r3]
 8004762:	3301      	adds	r3, #1
 8004764:	e7f9      	b.n	800475a <memmove+0xe>
 8004766:	5c8b      	ldrb	r3, [r1, r2]
 8004768:	5483      	strb	r3, [r0, r2]
 800476a:	3a01      	subs	r2, #1
 800476c:	d2fb      	bcs.n	8004766 <memmove+0x1a>
 800476e:	bd10      	pop	{r4, pc}

08004770 <_sbrk_r>:
 8004770:	2300      	movs	r3, #0
 8004772:	b570      	push	{r4, r5, r6, lr}
 8004774:	4d06      	ldr	r5, [pc, #24]	@ (8004790 <_sbrk_r+0x20>)
 8004776:	0004      	movs	r4, r0
 8004778:	0008      	movs	r0, r1
 800477a:	602b      	str	r3, [r5, #0]
 800477c:	f7fc feb4 	bl	80014e8 <_sbrk>
 8004780:	1c43      	adds	r3, r0, #1
 8004782:	d103      	bne.n	800478c <_sbrk_r+0x1c>
 8004784:	682b      	ldr	r3, [r5, #0]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d000      	beq.n	800478c <_sbrk_r+0x1c>
 800478a:	6023      	str	r3, [r4, #0]
 800478c:	bd70      	pop	{r4, r5, r6, pc}
 800478e:	46c0      	nop			@ (mov r8, r8)
 8004790:	200006e4 	.word	0x200006e4

08004794 <memchr>:
 8004794:	b2c9      	uxtb	r1, r1
 8004796:	1882      	adds	r2, r0, r2
 8004798:	4290      	cmp	r0, r2
 800479a:	d101      	bne.n	80047a0 <memchr+0xc>
 800479c:	2000      	movs	r0, #0
 800479e:	4770      	bx	lr
 80047a0:	7803      	ldrb	r3, [r0, #0]
 80047a2:	428b      	cmp	r3, r1
 80047a4:	d0fb      	beq.n	800479e <memchr+0xa>
 80047a6:	3001      	adds	r0, #1
 80047a8:	e7f6      	b.n	8004798 <memchr+0x4>

080047aa <memcpy>:
 80047aa:	2300      	movs	r3, #0
 80047ac:	b510      	push	{r4, lr}
 80047ae:	429a      	cmp	r2, r3
 80047b0:	d100      	bne.n	80047b4 <memcpy+0xa>
 80047b2:	bd10      	pop	{r4, pc}
 80047b4:	5ccc      	ldrb	r4, [r1, r3]
 80047b6:	54c4      	strb	r4, [r0, r3]
 80047b8:	3301      	adds	r3, #1
 80047ba:	e7f8      	b.n	80047ae <memcpy+0x4>

080047bc <_realloc_r>:
 80047bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80047be:	0006      	movs	r6, r0
 80047c0:	000c      	movs	r4, r1
 80047c2:	0015      	movs	r5, r2
 80047c4:	2900      	cmp	r1, #0
 80047c6:	d105      	bne.n	80047d4 <_realloc_r+0x18>
 80047c8:	0011      	movs	r1, r2
 80047ca:	f7ff fc55 	bl	8004078 <_malloc_r>
 80047ce:	0004      	movs	r4, r0
 80047d0:	0020      	movs	r0, r4
 80047d2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80047d4:	2a00      	cmp	r2, #0
 80047d6:	d103      	bne.n	80047e0 <_realloc_r+0x24>
 80047d8:	f7ff fbe2 	bl	8003fa0 <_free_r>
 80047dc:	002c      	movs	r4, r5
 80047de:	e7f7      	b.n	80047d0 <_realloc_r+0x14>
 80047e0:	f000 f81c 	bl	800481c <_malloc_usable_size_r>
 80047e4:	0007      	movs	r7, r0
 80047e6:	4285      	cmp	r5, r0
 80047e8:	d802      	bhi.n	80047f0 <_realloc_r+0x34>
 80047ea:	0843      	lsrs	r3, r0, #1
 80047ec:	42ab      	cmp	r3, r5
 80047ee:	d3ef      	bcc.n	80047d0 <_realloc_r+0x14>
 80047f0:	0029      	movs	r1, r5
 80047f2:	0030      	movs	r0, r6
 80047f4:	f7ff fc40 	bl	8004078 <_malloc_r>
 80047f8:	9001      	str	r0, [sp, #4]
 80047fa:	2800      	cmp	r0, #0
 80047fc:	d101      	bne.n	8004802 <_realloc_r+0x46>
 80047fe:	9c01      	ldr	r4, [sp, #4]
 8004800:	e7e6      	b.n	80047d0 <_realloc_r+0x14>
 8004802:	002a      	movs	r2, r5
 8004804:	42bd      	cmp	r5, r7
 8004806:	d900      	bls.n	800480a <_realloc_r+0x4e>
 8004808:	003a      	movs	r2, r7
 800480a:	0021      	movs	r1, r4
 800480c:	9801      	ldr	r0, [sp, #4]
 800480e:	f7ff ffcc 	bl	80047aa <memcpy>
 8004812:	0021      	movs	r1, r4
 8004814:	0030      	movs	r0, r6
 8004816:	f7ff fbc3 	bl	8003fa0 <_free_r>
 800481a:	e7f0      	b.n	80047fe <_realloc_r+0x42>

0800481c <_malloc_usable_size_r>:
 800481c:	1f0b      	subs	r3, r1, #4
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	1f18      	subs	r0, r3, #4
 8004822:	2b00      	cmp	r3, #0
 8004824:	da01      	bge.n	800482a <_malloc_usable_size_r+0xe>
 8004826:	580b      	ldr	r3, [r1, r0]
 8004828:	18c0      	adds	r0, r0, r3
 800482a:	4770      	bx	lr

0800482c <_init>:
 800482c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800482e:	46c0      	nop			@ (mov r8, r8)
 8004830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004832:	bc08      	pop	{r3}
 8004834:	469e      	mov	lr, r3
 8004836:	4770      	bx	lr

08004838 <_fini>:
 8004838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800483a:	46c0      	nop			@ (mov r8, r8)
 800483c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800483e:	bc08      	pop	{r3}
 8004840:	469e      	mov	lr, r3
 8004842:	4770      	bx	lr
