
stm32c0_swtimer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003efc  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000368  08003fbc  08003fbc  00004fbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004324  08004324  00006060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08004324  08004324  00006060  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08004324  08004324  00006060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004324  08004324  00005324  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004328  08004328  00005328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  0800432c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000670  20000060  0800438c  00006060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006d0  0800438c  000066d0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00006060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001aae5  00000000  00000000  00006088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b3a  00000000  00000000  00020b6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0000c1b0  00000000  00000000  000246a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010e0  00000000  00000000  00030858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e3b  00000000  00000000  00031938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018a9f  00000000  00000000  00032773  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f086  00000000  00000000  0004b212  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008f478  00000000  00000000  0006a298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000f9710  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000316c  00000000  00000000  000f9754  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000055  00000000  00000000  000fc8c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000060 	.word	0x20000060
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003fa4 	.word	0x08003fa4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000064 	.word	0x20000064
 8000104:	08003fa4 	.word	0x08003fa4

08000108 <strcmp>:
 8000108:	7802      	ldrb	r2, [r0, #0]
 800010a:	780b      	ldrb	r3, [r1, #0]
 800010c:	2a00      	cmp	r2, #0
 800010e:	d003      	beq.n	8000118 <strcmp+0x10>
 8000110:	3001      	adds	r0, #1
 8000112:	3101      	adds	r1, #1
 8000114:	429a      	cmp	r2, r3
 8000116:	d0f7      	beq.n	8000108 <strcmp>
 8000118:	1ad0      	subs	r0, r2, r3
 800011a:	4770      	bx	lr

0800011c <__gnu_thumb1_case_shi>:
 800011c:	b403      	push	{r0, r1}
 800011e:	4671      	mov	r1, lr
 8000120:	0849      	lsrs	r1, r1, #1
 8000122:	0040      	lsls	r0, r0, #1
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	5e09      	ldrsh	r1, [r1, r0]
 8000128:	0049      	lsls	r1, r1, #1
 800012a:	448e      	add	lr, r1
 800012c:	bc03      	pop	{r0, r1}
 800012e:	4770      	bx	lr

08000130 <__udivsi3>:
 8000130:	2200      	movs	r2, #0
 8000132:	0843      	lsrs	r3, r0, #1
 8000134:	428b      	cmp	r3, r1
 8000136:	d374      	bcc.n	8000222 <__udivsi3+0xf2>
 8000138:	0903      	lsrs	r3, r0, #4
 800013a:	428b      	cmp	r3, r1
 800013c:	d35f      	bcc.n	80001fe <__udivsi3+0xce>
 800013e:	0a03      	lsrs	r3, r0, #8
 8000140:	428b      	cmp	r3, r1
 8000142:	d344      	bcc.n	80001ce <__udivsi3+0x9e>
 8000144:	0b03      	lsrs	r3, r0, #12
 8000146:	428b      	cmp	r3, r1
 8000148:	d328      	bcc.n	800019c <__udivsi3+0x6c>
 800014a:	0c03      	lsrs	r3, r0, #16
 800014c:	428b      	cmp	r3, r1
 800014e:	d30d      	bcc.n	800016c <__udivsi3+0x3c>
 8000150:	22ff      	movs	r2, #255	@ 0xff
 8000152:	0209      	lsls	r1, r1, #8
 8000154:	ba12      	rev	r2, r2
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d302      	bcc.n	8000162 <__udivsi3+0x32>
 800015c:	1212      	asrs	r2, r2, #8
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	d065      	beq.n	800022e <__udivsi3+0xfe>
 8000162:	0b03      	lsrs	r3, r0, #12
 8000164:	428b      	cmp	r3, r1
 8000166:	d319      	bcc.n	800019c <__udivsi3+0x6c>
 8000168:	e000      	b.n	800016c <__udivsi3+0x3c>
 800016a:	0a09      	lsrs	r1, r1, #8
 800016c:	0bc3      	lsrs	r3, r0, #15
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x46>
 8000172:	03cb      	lsls	r3, r1, #15
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b83      	lsrs	r3, r0, #14
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x52>
 800017e:	038b      	lsls	r3, r1, #14
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b43      	lsrs	r3, r0, #13
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x5e>
 800018a:	034b      	lsls	r3, r1, #13
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b03      	lsrs	r3, r0, #12
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x6a>
 8000196:	030b      	lsls	r3, r1, #12
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0ac3      	lsrs	r3, r0, #11
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x76>
 80001a2:	02cb      	lsls	r3, r1, #11
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a83      	lsrs	r3, r0, #10
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x82>
 80001ae:	028b      	lsls	r3, r1, #10
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a43      	lsrs	r3, r0, #9
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x8e>
 80001ba:	024b      	lsls	r3, r1, #9
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a03      	lsrs	r3, r0, #8
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x9a>
 80001c6:	020b      	lsls	r3, r1, #8
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	d2cd      	bcs.n	800016a <__udivsi3+0x3a>
 80001ce:	09c3      	lsrs	r3, r0, #7
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xa8>
 80001d4:	01cb      	lsls	r3, r1, #7
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0983      	lsrs	r3, r0, #6
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xb4>
 80001e0:	018b      	lsls	r3, r1, #6
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0943      	lsrs	r3, r0, #5
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xc0>
 80001ec:	014b      	lsls	r3, r1, #5
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0903      	lsrs	r3, r0, #4
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xcc>
 80001f8:	010b      	lsls	r3, r1, #4
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	08c3      	lsrs	r3, r0, #3
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xd8>
 8000204:	00cb      	lsls	r3, r1, #3
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0883      	lsrs	r3, r0, #2
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xe4>
 8000210:	008b      	lsls	r3, r1, #2
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0843      	lsrs	r3, r0, #1
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xf0>
 800021c:	004b      	lsls	r3, r1, #1
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	1a41      	subs	r1, r0, r1
 8000224:	d200      	bcs.n	8000228 <__udivsi3+0xf8>
 8000226:	4601      	mov	r1, r0
 8000228:	4152      	adcs	r2, r2
 800022a:	4610      	mov	r0, r2
 800022c:	4770      	bx	lr
 800022e:	e7ff      	b.n	8000230 <__udivsi3+0x100>
 8000230:	b501      	push	{r0, lr}
 8000232:	2000      	movs	r0, #0
 8000234:	f000 f8f0 	bl	8000418 <__aeabi_idiv0>
 8000238:	bd02      	pop	{r1, pc}
 800023a:	46c0      	nop			@ (mov r8, r8)

0800023c <__aeabi_uidivmod>:
 800023c:	2900      	cmp	r1, #0
 800023e:	d0f7      	beq.n	8000230 <__udivsi3+0x100>
 8000240:	e776      	b.n	8000130 <__udivsi3>
 8000242:	4770      	bx	lr

08000244 <__divsi3>:
 8000244:	4603      	mov	r3, r0
 8000246:	430b      	orrs	r3, r1
 8000248:	d47f      	bmi.n	800034a <__divsi3+0x106>
 800024a:	2200      	movs	r2, #0
 800024c:	0843      	lsrs	r3, r0, #1
 800024e:	428b      	cmp	r3, r1
 8000250:	d374      	bcc.n	800033c <__divsi3+0xf8>
 8000252:	0903      	lsrs	r3, r0, #4
 8000254:	428b      	cmp	r3, r1
 8000256:	d35f      	bcc.n	8000318 <__divsi3+0xd4>
 8000258:	0a03      	lsrs	r3, r0, #8
 800025a:	428b      	cmp	r3, r1
 800025c:	d344      	bcc.n	80002e8 <__divsi3+0xa4>
 800025e:	0b03      	lsrs	r3, r0, #12
 8000260:	428b      	cmp	r3, r1
 8000262:	d328      	bcc.n	80002b6 <__divsi3+0x72>
 8000264:	0c03      	lsrs	r3, r0, #16
 8000266:	428b      	cmp	r3, r1
 8000268:	d30d      	bcc.n	8000286 <__divsi3+0x42>
 800026a:	22ff      	movs	r2, #255	@ 0xff
 800026c:	0209      	lsls	r1, r1, #8
 800026e:	ba12      	rev	r2, r2
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d302      	bcc.n	800027c <__divsi3+0x38>
 8000276:	1212      	asrs	r2, r2, #8
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	d065      	beq.n	8000348 <__divsi3+0x104>
 800027c:	0b03      	lsrs	r3, r0, #12
 800027e:	428b      	cmp	r3, r1
 8000280:	d319      	bcc.n	80002b6 <__divsi3+0x72>
 8000282:	e000      	b.n	8000286 <__divsi3+0x42>
 8000284:	0a09      	lsrs	r1, r1, #8
 8000286:	0bc3      	lsrs	r3, r0, #15
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x4c>
 800028c:	03cb      	lsls	r3, r1, #15
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b83      	lsrs	r3, r0, #14
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x58>
 8000298:	038b      	lsls	r3, r1, #14
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b43      	lsrs	r3, r0, #13
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x64>
 80002a4:	034b      	lsls	r3, r1, #13
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b03      	lsrs	r3, r0, #12
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x70>
 80002b0:	030b      	lsls	r3, r1, #12
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0ac3      	lsrs	r3, r0, #11
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x7c>
 80002bc:	02cb      	lsls	r3, r1, #11
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a83      	lsrs	r3, r0, #10
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x88>
 80002c8:	028b      	lsls	r3, r1, #10
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a43      	lsrs	r3, r0, #9
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x94>
 80002d4:	024b      	lsls	r3, r1, #9
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a03      	lsrs	r3, r0, #8
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0xa0>
 80002e0:	020b      	lsls	r3, r1, #8
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	d2cd      	bcs.n	8000284 <__divsi3+0x40>
 80002e8:	09c3      	lsrs	r3, r0, #7
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xae>
 80002ee:	01cb      	lsls	r3, r1, #7
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0983      	lsrs	r3, r0, #6
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xba>
 80002fa:	018b      	lsls	r3, r1, #6
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0943      	lsrs	r3, r0, #5
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xc6>
 8000306:	014b      	lsls	r3, r1, #5
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0903      	lsrs	r3, r0, #4
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xd2>
 8000312:	010b      	lsls	r3, r1, #4
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	08c3      	lsrs	r3, r0, #3
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xde>
 800031e:	00cb      	lsls	r3, r1, #3
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	0883      	lsrs	r3, r0, #2
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xea>
 800032a:	008b      	lsls	r3, r1, #2
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0843      	lsrs	r3, r0, #1
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xf6>
 8000336:	004b      	lsls	r3, r1, #1
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	1a41      	subs	r1, r0, r1
 800033e:	d200      	bcs.n	8000342 <__divsi3+0xfe>
 8000340:	4601      	mov	r1, r0
 8000342:	4152      	adcs	r2, r2
 8000344:	4610      	mov	r0, r2
 8000346:	4770      	bx	lr
 8000348:	e05d      	b.n	8000406 <__divsi3+0x1c2>
 800034a:	0fca      	lsrs	r2, r1, #31
 800034c:	d000      	beq.n	8000350 <__divsi3+0x10c>
 800034e:	4249      	negs	r1, r1
 8000350:	1003      	asrs	r3, r0, #32
 8000352:	d300      	bcc.n	8000356 <__divsi3+0x112>
 8000354:	4240      	negs	r0, r0
 8000356:	4053      	eors	r3, r2
 8000358:	2200      	movs	r2, #0
 800035a:	469c      	mov	ip, r3
 800035c:	0903      	lsrs	r3, r0, #4
 800035e:	428b      	cmp	r3, r1
 8000360:	d32d      	bcc.n	80003be <__divsi3+0x17a>
 8000362:	0a03      	lsrs	r3, r0, #8
 8000364:	428b      	cmp	r3, r1
 8000366:	d312      	bcc.n	800038e <__divsi3+0x14a>
 8000368:	22fc      	movs	r2, #252	@ 0xfc
 800036a:	0189      	lsls	r1, r1, #6
 800036c:	ba12      	rev	r2, r2
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d30c      	bcc.n	800038e <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d308      	bcc.n	800038e <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	1192      	asrs	r2, r2, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d304      	bcc.n	800038e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	d03a      	beq.n	80003fe <__divsi3+0x1ba>
 8000388:	1192      	asrs	r2, r2, #6
 800038a:	e000      	b.n	800038e <__divsi3+0x14a>
 800038c:	0989      	lsrs	r1, r1, #6
 800038e:	09c3      	lsrs	r3, r0, #7
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x154>
 8000394:	01cb      	lsls	r3, r1, #7
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0983      	lsrs	r3, r0, #6
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x160>
 80003a0:	018b      	lsls	r3, r1, #6
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0943      	lsrs	r3, r0, #5
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x16c>
 80003ac:	014b      	lsls	r3, r1, #5
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0903      	lsrs	r3, r0, #4
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x178>
 80003b8:	010b      	lsls	r3, r1, #4
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	08c3      	lsrs	r3, r0, #3
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x184>
 80003c4:	00cb      	lsls	r3, r1, #3
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	0883      	lsrs	r3, r0, #2
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x190>
 80003d0:	008b      	lsls	r3, r1, #2
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	d2d9      	bcs.n	800038c <__divsi3+0x148>
 80003d8:	0843      	lsrs	r3, r0, #1
 80003da:	428b      	cmp	r3, r1
 80003dc:	d301      	bcc.n	80003e2 <__divsi3+0x19e>
 80003de:	004b      	lsls	r3, r1, #1
 80003e0:	1ac0      	subs	r0, r0, r3
 80003e2:	4152      	adcs	r2, r2
 80003e4:	1a41      	subs	r1, r0, r1
 80003e6:	d200      	bcs.n	80003ea <__divsi3+0x1a6>
 80003e8:	4601      	mov	r1, r0
 80003ea:	4663      	mov	r3, ip
 80003ec:	4152      	adcs	r2, r2
 80003ee:	105b      	asrs	r3, r3, #1
 80003f0:	4610      	mov	r0, r2
 80003f2:	d301      	bcc.n	80003f8 <__divsi3+0x1b4>
 80003f4:	4240      	negs	r0, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d500      	bpl.n	80003fc <__divsi3+0x1b8>
 80003fa:	4249      	negs	r1, r1
 80003fc:	4770      	bx	lr
 80003fe:	4663      	mov	r3, ip
 8000400:	105b      	asrs	r3, r3, #1
 8000402:	d300      	bcc.n	8000406 <__divsi3+0x1c2>
 8000404:	4240      	negs	r0, r0
 8000406:	b501      	push	{r0, lr}
 8000408:	2000      	movs	r0, #0
 800040a:	f000 f805 	bl	8000418 <__aeabi_idiv0>
 800040e:	bd02      	pop	{r1, pc}

08000410 <__aeabi_idivmod>:
 8000410:	2900      	cmp	r1, #0
 8000412:	d0f8      	beq.n	8000406 <__divsi3+0x1c2>
 8000414:	e716      	b.n	8000244 <__divsi3>
 8000416:	4770      	bx	lr

08000418 <__aeabi_idiv0>:
 8000418:	4770      	bx	lr
 800041a:	46c0      	nop			@ (mov r8, r8)

0800041c <ledISR>:


static void infoCli(uint8_t argc, const char **argv);

void ledISR(void *arg)
{
 800041c:	b510      	push	{r4, lr}
  ledToggle(_DEF_CH1);
 800041e:	2000      	movs	r0, #0
 8000420:	f000 fa34 	bl	800088c <ledToggle>
}
 8000424:	bd10      	pop	{r4, pc}
	...

08000428 <testISR>:

void testISR(void *arg)
{
 8000428:	b510      	push	{r4, lr}
  static uint32_t count = 0;
  uartPrintf(_DEF_CH1,"count %d\n",count++);
 800042a:	4b04      	ldr	r3, [pc, #16]	@ (800043c <testISR+0x14>)
 800042c:	681a      	ldr	r2, [r3, #0]
 800042e:	1c51      	adds	r1, r2, #1
 8000430:	6019      	str	r1, [r3, #0]
 8000432:	4903      	ldr	r1, [pc, #12]	@ (8000440 <testISR+0x18>)
 8000434:	2000      	movs	r0, #0
 8000436:	f000 fb53 	bl	8000ae0 <uartPrintf>
}
 800043a:	bd10      	pop	{r4, pc}
 800043c:	2000007c 	.word	0x2000007c
 8000440:	08003fbc 	.word	0x08003fbc

08000444 <infoCli>:
}



void infoCli(uint8_t argc, const char **argv)
{
 8000444:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000446:	46c6      	mov	lr, r8
 8000448:	b500      	push	{lr}
 800044a:	0004      	movs	r4, r0
 800044c:	000d      	movs	r5, r1
  bool ret = false;

  if(argc == 1 && cliIsStr(argv[0],"test"))
 800044e:	2801      	cmp	r0, #1
 8000450:	d009      	beq.n	8000466 <infoCli+0x22>
  bool ret = false;
 8000452:	2600      	movs	r6, #0
  {
    cliPrintf("infoCli run test \n");
    ret = true;
  }

  if(argc == 2 && cliIsStr(argv[0],"print"))
 8000454:	2c02      	cmp	r4, #2
 8000456:	d010      	beq.n	800047a <infoCli+0x36>
      cliPrintf("print %d/%d\n",i+1,count);
    }
    ret = true;
  }

  if(argc ==1 && cliIsStr(argv[0],"button"))
 8000458:	2c01      	cmp	r4, #1
 800045a:	d026      	beq.n	80004aa <infoCli+0x66>
      delay(100);
    }
    ret = true;
  }

  if(ret == false)
 800045c:	2e00      	cmp	r6, #0
 800045e:	d044      	beq.n	80004ea <infoCli+0xa6>
  {
    cliPrintf("info test\n");
    cliPrintf("info print 0~10\n");
    cliPrintf("info button\n");
  }
}
 8000460:	bc80      	pop	{r7}
 8000462:	46b8      	mov	r8, r7
 8000464:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(argc == 1 && cliIsStr(argv[0],"test"))
 8000466:	4926      	ldr	r1, [pc, #152]	@ (8000500 <infoCli+0xbc>)
 8000468:	6828      	ldr	r0, [r5, #0]
 800046a:	f000 f95f 	bl	800072c <cliIsStr>
 800046e:	1e06      	subs	r6, r0, #0
 8000470:	d0f0      	beq.n	8000454 <infoCli+0x10>
    cliPrintf("infoCli run test \n");
 8000472:	4824      	ldr	r0, [pc, #144]	@ (8000504 <infoCli+0xc0>)
 8000474:	f000 f92c 	bl	80006d0 <cliPrintf>
    ret = true;
 8000478:	e7ec      	b.n	8000454 <infoCli+0x10>
  if(argc == 2 && cliIsStr(argv[0],"print"))
 800047a:	4923      	ldr	r1, [pc, #140]	@ (8000508 <infoCli+0xc4>)
 800047c:	6828      	ldr	r0, [r5, #0]
 800047e:	f000 f955 	bl	800072c <cliIsStr>
 8000482:	4680      	mov	r8, r0
 8000484:	2800      	cmp	r0, #0
 8000486:	d0e7      	beq.n	8000458 <infoCli+0x14>
    count = (uint8_t)cliGetData(argv[1]);
 8000488:	6868      	ldr	r0, [r5, #4]
 800048a:	f000 f958 	bl	800073e <cliGetData>
 800048e:	0007      	movs	r7, r0
    for(int i=0;i<count;i++)
 8000490:	2600      	movs	r6, #0
 8000492:	e004      	b.n	800049e <infoCli+0x5a>
      cliPrintf("print %d/%d\n",i+1,count);
 8000494:	3601      	adds	r6, #1
 8000496:	481d      	ldr	r0, [pc, #116]	@ (800050c <infoCli+0xc8>)
 8000498:	0031      	movs	r1, r6
 800049a:	f000 f919 	bl	80006d0 <cliPrintf>
    for(int i=0;i<count;i++)
 800049e:	22ff      	movs	r2, #255	@ 0xff
 80004a0:	403a      	ands	r2, r7
 80004a2:	4296      	cmp	r6, r2
 80004a4:	dbf6      	blt.n	8000494 <infoCli+0x50>
    ret = true;
 80004a6:	4646      	mov	r6, r8
 80004a8:	e7d6      	b.n	8000458 <infoCli+0x14>
  if(argc ==1 && cliIsStr(argv[0],"button"))
 80004aa:	4919      	ldr	r1, [pc, #100]	@ (8000510 <infoCli+0xcc>)
 80004ac:	6828      	ldr	r0, [r5, #0]
 80004ae:	f000 f93d 	bl	800072c <cliIsStr>
 80004b2:	1e05      	subs	r5, r0, #0
 80004b4:	d111      	bne.n	80004da <infoCli+0x96>
 80004b6:	e7d1      	b.n	800045c <infoCli+0x18>
        cliPrintf("%d", buttonGetPressed(i));
 80004b8:	b2e0      	uxtb	r0, r4
 80004ba:	f000 f8b3 	bl	8000624 <buttonGetPressed>
 80004be:	0001      	movs	r1, r0
 80004c0:	4b14      	ldr	r3, [pc, #80]	@ (8000514 <infoCli+0xd0>)
 80004c2:	0018      	movs	r0, r3
 80004c4:	f000 f904 	bl	80006d0 <cliPrintf>
      for(int i=0;i<BUTTON_MAX_CH;i++)
 80004c8:	3401      	adds	r4, #1
 80004ca:	2c04      	cmp	r4, #4
 80004cc:	ddf4      	ble.n	80004b8 <infoCli+0x74>
      cliPrintf("\n");
 80004ce:	4812      	ldr	r0, [pc, #72]	@ (8000518 <infoCli+0xd4>)
 80004d0:	f000 f8fe 	bl	80006d0 <cliPrintf>
      delay(100);
 80004d4:	2064      	movs	r0, #100	@ 0x64
 80004d6:	f000 fb30 	bl	8000b3a <delay>
    while(cliKeepLoop())
 80004da:	f000 f936 	bl	800074a <cliKeepLoop>
 80004de:	2800      	cmp	r0, #0
 80004e0:	d001      	beq.n	80004e6 <infoCli+0xa2>
      for(int i=0;i<BUTTON_MAX_CH;i++)
 80004e2:	2400      	movs	r4, #0
 80004e4:	e7f1      	b.n	80004ca <infoCli+0x86>
    ret = true;
 80004e6:	002e      	movs	r6, r5
 80004e8:	e7b8      	b.n	800045c <infoCli+0x18>
    cliPrintf("info test\n");
 80004ea:	480c      	ldr	r0, [pc, #48]	@ (800051c <infoCli+0xd8>)
 80004ec:	f000 f8f0 	bl	80006d0 <cliPrintf>
    cliPrintf("info print 0~10\n");
 80004f0:	480b      	ldr	r0, [pc, #44]	@ (8000520 <infoCli+0xdc>)
 80004f2:	f000 f8ed 	bl	80006d0 <cliPrintf>
    cliPrintf("info button\n");
 80004f6:	480b      	ldr	r0, [pc, #44]	@ (8000524 <infoCli+0xe0>)
 80004f8:	f000 f8ea 	bl	80006d0 <cliPrintf>
}
 80004fc:	e7b0      	b.n	8000460 <infoCli+0x1c>
 80004fe:	46c0      	nop			@ (mov r8, r8)
 8000500:	08003fc8 	.word	0x08003fc8
 8000504:	08003fd0 	.word	0x08003fd0
 8000508:	08003fe4 	.word	0x08003fe4
 800050c:	08003fec 	.word	0x08003fec
 8000510:	08003ffc 	.word	0x08003ffc
 8000514:	08004004 	.word	0x08004004
 8000518:	08004008 	.word	0x08004008
 800051c:	0800400c 	.word	0x0800400c
 8000520:	08004018 	.word	0x08004018
 8000524:	0800402c 	.word	0x0800402c

08000528 <apInit>:
{
 8000528:	b510      	push	{r4, lr}
 800052a:	b084      	sub	sp, #16
  cliInit();
 800052c:	f000 f8b6 	bl	800069c <cliInit>
  swtimerInit();
 8000530:	f000 f9e2 	bl	80008f8 <swtimerInit>
  ledInit();
 8000534:	f000 f992 	bl	800085c <ledInit>
  pwmInit();
 8000538:	f000 f9c0 	bl	80008bc <pwmInit>
  adcInit();
 800053c:	f000 f850 	bl	80005e0 <adcInit>
  buttonInit();
 8000540:	f000 f86e 	bl	8000620 <buttonInit>
  uartInit();
 8000544:	f000 fa70 	bl	8000a28 <uartInit>
  cliAdd("info", infoCli);
 8000548:	4917      	ldr	r1, [pc, #92]	@ (80005a8 <apInit+0x80>)
 800054a:	4818      	ldr	r0, [pc, #96]	@ (80005ac <apInit+0x84>)
 800054c:	f000 f886 	bl	800065c <cliAdd>
  if(swtimerGetCh(&timer_ch)== true)
 8000550:	200f      	movs	r0, #15
 8000552:	4468      	add	r0, sp
 8000554:	f000 f9ea 	bl	800092c <swtimerGetCh>
 8000558:	2800      	cmp	r0, #0
 800055a:	d107      	bne.n	800056c <apInit+0x44>
  if(swtimerGetCh(&timer_ch)== true)
 800055c:	200f      	movs	r0, #15
 800055e:	4468      	add	r0, sp
 8000560:	f000 f9e4 	bl	800092c <swtimerGetCh>
 8000564:	2800      	cmp	r0, #0
 8000566:	d110      	bne.n	800058a <apInit+0x62>
}
 8000568:	b004      	add	sp, #16
 800056a:	bd10      	pop	{r4, pc}
    swtimerSet(timer_ch,
 800056c:	4910      	ldr	r1, [pc, #64]	@ (80005b0 <apInit+0x88>)
 800056e:	240f      	movs	r4, #15
 8000570:	446c      	add	r4, sp
 8000572:	7820      	ldrb	r0, [r4, #0]
 8000574:	23fa      	movs	r3, #250	@ 0xfa
 8000576:	005b      	lsls	r3, r3, #1
 8000578:	9300      	str	r3, [sp, #0]
 800057a:	2300      	movs	r3, #0
 800057c:	2200      	movs	r2, #0
 800057e:	f000 f9e3 	bl	8000948 <swtimerSet>
    swtimerStart(timer_ch);
 8000582:	7820      	ldrb	r0, [r4, #0]
 8000584:	f000 f9f8 	bl	8000978 <swtimerStart>
 8000588:	e7e8      	b.n	800055c <apInit+0x34>
      swtimerSet(timer_ch,
 800058a:	490a      	ldr	r1, [pc, #40]	@ (80005b4 <apInit+0x8c>)
 800058c:	240f      	movs	r4, #15
 800058e:	446c      	add	r4, sp
 8000590:	7820      	ldrb	r0, [r4, #0]
 8000592:	23fa      	movs	r3, #250	@ 0xfa
 8000594:	009b      	lsls	r3, r3, #2
 8000596:	9300      	str	r3, [sp, #0]
 8000598:	2300      	movs	r3, #0
 800059a:	2200      	movs	r2, #0
 800059c:	f000 f9d4 	bl	8000948 <swtimerSet>
      swtimerStart(timer_ch);
 80005a0:	7820      	ldrb	r0, [r4, #0]
 80005a2:	f000 f9e9 	bl	8000978 <swtimerStart>
}
 80005a6:	e7df      	b.n	8000568 <apInit+0x40>
 80005a8:	08000445 	.word	0x08000445
 80005ac:	0800403c 	.word	0x0800403c
 80005b0:	0800041d 	.word	0x0800041d
 80005b4:	08000429 	.word	0x08000429

080005b8 <apMain>:
{
 80005b8:	b510      	push	{r4, lr}
  ledSetDuty(_DEF_CH1, 100);
 80005ba:	2164      	movs	r1, #100	@ 0x64
 80005bc:	2000      	movs	r0, #0
 80005be:	f000 f975 	bl	80008ac <ledSetDuty>
  uint32_t pre_time = 0;
 80005c2:	2400      	movs	r4, #0
 80005c4:	e004      	b.n	80005d0 <apMain+0x18>
      pre_time = millis();
 80005c6:	f000 fabc 	bl	8000b42 <millis>
 80005ca:	0004      	movs	r4, r0
    cliMain();
 80005cc:	f000 f8c8 	bl	8000760 <cliMain>
    if(millis()-pre_time >= 500)
 80005d0:	f000 fab7 	bl	8000b42 <millis>
 80005d4:	1b00      	subs	r0, r0, r4
 80005d6:	22fa      	movs	r2, #250	@ 0xfa
 80005d8:	0052      	lsls	r2, r2, #1
 80005da:	4290      	cmp	r0, r2
 80005dc:	d2f3      	bcs.n	80005c6 <apMain+0xe>
 80005de:	e7f5      	b.n	80005cc <apMain+0x14>

080005e0 <adcInit>:

uint16_t adc_data[3];
//uint32_t adc_time;

bool adcInit(void)
{
 80005e0:	b510      	push	{r4, lr}
  HAL_ADCEx_Calibration_Start(&hadc1);
 80005e2:	4c05      	ldr	r4, [pc, #20]	@ (80005f8 <adcInit+0x18>)
 80005e4:	0020      	movs	r0, r4
 80005e6:	f001 fa07 	bl	80019f8 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1,(uint32_t *)&adc_data,3);
 80005ea:	4904      	ldr	r1, [pc, #16]	@ (80005fc <adcInit+0x1c>)
 80005ec:	2203      	movs	r2, #3
 80005ee:	0020      	movs	r0, r4
 80005f0:	f001 f95e 	bl	80018b0 <HAL_ADC_Start_DMA>

  return true;
}
 80005f4:	2001      	movs	r0, #1
 80005f6:	bd10      	pop	{r4, pc}
 80005f8:	2000051c 	.word	0x2000051c
 80005fc:	20000080 	.word	0x20000080

08000600 <adcRead>:
uint16_t adcRead(uint8_t ch)
{
  uint16_t ret = 0;


  ret = adc_data[ch];
 8000600:	4b01      	ldr	r3, [pc, #4]	@ (8000608 <adcRead+0x8>)
 8000602:	0040      	lsls	r0, r0, #1
 8000604:	5ac0      	ldrh	r0, [r0, r3]


  return ret;

}
 8000606:	4770      	bx	lr
 8000608:	20000080 	.word	0x20000080

0800060c <adcReadVoltage>:
uint32_t adcReadVoltage(uint8_t ch)
{
 800060c:	b510      	push	{r4, lr}

  uint32_t ret;
  uint32_t adc_data;
  adc_data = adcRead(ch);
 800060e:	f7ff fff7 	bl	8000600 <adcRead>


  ret = (330 *adc_data)/ 4096;
 8000612:	0083      	lsls	r3, r0, #2
 8000614:	1818      	adds	r0, r3, r0
 8000616:	0143      	lsls	r3, r0, #5
 8000618:	18c0      	adds	r0, r0, r3
 800061a:	0040      	lsls	r0, r0, #1
 800061c:	0b00      	lsrs	r0, r0, #12

  return ret;
}
 800061e:	bd10      	pop	{r4, pc}

08000620 <buttonInit>:


bool buttonInit(void)
{
  return true;
}
 8000620:	2001      	movs	r0, #1
 8000622:	4770      	bx	lr

08000624 <buttonGetPressed>:

bool buttonGetPressed(uint8_t ch)
{
 8000624:	b510      	push	{r4, lr}
 8000626:	0004      	movs	r4, r0
  bool ret = false;
  uint32_t adc_voltage;

  if(ch>=BUTTON_MAX_CH)
 8000628:	2804      	cmp	r0, #4
 800062a:	d901      	bls.n	8000630 <buttonGetPressed+0xc>
    return false;
 800062c:	2000      	movs	r0, #0
      ret = true;
  }


  return ret;
}
 800062e:	bd10      	pop	{r4, pc}
  adc_voltage = adcReadVoltage(adc_ch);
 8000630:	2000      	movs	r0, #0
 8000632:	f7ff ffeb 	bl	800060c <adcReadVoltage>
  if(adc_voltage >= button_adc[ch].adc_min && adc_voltage <= button_adc[ch].adc_max)
 8000636:	4b08      	ldr	r3, [pc, #32]	@ (8000658 <buttonGetPressed+0x34>)
 8000638:	00a2      	lsls	r2, r4, #2
 800063a:	5ad3      	ldrh	r3, [r2, r3]
 800063c:	4283      	cmp	r3, r0
 800063e:	d806      	bhi.n	800064e <buttonGetPressed+0x2a>
 8000640:	4b05      	ldr	r3, [pc, #20]	@ (8000658 <buttonGetPressed+0x34>)
 8000642:	189b      	adds	r3, r3, r2
 8000644:	885b      	ldrh	r3, [r3, #2]
 8000646:	4283      	cmp	r3, r0
 8000648:	d203      	bcs.n	8000652 <buttonGetPressed+0x2e>
  bool ret = false;
 800064a:	2000      	movs	r0, #0
 800064c:	e7ef      	b.n	800062e <buttonGetPressed+0xa>
 800064e:	2000      	movs	r0, #0
 8000650:	e7ed      	b.n	800062e <buttonGetPressed+0xa>
      ret = true;
 8000652:	2001      	movs	r0, #1
 8000654:	e7eb      	b.n	800062e <buttonGetPressed+0xa>
 8000656:	46c0      	nop			@ (mov r8, r8)
 8000658:	08004078 	.word	0x08004078

0800065c <cliAdd>:
  cliAdd("help",cliHelp);
  return true;
}

bool cliAdd(const char *cmd_str, void (*cmd_func)(uint8_t argc, const char **argv))
{
 800065c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800065e:	0003      	movs	r3, r0
 8000660:	000d      	movs	r5, r1
   if(cli_cmd_count >=CLI_CMD_LIST_MAX)
 8000662:	4a0c      	ldr	r2, [pc, #48]	@ (8000694 <cliAdd+0x38>)
 8000664:	7814      	ldrb	r4, [r2, #0]
 8000666:	2c07      	cmp	r4, #7
 8000668:	d901      	bls.n	800066e <cliAdd+0x12>
     return false;
 800066a:	2000      	movs	r0, #0
  strncpy(cli_cmd_func[cli_cmd_count].cmd_str,cmd_str,8);
  cli_cmd_func[cli_cmd_count].cmd_func = cmd_func;
  cli_cmd_count++;

  return true;
}
 800066c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  strncpy(cli_cmd_func[cli_cmd_count].cmd_str,cmd_str,8);
 800066e:	0066      	lsls	r6, r4, #1
 8000670:	1930      	adds	r0, r6, r4
 8000672:	0080      	lsls	r0, r0, #2
 8000674:	4f08      	ldr	r7, [pc, #32]	@ (8000698 <cliAdd+0x3c>)
 8000676:	19c0      	adds	r0, r0, r7
 8000678:	2208      	movs	r2, #8
 800067a:	0019      	movs	r1, r3
 800067c:	f002 ffda 	bl	8003634 <strncpy>
  cli_cmd_func[cli_cmd_count].cmd_func = cmd_func;
 8000680:	1936      	adds	r6, r6, r4
 8000682:	00b6      	lsls	r6, r6, #2
 8000684:	19bf      	adds	r7, r7, r6
 8000686:	60bd      	str	r5, [r7, #8]
  cli_cmd_count++;
 8000688:	4b02      	ldr	r3, [pc, #8]	@ (8000694 <cliAdd+0x38>)
 800068a:	3401      	adds	r4, #1
 800068c:	701c      	strb	r4, [r3, #0]
  return true;
 800068e:	2001      	movs	r0, #1
 8000690:	e7ec      	b.n	800066c <cliAdd+0x10>
 8000692:	46c0      	nop			@ (mov r8, r8)
 8000694:	200000e8 	.word	0x200000e8
 8000698:	20000088 	.word	0x20000088

0800069c <cliInit>:
{
 800069c:	b510      	push	{r4, lr}
  for(int i=0;i<CLI_CMD_LIST_MAX;i++)
 800069e:	2200      	movs	r2, #0
 80006a0:	e007      	b.n	80006b2 <cliInit+0x16>
    cli_cmd_func[i].cmd_func = NULL;
 80006a2:	4b08      	ldr	r3, [pc, #32]	@ (80006c4 <cliInit+0x28>)
 80006a4:	0051      	lsls	r1, r2, #1
 80006a6:	1889      	adds	r1, r1, r2
 80006a8:	0088      	lsls	r0, r1, #2
 80006aa:	181b      	adds	r3, r3, r0
 80006ac:	2100      	movs	r1, #0
 80006ae:	6099      	str	r1, [r3, #8]
  for(int i=0;i<CLI_CMD_LIST_MAX;i++)
 80006b0:	3201      	adds	r2, #1
 80006b2:	2a07      	cmp	r2, #7
 80006b4:	ddf5      	ble.n	80006a2 <cliInit+0x6>
  cliAdd("help",cliHelp);
 80006b6:	4904      	ldr	r1, [pc, #16]	@ (80006c8 <cliInit+0x2c>)
 80006b8:	4804      	ldr	r0, [pc, #16]	@ (80006cc <cliInit+0x30>)
 80006ba:	f7ff ffcf 	bl	800065c <cliAdd>
}
 80006be:	2001      	movs	r0, #1
 80006c0:	bd10      	pop	{r4, pc}
 80006c2:	46c0      	nop			@ (mov r8, r8)
 80006c4:	20000088 	.word	0x20000088
 80006c8:	080006ed 	.word	0x080006ed
 80006cc:	08004044 	.word	0x08004044

080006d0 <cliPrintf>:
  cliPrintf("------------------------\n");
}


void cliPrintf(const char *fmt, ...)
{
 80006d0:	b40f      	push	{r0, r1, r2, r3}
 80006d2:	b500      	push	{lr}
 80006d4:	b083      	sub	sp, #12
 80006d6:	aa04      	add	r2, sp, #16
 80006d8:	ca02      	ldmia	r2!, {r1}
  va_list arg;

  va_start(arg,fmt);
 80006da:	9201      	str	r2, [sp, #4]
  uartVPrintf(cli_ch,fmt,arg);
 80006dc:	2000      	movs	r0, #0
 80006de:	f000 fa18 	bl	8000b12 <uartVPrintf>
  va_end(arg);
}
 80006e2:	b003      	add	sp, #12
 80006e4:	bc08      	pop	{r3}
 80006e6:	b004      	add	sp, #16
 80006e8:	4718      	bx	r3
	...

080006ec <cliHelp>:
{
 80006ec:	b510      	push	{r4, lr}
  cliPrintf("------------------------\n");
 80006ee:	480b      	ldr	r0, [pc, #44]	@ (800071c <cliHelp+0x30>)
 80006f0:	f7ff ffee 	bl	80006d0 <cliPrintf>
  for(int i=0;i<cli_cmd_count;i++)
 80006f4:	2400      	movs	r4, #0
 80006f6:	e008      	b.n	800070a <cliHelp+0x1e>
    cliPrintf("%s\n",cli_cmd_func[i].cmd_str);
 80006f8:	0063      	lsls	r3, r4, #1
 80006fa:	191b      	adds	r3, r3, r4
 80006fc:	0099      	lsls	r1, r3, #2
 80006fe:	4b08      	ldr	r3, [pc, #32]	@ (8000720 <cliHelp+0x34>)
 8000700:	18c9      	adds	r1, r1, r3
 8000702:	4808      	ldr	r0, [pc, #32]	@ (8000724 <cliHelp+0x38>)
 8000704:	f7ff ffe4 	bl	80006d0 <cliPrintf>
  for(int i=0;i<cli_cmd_count;i++)
 8000708:	3401      	adds	r4, #1
 800070a:	4b07      	ldr	r3, [pc, #28]	@ (8000728 <cliHelp+0x3c>)
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	42a3      	cmp	r3, r4
 8000710:	dcf2      	bgt.n	80006f8 <cliHelp+0xc>
  cliPrintf("------------------------\n");
 8000712:	4802      	ldr	r0, [pc, #8]	@ (800071c <cliHelp+0x30>)
 8000714:	f7ff ffdc 	bl	80006d0 <cliPrintf>
}
 8000718:	bd10      	pop	{r4, pc}
 800071a:	46c0      	nop			@ (mov r8, r8)
 800071c:	0800404c 	.word	0x0800404c
 8000720:	20000088 	.word	0x20000088
 8000724:	08004068 	.word	0x08004068
 8000728:	200000e8 	.word	0x200000e8

0800072c <cliIsStr>:

bool cliIsStr(const char *p_arg , const char *p_str)
{
 800072c:	b510      	push	{r4, lr}
  if(strcmp(p_arg,p_str)==0)
 800072e:	f7ff fceb 	bl	8000108 <strcmp>
 8000732:	2800      	cmp	r0, #0
 8000734:	d101      	bne.n	800073a <cliIsStr+0xe>
    return true;
 8000736:	3001      	adds	r0, #1
  else
    return false;
}
 8000738:	bd10      	pop	{r4, pc}
    return false;
 800073a:	2000      	movs	r0, #0
 800073c:	e7fc      	b.n	8000738 <cliIsStr+0xc>

0800073e <cliGetData>:

int32_t cliGetData(const char *p_arg)
{
 800073e:	b510      	push	{r4, lr}
  int32_t ret;
  ret = (int32_t)strtoul(p_arg,(char **)NULL, 0);
 8000740:	2200      	movs	r2, #0
 8000742:	2100      	movs	r1, #0
 8000744:	f002 ff28 	bl	8003598 <strtoul>

  return ret;
}
 8000748:	bd10      	pop	{r4, pc}

0800074a <cliKeepLoop>:

bool cliKeepLoop(void)
{
 800074a:	b510      	push	{r4, lr}
  if(uartAvailable(cli_ch) == 0)
 800074c:	2000      	movs	r0, #0
 800074e:	f000 f98d 	bl	8000a6c <uartAvailable>
 8000752:	2800      	cmp	r0, #0
 8000754:	d101      	bne.n	800075a <cliKeepLoop+0x10>
    return true;
 8000756:	3001      	adds	r0, #1
  else
    return false;
}
 8000758:	bd10      	pop	{r4, pc}
    return false;
 800075a:	2000      	movs	r0, #0
 800075c:	e7fc      	b.n	8000758 <cliKeepLoop+0xe>
	...

08000760 <cliMain>:


bool cliMain(void)
{
 8000760:	b530      	push	{r4, r5, lr}
 8000762:	b083      	sub	sp, #12
  bool ret = false;
  if(uartAvailable(cli_ch) > 0)
 8000764:	2000      	movs	r0, #0
 8000766:	f000 f981 	bl	8000a6c <uartAvailable>
 800076a:	2800      	cmp	r0, #0
 800076c:	d103      	bne.n	8000776 <cliMain+0x16>
  bool ret = false;
 800076e:	2400      	movs	r4, #0

          uartWrite(cli_ch, &rx_data , 1);
        }
      }
  return ret;
}
 8000770:	0020      	movs	r0, r4
 8000772:	b003      	add	sp, #12
 8000774:	bd30      	pop	{r4, r5, pc}
        rx_data = uartRead(cli_ch);
 8000776:	2000      	movs	r0, #0
 8000778:	f000 f99a 	bl	8000ab0 <uartRead>
 800077c:	466b      	mov	r3, sp
 800077e:	70d8      	strb	r0, [r3, #3]
        if(rx_data == '\r')
 8000780:	280d      	cmp	r0, #13
 8000782:	d005      	beq.n	8000790 <cliMain+0x30>
        else if (cli_buf_index < (128-1))
 8000784:	4b2b      	ldr	r3, [pc, #172]	@ (8000834 <cliMain+0xd4>)
 8000786:	881b      	ldrh	r3, [r3, #0]
 8000788:	2b7e      	cmp	r3, #126	@ 0x7e
 800078a:	d945      	bls.n	8000818 <cliMain+0xb8>
  bool ret = false;
 800078c:	2400      	movs	r4, #0
 800078e:	e7ef      	b.n	8000770 <cliMain+0x10>
          cli_buf[cli_buf_index] = 0;
 8000790:	4b28      	ldr	r3, [pc, #160]	@ (8000834 <cliMain+0xd4>)
 8000792:	881a      	ldrh	r2, [r3, #0]
 8000794:	4c28      	ldr	r4, [pc, #160]	@ (8000838 <cliMain+0xd8>)
 8000796:	2500      	movs	r5, #0
 8000798:	54a5      	strb	r5, [r4, r2]
          cli_buf_index = 0;
 800079a:	801d      	strh	r5, [r3, #0]
          uartPrintf(cli_ch,"\r\n");
 800079c:	4927      	ldr	r1, [pc, #156]	@ (800083c <cliMain+0xdc>)
 800079e:	2000      	movs	r0, #0
 80007a0:	f000 f99e 	bl	8000ae0 <uartPrintf>
          char *str_ptr = cli_buf;
 80007a4:	9401      	str	r4, [sp, #4]
          cli_argc = 0;
 80007a6:	4b26      	ldr	r3, [pc, #152]	@ (8000840 <cliMain+0xe0>)
 80007a8:	801d      	strh	r5, [r3, #0]
          while((tok = strtok_r(str_ptr," ",&str_ptr)) != NULL)
 80007aa:	e006      	b.n	80007ba <cliMain+0x5a>
            cli_argv[cli_argc] = tok;
 80007ac:	4924      	ldr	r1, [pc, #144]	@ (8000840 <cliMain+0xe0>)
 80007ae:	880b      	ldrh	r3, [r1, #0]
 80007b0:	4a24      	ldr	r2, [pc, #144]	@ (8000844 <cliMain+0xe4>)
 80007b2:	009c      	lsls	r4, r3, #2
 80007b4:	50a0      	str	r0, [r4, r2]
            cli_argc++;
 80007b6:	3301      	adds	r3, #1
 80007b8:	800b      	strh	r3, [r1, #0]
          while((tok = strtok_r(str_ptr," ",&str_ptr)) != NULL)
 80007ba:	4923      	ldr	r1, [pc, #140]	@ (8000848 <cliMain+0xe8>)
 80007bc:	9801      	ldr	r0, [sp, #4]
 80007be:	aa01      	add	r2, sp, #4
 80007c0:	f002 ff78 	bl	80036b4 <strtok_r>
 80007c4:	2800      	cmp	r0, #0
 80007c6:	d1f1      	bne.n	80007ac <cliMain+0x4c>
          for(int i=0;i<cli_cmd_count;i++)
 80007c8:	2400      	movs	r4, #0
 80007ca:	e000      	b.n	80007ce <cliMain+0x6e>
 80007cc:	3401      	adds	r4, #1
 80007ce:	4b1f      	ldr	r3, [pc, #124]	@ (800084c <cliMain+0xec>)
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	42a3      	cmp	r3, r4
 80007d4:	dd1a      	ble.n	800080c <cliMain+0xac>
            if(strcmp(cli_argv[0], cli_cmd_func[i].cmd_str) ==0 )
 80007d6:	4b1b      	ldr	r3, [pc, #108]	@ (8000844 <cliMain+0xe4>)
 80007d8:	6818      	ldr	r0, [r3, #0]
 80007da:	0061      	lsls	r1, r4, #1
 80007dc:	1909      	adds	r1, r1, r4
 80007de:	0089      	lsls	r1, r1, #2
 80007e0:	4b1b      	ldr	r3, [pc, #108]	@ (8000850 <cliMain+0xf0>)
 80007e2:	18c9      	adds	r1, r1, r3
 80007e4:	f7ff fc90 	bl	8000108 <strcmp>
 80007e8:	2800      	cmp	r0, #0
 80007ea:	d1ef      	bne.n	80007cc <cliMain+0x6c>
              if(cli_cmd_func[i].cmd_func != NULL)
 80007ec:	4b18      	ldr	r3, [pc, #96]	@ (8000850 <cliMain+0xf0>)
 80007ee:	0062      	lsls	r2, r4, #1
 80007f0:	1912      	adds	r2, r2, r4
 80007f2:	0092      	lsls	r2, r2, #2
 80007f4:	189b      	adds	r3, r3, r2
 80007f6:	689b      	ldr	r3, [r3, #8]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d0e7      	beq.n	80007cc <cliMain+0x6c>
                cli_cmd_func[i].cmd_func(cli_argc - 1, (const char **)&cli_argv[1]);
 80007fc:	4915      	ldr	r1, [pc, #84]	@ (8000854 <cliMain+0xf4>)
 80007fe:	4a10      	ldr	r2, [pc, #64]	@ (8000840 <cliMain+0xe0>)
 8000800:	8810      	ldrh	r0, [r2, #0]
 8000802:	3801      	subs	r0, #1
 8000804:	b2c0      	uxtb	r0, r0
 8000806:	4798      	blx	r3
                ret = true;
 8000808:	2401      	movs	r4, #1
                break;
 800080a:	e000      	b.n	800080e <cliMain+0xae>
  bool ret = false;
 800080c:	2400      	movs	r4, #0
          uartPrintf(cli_ch,"cli# ");
 800080e:	4912      	ldr	r1, [pc, #72]	@ (8000858 <cliMain+0xf8>)
 8000810:	2000      	movs	r0, #0
 8000812:	f000 f965 	bl	8000ae0 <uartPrintf>
 8000816:	e7ab      	b.n	8000770 <cliMain+0x10>
          cli_buf[cli_buf_index] = rx_data;
 8000818:	4a07      	ldr	r2, [pc, #28]	@ (8000838 <cliMain+0xd8>)
 800081a:	54d0      	strb	r0, [r2, r3]
          cli_buf_index++;
 800081c:	4a05      	ldr	r2, [pc, #20]	@ (8000834 <cliMain+0xd4>)
 800081e:	3301      	adds	r3, #1
 8000820:	8013      	strh	r3, [r2, #0]
          uartWrite(cli_ch, &rx_data , 1);
 8000822:	2201      	movs	r2, #1
 8000824:	466b      	mov	r3, sp
 8000826:	1cd9      	adds	r1, r3, #3
 8000828:	2000      	movs	r0, #0
 800082a:	f000 f90b 	bl	8000a44 <uartWrite>
  bool ret = false;
 800082e:	2400      	movs	r4, #0
 8000830:	e79e      	b.n	8000770 <cliMain+0x10>
 8000832:	46c0      	nop			@ (mov r8, r8)
 8000834:	2000010e 	.word	0x2000010e
 8000838:	20000110 	.word	0x20000110
 800083c:	0800406c 	.word	0x0800406c
 8000840:	2000010c 	.word	0x2000010c
 8000844:	200000ec 	.word	0x200000ec
 8000848:	08004074 	.word	0x08004074
 800084c:	200000e8 	.word	0x200000e8
 8000850:	20000088 	.word	0x20000088
 8000854:	200000f0 	.word	0x200000f0
 8000858:	08004070 	.word	0x08004070

0800085c <ledInit>:


bool ledInit(void)
{
  return true;
}
 800085c:	2001      	movs	r0, #1
 800085e:	4770      	bx	lr

08000860 <ledOn>:
void ledOn(uint8_t ch)
{
 8000860:	b510      	push	{r4, lr}
  switch(ch)
 8000862:	2800      	cmp	r0, #0
 8000864:	d000      	beq.n	8000868 <ledOn+0x8>
    case _DEF_CH1:
     pwmWrite(_DEF_CH1,100 - led_duty[_DEF_CH1]);
      break;
  }

}
 8000866:	bd10      	pop	{r4, pc}
     pwmWrite(_DEF_CH1,100 - led_duty[_DEF_CH1]);
 8000868:	4b03      	ldr	r3, [pc, #12]	@ (8000878 <ledOn+0x18>)
 800086a:	881b      	ldrh	r3, [r3, #0]
 800086c:	2164      	movs	r1, #100	@ 0x64
 800086e:	1ac9      	subs	r1, r1, r3
 8000870:	b289      	uxth	r1, r1
 8000872:	f000 f82d 	bl	80008d0 <pwmWrite>
}
 8000876:	e7f6      	b.n	8000866 <ledOn+0x6>
 8000878:	20000000 	.word	0x20000000

0800087c <ledOff>:
void ledOff(uint8_t ch)
{
 800087c:	b510      	push	{r4, lr}
  switch(ch)
 800087e:	2800      	cmp	r0, #0
 8000880:	d000      	beq.n	8000884 <ledOff+0x8>
    case _DEF_CH1:
      pwmWrite(_DEF_CH1,100);
      break;
  }

}
 8000882:	bd10      	pop	{r4, pc}
      pwmWrite(_DEF_CH1,100);
 8000884:	2164      	movs	r1, #100	@ 0x64
 8000886:	f000 f823 	bl	80008d0 <pwmWrite>
}
 800088a:	e7fa      	b.n	8000882 <ledOff+0x6>

0800088c <ledToggle>:
void ledToggle(uint8_t ch)
{
 800088c:	b510      	push	{r4, lr}
  switch(ch)
 800088e:	2800      	cmp	r0, #0
 8000890:	d000      	beq.n	8000894 <ledToggle+0x8>
      else
        ledOff(_DEF_CH1);
      break;
  }

}
 8000892:	bd10      	pop	{r4, pc}
      if(pwmRead(_DEF_CH1) == 100 )
 8000894:	f000 f824 	bl	80008e0 <pwmRead>
 8000898:	2864      	cmp	r0, #100	@ 0x64
 800089a:	d003      	beq.n	80008a4 <ledToggle+0x18>
        ledOff(_DEF_CH1);
 800089c:	2000      	movs	r0, #0
 800089e:	f7ff ffed 	bl	800087c <ledOff>
}
 80008a2:	e7f6      	b.n	8000892 <ledToggle+0x6>
        ledOn(_DEF_CH1);
 80008a4:	2000      	movs	r0, #0
 80008a6:	f7ff ffdb 	bl	8000860 <ledOn>
 80008aa:	e7f2      	b.n	8000892 <ledToggle+0x6>

080008ac <ledSetDuty>:

void ledSetDuty(uint8_t ch,uint16_t duty_data)
{
  switch(ch)
 80008ac:	2800      	cmp	r0, #0
 80008ae:	d102      	bne.n	80008b6 <ledSetDuty+0xa>
    {
      case _DEF_CH1:
        led_duty[ch] = duty_data;
 80008b0:	4b01      	ldr	r3, [pc, #4]	@ (80008b8 <ledSetDuty+0xc>)
 80008b2:	0040      	lsls	r0, r0, #1
 80008b4:	52c1      	strh	r1, [r0, r3]
        break;
    }
}
 80008b6:	4770      	bx	lr
 80008b8:	20000000 	.word	0x20000000

080008bc <pwmInit>:




bool pwmInit(void)
{
 80008bc:	b510      	push	{r4, lr}
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80008be:	4803      	ldr	r0, [pc, #12]	@ (80008cc <pwmInit+0x10>)
 80008c0:	2100      	movs	r1, #0
 80008c2:	f001 ffd9 	bl	8002878 <HAL_TIM_PWM_Start>

  return true;
}
 80008c6:	2001      	movs	r0, #1
 80008c8:	bd10      	pop	{r4, pc}
 80008ca:	46c0      	nop			@ (mov r8, r8)
 80008cc:	20000474 	.word	0x20000474

080008d0 <pwmWrite>:
void pwmWrite(uint8_t ch,uint16_t duty)
{
  switch(ch)
 80008d0:	2800      	cmp	r0, #0
 80008d2:	d102      	bne.n	80008da <pwmWrite+0xa>
  {
    case _DEF_CH1:
      htim1.Instance->CCR1 = duty;
 80008d4:	4b01      	ldr	r3, [pc, #4]	@ (80008dc <pwmWrite+0xc>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	6359      	str	r1, [r3, #52]	@ 0x34
      break;
  }

}
 80008da:	4770      	bx	lr
 80008dc:	20000474 	.word	0x20000474

080008e0 <pwmRead>:
uint16_t pwmRead(uint8_t ch)
{
  uint16_t pwm_data = 0;

  switch(ch)
 80008e0:	2800      	cmp	r0, #0
 80008e2:	d104      	bne.n	80008ee <pwmRead+0xe>
    {
      case _DEF_CH1:
        pwm_data = htim1.Instance->CCR1;
 80008e4:	4b03      	ldr	r3, [pc, #12]	@ (80008f4 <pwmRead+0x14>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 80008ea:	b280      	uxth	r0, r0
        break;
    }

  return pwm_data;
}
 80008ec:	4770      	bx	lr
  uint16_t pwm_data = 0;
 80008ee:	2000      	movs	r0, #0
 80008f0:	e7fc      	b.n	80008ec <pwmRead+0xc>
 80008f2:	46c0      	nop			@ (mov r8, r8)
 80008f4:	20000474 	.word	0x20000474

080008f8 <swtimerInit>:




bool swtimerInit(void)
{
 80008f8:	b510      	push	{r4, lr}
  for(int i=0;i<SWTIMER_MAX_CH;i++)
 80008fa:	2200      	movs	r2, #0
 80008fc:	e00a      	b.n	8000914 <swtimerInit+0x1c>
  {
    swtimer_tbl[i].enable = false;
 80008fe:	4b09      	ldr	r3, [pc, #36]	@ (8000924 <swtimerInit+0x2c>)
 8000900:	0091      	lsls	r1, r2, #2
 8000902:	1888      	adds	r0, r1, r2
 8000904:	0084      	lsls	r4, r0, #2
 8000906:	2000      	movs	r0, #0
 8000908:	54e0      	strb	r0, [r4, r3]
    swtimer_tbl[i].counter = 0;
 800090a:	191b      	adds	r3, r3, r4
 800090c:	6058      	str	r0, [r3, #4]
    swtimer_tbl[i].func = NULL;
 800090e:	60d8      	str	r0, [r3, #12]
    swtimer_tbl[i].func_arg = NULL;
 8000910:	6118      	str	r0, [r3, #16]
  for(int i=0;i<SWTIMER_MAX_CH;i++)
 8000912:	3201      	adds	r2, #1
 8000914:	2a07      	cmp	r2, #7
 8000916:	ddf2      	ble.n	80008fe <swtimerInit+0x6>

  }
  HAL_TIM_Base_Start_IT(&htim14);
 8000918:	4803      	ldr	r0, [pc, #12]	@ (8000928 <swtimerInit+0x30>)
 800091a:	f001 fd0d 	bl	8002338 <HAL_TIM_Base_Start_IT>

  return true;
}
 800091e:	2001      	movs	r0, #1
 8000920:	bd10      	pop	{r4, pc}
 8000922:	46c0      	nop			@ (mov r8, r8)
 8000924:	20000190 	.word	0x20000190
 8000928:	20000428 	.word	0x20000428

0800092c <swtimerGetCh>:

bool swtimerGetCh(uint8_t *p_ch)
{
  if(swtimer_count >= SWTIMER_MAX_CH)
 800092c:	4b05      	ldr	r3, [pc, #20]	@ (8000944 <swtimerGetCh+0x18>)
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	2b07      	cmp	r3, #7
 8000932:	d805      	bhi.n	8000940 <swtimerGetCh+0x14>
    return false;

  *p_ch  = swtimer_count;
 8000934:	7003      	strb	r3, [r0, #0]

  swtimer_count++;
 8000936:	4a03      	ldr	r2, [pc, #12]	@ (8000944 <swtimerGetCh+0x18>)
 8000938:	3301      	adds	r3, #1
 800093a:	7013      	strb	r3, [r2, #0]

  return true;
 800093c:	2001      	movs	r0, #1
}
 800093e:	4770      	bx	lr
    return false;
 8000940:	2000      	movs	r0, #0
 8000942:	e7fc      	b.n	800093e <swtimerGetCh+0x12>
 8000944:	20000230 	.word	0x20000230

08000948 <swtimerSet>:
bool swtimerSet(uint8_t ch,
                void (*func)(void *arg),
                void *func_arg,
                SwtimerMode_t mode,
                uint32_t time_ms)
{
 8000948:	b570      	push	{r4, r5, r6, lr}
  if(ch >= SWTIMER_MAX_CH)
 800094a:	2807      	cmp	r0, #7
 800094c:	d810      	bhi.n	8000970 <swtimerSet+0x28>
     return false;

  swtimer_tbl[ch].func = func;
 800094e:	4e09      	ldr	r6, [pc, #36]	@ (8000974 <swtimerSet+0x2c>)
 8000950:	0085      	lsls	r5, r0, #2
 8000952:	182c      	adds	r4, r5, r0
 8000954:	00a4      	lsls	r4, r4, #2
 8000956:	1934      	adds	r4, r6, r4
 8000958:	60e1      	str	r1, [r4, #12]
  swtimer_tbl[ch].func_arg =func_arg;
 800095a:	6122      	str	r2, [r4, #16]
  swtimer_tbl[ch].mode = mode;
 800095c:	7063      	strb	r3, [r4, #1]
  swtimer_tbl[ch].counter = 0;
 800095e:	2300      	movs	r3, #0
 8000960:	6063      	str	r3, [r4, #4]
  swtimer_tbl[ch].reload = time_ms;
 8000962:	9a04      	ldr	r2, [sp, #16]
 8000964:	60a2      	str	r2, [r4, #8]
  swtimer_tbl[ch].enable = false;
 8000966:	182d      	adds	r5, r5, r0
 8000968:	00ad      	lsls	r5, r5, #2
 800096a:	55ab      	strb	r3, [r5, r6]


  return true;
 800096c:	2001      	movs	r0, #1
}
 800096e:	bd70      	pop	{r4, r5, r6, pc}
     return false;
 8000970:	2000      	movs	r0, #0
 8000972:	e7fc      	b.n	800096e <swtimerSet+0x26>
 8000974:	20000190 	.word	0x20000190

08000978 <swtimerStart>:


bool swtimerStart(uint8_t ch)
{
 8000978:	b510      	push	{r4, lr}
  if(swtimer_count >= SWTIMER_MAX_CH)
 800097a:	4b09      	ldr	r3, [pc, #36]	@ (80009a0 <swtimerStart+0x28>)
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	2b07      	cmp	r3, #7
 8000980:	d80c      	bhi.n	800099c <swtimerStart+0x24>
     return false;

  swtimer_tbl[ch].counter = 0;
 8000982:	4908      	ldr	r1, [pc, #32]	@ (80009a4 <swtimerStart+0x2c>)
 8000984:	0083      	lsls	r3, r0, #2
 8000986:	181a      	adds	r2, r3, r0
 8000988:	0092      	lsls	r2, r2, #2
 800098a:	188a      	adds	r2, r1, r2
 800098c:	2400      	movs	r4, #0
 800098e:	6054      	str	r4, [r2, #4]
  swtimer_tbl[ch].enable = true;
 8000990:	181b      	adds	r3, r3, r0
 8000992:	009b      	lsls	r3, r3, #2
 8000994:	2201      	movs	r2, #1
 8000996:	545a      	strb	r2, [r3, r1]

  return true;
 8000998:	2001      	movs	r0, #1
}
 800099a:	bd10      	pop	{r4, pc}
     return false;
 800099c:	2000      	movs	r0, #0
 800099e:	e7fc      	b.n	800099a <swtimerStart+0x22>
 80009a0:	20000230 	.word	0x20000230
 80009a4:	20000190 	.word	0x20000190

080009a8 <swtimerISR>:
   return true;
}


void swtimerISR(void)
{
 80009a8:	b510      	push	{r4, lr}
  for(int i=0;i<swtimer_count;i++)
 80009aa:	2400      	movs	r4, #0
 80009ac:	e000      	b.n	80009b0 <swtimerISR+0x8>
 80009ae:	3401      	adds	r4, #1
 80009b0:	4b16      	ldr	r3, [pc, #88]	@ (8000a0c <swtimerISR+0x64>)
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	42a3      	cmp	r3, r4
 80009b6:	dd28      	ble.n	8000a0a <swtimerISR+0x62>
  {
    if(swtimer_tbl[i].enable == true)
 80009b8:	4a15      	ldr	r2, [pc, #84]	@ (8000a10 <swtimerISR+0x68>)
 80009ba:	00a3      	lsls	r3, r4, #2
 80009bc:	191b      	adds	r3, r3, r4
 80009be:	0099      	lsls	r1, r3, #2
 80009c0:	5c8b      	ldrb	r3, [r1, r2]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d0f3      	beq.n	80009ae <swtimerISR+0x6>
    {
      swtimer_tbl[i].counter++;
 80009c6:	0013      	movs	r3, r2
 80009c8:	185b      	adds	r3, r3, r1
 80009ca:	685a      	ldr	r2, [r3, #4]
 80009cc:	3201      	adds	r2, #1
 80009ce:	605a      	str	r2, [r3, #4]
      if(swtimer_tbl[i].counter >= swtimer_tbl[i].reload)
 80009d0:	689b      	ldr	r3, [r3, #8]
 80009d2:	429a      	cmp	r2, r3
 80009d4:	d3eb      	bcc.n	80009ae <swtimerISR+0x6>
      {
        if(swtimer_tbl[i].func != NULL)
 80009d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000a10 <swtimerISR+0x68>)
 80009d8:	185b      	adds	r3, r3, r1
 80009da:	68d9      	ldr	r1, [r3, #12]
 80009dc:	2900      	cmp	r1, #0
 80009de:	d006      	beq.n	80009ee <swtimerISR+0x46>
        {
          swtimer_tbl[i].func(swtimer_tbl[i].func_arg);
 80009e0:	4b0b      	ldr	r3, [pc, #44]	@ (8000a10 <swtimerISR+0x68>)
 80009e2:	00a2      	lsls	r2, r4, #2
 80009e4:	1912      	adds	r2, r2, r4
 80009e6:	0090      	lsls	r0, r2, #2
 80009e8:	181b      	adds	r3, r3, r0
 80009ea:	6918      	ldr	r0, [r3, #16]
 80009ec:	4788      	blx	r1
        }
        swtimer_tbl[i].counter = 0;
 80009ee:	4b08      	ldr	r3, [pc, #32]	@ (8000a10 <swtimerISR+0x68>)
 80009f0:	00a2      	lsls	r2, r4, #2
 80009f2:	1912      	adds	r2, r2, r4
 80009f4:	0091      	lsls	r1, r2, #2
 80009f6:	185b      	adds	r3, r3, r1
 80009f8:	2200      	movs	r2, #0
 80009fa:	605a      	str	r2, [r3, #4]
        if(swtimer_tbl[i].mode == SWTIMER_ONETIME)
 80009fc:	785b      	ldrb	r3, [r3, #1]
 80009fe:	2b01      	cmp	r3, #1
 8000a00:	d1d5      	bne.n	80009ae <swtimerISR+0x6>
        {
          swtimer_tbl[i].enable = false;
 8000a02:	4a03      	ldr	r2, [pc, #12]	@ (8000a10 <swtimerISR+0x68>)
 8000a04:	2300      	movs	r3, #0
 8000a06:	548b      	strb	r3, [r1, r2]
 8000a08:	e7d1      	b.n	80009ae <swtimerISR+0x6>
        }
      }
    }
  }

}
 8000a0a:	bd10      	pop	{r4, pc}
 8000a0c:	20000230 	.word	0x20000230
 8000a10:	20000190 	.word	0x20000190

08000a14 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a14:	b510      	push	{r4, lr}
  //1ms 호출 됨
  if(htim == &htim14)
 8000a16:	4b03      	ldr	r3, [pc, #12]	@ (8000a24 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8000a18:	4283      	cmp	r3, r0
 8000a1a:	d000      	beq.n	8000a1e <HAL_TIM_PeriodElapsedCallback+0xa>
  {
    swtimerISR();
  }
  return;

}
 8000a1c:	bd10      	pop	{r4, pc}
    swtimerISR();
 8000a1e:	f7ff ffc3 	bl	80009a8 <swtimerISR>
  return;
 8000a22:	e7fb      	b.n	8000a1c <HAL_TIM_PeriodElapsedCallback+0x8>
 8000a24:	20000428 	.word	0x20000428

08000a28 <uartInit>:
static uint16_t q_out = 0;
static uint8_t q_buf[UART_Q_BUF_MAX];


bool     uartInit(void)
{
 8000a28:	b510      	push	{r4, lr}
  HAL_UART_Receive_DMA(&huart1, &q_buf[0] , UART_Q_BUF_MAX);
 8000a2a:	2280      	movs	r2, #128	@ 0x80
 8000a2c:	4903      	ldr	r1, [pc, #12]	@ (8000a3c <uartInit+0x14>)
 8000a2e:	4804      	ldr	r0, [pc, #16]	@ (8000a40 <uartInit+0x18>)
 8000a30:	0052      	lsls	r2, r2, #1
 8000a32:	f002 fc61 	bl	80032f8 <HAL_UART_Receive_DMA>
  return true;
}
 8000a36:	2001      	movs	r0, #1
 8000a38:	bd10      	pop	{r4, pc}
 8000a3a:	46c0      	nop			@ (mov r8, r8)
 8000a3c:	20000234 	.word	0x20000234
 8000a40:	20000394 	.word	0x20000394

08000a44 <uartWrite>:

uint32_t uartWrite(uint8_t ch,uint8_t* p_data,uint32_t length)
{
 8000a44:	b510      	push	{r4, lr}
 8000a46:	0014      	movs	r4, r2
  uint32_t ret = 0;
  HAL_StatusTypeDef hal_ret;


  switch(ch)
 8000a48:	2800      	cmp	r0, #0
 8000a4a:	d001      	beq.n	8000a50 <uartWrite+0xc>
  uint32_t ret = 0;
 8000a4c:	2000      	movs	r0, #0
      }
      break;
  }

  return ret;
}
 8000a4e:	bd10      	pop	{r4, pc}
      hal_ret = HAL_UART_Transmit(&huart1, p_data, length, 100);
 8000a50:	b292      	uxth	r2, r2
 8000a52:	4805      	ldr	r0, [pc, #20]	@ (8000a68 <uartWrite+0x24>)
 8000a54:	2364      	movs	r3, #100	@ 0x64
 8000a56:	f002 fad4 	bl	8003002 <HAL_UART_Transmit>
      if(hal_ret == HAL_OK)
 8000a5a:	2800      	cmp	r0, #0
 8000a5c:	d001      	beq.n	8000a62 <uartWrite+0x1e>
  uint32_t ret = 0;
 8000a5e:	2000      	movs	r0, #0
 8000a60:	e7f5      	b.n	8000a4e <uartWrite+0xa>
        ret = length;
 8000a62:	0020      	movs	r0, r4
  return ret;
 8000a64:	e7f3      	b.n	8000a4e <uartWrite+0xa>
 8000a66:	46c0      	nop			@ (mov r8, r8)
 8000a68:	20000394 	.word	0x20000394

08000a6c <uartAvailable>:

uint32_t uartAvailable(uint8_t ch)
{
  uint32_t ret = 0;

  switch(ch)
 8000a6c:	2800      	cmp	r0, #0
 8000a6e:	d116      	bne.n	8000a9e <uartAvailable+0x32>
  {
    case _DEF_CH1:
      q_in = (UART_Q_BUF_MAX - huart1.hdmarx->Instance->CNDTR) % UART_Q_BUF_MAX;
 8000a70:	4b0c      	ldr	r3, [pc, #48]	@ (8000aa4 <uartAvailable+0x38>)
 8000a72:	2280      	movs	r2, #128	@ 0x80
 8000a74:	589b      	ldr	r3, [r3, r2]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	685a      	ldr	r2, [r3, #4]
 8000a7a:	b292      	uxth	r2, r2
 8000a7c:	4252      	negs	r2, r2
 8000a7e:	23ff      	movs	r3, #255	@ 0xff
 8000a80:	4013      	ands	r3, r2
 8000a82:	4a09      	ldr	r2, [pc, #36]	@ (8000aa8 <uartAvailable+0x3c>)
 8000a84:	8013      	strh	r3, [r2, #0]
      ret = (UART_Q_BUF_MAX + q_in - q_out) % UART_Q_BUF_MAX;
 8000a86:	3301      	adds	r3, #1
 8000a88:	33ff      	adds	r3, #255	@ 0xff
 8000a8a:	4a08      	ldr	r2, [pc, #32]	@ (8000aac <uartAvailable+0x40>)
 8000a8c:	8812      	ldrh	r2, [r2, #0]
 8000a8e:	1a9b      	subs	r3, r3, r2
 8000a90:	17da      	asrs	r2, r3, #31
 8000a92:	0e12      	lsrs	r2, r2, #24
 8000a94:	189b      	adds	r3, r3, r2
 8000a96:	30ff      	adds	r0, #255	@ 0xff
 8000a98:	4018      	ands	r0, r3
 8000a9a:	1a80      	subs	r0, r0, r2
      break;
  }

  return ret;
}
 8000a9c:	4770      	bx	lr
  uint32_t ret = 0;
 8000a9e:	2000      	movs	r0, #0
  return ret;
 8000aa0:	e7fc      	b.n	8000a9c <uartAvailable+0x30>
 8000aa2:	46c0      	nop			@ (mov r8, r8)
 8000aa4:	20000394 	.word	0x20000394
 8000aa8:	20000336 	.word	0x20000336
 8000aac:	20000334 	.word	0x20000334

08000ab0 <uartRead>:

uint8_t  uartRead(uint8_t ch)
{
  uint8_t ret = 0;

  switch(ch)
 8000ab0:	2800      	cmp	r0, #0
 8000ab2:	d10d      	bne.n	8000ad0 <uartRead+0x20>
  {
    case _DEF_CH1:
      if( q_out != q_in)
 8000ab4:	4b07      	ldr	r3, [pc, #28]	@ (8000ad4 <uartRead+0x24>)
 8000ab6:	881b      	ldrh	r3, [r3, #0]
 8000ab8:	4a07      	ldr	r2, [pc, #28]	@ (8000ad8 <uartRead+0x28>)
 8000aba:	8812      	ldrh	r2, [r2, #0]
 8000abc:	4293      	cmp	r3, r2
 8000abe:	d008      	beq.n	8000ad2 <uartRead+0x22>
      {
        ret = q_buf[q_out];
 8000ac0:	4a06      	ldr	r2, [pc, #24]	@ (8000adc <uartRead+0x2c>)
 8000ac2:	5cd0      	ldrb	r0, [r2, r3]
        q_out = (q_out+1) % UART_Q_BUF_MAX;
 8000ac4:	3301      	adds	r3, #1
 8000ac6:	22ff      	movs	r2, #255	@ 0xff
 8000ac8:	4013      	ands	r3, r2
 8000aca:	4a02      	ldr	r2, [pc, #8]	@ (8000ad4 <uartRead+0x24>)
 8000acc:	8013      	strh	r3, [r2, #0]
 8000ace:	e000      	b.n	8000ad2 <uartRead+0x22>
  uint8_t ret = 0;
 8000ad0:	2000      	movs	r0, #0
      break;
  }


  return ret;
}
 8000ad2:	4770      	bx	lr
 8000ad4:	20000334 	.word	0x20000334
 8000ad8:	20000336 	.word	0x20000336
 8000adc:	20000234 	.word	0x20000234

08000ae0 <uartPrintf>:


uint32_t uartPrintf(uint8_t ch,const char *fmt, ...)
{
 8000ae0:	b40e      	push	{r1, r2, r3}
 8000ae2:	b510      	push	{r4, lr}
 8000ae4:	b0c3      	sub	sp, #268	@ 0x10c
 8000ae6:	0004      	movs	r4, r0
 8000ae8:	ab45      	add	r3, sp, #276	@ 0x114
 8000aea:	cb04      	ldmia	r3!, {r2}
  uint32_t ret = 0;
  va_list arg;
  char print_buf[256];

  va_start(arg,fmt);
 8000aec:	9341      	str	r3, [sp, #260]	@ 0x104

  int len;
  len = vsnprintf(print_buf,256,fmt,arg);
 8000aee:	2180      	movs	r1, #128	@ 0x80
 8000af0:	0049      	lsls	r1, r1, #1
 8000af2:	a801      	add	r0, sp, #4
 8000af4:	f002 fd8a 	bl	800360c <vsniprintf>
 8000af8:	1e02      	subs	r2, r0, #0

  va_end(arg);

  if(len>0)
 8000afa:	dc05      	bgt.n	8000b08 <uartPrintf+0x28>
  uint32_t ret = 0;
 8000afc:	2000      	movs	r0, #0
  {
    ret = uartWrite(ch,(uint8_t *)print_buf,len);
  }

  return ret;
}
 8000afe:	b043      	add	sp, #268	@ 0x10c
 8000b00:	bc10      	pop	{r4}
 8000b02:	bc08      	pop	{r3}
 8000b04:	b003      	add	sp, #12
 8000b06:	4718      	bx	r3
    ret = uartWrite(ch,(uint8_t *)print_buf,len);
 8000b08:	a901      	add	r1, sp, #4
 8000b0a:	0020      	movs	r0, r4
 8000b0c:	f7ff ff9a 	bl	8000a44 <uartWrite>
 8000b10:	e7f5      	b.n	8000afe <uartPrintf+0x1e>

08000b12 <uartVPrintf>:


uint32_t uartVPrintf(uint8_t ch,const char *fmt, va_list arg)
{
 8000b12:	b510      	push	{r4, lr}
 8000b14:	b0c0      	sub	sp, #256	@ 0x100
 8000b16:	0004      	movs	r4, r0
 8000b18:	0013      	movs	r3, r2
  uint32_t ret = 0;
  char print_buf[256];

  int len;
  len = vsnprintf(print_buf,256,fmt,arg);
 8000b1a:	2080      	movs	r0, #128	@ 0x80
 8000b1c:	000a      	movs	r2, r1
 8000b1e:	0041      	lsls	r1, r0, #1
 8000b20:	4668      	mov	r0, sp
 8000b22:	f002 fd73 	bl	800360c <vsniprintf>
 8000b26:	1e02      	subs	r2, r0, #0

  if(len>0)
 8000b28:	dc02      	bgt.n	8000b30 <uartVPrintf+0x1e>
  uint32_t ret = 0;
 8000b2a:	2000      	movs	r0, #0
  {
    ret = uartWrite(ch,(uint8_t *)print_buf,len);
  }

  return ret;
}
 8000b2c:	b040      	add	sp, #256	@ 0x100
 8000b2e:	bd10      	pop	{r4, pc}
    ret = uartWrite(ch,(uint8_t *)print_buf,len);
 8000b30:	4669      	mov	r1, sp
 8000b32:	0020      	movs	r0, r4
 8000b34:	f7ff ff86 	bl	8000a44 <uartWrite>
 8000b38:	e7f8      	b.n	8000b2c <uartVPrintf+0x1a>

08000b3a <delay>:
#include "utils.h"



void delay(uint32_t time_ms)
{
 8000b3a:	b510      	push	{r4, lr}
  HAL_Delay(time_ms);
 8000b3c:	f000 fb8c 	bl	8001258 <HAL_Delay>
}
 8000b40:	bd10      	pop	{r4, pc}

08000b42 <millis>:

uint32_t millis(void)
{
 8000b42:	b510      	push	{r4, lr}
  return HAL_GetTick();
 8000b44:	f000 fb82 	bl	800124c <HAL_GetTick>
}
 8000b48:	bd10      	pop	{r4, pc}
	...

08000b4c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b4c:	b082      	sub	sp, #8

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b4e:	4a05      	ldr	r2, [pc, #20]	@ (8000b64 <MX_DMA_Init+0x18>)
 8000b50:	6b91      	ldr	r1, [r2, #56]	@ 0x38
 8000b52:	2301      	movs	r3, #1
 8000b54:	4319      	orrs	r1, r3
 8000b56:	6391      	str	r1, [r2, #56]	@ 0x38
 8000b58:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8000b5a:	4013      	ands	r3, r2
 8000b5c:	9301      	str	r3, [sp, #4]
 8000b5e:	9b01      	ldr	r3, [sp, #4]

}
 8000b60:	b002      	add	sp, #8
 8000b62:	4770      	bx	lr
 8000b64:	40021000 	.word	0x40021000

08000b68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b68:	b082      	sub	sp, #8
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b6a:	4b09      	ldr	r3, [pc, #36]	@ (8000b90 <MX_GPIO_Init+0x28>)
 8000b6c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000b6e:	2201      	movs	r2, #1
 8000b70:	4311      	orrs	r1, r2
 8000b72:	6359      	str	r1, [r3, #52]	@ 0x34
 8000b74:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000b76:	400a      	ands	r2, r1
 8000b78:	9200      	str	r2, [sp, #0]
 8000b7a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b7c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000b7e:	2202      	movs	r2, #2
 8000b80:	4311      	orrs	r1, r2
 8000b82:	6359      	str	r1, [r3, #52]	@ 0x34
 8000b84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b86:	401a      	ands	r2, r3
 8000b88:	9201      	str	r2, [sp, #4]
 8000b8a:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000b8c:	b002      	add	sp, #8
 8000b8e:	4770      	bx	lr
 8000b90:	40021000 	.word	0x40021000

08000b94 <Error_Handler>:
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b94:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b96:	e7fe      	b.n	8000b96 <Error_Handler+0x2>

08000b98 <MX_TIM1_Init>:
{
 8000b98:	b500      	push	{lr}
 8000b9a:	b09d      	sub	sp, #116	@ 0x74
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b9c:	2210      	movs	r2, #16
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	a818      	add	r0, sp, #96	@ 0x60
 8000ba2:	f002 fd3f 	bl	8003624 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ba6:	220c      	movs	r2, #12
 8000ba8:	2100      	movs	r1, #0
 8000baa:	a815      	add	r0, sp, #84	@ 0x54
 8000bac:	f002 fd3a 	bl	8003624 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bb0:	221c      	movs	r2, #28
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	a80e      	add	r0, sp, #56	@ 0x38
 8000bb6:	f002 fd35 	bl	8003624 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000bba:	2234      	movs	r2, #52	@ 0x34
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	a801      	add	r0, sp, #4
 8000bc0:	f002 fd30 	bl	8003624 <memset>
  htim1.Instance = TIM1;
 8000bc4:	482f      	ldr	r0, [pc, #188]	@ (8000c84 <MX_TIM1_Init+0xec>)
 8000bc6:	4b30      	ldr	r3, [pc, #192]	@ (8000c88 <MX_TIM1_Init+0xf0>)
 8000bc8:	6003      	str	r3, [r0, #0]
  htim1.Init.Prescaler = 47;
 8000bca:	232f      	movs	r3, #47	@ 0x2f
 8000bcc:	6043      	str	r3, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	6083      	str	r3, [r0, #8]
  htim1.Init.Period = 99;
 8000bd2:	2263      	movs	r2, #99	@ 0x63
 8000bd4:	60c2      	str	r2, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bd6:	6103      	str	r3, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 8000bd8:	6143      	str	r3, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bda:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000bdc:	f001 fcdc 	bl	8002598 <HAL_TIM_Base_Init>
 8000be0:	2800      	cmp	r0, #0
 8000be2:	d143      	bne.n	8000c6c <MX_TIM1_Init+0xd4>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000be4:	2380      	movs	r3, #128	@ 0x80
 8000be6:	015b      	lsls	r3, r3, #5
 8000be8:	9318      	str	r3, [sp, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000bea:	4826      	ldr	r0, [pc, #152]	@ (8000c84 <MX_TIM1_Init+0xec>)
 8000bec:	a918      	add	r1, sp, #96	@ 0x60
 8000bee:	f001 fdb1 	bl	8002754 <HAL_TIM_ConfigClockSource>
 8000bf2:	2800      	cmp	r0, #0
 8000bf4:	d13c      	bne.n	8000c70 <MX_TIM1_Init+0xd8>
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000bf6:	4823      	ldr	r0, [pc, #140]	@ (8000c84 <MX_TIM1_Init+0xec>)
 8000bf8:	f001 fcfe 	bl	80025f8 <HAL_TIM_OC_Init>
 8000bfc:	2800      	cmp	r0, #0
 8000bfe:	d139      	bne.n	8000c74 <MX_TIM1_Init+0xdc>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c00:	2300      	movs	r3, #0
 8000c02:	9315      	str	r3, [sp, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000c04:	9316      	str	r3, [sp, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c06:	9317      	str	r3, [sp, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c08:	481e      	ldr	r0, [pc, #120]	@ (8000c84 <MX_TIM1_Init+0xec>)
 8000c0a:	a915      	add	r1, sp, #84	@ 0x54
 8000c0c:	f001 fec6 	bl	800299c <HAL_TIMEx_MasterConfigSynchronization>
 8000c10:	2800      	cmp	r0, #0
 8000c12:	d131      	bne.n	8000c78 <MX_TIM1_Init+0xe0>
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000c14:	2300      	movs	r3, #0
 8000c16:	930e      	str	r3, [sp, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000c18:	930f      	str	r3, [sp, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c1a:	9310      	str	r3, [sp, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c1c:	9311      	str	r3, [sp, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c1e:	9312      	str	r3, [sp, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c20:	9313      	str	r3, [sp, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c22:	9314      	str	r3, [sp, #80]	@ 0x50
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c24:	4817      	ldr	r0, [pc, #92]	@ (8000c84 <MX_TIM1_Init+0xec>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	a90e      	add	r1, sp, #56	@ 0x38
 8000c2a:	f001 fd51 	bl	80026d0 <HAL_TIM_OC_ConfigChannel>
 8000c2e:	2800      	cmp	r0, #0
 8000c30:	d124      	bne.n	8000c7c <MX_TIM1_Init+0xe4>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c32:	2300      	movs	r3, #0
 8000c34:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c36:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c38:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c3a:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c3c:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c3e:	2280      	movs	r2, #128	@ 0x80
 8000c40:	0192      	lsls	r2, r2, #6
 8000c42:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000c44:	9307      	str	r3, [sp, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000c46:	9308      	str	r3, [sp, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000c48:	9309      	str	r3, [sp, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000c4a:	2280      	movs	r2, #128	@ 0x80
 8000c4c:	0492      	lsls	r2, r2, #18
 8000c4e:	920a      	str	r2, [sp, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000c50:	930b      	str	r3, [sp, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000c52:	930c      	str	r3, [sp, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c54:	930d      	str	r3, [sp, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000c56:	480b      	ldr	r0, [pc, #44]	@ (8000c84 <MX_TIM1_Init+0xec>)
 8000c58:	a901      	add	r1, sp, #4
 8000c5a:	f001 fed7 	bl	8002a0c <HAL_TIMEx_ConfigBreakDeadTime>
 8000c5e:	2800      	cmp	r0, #0
 8000c60:	d10e      	bne.n	8000c80 <MX_TIM1_Init+0xe8>
  HAL_TIM_MspPostInit(&htim1);
 8000c62:	4808      	ldr	r0, [pc, #32]	@ (8000c84 <MX_TIM1_Init+0xec>)
 8000c64:	f000 f9c8 	bl	8000ff8 <HAL_TIM_MspPostInit>
}
 8000c68:	b01d      	add	sp, #116	@ 0x74
 8000c6a:	bd00      	pop	{pc}
    Error_Handler();
 8000c6c:	f7ff ff92 	bl	8000b94 <Error_Handler>
    Error_Handler();
 8000c70:	f7ff ff90 	bl	8000b94 <Error_Handler>
    Error_Handler();
 8000c74:	f7ff ff8e 	bl	8000b94 <Error_Handler>
    Error_Handler();
 8000c78:	f7ff ff8c 	bl	8000b94 <Error_Handler>
    Error_Handler();
 8000c7c:	f7ff ff8a 	bl	8000b94 <Error_Handler>
    Error_Handler();
 8000c80:	f7ff ff88 	bl	8000b94 <Error_Handler>
 8000c84:	20000474 	.word	0x20000474
 8000c88:	40012c00 	.word	0x40012c00

08000c8c <MX_ADC1_Init>:
{
 8000c8c:	b500      	push	{lr}
 8000c8e:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 8000c90:	220c      	movs	r2, #12
 8000c92:	2100      	movs	r1, #0
 8000c94:	a801      	add	r0, sp, #4
 8000c96:	f002 fcc5 	bl	8003624 <memset>
  hadc1.Instance = ADC1;
 8000c9a:	4828      	ldr	r0, [pc, #160]	@ (8000d3c <MX_ADC1_Init+0xb0>)
 8000c9c:	4b28      	ldr	r3, [pc, #160]	@ (8000d40 <MX_ADC1_Init+0xb4>)
 8000c9e:	6003      	str	r3, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000ca0:	2380      	movs	r3, #128	@ 0x80
 8000ca2:	05db      	lsls	r3, r3, #23
 8000ca4:	6043      	str	r3, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	6083      	str	r3, [r0, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000caa:	60c3      	str	r3, [r0, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000cac:	2280      	movs	r2, #128	@ 0x80
 8000cae:	0392      	lsls	r2, r2, #14
 8000cb0:	6102      	str	r2, [r0, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cb2:	2204      	movs	r2, #4
 8000cb4:	6142      	str	r2, [r0, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000cb6:	7603      	strb	r3, [r0, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000cb8:	7643      	strb	r3, [r0, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000cba:	3a03      	subs	r2, #3
 8000cbc:	7682      	strb	r2, [r0, #26]
  hadc1.Init.NbrOfConversion = 3;
 8000cbe:	2103      	movs	r1, #3
 8000cc0:	61c1      	str	r1, [r0, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cc2:	6243      	str	r3, [r0, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000cc4:	6283      	str	r3, [r0, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000cc6:	3129      	adds	r1, #41	@ 0x29
 8000cc8:	5442      	strb	r2, [r0, r1]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000cca:	6303      	str	r3, [r0, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8000ccc:	3925      	subs	r1, #37	@ 0x25
 8000cce:	6341      	str	r1, [r0, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000cd0:	6383      	str	r3, [r0, #56]	@ 0x38
  hadc1.Init.OversamplingMode = ENABLE;
 8000cd2:	3135      	adds	r1, #53	@ 0x35
 8000cd4:	5442      	strb	r2, [r0, r1]
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_8;
 8000cd6:	3207      	adds	r2, #7
 8000cd8:	6402      	str	r2, [r0, #64]	@ 0x40
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_3;
 8000cda:	3258      	adds	r2, #88	@ 0x58
 8000cdc:	6442      	str	r2, [r0, #68]	@ 0x44
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8000cde:	6483      	str	r3, [r0, #72]	@ 0x48
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000ce0:	64c3      	str	r3, [r0, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ce2:	f000 facb 	bl	800127c <HAL_ADC_Init>
 8000ce6:	2800      	cmp	r0, #0
 8000ce8:	d120      	bne.n	8000d2c <MX_ADC1_Init+0xa0>
  sConfig.Channel = ADC_CHANNEL_4;
 8000cea:	4b16      	ldr	r3, [pc, #88]	@ (8000d44 <MX_ADC1_Init+0xb8>)
 8000cec:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000cf2:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cf4:	4811      	ldr	r0, [pc, #68]	@ (8000d3c <MX_ADC1_Init+0xb0>)
 8000cf6:	a901      	add	r1, sp, #4
 8000cf8:	f000 fc36 	bl	8001568 <HAL_ADC_ConfigChannel>
 8000cfc:	2800      	cmp	r0, #0
 8000cfe:	d117      	bne.n	8000d30 <MX_ADC1_Init+0xa4>
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000d00:	4b11      	ldr	r3, [pc, #68]	@ (8000d48 <MX_ADC1_Init+0xbc>)
 8000d02:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000d04:	2304      	movs	r3, #4
 8000d06:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d08:	480c      	ldr	r0, [pc, #48]	@ (8000d3c <MX_ADC1_Init+0xb0>)
 8000d0a:	a901      	add	r1, sp, #4
 8000d0c:	f000 fc2c 	bl	8001568 <HAL_ADC_ConfigChannel>
 8000d10:	2800      	cmp	r0, #0
 8000d12:	d10f      	bne.n	8000d34 <MX_ADC1_Init+0xa8>
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000d14:	4b0d      	ldr	r3, [pc, #52]	@ (8000d4c <MX_ADC1_Init+0xc0>)
 8000d16:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000d18:	2308      	movs	r3, #8
 8000d1a:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d1c:	4807      	ldr	r0, [pc, #28]	@ (8000d3c <MX_ADC1_Init+0xb0>)
 8000d1e:	a901      	add	r1, sp, #4
 8000d20:	f000 fc22 	bl	8001568 <HAL_ADC_ConfigChannel>
 8000d24:	2800      	cmp	r0, #0
 8000d26:	d107      	bne.n	8000d38 <MX_ADC1_Init+0xac>
}
 8000d28:	b005      	add	sp, #20
 8000d2a:	bd00      	pop	{pc}
    Error_Handler();
 8000d2c:	f7ff ff32 	bl	8000b94 <Error_Handler>
    Error_Handler();
 8000d30:	f7ff ff30 	bl	8000b94 <Error_Handler>
    Error_Handler();
 8000d34:	f7ff ff2e 	bl	8000b94 <Error_Handler>
    Error_Handler();
 8000d38:	f7ff ff2c 	bl	8000b94 <Error_Handler>
 8000d3c:	2000051c 	.word	0x2000051c
 8000d40:	40012400 	.word	0x40012400
 8000d44:	10000010 	.word	0x10000010
 8000d48:	a4000200 	.word	0xa4000200
 8000d4c:	a8000400 	.word	0xa8000400

08000d50 <MX_USART1_UART_Init>:
{
 8000d50:	b510      	push	{r4, lr}
  huart1.Instance = USART1;
 8000d52:	4817      	ldr	r0, [pc, #92]	@ (8000db0 <MX_USART1_UART_Init+0x60>)
 8000d54:	4b17      	ldr	r3, [pc, #92]	@ (8000db4 <MX_USART1_UART_Init+0x64>)
 8000d56:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8000d58:	23e1      	movs	r3, #225	@ 0xe1
 8000d5a:	025b      	lsls	r3, r3, #9
 8000d5c:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d62:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d64:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d66:	220c      	movs	r2, #12
 8000d68:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d6a:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d6c:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d6e:	6203      	str	r3, [r0, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d70:	6243      	str	r3, [r0, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d72:	6283      	str	r3, [r0, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d74:	f002 fa2e 	bl	80031d4 <HAL_UART_Init>
 8000d78:	2800      	cmp	r0, #0
 8000d7a:	d111      	bne.n	8000da0 <MX_USART1_UART_Init+0x50>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d7c:	480c      	ldr	r0, [pc, #48]	@ (8000db0 <MX_USART1_UART_Init+0x60>)
 8000d7e:	2100      	movs	r1, #0
 8000d80:	f002 fb34 	bl	80033ec <HAL_UARTEx_SetTxFifoThreshold>
 8000d84:	2800      	cmp	r0, #0
 8000d86:	d10d      	bne.n	8000da4 <MX_USART1_UART_Init+0x54>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d88:	4809      	ldr	r0, [pc, #36]	@ (8000db0 <MX_USART1_UART_Init+0x60>)
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	f002 fb54 	bl	8003438 <HAL_UARTEx_SetRxFifoThreshold>
 8000d90:	2800      	cmp	r0, #0
 8000d92:	d109      	bne.n	8000da8 <MX_USART1_UART_Init+0x58>
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000d94:	4806      	ldr	r0, [pc, #24]	@ (8000db0 <MX_USART1_UART_Init+0x60>)
 8000d96:	f002 fb09 	bl	80033ac <HAL_UARTEx_DisableFifoMode>
 8000d9a:	2800      	cmp	r0, #0
 8000d9c:	d106      	bne.n	8000dac <MX_USART1_UART_Init+0x5c>
}
 8000d9e:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000da0:	f7ff fef8 	bl	8000b94 <Error_Handler>
    Error_Handler();
 8000da4:	f7ff fef6 	bl	8000b94 <Error_Handler>
    Error_Handler();
 8000da8:	f7ff fef4 	bl	8000b94 <Error_Handler>
    Error_Handler();
 8000dac:	f7ff fef2 	bl	8000b94 <Error_Handler>
 8000db0:	20000394 	.word	0x20000394
 8000db4:	40013800 	.word	0x40013800

08000db8 <MX_TIM14_Init>:
{
 8000db8:	b510      	push	{r4, lr}
  htim14.Instance = TIM14;
 8000dba:	4809      	ldr	r0, [pc, #36]	@ (8000de0 <MX_TIM14_Init+0x28>)
 8000dbc:	4b09      	ldr	r3, [pc, #36]	@ (8000de4 <MX_TIM14_Init+0x2c>)
 8000dbe:	6003      	str	r3, [r0, #0]
  htim14.Init.Prescaler = 47;
 8000dc0:	232f      	movs	r3, #47	@ 0x2f
 8000dc2:	6043      	str	r3, [r0, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	6083      	str	r3, [r0, #8]
  htim14.Init.Period = 999;
 8000dc8:	4a07      	ldr	r2, [pc, #28]	@ (8000de8 <MX_TIM14_Init+0x30>)
 8000dca:	60c2      	str	r2, [r0, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dcc:	6103      	str	r3, [r0, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dce:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000dd0:	f001 fbe2 	bl	8002598 <HAL_TIM_Base_Init>
 8000dd4:	2800      	cmp	r0, #0
 8000dd6:	d100      	bne.n	8000dda <MX_TIM14_Init+0x22>
}
 8000dd8:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000dda:	f7ff fedb 	bl	8000b94 <Error_Handler>
 8000dde:	46c0      	nop			@ (mov r8, r8)
 8000de0:	20000428 	.word	0x20000428
 8000de4:	40002000 	.word	0x40002000
 8000de8:	000003e7 	.word	0x000003e7

08000dec <SystemClock_Config>:
{
 8000dec:	b510      	push	{r4, lr}
  * @rmtoll FLASH_ACR    FLASH_ACR_PRFTEN        LL_FLASH_EnablePrefetch
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_EnablePrefetch(void)
{
  SET_BIT(FLASH->ACR, FLASH_ACR_PRFTEN);
 8000dee:	4923      	ldr	r1, [pc, #140]	@ (8000e7c <SystemClock_Config+0x90>)
 8000df0:	680b      	ldr	r3, [r1, #0]
 8000df2:	2280      	movs	r2, #128	@ 0x80
 8000df4:	0052      	lsls	r2, r2, #1
 8000df6:	4313      	orrs	r3, r2
 8000df8:	600b      	str	r3, [r1, #0]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000dfa:	680b      	ldr	r3, [r1, #0]
 8000dfc:	2007      	movs	r0, #7
 8000dfe:	4383      	bics	r3, r0
 8000e00:	3806      	subs	r0, #6
 8000e02:	4303      	orrs	r3, r0
 8000e04:	600b      	str	r3, [r1, #0]
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000e06:	4b1e      	ldr	r3, [pc, #120]	@ (8000e80 <SystemClock_Config+0x94>)
 8000e08:	6819      	ldr	r1, [r3, #0]
 8000e0a:	430a      	orrs	r2, r1
 8000e0c:	601a      	str	r2, [r3, #0]
}
 8000e0e:	e001      	b.n	8000e14 <SystemClock_Config+0x28>
  while(LL_RCC_HSI_IsReady() != 1)
 8000e10:	2901      	cmp	r1, #1
 8000e12:	d009      	beq.n	8000e28 <SystemClock_Config+0x3c>
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8000e14:	4b1a      	ldr	r3, [pc, #104]	@ (8000e80 <SystemClock_Config+0x94>)
 8000e16:	681a      	ldr	r2, [r3, #0]
 8000e18:	2380      	movs	r3, #128	@ 0x80
 8000e1a:	00db      	lsls	r3, r3, #3
 8000e1c:	0011      	movs	r1, r2
 8000e1e:	4019      	ands	r1, r3
 8000e20:	421a      	tst	r2, r3
 8000e22:	d0f5      	beq.n	8000e10 <SystemClock_Config+0x24>
 8000e24:	2101      	movs	r1, #1
 8000e26:	e7f3      	b.n	8000e10 <SystemClock_Config+0x24>
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8000e28:	4b15      	ldr	r3, [pc, #84]	@ (8000e80 <SystemClock_Config+0x94>)
 8000e2a:	6859      	ldr	r1, [r3, #4]
 8000e2c:	4a15      	ldr	r2, [pc, #84]	@ (8000e84 <SystemClock_Config+0x98>)
 8000e2e:	4011      	ands	r1, r2
 8000e30:	2280      	movs	r2, #128	@ 0x80
 8000e32:	01d2      	lsls	r2, r2, #7
 8000e34:	430a      	orrs	r2, r1
 8000e36:	605a      	str	r2, [r3, #4]
  *         @arg @ref LL_RCC_HSI_DIV_128
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetHSIDiv(uint32_t HSIDiv)
{
  MODIFY_REG(RCC->CR, RCC_CR_HSIDIV, HSIDiv);
 8000e38:	681a      	ldr	r2, [r3, #0]
 8000e3a:	4913      	ldr	r1, [pc, #76]	@ (8000e88 <SystemClock_Config+0x9c>)
 8000e3c:	400a      	ands	r2, r1
 8000e3e:	601a      	str	r2, [r3, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000e40:	689a      	ldr	r2, [r3, #8]
 8000e42:	4912      	ldr	r1, [pc, #72]	@ (8000e8c <SystemClock_Config+0xa0>)
 8000e44:	400a      	ands	r2, r1
 8000e46:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000e48:	689a      	ldr	r2, [r3, #8]
 8000e4a:	2107      	movs	r1, #7
 8000e4c:	438a      	bics	r2, r1
 8000e4e:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000e50:	4b0b      	ldr	r3, [pc, #44]	@ (8000e80 <SystemClock_Config+0x94>)
 8000e52:	689b      	ldr	r3, [r3, #8]
 8000e54:	2238      	movs	r2, #56	@ 0x38
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8000e56:	421a      	tst	r2, r3
 8000e58:	d1fa      	bne.n	8000e50 <SystemClock_Config+0x64>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, Prescaler);
 8000e5a:	4a09      	ldr	r2, [pc, #36]	@ (8000e80 <SystemClock_Config+0x94>)
 8000e5c:	6893      	ldr	r3, [r2, #8]
 8000e5e:	490c      	ldr	r1, [pc, #48]	@ (8000e90 <SystemClock_Config+0xa4>)
 8000e60:	400b      	ands	r3, r1
 8000e62:	6093      	str	r3, [r2, #8]
  LL_SetSystemCoreClock(48000000);
 8000e64:	480b      	ldr	r0, [pc, #44]	@ (8000e94 <SystemClock_Config+0xa8>)
 8000e66:	f002 fb0f 	bl	8003488 <LL_SetSystemCoreClock>
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8000e6a:	2000      	movs	r0, #0
 8000e6c:	f000 f9a2 	bl	80011b4 <HAL_InitTick>
 8000e70:	2800      	cmp	r0, #0
 8000e72:	d100      	bne.n	8000e76 <SystemClock_Config+0x8a>
}
 8000e74:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000e76:	f7ff fe8d 	bl	8000b94 <Error_Handler>
 8000e7a:	46c0      	nop			@ (mov r8, r8)
 8000e7c:	40022000 	.word	0x40022000
 8000e80:	40021000 	.word	0x40021000
 8000e84:	ffff80ff 	.word	0xffff80ff
 8000e88:	ffffc7ff 	.word	0xffffc7ff
 8000e8c:	fffff0ff 	.word	0xfffff0ff
 8000e90:	ffff8fff 	.word	0xffff8fff
 8000e94:	02dc6c00 	.word	0x02dc6c00

08000e98 <main>:
{
 8000e98:	b510      	push	{r4, lr}
  HAL_Init();
 8000e9a:	f000 f9b7 	bl	800120c <HAL_Init>
  SystemClock_Config();
 8000e9e:	f7ff ffa5 	bl	8000dec <SystemClock_Config>
  MX_GPIO_Init();
 8000ea2:	f7ff fe61 	bl	8000b68 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ea6:	f7ff fe51 	bl	8000b4c <MX_DMA_Init>
  MX_TIM1_Init();
 8000eaa:	f7ff fe75 	bl	8000b98 <MX_TIM1_Init>
  MX_ADC1_Init();
 8000eae:	f7ff feed 	bl	8000c8c <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000eb2:	f7ff ff4d 	bl	8000d50 <MX_USART1_UART_Init>
  MX_TIM14_Init();
 8000eb6:	f7ff ff7f 	bl	8000db8 <MX_TIM14_Init>
  apInit();
 8000eba:	f7ff fb35 	bl	8000528 <apInit>
  apMain();
 8000ebe:	f7ff fb7b 	bl	80005b8 <apMain>
  while (1)
 8000ec2:	e7fe      	b.n	8000ec2 <main+0x2a>

08000ec4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ec4:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ec6:	4b0a      	ldr	r3, [pc, #40]	@ (8000ef0 <HAL_MspInit+0x2c>)
 8000ec8:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8000eca:	2201      	movs	r2, #1
 8000ecc:	4311      	orrs	r1, r2
 8000ece:	6419      	str	r1, [r3, #64]	@ 0x40
 8000ed0:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8000ed2:	400a      	ands	r2, r1
 8000ed4:	9200      	str	r2, [sp, #0]
 8000ed6:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ed8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000eda:	2180      	movs	r1, #128	@ 0x80
 8000edc:	0549      	lsls	r1, r1, #21
 8000ede:	430a      	orrs	r2, r1
 8000ee0:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000ee2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000ee4:	400b      	ands	r3, r1
 8000ee6:	9301      	str	r3, [sp, #4]
 8000ee8:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eea:	b002      	add	sp, #8
 8000eec:	4770      	bx	lr
 8000eee:	46c0      	nop			@ (mov r8, r8)
 8000ef0:	40021000 	.word	0x40021000

08000ef4 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ef4:	b510      	push	{r4, lr}
 8000ef6:	b088      	sub	sp, #32
 8000ef8:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000efa:	2214      	movs	r2, #20
 8000efc:	2100      	movs	r1, #0
 8000efe:	a803      	add	r0, sp, #12
 8000f00:	f002 fb90 	bl	8003624 <memset>
  if(hadc->Instance==ADC1)
 8000f04:	6822      	ldr	r2, [r4, #0]
 8000f06:	4b20      	ldr	r3, [pc, #128]	@ (8000f88 <HAL_ADC_MspInit+0x94>)
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	d001      	beq.n	8000f10 <HAL_ADC_MspInit+0x1c>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000f0c:	b008      	add	sp, #32
 8000f0e:	bd10      	pop	{r4, pc}
  *         @arg @ref LL_RCC_ADC_CLKSOURCE_HSIKER
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetADCClockSource(uint32_t ADCxSource)
{
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8000f10:	4b1e      	ldr	r3, [pc, #120]	@ (8000f8c <HAL_ADC_MspInit+0x98>)
 8000f12:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8000f14:	0092      	lsls	r2, r2, #2
 8000f16:	0892      	lsrs	r2, r2, #2
 8000f18:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_ADC_CLK_ENABLE();
 8000f1a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f1c:	2180      	movs	r1, #128	@ 0x80
 8000f1e:	0349      	lsls	r1, r1, #13
 8000f20:	430a      	orrs	r2, r1
 8000f22:	641a      	str	r2, [r3, #64]	@ 0x40
 8000f24:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f26:	400a      	ands	r2, r1
 8000f28:	9201      	str	r2, [sp, #4]
 8000f2a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f2c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000f2e:	2201      	movs	r2, #1
 8000f30:	4311      	orrs	r1, r2
 8000f32:	6359      	str	r1, [r3, #52]	@ 0x34
 8000f34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f36:	401a      	ands	r2, r3
 8000f38:	9202      	str	r2, [sp, #8]
 8000f3a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000f3c:	2310      	movs	r3, #16
 8000f3e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f40:	3b0d      	subs	r3, #13
 8000f42:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f44:	20a0      	movs	r0, #160	@ 0xa0
 8000f46:	a903      	add	r1, sp, #12
 8000f48:	05c0      	lsls	r0, r0, #23
 8000f4a:	f000 ff6f 	bl	8001e2c <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 8000f4e:	4810      	ldr	r0, [pc, #64]	@ (8000f90 <HAL_ADC_MspInit+0x9c>)
 8000f50:	4b10      	ldr	r3, [pc, #64]	@ (8000f94 <HAL_ADC_MspInit+0xa0>)
 8000f52:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000f54:	2305      	movs	r3, #5
 8000f56:	6043      	str	r3, [r0, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	6083      	str	r3, [r0, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f5c:	60c3      	str	r3, [r0, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000f5e:	2280      	movs	r2, #128	@ 0x80
 8000f60:	6102      	str	r2, [r0, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f62:	3280      	adds	r2, #128	@ 0x80
 8000f64:	6142      	str	r2, [r0, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f66:	2280      	movs	r2, #128	@ 0x80
 8000f68:	00d2      	lsls	r2, r2, #3
 8000f6a:	6182      	str	r2, [r0, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000f6c:	2220      	movs	r2, #32
 8000f6e:	61c2      	str	r2, [r0, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000f70:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000f72:	f000 feb3 	bl	8001cdc <HAL_DMA_Init>
 8000f76:	2800      	cmp	r0, #0
 8000f78:	d103      	bne.n	8000f82 <HAL_ADC_MspInit+0x8e>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000f7a:	4b05      	ldr	r3, [pc, #20]	@ (8000f90 <HAL_ADC_MspInit+0x9c>)
 8000f7c:	6523      	str	r3, [r4, #80]	@ 0x50
 8000f7e:	629c      	str	r4, [r3, #40]	@ 0x28
}
 8000f80:	e7c4      	b.n	8000f0c <HAL_ADC_MspInit+0x18>
      Error_Handler();
 8000f82:	f7ff fe07 	bl	8000b94 <Error_Handler>
 8000f86:	e7f8      	b.n	8000f7a <HAL_ADC_MspInit+0x86>
 8000f88:	40012400 	.word	0x40012400
 8000f8c:	40021000 	.word	0x40021000
 8000f90:	200004c0 	.word	0x200004c0
 8000f94:	40020008 	.word	0x40020008

08000f98 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f98:	b500      	push	{lr}
 8000f9a:	b083      	sub	sp, #12
  if(htim_base->Instance==TIM1)
 8000f9c:	6803      	ldr	r3, [r0, #0]
 8000f9e:	4a13      	ldr	r2, [pc, #76]	@ (8000fec <HAL_TIM_Base_MspInit+0x54>)
 8000fa0:	4293      	cmp	r3, r2
 8000fa2:	d004      	beq.n	8000fae <HAL_TIM_Base_MspInit+0x16>
    __HAL_RCC_TIM1_CLK_ENABLE();
    /* USER CODE BEGIN TIM1_MspInit 1 */

    /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM14)
 8000fa4:	4a12      	ldr	r2, [pc, #72]	@ (8000ff0 <HAL_TIM_Base_MspInit+0x58>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d00c      	beq.n	8000fc4 <HAL_TIM_Base_MspInit+0x2c>
    /* USER CODE BEGIN TIM14_MspInit 1 */

    /* USER CODE END TIM14_MspInit 1 */
  }

}
 8000faa:	b003      	add	sp, #12
 8000fac:	bd00      	pop	{pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000fae:	4b11      	ldr	r3, [pc, #68]	@ (8000ff4 <HAL_TIM_Base_MspInit+0x5c>)
 8000fb0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000fb2:	2180      	movs	r1, #128	@ 0x80
 8000fb4:	0109      	lsls	r1, r1, #4
 8000fb6:	430a      	orrs	r2, r1
 8000fb8:	641a      	str	r2, [r3, #64]	@ 0x40
 8000fba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fbc:	400b      	ands	r3, r1
 8000fbe:	9300      	str	r3, [sp, #0]
 8000fc0:	9b00      	ldr	r3, [sp, #0]
 8000fc2:	e7f2      	b.n	8000faa <HAL_TIM_Base_MspInit+0x12>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000fc4:	4b0b      	ldr	r3, [pc, #44]	@ (8000ff4 <HAL_TIM_Base_MspInit+0x5c>)
 8000fc6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000fc8:	2180      	movs	r1, #128	@ 0x80
 8000fca:	0209      	lsls	r1, r1, #8
 8000fcc:	430a      	orrs	r2, r1
 8000fce:	641a      	str	r2, [r3, #64]	@ 0x40
 8000fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fd2:	400b      	ands	r3, r1
 8000fd4:	9301      	str	r3, [sp, #4]
 8000fd6:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM14_IRQn, 3, 0);
 8000fd8:	2200      	movs	r2, #0
 8000fda:	2103      	movs	r1, #3
 8000fdc:	2013      	movs	r0, #19
 8000fde:	f000 fe15 	bl	8001c0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8000fe2:	2013      	movs	r0, #19
 8000fe4:	f000 fe16 	bl	8001c14 <HAL_NVIC_EnableIRQ>
}
 8000fe8:	e7df      	b.n	8000faa <HAL_TIM_Base_MspInit+0x12>
 8000fea:	46c0      	nop			@ (mov r8, r8)
 8000fec:	40012c00 	.word	0x40012c00
 8000ff0:	40002000 	.word	0x40002000
 8000ff4:	40021000 	.word	0x40021000

08000ff8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ff8:	b510      	push	{r4, lr}
 8000ffa:	b086      	sub	sp, #24
 8000ffc:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffe:	2214      	movs	r2, #20
 8001000:	2100      	movs	r1, #0
 8001002:	a801      	add	r0, sp, #4
 8001004:	f002 fb0e 	bl	8003624 <memset>
  if(htim->Instance==TIM1)
 8001008:	6822      	ldr	r2, [r4, #0]
 800100a:	4b0d      	ldr	r3, [pc, #52]	@ (8001040 <HAL_TIM_MspPostInit+0x48>)
 800100c:	429a      	cmp	r2, r3
 800100e:	d001      	beq.n	8001014 <HAL_TIM_MspPostInit+0x1c>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001010:	b006      	add	sp, #24
 8001012:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001014:	4a0b      	ldr	r2, [pc, #44]	@ (8001044 <HAL_TIM_MspPostInit+0x4c>)
 8001016:	6b51      	ldr	r1, [r2, #52]	@ 0x34
 8001018:	2301      	movs	r3, #1
 800101a:	4319      	orrs	r1, r3
 800101c:	6351      	str	r1, [r2, #52]	@ 0x34
 800101e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001020:	4013      	ands	r3, r2
 8001022:	9300      	str	r3, [sp, #0]
 8001024:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001026:	2320      	movs	r3, #32
 8001028:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102a:	3b1e      	subs	r3, #30
 800102c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM1;
 800102e:	3303      	adds	r3, #3
 8001030:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001032:	20a0      	movs	r0, #160	@ 0xa0
 8001034:	a901      	add	r1, sp, #4
 8001036:	05c0      	lsls	r0, r0, #23
 8001038:	f000 fef8 	bl	8001e2c <HAL_GPIO_Init>
}
 800103c:	e7e8      	b.n	8001010 <HAL_TIM_MspPostInit+0x18>
 800103e:	46c0      	nop			@ (mov r8, r8)
 8001040:	40012c00 	.word	0x40012c00
 8001044:	40021000 	.word	0x40021000

08001048 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001048:	b510      	push	{r4, lr}
 800104a:	b088      	sub	sp, #32
 800104c:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800104e:	2214      	movs	r2, #20
 8001050:	2100      	movs	r1, #0
 8001052:	a803      	add	r0, sp, #12
 8001054:	f002 fae6 	bl	8003624 <memset>
  if(huart->Instance==USART1)
 8001058:	6822      	ldr	r2, [r4, #0]
 800105a:	4b1e      	ldr	r3, [pc, #120]	@ (80010d4 <HAL_UART_MspInit+0x8c>)
 800105c:	429a      	cmp	r2, r3
 800105e:	d001      	beq.n	8001064 <HAL_UART_MspInit+0x1c>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001060:	b008      	add	sp, #32
 8001062:	bd10      	pop	{r4, pc}
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 8001064:	4b1c      	ldr	r3, [pc, #112]	@ (80010d8 <HAL_UART_MspInit+0x90>)
 8001066:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001068:	2103      	movs	r1, #3
 800106a:	438a      	bics	r2, r1
 800106c:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_USART1_CLK_ENABLE();
 800106e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001070:	2180      	movs	r1, #128	@ 0x80
 8001072:	01c9      	lsls	r1, r1, #7
 8001074:	430a      	orrs	r2, r1
 8001076:	641a      	str	r2, [r3, #64]	@ 0x40
 8001078:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800107a:	400a      	ands	r2, r1
 800107c:	9201      	str	r2, [sp, #4]
 800107e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001080:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001082:	2202      	movs	r2, #2
 8001084:	4311      	orrs	r1, r2
 8001086:	6359      	str	r1, [r3, #52]	@ 0x34
 8001088:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800108a:	4013      	ands	r3, r2
 800108c:	9302      	str	r3, [sp, #8]
 800108e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001090:	23c0      	movs	r3, #192	@ 0xc0
 8001092:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001094:	9204      	str	r2, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001096:	a903      	add	r1, sp, #12
 8001098:	4810      	ldr	r0, [pc, #64]	@ (80010dc <HAL_UART_MspInit+0x94>)
 800109a:	f000 fec7 	bl	8001e2c <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel2;
 800109e:	4810      	ldr	r0, [pc, #64]	@ (80010e0 <HAL_UART_MspInit+0x98>)
 80010a0:	4b10      	ldr	r3, [pc, #64]	@ (80010e4 <HAL_UART_MspInit+0x9c>)
 80010a2:	6003      	str	r3, [r0, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80010a4:	2332      	movs	r3, #50	@ 0x32
 80010a6:	6043      	str	r3, [r0, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010a8:	2300      	movs	r3, #0
 80010aa:	6083      	str	r3, [r0, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010ac:	60c3      	str	r3, [r0, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80010ae:	2280      	movs	r2, #128	@ 0x80
 80010b0:	6102      	str	r2, [r0, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010b2:	6143      	str	r3, [r0, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010b4:	6183      	str	r3, [r0, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80010b6:	3a60      	subs	r2, #96	@ 0x60
 80010b8:	61c2      	str	r2, [r0, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80010ba:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80010bc:	f000 fe0e 	bl	8001cdc <HAL_DMA_Init>
 80010c0:	2800      	cmp	r0, #0
 80010c2:	d104      	bne.n	80010ce <HAL_UART_MspInit+0x86>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80010c4:	4b06      	ldr	r3, [pc, #24]	@ (80010e0 <HAL_UART_MspInit+0x98>)
 80010c6:	2280      	movs	r2, #128	@ 0x80
 80010c8:	50a3      	str	r3, [r4, r2]
 80010ca:	629c      	str	r4, [r3, #40]	@ 0x28
}
 80010cc:	e7c8      	b.n	8001060 <HAL_UART_MspInit+0x18>
      Error_Handler();
 80010ce:	f7ff fd61 	bl	8000b94 <Error_Handler>
 80010d2:	e7f7      	b.n	80010c4 <HAL_UART_MspInit+0x7c>
 80010d4:	40013800 	.word	0x40013800
 80010d8:	40021000 	.word	0x40021000
 80010dc:	50000400 	.word	0x50000400
 80010e0:	20000338 	.word	0x20000338
 80010e4:	4002001c 	.word	0x4002001c

080010e8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010e8:	e7fe      	b.n	80010e8 <NMI_Handler>

080010ea <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010ea:	e7fe      	b.n	80010ea <HardFault_Handler>

080010ec <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80010ec:	4770      	bx	lr

080010ee <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010ee:	4770      	bx	lr

080010f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010f0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010f2:	f000 f89f 	bl	8001234 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010f6:	bd10      	pop	{r4, pc}

080010f8 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 80010f8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80010fa:	4802      	ldr	r0, [pc, #8]	@ (8001104 <TIM14_IRQHandler+0xc>)
 80010fc:	f001 f956 	bl	80023ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8001100:	bd10      	pop	{r4, pc}
 8001102:	46c0      	nop			@ (mov r8, r8)
 8001104:	20000428 	.word	0x20000428

08001108 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001108:	b510      	push	{r4, lr}
 800110a:	0003      	movs	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800110c:	4a0c      	ldr	r2, [pc, #48]	@ (8001140 <_sbrk+0x38>)
 800110e:	490d      	ldr	r1, [pc, #52]	@ (8001144 <_sbrk+0x3c>)
 8001110:	1a52      	subs	r2, r2, r1
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001112:	490d      	ldr	r1, [pc, #52]	@ (8001148 <_sbrk+0x40>)
 8001114:	6809      	ldr	r1, [r1, #0]
 8001116:	2900      	cmp	r1, #0
 8001118:	d007      	beq.n	800112a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800111a:	490b      	ldr	r1, [pc, #44]	@ (8001148 <_sbrk+0x40>)
 800111c:	6808      	ldr	r0, [r1, #0]
 800111e:	18c3      	adds	r3, r0, r3
 8001120:	4293      	cmp	r3, r2
 8001122:	d806      	bhi.n	8001132 <_sbrk+0x2a>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001124:	4a08      	ldr	r2, [pc, #32]	@ (8001148 <_sbrk+0x40>)
 8001126:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8001128:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 800112a:	4907      	ldr	r1, [pc, #28]	@ (8001148 <_sbrk+0x40>)
 800112c:	4807      	ldr	r0, [pc, #28]	@ (800114c <_sbrk+0x44>)
 800112e:	6008      	str	r0, [r1, #0]
 8001130:	e7f3      	b.n	800111a <_sbrk+0x12>
    errno = ENOMEM;
 8001132:	f002 fac5 	bl	80036c0 <__errno>
 8001136:	230c      	movs	r3, #12
 8001138:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800113a:	2001      	movs	r0, #1
 800113c:	4240      	negs	r0, r0
 800113e:	e7f3      	b.n	8001128 <_sbrk+0x20>
 8001140:	20003000 	.word	0x20003000
 8001144:	00000400 	.word	0x00000400
 8001148:	20000580 	.word	0x20000580
 800114c:	200006d0 	.word	0x200006d0

08001150 <SystemInit>:
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001150:	4b02      	ldr	r3, [pc, #8]	@ (800115c <SystemInit+0xc>)
 8001152:	2280      	movs	r2, #128	@ 0x80
 8001154:	0512      	lsls	r2, r2, #20
 8001156:	609a      	str	r2, [r3, #8]
#endif
}
 8001158:	4770      	bx	lr
 800115a:	46c0      	nop			@ (mov r8, r8)
 800115c:	e000ed00 	.word	0xe000ed00

08001160 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001160:	480d      	ldr	r0, [pc, #52]	@ (8001198 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001162:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001164:	f7ff fff4 	bl	8001150 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001168:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800116a:	e003      	b.n	8001174 <LoopCopyDataInit>

0800116c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800116c:	4b0b      	ldr	r3, [pc, #44]	@ (800119c <LoopForever+0x6>)
  ldr r3, [r3, r1]
 800116e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001170:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001172:	3104      	adds	r1, #4

08001174 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001174:	480a      	ldr	r0, [pc, #40]	@ (80011a0 <LoopForever+0xa>)
  ldr r3, =_edata
 8001176:	4b0b      	ldr	r3, [pc, #44]	@ (80011a4 <LoopForever+0xe>)
  adds r2, r0, r1
 8001178:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800117a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800117c:	d3f6      	bcc.n	800116c <CopyDataInit>
  ldr r2, =_sbss
 800117e:	4a0a      	ldr	r2, [pc, #40]	@ (80011a8 <LoopForever+0x12>)
  b LoopFillZerobss
 8001180:	e002      	b.n	8001188 <LoopFillZerobss>

08001182 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001182:	2300      	movs	r3, #0
  str  r3, [r2]
 8001184:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001186:	3204      	adds	r2, #4

08001188 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8001188:	4b08      	ldr	r3, [pc, #32]	@ (80011ac <LoopForever+0x16>)
  cmp r2, r3
 800118a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800118c:	d3f9      	bcc.n	8001182 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 800118e:	f002 fa9d 	bl	80036cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001192:	f7ff fe81 	bl	8000e98 <main>

08001196 <LoopForever>:

LoopForever:
    b LoopForever
 8001196:	e7fe      	b.n	8001196 <LoopForever>
  ldr   r0, =_estack
 8001198:	20003000 	.word	0x20003000
  ldr r3, =_sidata
 800119c:	0800432c 	.word	0x0800432c
  ldr r0, =_sdata
 80011a0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80011a4:	20000060 	.word	0x20000060
  ldr r2, =_sbss
 80011a8:	20000060 	.word	0x20000060
  ldr r3, = _ebss
 80011ac:	200006d0 	.word	0x200006d0

080011b0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011b0:	e7fe      	b.n	80011b0 <ADC1_IRQHandler>
	...

080011b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011b4:	b510      	push	{r4, lr}
 80011b6:	0004      	movs	r4, r0
  HAL_StatusTypeDef  status = HAL_OK;

  if ((uint32_t)uwTickFreq != 0UL)
 80011b8:	4b11      	ldr	r3, [pc, #68]	@ (8001200 <HAL_InitTick+0x4c>)
 80011ba:	7819      	ldrb	r1, [r3, #0]
 80011bc:	2900      	cmp	r1, #0
 80011be:	d101      	bne.n	80011c4 <HAL_InitTick+0x10>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 80011c0:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 80011c2:	bd10      	pop	{r4, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 80011c4:	20fa      	movs	r0, #250	@ 0xfa
 80011c6:	0080      	lsls	r0, r0, #2
 80011c8:	f7fe ffb2 	bl	8000130 <__udivsi3>
 80011cc:	0001      	movs	r1, r0
 80011ce:	4b0d      	ldr	r3, [pc, #52]	@ (8001204 <HAL_InitTick+0x50>)
 80011d0:	6818      	ldr	r0, [r3, #0]
 80011d2:	f7fe ffad 	bl	8000130 <__udivsi3>
 80011d6:	f000 fd29 	bl	8001c2c <HAL_SYSTICK_Config>
 80011da:	2800      	cmp	r0, #0
 80011dc:	d10d      	bne.n	80011fa <HAL_InitTick+0x46>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011de:	2c03      	cmp	r4, #3
 80011e0:	d901      	bls.n	80011e6 <HAL_InitTick+0x32>
        status = HAL_ERROR;
 80011e2:	2001      	movs	r0, #1
 80011e4:	e7ed      	b.n	80011c2 <HAL_InitTick+0xe>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011e6:	3001      	adds	r0, #1
 80011e8:	2200      	movs	r2, #0
 80011ea:	0021      	movs	r1, r4
 80011ec:	4240      	negs	r0, r0
 80011ee:	f000 fd0d 	bl	8001c0c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011f2:	4b05      	ldr	r3, [pc, #20]	@ (8001208 <HAL_InitTick+0x54>)
 80011f4:	601c      	str	r4, [r3, #0]
  HAL_StatusTypeDef  status = HAL_OK;
 80011f6:	2000      	movs	r0, #0
 80011f8:	e7e3      	b.n	80011c2 <HAL_InitTick+0xe>
      status = HAL_ERROR;
 80011fa:	2001      	movs	r0, #1
 80011fc:	e7e1      	b.n	80011c2 <HAL_InitTick+0xe>
 80011fe:	46c0      	nop			@ (mov r8, r8)
 8001200:	20000008 	.word	0x20000008
 8001204:	20000004 	.word	0x20000004
 8001208:	2000000c 	.word	0x2000000c

0800120c <HAL_Init>:
{
 800120c:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800120e:	4a08      	ldr	r2, [pc, #32]	@ (8001230 <HAL_Init+0x24>)
 8001210:	6811      	ldr	r1, [r2, #0]
 8001212:	2380      	movs	r3, #128	@ 0x80
 8001214:	005b      	lsls	r3, r3, #1
 8001216:	430b      	orrs	r3, r1
 8001218:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800121a:	2000      	movs	r0, #0
 800121c:	f7ff ffca 	bl	80011b4 <HAL_InitTick>
 8001220:	1e04      	subs	r4, r0, #0
 8001222:	d002      	beq.n	800122a <HAL_Init+0x1e>
    status = HAL_ERROR;
 8001224:	2401      	movs	r4, #1
}
 8001226:	0020      	movs	r0, r4
 8001228:	bd10      	pop	{r4, pc}
    HAL_MspInit();
 800122a:	f7ff fe4b 	bl	8000ec4 <HAL_MspInit>
 800122e:	e7fa      	b.n	8001226 <HAL_Init+0x1a>
 8001230:	40022000 	.word	0x40022000

08001234 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8001234:	4b03      	ldr	r3, [pc, #12]	@ (8001244 <HAL_IncTick+0x10>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	4a03      	ldr	r2, [pc, #12]	@ (8001248 <HAL_IncTick+0x14>)
 800123a:	6811      	ldr	r1, [r2, #0]
 800123c:	185b      	adds	r3, r3, r1
 800123e:	6013      	str	r3, [r2, #0]
}
 8001240:	4770      	bx	lr
 8001242:	46c0      	nop			@ (mov r8, r8)
 8001244:	20000008 	.word	0x20000008
 8001248:	20000584 	.word	0x20000584

0800124c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800124c:	4b01      	ldr	r3, [pc, #4]	@ (8001254 <HAL_GetTick+0x8>)
 800124e:	6818      	ldr	r0, [r3, #0]
}
 8001250:	4770      	bx	lr
 8001252:	46c0      	nop			@ (mov r8, r8)
 8001254:	20000584 	.word	0x20000584

08001258 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001258:	b570      	push	{r4, r5, r6, lr}
 800125a:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800125c:	f7ff fff6 	bl	800124c <HAL_GetTick>
 8001260:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001262:	1c63      	adds	r3, r4, #1
 8001264:	d002      	beq.n	800126c <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8001266:	4b04      	ldr	r3, [pc, #16]	@ (8001278 <HAL_Delay+0x20>)
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	18e4      	adds	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800126c:	f7ff ffee 	bl	800124c <HAL_GetTick>
 8001270:	1b40      	subs	r0, r0, r5
 8001272:	42a0      	cmp	r0, r4
 8001274:	d3fa      	bcc.n	800126c <HAL_Delay+0x14>
  {
  }
}
 8001276:	bd70      	pop	{r4, r5, r6, pc}
 8001278:	20000008 	.word	0x20000008

0800127c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800127c:	b530      	push	{r4, r5, lr}
 800127e:	b083      	sub	sp, #12
 8001280:	0004      	movs	r4, r0
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR1 = 0UL;
  uint32_t tmpCFGR2 = 0UL;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001282:	2300      	movs	r3, #0
 8001284:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8001286:	2800      	cmp	r0, #0
 8001288:	d100      	bne.n	800128c <HAL_ADC_Init+0x10>
 800128a:	e105      	b.n	8001498 <HAL_ADC_Init+0x21c>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800128c:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 800128e:	2b00      	cmp	r3, #0
 8001290:	d012      	beq.n	80012b8 <HAL_ADC_Init+0x3c>

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001292:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001294:	689a      	ldr	r2, [r3, #8]
 8001296:	00d2      	lsls	r2, r2, #3
 8001298:	d41b      	bmi.n	80012d2 <HAL_ADC_Init+0x56>
  MODIFY_REG(ADCx->CR,
 800129a:	6899      	ldr	r1, [r3, #8]
 800129c:	4a7f      	ldr	r2, [pc, #508]	@ (800149c <HAL_ADC_Init+0x220>)
 800129e:	4011      	ands	r1, r2
 80012a0:	2280      	movs	r2, #128	@ 0x80
 80012a2:	0552      	lsls	r2, r2, #21
 80012a4:	430a      	orrs	r2, r1
 80012a6:	609a      	str	r2, [r3, #8]
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80012a8:	4b7d      	ldr	r3, [pc, #500]	@ (80014a0 <HAL_ADC_Init+0x224>)
 80012aa:	6818      	ldr	r0, [r3, #0]
 80012ac:	497d      	ldr	r1, [pc, #500]	@ (80014a4 <HAL_ADC_Init+0x228>)
 80012ae:	f7fe ff3f 	bl	8000130 <__udivsi3>
 80012b2:	0040      	lsls	r0, r0, #1
 80012b4:	9001      	str	r0, [sp, #4]
    while (wait_loop_index != 0UL)
 80012b6:	e009      	b.n	80012cc <HAL_ADC_Init+0x50>
    HAL_ADC_MspInit(hadc);
 80012b8:	f7ff fe1c 	bl	8000ef4 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80012bc:	2300      	movs	r3, #0
 80012be:	65e3      	str	r3, [r4, #92]	@ 0x5c
    hadc->Lock = HAL_UNLOCKED;
 80012c0:	2254      	movs	r2, #84	@ 0x54
 80012c2:	54a3      	strb	r3, [r4, r2]
 80012c4:	e7e5      	b.n	8001292 <HAL_ADC_Init+0x16>
    {
      wait_loop_index--;
 80012c6:	9b01      	ldr	r3, [sp, #4]
 80012c8:	3b01      	subs	r3, #1
 80012ca:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80012cc:	9b01      	ldr	r3, [sp, #4]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d1f9      	bne.n	80012c6 <HAL_ADC_Init+0x4a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80012d2:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80012d4:	689a      	ldr	r2, [r3, #8]
 80012d6:	00d2      	lsls	r2, r2, #3
 80012d8:	d500      	bpl.n	80012dc <HAL_ADC_Init+0x60>
 80012da:	e09d      	b.n	8001418 <HAL_ADC_Init+0x19c>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012dc:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 80012de:	2110      	movs	r1, #16
 80012e0:	430a      	orrs	r2, r1
 80012e2:	65a2      	str	r2, [r4, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012e4:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80012e6:	390f      	subs	r1, #15
 80012e8:	430a      	orrs	r2, r1
 80012ea:	65e2      	str	r2, [r4, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80012ec:	2001      	movs	r0, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80012ee:	689a      	ldr	r2, [r3, #8]
 80012f0:	2104      	movs	r1, #4
 80012f2:	000d      	movs	r5, r1
 80012f4:	4015      	ands	r5, r2
 80012f6:	4211      	tst	r1, r2
 80012f8:	d000      	beq.n	80012fc <HAL_ADC_Init+0x80>
 80012fa:	2501      	movs	r5, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80012fc:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 80012fe:	06d2      	lsls	r2, r2, #27
 8001300:	d500      	bpl.n	8001304 <HAL_ADC_Init+0x88>
 8001302:	e0c2      	b.n	800148a <HAL_ADC_Init+0x20e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001304:	2d00      	cmp	r5, #0
 8001306:	d000      	beq.n	800130a <HAL_ADC_Init+0x8e>
 8001308:	e0bf      	b.n	800148a <HAL_ADC_Init+0x20e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800130a:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800130c:	4966      	ldr	r1, [pc, #408]	@ (80014a8 <HAL_ADC_Init+0x22c>)
 800130e:	400a      	ands	r2, r1
 8001310:	3106      	adds	r1, #6
 8001312:	31ff      	adds	r1, #255	@ 0xff
 8001314:	430a      	orrs	r2, r1
 8001316:	65a2      	str	r2, [r4, #88]	@ 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001318:	689a      	ldr	r2, [r3, #8]
 800131a:	07d2      	lsls	r2, r2, #31
 800131c:	d452      	bmi.n	80013c4 <HAL_ADC_Init+0x148>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths: temperature sensor, Vref             */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800131e:	68a2      	ldr	r2, [r4, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001320:	7e21      	ldrb	r1, [r4, #24]
 8001322:	0389      	lsls	r1, r1, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001324:	430a      	orrs	r2, r1
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001326:	7e61      	ldrb	r1, [r4, #25]
 8001328:	03c9      	lsls	r1, r1, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800132a:	430a      	orrs	r2, r1
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800132c:	7ea5      	ldrb	r5, [r4, #26]
 800132e:	0369      	lsls	r1, r5, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001330:	430a      	orrs	r2, r1
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001332:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8001334:	2900      	cmp	r1, #0
 8001336:	d001      	beq.n	800133c <HAL_ADC_Init+0xc0>
 8001338:	2180      	movs	r1, #128	@ 0x80
 800133a:	0149      	lsls	r1, r1, #5
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800133c:	430a      	orrs	r2, r1
                   hadc->Init.DataAlign                                           |
 800133e:	68e1      	ldr	r1, [r4, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001340:	430a      	orrs	r2, r1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001342:	6921      	ldr	r1, [r4, #16]
 8001344:	2900      	cmp	r1, #0
 8001346:	db69      	blt.n	800141c <HAL_ADC_Init+0x1a0>
 8001348:	2180      	movs	r1, #128	@ 0x80
 800134a:	0389      	lsls	r1, r1, #14
                   hadc->Init.DataAlign                                           |
 800134c:	430a      	orrs	r2, r1
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800134e:	212c      	movs	r1, #44	@ 0x2c
 8001350:	5c61      	ldrb	r1, [r4, r1]
 8001352:	0049      	lsls	r1, r1, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001354:	430a      	orrs	r2, r1

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001356:	2120      	movs	r1, #32
 8001358:	5c61      	ldrb	r1, [r4, r1]
 800135a:	2901      	cmp	r1, #1
 800135c:	d061      	beq.n	8001422 <HAL_ADC_Init+0x1a6>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800135e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8001360:	2900      	cmp	r1, #0
 8001362:	d005      	beq.n	8001370 <HAL_ADC_Init+0xf4>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001364:	25e0      	movs	r5, #224	@ 0xe0
 8001366:	006d      	lsls	r5, r5, #1
 8001368:	4029      	ands	r1, r5
                     hadc->Init.ExternalTrigConvEdge);
 800136a:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800136c:	4329      	orrs	r1, r5
 800136e:	430a      	orrs	r2, r1
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001370:	68d9      	ldr	r1, [r3, #12]
 8001372:	4d4e      	ldr	r5, [pc, #312]	@ (80014ac <HAL_ADC_Init+0x230>)
 8001374:	4029      	ands	r1, r5
 8001376:	430a      	orrs	r2, r1
 8001378:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800137a:	6863      	ldr	r3, [r4, #4]
 800137c:	0f9b      	lsrs	r3, r3, #30
 800137e:	079b      	lsls	r3, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8001380:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001382:	431a      	orrs	r2, r3
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001384:	213c      	movs	r1, #60	@ 0x3c
 8001386:	5c61      	ldrb	r1, [r4, r1]
 8001388:	2901      	cmp	r1, #1
 800138a:	d059      	beq.n	8001440 <HAL_ADC_Init+0x1c4>
                     hadc->Init.Oversampling.RightBitShift |
                     hadc->Init.Oversampling.TriggeredMode
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800138c:	6821      	ldr	r1, [r4, #0]
 800138e:	690b      	ldr	r3, [r1, #16]
 8001390:	4d47      	ldr	r5, [pc, #284]	@ (80014b0 <HAL_ADC_Init+0x234>)
 8001392:	402b      	ands	r3, r5
 8001394:	4313      	orrs	r3, r2
 8001396:	610b      	str	r3, [r1, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001398:	6863      	ldr	r3, [r4, #4]
 800139a:	22c0      	movs	r2, #192	@ 0xc0
 800139c:	0612      	lsls	r2, r2, #24
 800139e:	4293      	cmp	r3, r2
 80013a0:	d010      	beq.n	80013c4 <HAL_ADC_Init+0x148>
 80013a2:	2280      	movs	r2, #128	@ 0x80
 80013a4:	05d2      	lsls	r2, r2, #23
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d00c      	beq.n	80013c4 <HAL_ADC_Init+0x148>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80013aa:	2280      	movs	r2, #128	@ 0x80
 80013ac:	0612      	lsls	r2, r2, #24
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d008      	beq.n	80013c4 <HAL_ADC_Init+0x148>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80013b2:	4940      	ldr	r1, [pc, #256]	@ (80014b4 <HAL_ADC_Init+0x238>)
 80013b4:	680a      	ldr	r2, [r1, #0]
 80013b6:	4d40      	ldr	r5, [pc, #256]	@ (80014b8 <HAL_ADC_Init+0x23c>)
 80013b8:	402a      	ands	r2, r5
 80013ba:	25f0      	movs	r5, #240	@ 0xf0
 80013bc:	03ad      	lsls	r5, r5, #14
 80013be:	402b      	ands	r3, r5
 80013c0:	4313      	orrs	r3, r2
 80013c2:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80013c4:	6821      	ldr	r1, [r4, #0]
 80013c6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
  MODIFY_REG(ADCx->SMPR,
 80013c8:	694a      	ldr	r2, [r1, #20]
 80013ca:	2507      	movs	r5, #7
 80013cc:	43aa      	bics	r2, r5
 80013ce:	4313      	orrs	r3, r2
 80013d0:	614b      	str	r3, [r1, #20]
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80013d2:	6821      	ldr	r1, [r4, #0]
 80013d4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80013d6:	694b      	ldr	r3, [r1, #20]
 80013d8:	3569      	adds	r5, #105	@ 0x69
 80013da:	43ab      	bics	r3, r5
 80013dc:	0112      	lsls	r2, r2, #4
 80013de:	4313      	orrs	r3, r2
 80013e0:	614b      	str	r3, [r1, #20]
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80013e2:	6923      	ldr	r3, [r4, #16]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d135      	bne.n	8001454 <HAL_ADC_Init+0x1d8>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80013e8:	6822      	ldr	r2, [r4, #0]
 80013ea:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80013ec:	3b10      	subs	r3, #16
 80013ee:	430b      	orrs	r3, r1
 80013f0:	6293      	str	r3, [r2, #40]	@ 0x28
    {
      /* Nothing to do */
    }
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80013f2:	6823      	ldr	r3, [r4, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80013f4:	695a      	ldr	r2, [r3, #20]
 80013f6:	2307      	movs	r3, #7
 80013f8:	4013      	ands	r3, r2
        == hadc->Init.SamplingTimeCommon1)
 80013fa:	6b62      	ldr	r2, [r4, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80013fc:	429a      	cmp	r2, r3
 80013fe:	d03b      	beq.n	8001478 <HAL_ADC_Init+0x1fc>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001400:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001402:	2212      	movs	r2, #18
 8001404:	4393      	bics	r3, r2
 8001406:	3a02      	subs	r2, #2
 8001408:	4313      	orrs	r3, r2
 800140a:	65a3      	str	r3, [r4, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800140c:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800140e:	3a0f      	subs	r2, #15
 8001410:	4313      	orrs	r3, r2
 8001412:	65e3      	str	r3, [r4, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8001414:	2001      	movs	r0, #1
 8001416:	e03d      	b.n	8001494 <HAL_ADC_Init+0x218>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001418:	2000      	movs	r0, #0
 800141a:	e768      	b.n	80012ee <HAL_ADC_Init+0x72>
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800141c:	0049      	lsls	r1, r1, #1
 800141e:	0849      	lsrs	r1, r1, #1
 8001420:	e794      	b.n	800134c <HAL_ADC_Init+0xd0>
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001422:	2d00      	cmp	r5, #0
 8001424:	d103      	bne.n	800142e <HAL_ADC_Init+0x1b2>
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001426:	2180      	movs	r1, #128	@ 0x80
 8001428:	0249      	lsls	r1, r1, #9
 800142a:	430a      	orrs	r2, r1
 800142c:	e797      	b.n	800135e <HAL_ADC_Init+0xe2>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800142e:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8001430:	2520      	movs	r5, #32
 8001432:	4329      	orrs	r1, r5
 8001434:	65a1      	str	r1, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001436:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 8001438:	3d1f      	subs	r5, #31
 800143a:	4329      	orrs	r1, r5
 800143c:	65e1      	str	r1, [r4, #92]	@ 0x5c
 800143e:	e78e      	b.n	800135e <HAL_ADC_Init+0xe2>
                     hadc->Init.Oversampling.Ratio         |
 8001440:	6c21      	ldr	r1, [r4, #64]	@ 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001442:	430b      	orrs	r3, r1
                     hadc->Init.Oversampling.RightBitShift |
 8001444:	6c61      	ldr	r1, [r4, #68]	@ 0x44
                     hadc->Init.Oversampling.Ratio         |
 8001446:	430b      	orrs	r3, r1
                     hadc->Init.Oversampling.TriggeredMode
 8001448:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
                     hadc->Init.Oversampling.RightBitShift |
 800144a:	430b      	orrs	r3, r1
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 800144c:	4313      	orrs	r3, r2
 800144e:	2201      	movs	r2, #1
 8001450:	431a      	orrs	r2, r3
 8001452:	e79b      	b.n	800138c <HAL_ADC_Init+0x110>
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001454:	2280      	movs	r2, #128	@ 0x80
 8001456:	0392      	lsls	r2, r2, #14
 8001458:	4293      	cmp	r3, r2
 800145a:	d1ca      	bne.n	80013f2 <HAL_ADC_Init+0x176>
      MODIFY_REG(hadc->Instance->CHSELR,
 800145c:	6821      	ldr	r1, [r4, #0]
 800145e:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 8001460:	69e3      	ldr	r3, [r4, #28]
 8001462:	3b01      	subs	r3, #1
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	221c      	movs	r2, #28
 8001468:	401a      	ands	r2, r3
 800146a:	2310      	movs	r3, #16
 800146c:	425b      	negs	r3, r3
 800146e:	4093      	lsls	r3, r2
 8001470:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8001472:	4313      	orrs	r3, r2
 8001474:	628b      	str	r3, [r1, #40]	@ 0x28
 8001476:	e7bc      	b.n	80013f2 <HAL_ADC_Init+0x176>
      ADC_CLEAR_ERRORCODE(hadc);
 8001478:	2300      	movs	r3, #0
 800147a:	65e3      	str	r3, [r4, #92]	@ 0x5c
      ADC_STATE_CLR_SET(hadc->State,
 800147c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800147e:	2203      	movs	r2, #3
 8001480:	4393      	bics	r3, r2
 8001482:	3a02      	subs	r2, #2
 8001484:	4313      	orrs	r3, r2
 8001486:	65a3      	str	r3, [r4, #88]	@ 0x58
 8001488:	e004      	b.n	8001494 <HAL_ADC_Init+0x218>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800148a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800148c:	2210      	movs	r2, #16
 800148e:	4313      	orrs	r3, r2
 8001490:	65a3      	str	r3, [r4, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001492:	2001      	movs	r0, #1
  }

  /* Return function status */
  return tmp_hal_status;
}
 8001494:	b003      	add	sp, #12
 8001496:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8001498:	2001      	movs	r0, #1
 800149a:	e7fb      	b.n	8001494 <HAL_ADC_Init+0x218>
 800149c:	6fffffe8 	.word	0x6fffffe8
 80014a0:	20000004 	.word	0x20000004
 80014a4:	00030d40 	.word	0x00030d40
 80014a8:	fffffefd 	.word	0xfffffefd
 80014ac:	ffde0201 	.word	0xffde0201
 80014b0:	1ffffc02 	.word	0x1ffffc02
 80014b4:	40012708 	.word	0x40012708
 80014b8:	ffc3ffff 	.word	0xffc3ffff

080014bc <HAL_ADC_ConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80014bc:	4770      	bx	lr

080014be <HAL_ADC_ConvHalfCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80014be:	4770      	bx	lr

080014c0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80014c0:	b510      	push	{r4, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80014c2:	6a80      	ldr	r0, [r0, #40]	@ 0x28

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80014c4:	f7ff fffb 	bl	80014be <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80014c8:	bd10      	pop	{r4, pc}

080014ca <HAL_ADC_ErrorCallback>:
}
 80014ca:	4770      	bx	lr

080014cc <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80014cc:	b510      	push	{r4, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80014ce:	6a80      	ldr	r0, [r0, #40]	@ 0x28

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80014d0:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 80014d2:	2240      	movs	r2, #64	@ 0x40
 80014d4:	4313      	orrs	r3, r2
 80014d6:	6583      	str	r3, [r0, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80014d8:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 80014da:	3a3c      	subs	r2, #60	@ 0x3c
 80014dc:	4313      	orrs	r3, r2
 80014de:	65c3      	str	r3, [r0, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80014e0:	f7ff fff3 	bl	80014ca <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80014e4:	bd10      	pop	{r4, pc}
	...

080014e8 <ADC_DMAConvCplt>:
{
 80014e8:	b510      	push	{r4, lr}
 80014ea:	0003      	movs	r3, r0
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80014ec:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80014ee:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 80014f0:	2150      	movs	r1, #80	@ 0x50
 80014f2:	4211      	tst	r1, r2
 80014f4:	d12a      	bne.n	800154c <ADC_DMAConvCplt+0x64>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80014f6:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 80014f8:	2380      	movs	r3, #128	@ 0x80
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	4313      	orrs	r3, r2
 80014fe:	6583      	str	r3, [r0, #88]	@ 0x58
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001500:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8001502:	68d9      	ldr	r1, [r3, #12]
 8001504:	22c0      	movs	r2, #192	@ 0xc0
 8001506:	0112      	lsls	r2, r2, #4
 8001508:	4211      	tst	r1, r2
 800150a:	d113      	bne.n	8001534 <ADC_DMAConvCplt+0x4c>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 800150c:	7e82      	ldrb	r2, [r0, #26]
 800150e:	2a00      	cmp	r2, #0
 8001510:	d110      	bne.n	8001534 <ADC_DMAConvCplt+0x4c>
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	0712      	lsls	r2, r2, #28
 8001516:	d50d      	bpl.n	8001534 <ADC_DMAConvCplt+0x4c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001518:	689a      	ldr	r2, [r3, #8]
 800151a:	0752      	lsls	r2, r2, #29
 800151c:	d40d      	bmi.n	800153a <ADC_DMAConvCplt+0x52>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800151e:	685a      	ldr	r2, [r3, #4]
 8001520:	210c      	movs	r1, #12
 8001522:	438a      	bics	r2, r1
 8001524:	605a      	str	r2, [r3, #4]
          ADC_STATE_CLR_SET(hadc->State,
 8001526:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8001528:	4a0e      	ldr	r2, [pc, #56]	@ (8001564 <ADC_DMAConvCplt+0x7c>)
 800152a:	4013      	ands	r3, r2
 800152c:	3204      	adds	r2, #4
 800152e:	32ff      	adds	r2, #255	@ 0xff
 8001530:	4313      	orrs	r3, r2
 8001532:	6583      	str	r3, [r0, #88]	@ 0x58
    HAL_ADC_ConvCpltCallback(hadc);
 8001534:	f7ff ffc2 	bl	80014bc <HAL_ADC_ConvCpltCallback>
}
 8001538:	bd10      	pop	{r4, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800153a:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 800153c:	2220      	movs	r2, #32
 800153e:	4313      	orrs	r3, r2
 8001540:	6583      	str	r3, [r0, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001542:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 8001544:	3a1f      	subs	r2, #31
 8001546:	4313      	orrs	r3, r2
 8001548:	65c3      	str	r3, [r0, #92]	@ 0x5c
 800154a:	e7f3      	b.n	8001534 <ADC_DMAConvCplt+0x4c>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800154c:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 800154e:	06d2      	lsls	r2, r2, #27
 8001550:	d404      	bmi.n	800155c <ADC_DMAConvCplt+0x74>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001552:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8001554:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001556:	0018      	movs	r0, r3
 8001558:	4790      	blx	r2
}
 800155a:	e7ed      	b.n	8001538 <ADC_DMAConvCplt+0x50>
      HAL_ADC_ErrorCallback(hadc);
 800155c:	f7ff ffb5 	bl	80014ca <HAL_ADC_ErrorCallback>
 8001560:	e7ea      	b.n	8001538 <ADC_DMAConvCplt+0x50>
 8001562:	46c0      	nop			@ (mov r8, r8)
 8001564:	fffffefe 	.word	0xfffffefe

08001568 <HAL_ADC_ConfigChannel>:
{
 8001568:	b5f0      	push	{r4, r5, r6, r7, lr}
 800156a:	b083      	sub	sp, #12
 800156c:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0UL;
 800156e:	2300      	movs	r3, #0
 8001570:	9301      	str	r3, [sp, #4]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001572:	6905      	ldr	r5, [r0, #16]
  __HAL_LOCK(hadc);
 8001574:	3354      	adds	r3, #84	@ 0x54
 8001576:	5cc3      	ldrb	r3, [r0, r3]
 8001578:	2b01      	cmp	r3, #1
 800157a:	d100      	bne.n	800157e <HAL_ADC_ConfigChannel+0x16>
 800157c:	e121      	b.n	80017c2 <HAL_ADC_ConfigChannel+0x25a>
 800157e:	2354      	movs	r3, #84	@ 0x54
 8001580:	2201      	movs	r2, #1
 8001582:	54c2      	strb	r2, [r0, r3]
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001584:	6800      	ldr	r0, [r0, #0]
 8001586:	6883      	ldr	r3, [r0, #8]
 8001588:	3203      	adds	r2, #3
 800158a:	0016      	movs	r6, r2
 800158c:	401e      	ands	r6, r3
 800158e:	421a      	tst	r2, r3
 8001590:	d009      	beq.n	80015a6 <HAL_ADC_ConfigChannel+0x3e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001592:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001594:	321c      	adds	r2, #28
 8001596:	4313      	orrs	r3, r2
 8001598:	65a3      	str	r3, [r4, #88]	@ 0x58
    tmp_hal_status = HAL_ERROR;
 800159a:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 800159c:	2354      	movs	r3, #84	@ 0x54
 800159e:	2200      	movs	r2, #0
 80015a0:	54e2      	strb	r2, [r4, r3]
}
 80015a2:	b003      	add	sp, #12
 80015a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (sConfig->Rank != ADC_RANK_NONE)
 80015a6:	684b      	ldr	r3, [r1, #4]
 80015a8:	2b02      	cmp	r3, #2
 80015aa:	d100      	bne.n	80015ae <HAL_ADC_ConfigChannel+0x46>
 80015ac:	e0d5      	b.n	800175a <HAL_ADC_ConfigChannel+0x1f2>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80015ae:	2280      	movs	r2, #128	@ 0x80
 80015b0:	0612      	lsls	r2, r2, #24
 80015b2:	4295      	cmp	r5, r2
 80015b4:	d025      	beq.n	8001602 <HAL_ADC_ConfigChannel+0x9a>
 80015b6:	4a84      	ldr	r2, [pc, #528]	@ (80017c8 <HAL_ADC_ConfigChannel+0x260>)
 80015b8:	4295      	cmp	r5, r2
 80015ba:	d022      	beq.n	8001602 <HAL_ADC_ConfigChannel+0x9a>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80015bc:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 80015be:	271f      	movs	r7, #31
 80015c0:	401f      	ands	r7, r3
 80015c2:	250f      	movs	r5, #15
 80015c4:	40bd      	lsls	r5, r7
 80015c6:	43aa      	bics	r2, r5
 80015c8:	680b      	ldr	r3, [r1, #0]
 80015ca:	025d      	lsls	r5, r3, #9
 80015cc:	d12f      	bne.n	800162e <HAL_ADC_ConfigChannel+0xc6>
 80015ce:	0e9b      	lsrs	r3, r3, #26
 80015d0:	261f      	movs	r6, #31
 80015d2:	401e      	ands	r6, r3
 80015d4:	40be      	lsls	r6, r7
 80015d6:	4332      	orrs	r2, r6
 80015d8:	6622      	str	r2, [r4, #96]	@ 0x60
        if (((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80015da:	684d      	ldr	r5, [r1, #4]
 80015dc:	08ab      	lsrs	r3, r5, #2
 80015de:	3301      	adds	r3, #1
 80015e0:	69e2      	ldr	r2, [r4, #28]
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d813      	bhi.n	800160e <HAL_ADC_ConfigChannel+0xa6>
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80015e6:	680e      	ldr	r6, [r1, #0]
  MODIFY_REG(ADCx->CHSELR,
 80015e8:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 80015ea:	231f      	movs	r3, #31
 80015ec:	401d      	ands	r5, r3
 80015ee:	3b10      	subs	r3, #16
 80015f0:	001f      	movs	r7, r3
 80015f2:	40af      	lsls	r7, r5
 80015f4:	43ba      	bics	r2, r7
 80015f6:	0eb6      	lsrs	r6, r6, #26
 80015f8:	4033      	ands	r3, r6
 80015fa:	40ab      	lsls	r3, r5
 80015fc:	4313      	orrs	r3, r2
 80015fe:	6283      	str	r3, [r0, #40]	@ 0x28
}
 8001600:	e005      	b.n	800160e <HAL_ADC_ConfigChannel+0xa6>
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 8001602:	680b      	ldr	r3, [r1, #0]
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001604:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 8001606:	025b      	lsls	r3, r3, #9
 8001608:	0a5b      	lsrs	r3, r3, #9
 800160a:	4313      	orrs	r3, r2
 800160c:	6283      	str	r3, [r0, #40]	@ 0x28
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800160e:	6820      	ldr	r0, [r4, #0]
 8001610:	680b      	ldr	r3, [r1, #0]
 8001612:	688d      	ldr	r5, [r1, #8]
  MODIFY_REG(ADCx->SMPR,
 8001614:	6942      	ldr	r2, [r0, #20]
 8001616:	021b      	lsls	r3, r3, #8
 8001618:	439a      	bics	r2, r3
 800161a:	402b      	ands	r3, r5
 800161c:	4d6b      	ldr	r5, [pc, #428]	@ (80017cc <HAL_ADC_ConfigChannel+0x264>)
 800161e:	402b      	ands	r3, r5
 8001620:	4313      	orrs	r3, r2
 8001622:	6143      	str	r3, [r0, #20]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001624:	680b      	ldr	r3, [r1, #0]
 8001626:	2b00      	cmp	r3, #0
 8001628:	db5f      	blt.n	80016ea <HAL_ADC_ConfigChannel+0x182>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800162a:	2000      	movs	r0, #0
 800162c:	e7b6      	b.n	800159c <HAL_ADC_ConfigChannel+0x34>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800162e:	07dd      	lsls	r5, r3, #31
 8001630:	d4d0      	bmi.n	80015d4 <HAL_ADC_ConfigChannel+0x6c>
 8001632:	079d      	lsls	r5, r3, #30
 8001634:	d42f      	bmi.n	8001696 <HAL_ADC_ConfigChannel+0x12e>
 8001636:	075d      	lsls	r5, r3, #29
 8001638:	d42f      	bmi.n	800169a <HAL_ADC_ConfigChannel+0x132>
 800163a:	071d      	lsls	r5, r3, #28
 800163c:	d42f      	bmi.n	800169e <HAL_ADC_ConfigChannel+0x136>
 800163e:	06dd      	lsls	r5, r3, #27
 8001640:	d42f      	bmi.n	80016a2 <HAL_ADC_ConfigChannel+0x13a>
 8001642:	069d      	lsls	r5, r3, #26
 8001644:	d42f      	bmi.n	80016a6 <HAL_ADC_ConfigChannel+0x13e>
 8001646:	065d      	lsls	r5, r3, #25
 8001648:	d42f      	bmi.n	80016aa <HAL_ADC_ConfigChannel+0x142>
 800164a:	061d      	lsls	r5, r3, #24
 800164c:	d42f      	bmi.n	80016ae <HAL_ADC_ConfigChannel+0x146>
 800164e:	05dd      	lsls	r5, r3, #23
 8001650:	d42f      	bmi.n	80016b2 <HAL_ADC_ConfigChannel+0x14a>
 8001652:	059d      	lsls	r5, r3, #22
 8001654:	d42f      	bmi.n	80016b6 <HAL_ADC_ConfigChannel+0x14e>
 8001656:	055d      	lsls	r5, r3, #21
 8001658:	d42f      	bmi.n	80016ba <HAL_ADC_ConfigChannel+0x152>
 800165a:	051d      	lsls	r5, r3, #20
 800165c:	d42f      	bmi.n	80016be <HAL_ADC_ConfigChannel+0x156>
 800165e:	04dd      	lsls	r5, r3, #19
 8001660:	d42f      	bmi.n	80016c2 <HAL_ADC_ConfigChannel+0x15a>
 8001662:	049d      	lsls	r5, r3, #18
 8001664:	d42f      	bmi.n	80016c6 <HAL_ADC_ConfigChannel+0x15e>
 8001666:	045d      	lsls	r5, r3, #17
 8001668:	d42f      	bmi.n	80016ca <HAL_ADC_ConfigChannel+0x162>
 800166a:	041d      	lsls	r5, r3, #16
 800166c:	d42f      	bmi.n	80016ce <HAL_ADC_ConfigChannel+0x166>
 800166e:	03dd      	lsls	r5, r3, #15
 8001670:	d42f      	bmi.n	80016d2 <HAL_ADC_ConfigChannel+0x16a>
 8001672:	039d      	lsls	r5, r3, #14
 8001674:	d42f      	bmi.n	80016d6 <HAL_ADC_ConfigChannel+0x16e>
 8001676:	035d      	lsls	r5, r3, #13
 8001678:	d42f      	bmi.n	80016da <HAL_ADC_ConfigChannel+0x172>
 800167a:	031d      	lsls	r5, r3, #12
 800167c:	d42f      	bmi.n	80016de <HAL_ADC_ConfigChannel+0x176>
 800167e:	02dd      	lsls	r5, r3, #11
 8001680:	d42f      	bmi.n	80016e2 <HAL_ADC_ConfigChannel+0x17a>
 8001682:	029d      	lsls	r5, r3, #10
 8001684:	d42f      	bmi.n	80016e6 <HAL_ADC_ConfigChannel+0x17e>
 8001686:	2580      	movs	r5, #128	@ 0x80
 8001688:	03ed      	lsls	r5, r5, #15
 800168a:	001e      	movs	r6, r3
 800168c:	402e      	ands	r6, r5
 800168e:	422b      	tst	r3, r5
 8001690:	d0a0      	beq.n	80015d4 <HAL_ADC_ConfigChannel+0x6c>
 8001692:	2616      	movs	r6, #22
 8001694:	e79e      	b.n	80015d4 <HAL_ADC_ConfigChannel+0x6c>
 8001696:	2601      	movs	r6, #1
 8001698:	e79c      	b.n	80015d4 <HAL_ADC_ConfigChannel+0x6c>
 800169a:	2602      	movs	r6, #2
 800169c:	e79a      	b.n	80015d4 <HAL_ADC_ConfigChannel+0x6c>
 800169e:	2603      	movs	r6, #3
 80016a0:	e798      	b.n	80015d4 <HAL_ADC_ConfigChannel+0x6c>
 80016a2:	2604      	movs	r6, #4
 80016a4:	e796      	b.n	80015d4 <HAL_ADC_ConfigChannel+0x6c>
 80016a6:	2605      	movs	r6, #5
 80016a8:	e794      	b.n	80015d4 <HAL_ADC_ConfigChannel+0x6c>
 80016aa:	2606      	movs	r6, #6
 80016ac:	e792      	b.n	80015d4 <HAL_ADC_ConfigChannel+0x6c>
 80016ae:	2607      	movs	r6, #7
 80016b0:	e790      	b.n	80015d4 <HAL_ADC_ConfigChannel+0x6c>
 80016b2:	2608      	movs	r6, #8
 80016b4:	e78e      	b.n	80015d4 <HAL_ADC_ConfigChannel+0x6c>
 80016b6:	2609      	movs	r6, #9
 80016b8:	e78c      	b.n	80015d4 <HAL_ADC_ConfigChannel+0x6c>
 80016ba:	260a      	movs	r6, #10
 80016bc:	e78a      	b.n	80015d4 <HAL_ADC_ConfigChannel+0x6c>
 80016be:	260b      	movs	r6, #11
 80016c0:	e788      	b.n	80015d4 <HAL_ADC_ConfigChannel+0x6c>
 80016c2:	260c      	movs	r6, #12
 80016c4:	e786      	b.n	80015d4 <HAL_ADC_ConfigChannel+0x6c>
 80016c6:	260d      	movs	r6, #13
 80016c8:	e784      	b.n	80015d4 <HAL_ADC_ConfigChannel+0x6c>
 80016ca:	260e      	movs	r6, #14
 80016cc:	e782      	b.n	80015d4 <HAL_ADC_ConfigChannel+0x6c>
 80016ce:	260f      	movs	r6, #15
 80016d0:	e780      	b.n	80015d4 <HAL_ADC_ConfigChannel+0x6c>
 80016d2:	2610      	movs	r6, #16
 80016d4:	e77e      	b.n	80015d4 <HAL_ADC_ConfigChannel+0x6c>
 80016d6:	2611      	movs	r6, #17
 80016d8:	e77c      	b.n	80015d4 <HAL_ADC_ConfigChannel+0x6c>
 80016da:	2612      	movs	r6, #18
 80016dc:	e77a      	b.n	80015d4 <HAL_ADC_ConfigChannel+0x6c>
 80016de:	2613      	movs	r6, #19
 80016e0:	e778      	b.n	80015d4 <HAL_ADC_ConfigChannel+0x6c>
 80016e2:	2614      	movs	r6, #20
 80016e4:	e776      	b.n	80015d4 <HAL_ADC_ConfigChannel+0x6c>
 80016e6:	2615      	movs	r6, #21
 80016e8:	e774      	b.n	80015d4 <HAL_ADC_ConfigChannel+0x6c>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN));
 80016ea:	4a39      	ldr	r2, [pc, #228]	@ (80017d0 <HAL_ADC_ConfigChannel+0x268>)
 80016ec:	6811      	ldr	r1, [r2, #0]
 80016ee:	22c0      	movs	r2, #192	@ 0xc0
 80016f0:	0412      	lsls	r2, r2, #16
 80016f2:	400a      	ands	r2, r1
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80016f4:	4837      	ldr	r0, [pc, #220]	@ (80017d4 <HAL_ADC_ConfigChannel+0x26c>)
 80016f6:	4283      	cmp	r3, r0
 80016f8:	d004      	beq.n	8001704 <HAL_ADC_ConfigChannel+0x19c>
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80016fa:	4837      	ldr	r0, [pc, #220]	@ (80017d8 <HAL_ADC_ConfigChannel+0x270>)
 80016fc:	4283      	cmp	r3, r0
 80016fe:	d01f      	beq.n	8001740 <HAL_ADC_ConfigChannel+0x1d8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001700:	2000      	movs	r0, #0
 8001702:	e74b      	b.n	800159c <HAL_ADC_ConfigChannel+0x34>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001704:	0208      	lsls	r0, r1, #8
 8001706:	d4f8      	bmi.n	80016fa <HAL_ADC_ConfigChannel+0x192>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001708:	2380      	movs	r3, #128	@ 0x80
 800170a:	041b      	lsls	r3, r3, #16
 800170c:	4313      	orrs	r3, r2
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 800170e:	4930      	ldr	r1, [pc, #192]	@ (80017d0 <HAL_ADC_ConfigChannel+0x268>)
 8001710:	680a      	ldr	r2, [r1, #0]
 8001712:	4832      	ldr	r0, [pc, #200]	@ (80017dc <HAL_ADC_ConfigChannel+0x274>)
 8001714:	4002      	ands	r2, r0
 8001716:	4313      	orrs	r3, r2
 8001718:	600b      	str	r3, [r1, #0]
          wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 800171a:	4b31      	ldr	r3, [pc, #196]	@ (80017e0 <HAL_ADC_ConfigChannel+0x278>)
 800171c:	6818      	ldr	r0, [r3, #0]
 800171e:	4931      	ldr	r1, [pc, #196]	@ (80017e4 <HAL_ADC_ConfigChannel+0x27c>)
 8001720:	f7fe fd06 	bl	8000130 <__udivsi3>
 8001724:	0043      	lsls	r3, r0, #1
 8001726:	181b      	adds	r3, r3, r0
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	3301      	adds	r3, #1
 800172c:	9301      	str	r3, [sp, #4]
          while (wait_loop_index != 0UL)
 800172e:	e002      	b.n	8001736 <HAL_ADC_ConfigChannel+0x1ce>
            wait_loop_index--;
 8001730:	9b01      	ldr	r3, [sp, #4]
 8001732:	3b01      	subs	r3, #1
 8001734:	9301      	str	r3, [sp, #4]
          while (wait_loop_index != 0UL)
 8001736:	9b01      	ldr	r3, [sp, #4]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d1f9      	bne.n	8001730 <HAL_ADC_ConfigChannel+0x1c8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800173c:	2000      	movs	r0, #0
 800173e:	e72d      	b.n	800159c <HAL_ADC_ConfigChannel+0x34>
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001740:	0249      	lsls	r1, r1, #9
 8001742:	d43c      	bmi.n	80017be <HAL_ADC_ConfigChannel+0x256>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001744:	2380      	movs	r3, #128	@ 0x80
 8001746:	03db      	lsls	r3, r3, #15
 8001748:	4313      	orrs	r3, r2
 800174a:	4921      	ldr	r1, [pc, #132]	@ (80017d0 <HAL_ADC_ConfigChannel+0x268>)
 800174c:	680a      	ldr	r2, [r1, #0]
 800174e:	4823      	ldr	r0, [pc, #140]	@ (80017dc <HAL_ADC_ConfigChannel+0x274>)
 8001750:	4002      	ands	r2, r0
 8001752:	4313      	orrs	r3, r2
 8001754:	600b      	str	r3, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001756:	2000      	movs	r0, #0
}
 8001758:	e720      	b.n	800159c <HAL_ADC_ConfigChannel+0x34>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800175a:	2380      	movs	r3, #128	@ 0x80
 800175c:	061b      	lsls	r3, r3, #24
 800175e:	429d      	cmp	r5, r3
 8001760:	d002      	beq.n	8001768 <HAL_ADC_ConfigChannel+0x200>
 8001762:	4b19      	ldr	r3, [pc, #100]	@ (80017c8 <HAL_ADC_ConfigChannel+0x260>)
 8001764:	429d      	cmp	r5, r3
 8001766:	d105      	bne.n	8001774 <HAL_ADC_ConfigChannel+0x20c>
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 8001768:	680b      	ldr	r3, [r1, #0]
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800176a:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 800176c:	025b      	lsls	r3, r3, #9
 800176e:	0a5b      	lsrs	r3, r3, #9
 8001770:	439a      	bics	r2, r3
 8001772:	6282      	str	r2, [r0, #40]	@ 0x28
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001774:	680b      	ldr	r3, [r1, #0]
 8001776:	2b00      	cmp	r3, #0
 8001778:	db01      	blt.n	800177e <HAL_ADC_ConfigChannel+0x216>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800177a:	2000      	movs	r0, #0
 800177c:	e70e      	b.n	800159c <HAL_ADC_ConfigChannel+0x34>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN));
 800177e:	4a14      	ldr	r2, [pc, #80]	@ (80017d0 <HAL_ADC_ConfigChannel+0x268>)
 8001780:	6812      	ldr	r2, [r2, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001782:	4914      	ldr	r1, [pc, #80]	@ (80017d4 <HAL_ADC_ConfigChannel+0x26c>)
 8001784:	428b      	cmp	r3, r1
 8001786:	d004      	beq.n	8001792 <HAL_ADC_ConfigChannel+0x22a>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001788:	4913      	ldr	r1, [pc, #76]	@ (80017d8 <HAL_ADC_ConfigChannel+0x270>)
 800178a:	428b      	cmp	r3, r1
 800178c:	d00c      	beq.n	80017a8 <HAL_ADC_ConfigChannel+0x240>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800178e:	2000      	movs	r0, #0
 8001790:	e704      	b.n	800159c <HAL_ADC_ConfigChannel+0x34>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001792:	2380      	movs	r3, #128	@ 0x80
 8001794:	03db      	lsls	r3, r3, #15
 8001796:	401a      	ands	r2, r3
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 8001798:	490d      	ldr	r1, [pc, #52]	@ (80017d0 <HAL_ADC_ConfigChannel+0x268>)
 800179a:	680b      	ldr	r3, [r1, #0]
 800179c:	480f      	ldr	r0, [pc, #60]	@ (80017dc <HAL_ADC_ConfigChannel+0x274>)
 800179e:	4003      	ands	r3, r0
 80017a0:	431a      	orrs	r2, r3
 80017a2:	600a      	str	r2, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017a4:	2000      	movs	r0, #0
}
 80017a6:	e6f9      	b.n	800159c <HAL_ADC_ConfigChannel+0x34>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80017a8:	2380      	movs	r3, #128	@ 0x80
 80017aa:	041b      	lsls	r3, r3, #16
 80017ac:	401a      	ands	r2, r3
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 80017ae:	4908      	ldr	r1, [pc, #32]	@ (80017d0 <HAL_ADC_ConfigChannel+0x268>)
 80017b0:	680b      	ldr	r3, [r1, #0]
 80017b2:	480a      	ldr	r0, [pc, #40]	@ (80017dc <HAL_ADC_ConfigChannel+0x274>)
 80017b4:	4003      	ands	r3, r0
 80017b6:	431a      	orrs	r2, r3
 80017b8:	600a      	str	r2, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017ba:	2000      	movs	r0, #0
}
 80017bc:	e6ee      	b.n	800159c <HAL_ADC_ConfigChannel+0x34>
 80017be:	2000      	movs	r0, #0
 80017c0:	e6ec      	b.n	800159c <HAL_ADC_ConfigChannel+0x34>
  __HAL_LOCK(hadc);
 80017c2:	2002      	movs	r0, #2
 80017c4:	e6ed      	b.n	80015a2 <HAL_ADC_ConfigChannel+0x3a>
 80017c6:	46c0      	nop			@ (mov r8, r8)
 80017c8:	80000004 	.word	0x80000004
 80017cc:	7fffff00 	.word	0x7fffff00
 80017d0:	40012708 	.word	0x40012708
 80017d4:	a4000200 	.word	0xa4000200
 80017d8:	a8000400 	.word	0xa8000400
 80017dc:	ff3fffff 	.word	0xff3fffff
 80017e0:	20000004 	.word	0x20000004
 80017e4:	00030d40 	.word	0x00030d40

080017e8 <ADC_Enable>:
{
 80017e8:	b530      	push	{r4, r5, lr}
 80017ea:	b083      	sub	sp, #12
 80017ec:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0UL;
 80017ee:	2300      	movs	r3, #0
 80017f0:	9301      	str	r3, [sp, #4]
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80017f2:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80017f4:	689a      	ldr	r2, [r3, #8]
 80017f6:	07d2      	lsls	r2, r2, #31
 80017f8:	d44d      	bmi.n	8001896 <ADC_Enable+0xae>
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80017fa:	6899      	ldr	r1, [r3, #8]
 80017fc:	4a27      	ldr	r2, [pc, #156]	@ (800189c <ADC_Enable+0xb4>)
 80017fe:	4211      	tst	r1, r2
 8001800:	d111      	bne.n	8001826 <ADC_Enable+0x3e>
  MODIFY_REG(ADCx->CR,
 8001802:	689a      	ldr	r2, [r3, #8]
 8001804:	4926      	ldr	r1, [pc, #152]	@ (80018a0 <ADC_Enable+0xb8>)
 8001806:	400a      	ands	r2, r1
 8001808:	2101      	movs	r1, #1
 800180a:	430a      	orrs	r2, r1
 800180c:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN));
 800180e:	4b25      	ldr	r3, [pc, #148]	@ (80018a4 <ADC_Enable+0xbc>)
 8001810:	681b      	ldr	r3, [r3, #0]
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8001812:	021b      	lsls	r3, r3, #8
 8001814:	d517      	bpl.n	8001846 <ADC_Enable+0x5e>
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001816:	4b24      	ldr	r3, [pc, #144]	@ (80018a8 <ADC_Enable+0xc0>)
 8001818:	6818      	ldr	r0, [r3, #0]
 800181a:	4924      	ldr	r1, [pc, #144]	@ (80018ac <ADC_Enable+0xc4>)
 800181c:	f7fe fc88 	bl	8000130 <__udivsi3>
 8001820:	3001      	adds	r0, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8001822:	9001      	str	r0, [sp, #4]
      while (wait_loop_index != 0UL)
 8001824:	e00c      	b.n	8001840 <ADC_Enable+0x58>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001826:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8001828:	2210      	movs	r2, #16
 800182a:	4313      	orrs	r3, r2
 800182c:	6583      	str	r3, [r0, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800182e:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 8001830:	3a0f      	subs	r2, #15
 8001832:	4313      	orrs	r3, r2
 8001834:	65c3      	str	r3, [r0, #92]	@ 0x5c
      return HAL_ERROR;
 8001836:	2001      	movs	r0, #1
 8001838:	e02e      	b.n	8001898 <ADC_Enable+0xb0>
        wait_loop_index--;
 800183a:	9b01      	ldr	r3, [sp, #4]
 800183c:	3b01      	subs	r3, #1
 800183e:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 8001840:	9b01      	ldr	r3, [sp, #4]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d1f9      	bne.n	800183a <ADC_Enable+0x52>
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001846:	7e63      	ldrb	r3, [r4, #25]
 8001848:	2b01      	cmp	r3, #1
 800184a:	d101      	bne.n	8001850 <ADC_Enable+0x68>
  return HAL_OK;
 800184c:	2000      	movs	r0, #0
 800184e:	e023      	b.n	8001898 <ADC_Enable+0xb0>
      tickstart = HAL_GetTick();
 8001850:	f7ff fcfc 	bl	800124c <HAL_GetTick>
 8001854:	0005      	movs	r5, r0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001856:	e004      	b.n	8001862 <ADC_Enable+0x7a>
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001858:	f7ff fcf8 	bl	800124c <HAL_GetTick>
 800185c:	1b40      	subs	r0, r0, r5
 800185e:	2802      	cmp	r0, #2
 8001860:	d80d      	bhi.n	800187e <ADC_Enable+0x96>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001862:	6823      	ldr	r3, [r4, #0]
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	07d2      	lsls	r2, r2, #31
 8001868:	d413      	bmi.n	8001892 <ADC_Enable+0xaa>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800186a:	689a      	ldr	r2, [r3, #8]
 800186c:	07d2      	lsls	r2, r2, #31
 800186e:	d4f3      	bmi.n	8001858 <ADC_Enable+0x70>
  MODIFY_REG(ADCx->CR,
 8001870:	689a      	ldr	r2, [r3, #8]
 8001872:	490b      	ldr	r1, [pc, #44]	@ (80018a0 <ADC_Enable+0xb8>)
 8001874:	400a      	ands	r2, r1
 8001876:	2101      	movs	r1, #1
 8001878:	430a      	orrs	r2, r1
 800187a:	609a      	str	r2, [r3, #8]
}
 800187c:	e7ec      	b.n	8001858 <ADC_Enable+0x70>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800187e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001880:	2210      	movs	r2, #16
 8001882:	4313      	orrs	r3, r2
 8001884:	65a3      	str	r3, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001886:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8001888:	3a0f      	subs	r2, #15
 800188a:	4313      	orrs	r3, r2
 800188c:	65e3      	str	r3, [r4, #92]	@ 0x5c
          return HAL_ERROR;
 800188e:	2001      	movs	r0, #1
 8001890:	e002      	b.n	8001898 <ADC_Enable+0xb0>
  return HAL_OK;
 8001892:	2000      	movs	r0, #0
 8001894:	e000      	b.n	8001898 <ADC_Enable+0xb0>
 8001896:	2000      	movs	r0, #0
}
 8001898:	b003      	add	sp, #12
 800189a:	bd30      	pop	{r4, r5, pc}
 800189c:	80000017 	.word	0x80000017
 80018a0:	7fffffe8 	.word	0x7fffffe8
 80018a4:	40012708 	.word	0x40012708
 80018a8:	20000004 	.word	0x20000004
 80018ac:	00030d40 	.word	0x00030d40

080018b0 <HAL_ADC_Start_DMA>:
{
 80018b0:	b570      	push	{r4, r5, r6, lr}
 80018b2:	0004      	movs	r4, r0
 80018b4:	000d      	movs	r5, r1
 80018b6:	0016      	movs	r6, r2
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80018b8:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80018ba:	6893      	ldr	r3, [r2, #8]
 80018bc:	075b      	lsls	r3, r3, #29
 80018be:	d447      	bmi.n	8001950 <HAL_ADC_Start_DMA+0xa0>
    __HAL_LOCK(hadc);
 80018c0:	2354      	movs	r3, #84	@ 0x54
 80018c2:	5cc3      	ldrb	r3, [r0, r3]
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d045      	beq.n	8001954 <HAL_ADC_Start_DMA+0xa4>
 80018c8:	2301      	movs	r3, #1
 80018ca:	2154      	movs	r1, #84	@ 0x54
 80018cc:	5443      	strb	r3, [r0, r1]
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 80018ce:	68d1      	ldr	r1, [r2, #12]
 80018d0:	420b      	tst	r3, r1
 80018d2:	d10d      	bne.n	80018f0 <HAL_ADC_Start_DMA+0x40>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80018d4:	6893      	ldr	r3, [r2, #8]
 80018d6:	07db      	lsls	r3, r3, #31
 80018d8:	d505      	bpl.n	80018e6 <HAL_ADC_Start_DMA+0x36>
  MODIFY_REG(ADCx->CR,
 80018da:	6893      	ldr	r3, [r2, #8]
 80018dc:	491e      	ldr	r1, [pc, #120]	@ (8001958 <HAL_ADC_Start_DMA+0xa8>)
 80018de:	400b      	ands	r3, r1
 80018e0:	2102      	movs	r1, #2
 80018e2:	430b      	orrs	r3, r1
 80018e4:	6093      	str	r3, [r2, #8]
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80018e6:	6822      	ldr	r2, [r4, #0]
 80018e8:	68d3      	ldr	r3, [r2, #12]
 80018ea:	2101      	movs	r1, #1
 80018ec:	430b      	orrs	r3, r1
 80018ee:	60d3      	str	r3, [r2, #12]
    tmp_hal_status = ADC_Enable(hadc);
 80018f0:	0020      	movs	r0, r4
 80018f2:	f7ff ff79 	bl	80017e8 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80018f6:	2800      	cmp	r0, #0
 80018f8:	d12b      	bne.n	8001952 <HAL_ADC_Start_DMA+0xa2>
      ADC_STATE_CLR_SET(hadc->State,
 80018fa:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 80018fc:	4b17      	ldr	r3, [pc, #92]	@ (800195c <HAL_ADC_Start_DMA+0xac>)
 80018fe:	401a      	ands	r2, r3
 8001900:	2380      	movs	r3, #128	@ 0x80
 8001902:	005b      	lsls	r3, r3, #1
 8001904:	4313      	orrs	r3, r2
 8001906:	65a3      	str	r3, [r4, #88]	@ 0x58
      ADC_CLEAR_ERRORCODE(hadc);
 8001908:	2300      	movs	r3, #0
 800190a:	65e3      	str	r3, [r4, #92]	@ 0x5c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800190c:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 800190e:	4914      	ldr	r1, [pc, #80]	@ (8001960 <HAL_ADC_Start_DMA+0xb0>)
 8001910:	62d1      	str	r1, [r2, #44]	@ 0x2c
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001912:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8001914:	4913      	ldr	r1, [pc, #76]	@ (8001964 <HAL_ADC_Start_DMA+0xb4>)
 8001916:	6311      	str	r1, [r2, #48]	@ 0x30
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001918:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 800191a:	4913      	ldr	r1, [pc, #76]	@ (8001968 <HAL_ADC_Start_DMA+0xb8>)
 800191c:	6351      	str	r1, [r2, #52]	@ 0x34
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800191e:	6822      	ldr	r2, [r4, #0]
 8001920:	211c      	movs	r1, #28
 8001922:	6011      	str	r1, [r2, #0]
      __HAL_UNLOCK(hadc);
 8001924:	2254      	movs	r2, #84	@ 0x54
 8001926:	54a3      	strb	r3, [r4, r2]
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001928:	6822      	ldr	r2, [r4, #0]
 800192a:	6853      	ldr	r3, [r2, #4]
 800192c:	390c      	subs	r1, #12
 800192e:	430b      	orrs	r3, r1
 8001930:	6053      	str	r3, [r2, #4]
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001932:	6821      	ldr	r1, [r4, #0]
 8001934:	3140      	adds	r1, #64	@ 0x40
 8001936:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 8001938:	0033      	movs	r3, r6
 800193a:	002a      	movs	r2, r5
 800193c:	f000 fa26 	bl	8001d8c <HAL_DMA_Start_IT>
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001940:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8001942:	6893      	ldr	r3, [r2, #8]
 8001944:	4904      	ldr	r1, [pc, #16]	@ (8001958 <HAL_ADC_Start_DMA+0xa8>)
 8001946:	400b      	ands	r3, r1
 8001948:	2104      	movs	r1, #4
 800194a:	430b      	orrs	r3, r1
 800194c:	6093      	str	r3, [r2, #8]
}
 800194e:	e000      	b.n	8001952 <HAL_ADC_Start_DMA+0xa2>
    tmp_hal_status = HAL_BUSY;
 8001950:	2002      	movs	r0, #2
}
 8001952:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LOCK(hadc);
 8001954:	2002      	movs	r0, #2
 8001956:	e7fc      	b.n	8001952 <HAL_ADC_Start_DMA+0xa2>
 8001958:	7fffffe8 	.word	0x7fffffe8
 800195c:	fffff0fe 	.word	0xfffff0fe
 8001960:	080014e9 	.word	0x080014e9
 8001964:	080014c1 	.word	0x080014c1
 8001968:	080014cd 	.word	0x080014cd

0800196c <ADC_Disable>:
{
 800196c:	b570      	push	{r4, r5, r6, lr}
 800196e:	0004      	movs	r4, r0
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8001970:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001972:	689a      	ldr	r2, [r3, #8]
 8001974:	2102      	movs	r1, #2
 8001976:	0008      	movs	r0, r1
 8001978:	4010      	ands	r0, r2
 800197a:	4211      	tst	r1, r2
 800197c:	d000      	beq.n	8001980 <ADC_Disable+0x14>
 800197e:	2001      	movs	r0, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001980:	689a      	ldr	r2, [r3, #8]
 8001982:	07d2      	lsls	r2, r2, #31
 8001984:	d531      	bpl.n	80019ea <ADC_Disable+0x7e>
      && (tmp_adc_is_disable_on_going == 0UL)
 8001986:	2800      	cmp	r0, #0
 8001988:	d131      	bne.n	80019ee <ADC_Disable+0x82>
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800198a:	6899      	ldr	r1, [r3, #8]
 800198c:	2205      	movs	r2, #5
 800198e:	400a      	ands	r2, r1
 8001990:	2a01      	cmp	r2, #1
 8001992:	d009      	beq.n	80019a8 <ADC_Disable+0x3c>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001994:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001996:	2210      	movs	r2, #16
 8001998:	4313      	orrs	r3, r2
 800199a:	65a3      	str	r3, [r4, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800199c:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800199e:	3a0f      	subs	r2, #15
 80019a0:	4313      	orrs	r3, r2
 80019a2:	65e3      	str	r3, [r4, #92]	@ 0x5c
      return HAL_ERROR;
 80019a4:	2001      	movs	r0, #1
 80019a6:	e021      	b.n	80019ec <ADC_Disable+0x80>
  MODIFY_REG(ADCx->CR,
 80019a8:	689a      	ldr	r2, [r3, #8]
 80019aa:	4912      	ldr	r1, [pc, #72]	@ (80019f4 <ADC_Disable+0x88>)
 80019ac:	400a      	ands	r2, r1
 80019ae:	2102      	movs	r1, #2
 80019b0:	430a      	orrs	r2, r1
 80019b2:	609a      	str	r2, [r3, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80019b4:	6823      	ldr	r3, [r4, #0]
 80019b6:	2203      	movs	r2, #3
 80019b8:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80019ba:	f7ff fc47 	bl	800124c <HAL_GetTick>
 80019be:	0005      	movs	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80019c0:	6823      	ldr	r3, [r4, #0]
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	07db      	lsls	r3, r3, #31
 80019c6:	d50e      	bpl.n	80019e6 <ADC_Disable+0x7a>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80019c8:	f7ff fc40 	bl	800124c <HAL_GetTick>
 80019cc:	1b40      	subs	r0, r0, r5
 80019ce:	2802      	cmp	r0, #2
 80019d0:	d9f6      	bls.n	80019c0 <ADC_Disable+0x54>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019d2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80019d4:	2210      	movs	r2, #16
 80019d6:	4313      	orrs	r3, r2
 80019d8:	65a3      	str	r3, [r4, #88]	@ 0x58
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019da:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80019dc:	3a0f      	subs	r2, #15
 80019de:	4313      	orrs	r3, r2
 80019e0:	65e3      	str	r3, [r4, #92]	@ 0x5c
        return HAL_ERROR;
 80019e2:	2001      	movs	r0, #1
 80019e4:	e002      	b.n	80019ec <ADC_Disable+0x80>
  return HAL_OK;
 80019e6:	2000      	movs	r0, #0
 80019e8:	e000      	b.n	80019ec <ADC_Disable+0x80>
 80019ea:	2000      	movs	r0, #0
}
 80019ec:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 80019ee:	2000      	movs	r0, #0
 80019f0:	e7fc      	b.n	80019ec <ADC_Disable+0x80>
 80019f2:	46c0      	nop			@ (mov r8, r8)
 80019f4:	7fffffe8 	.word	0x7fffffe8

080019f8 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 80019f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019fa:	b083      	sub	sp, #12
 80019fc:	0004      	movs	r4, r0
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80019fe:	2300      	movs	r3, #0
 8001a00:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a02:	3354      	adds	r3, #84	@ 0x54
 8001a04:	5cc3      	ldrb	r3, [r0, r3]
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d100      	bne.n	8001a0c <HAL_ADCEx_Calibration_Start+0x14>
 8001a0a:	e0a6      	b.n	8001b5a <HAL_ADCEx_Calibration_Start+0x162>
 8001a0c:	2601      	movs	r6, #1
 8001a0e:	2354      	movs	r3, #84	@ 0x54
 8001a10:	54c6      	strb	r6, [r0, r3]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8001a12:	f7ff ffab 	bl	800196c <ADC_Disable>
 8001a16:	0005      	movs	r5, r0

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a18:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001a1a:	689a      	ldr	r2, [r3, #8]
 8001a1c:	0031      	movs	r1, r6
 8001a1e:	4011      	ands	r1, r2
 8001a20:	4216      	tst	r6, r2
 8001a22:	d009      	beq.n	8001a38 <HAL_ADCEx_Calibration_Start+0x40>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a24:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001a26:	2210      	movs	r2, #16
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	65a3      	str	r3, [r4, #88]	@ 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a2c:	2354      	movs	r3, #84	@ 0x54
 8001a2e:	2200      	movs	r2, #0
 8001a30:	54e2      	strb	r2, [r4, r3]

  /* Return function status */
  return tmp_hal_status;
}
 8001a32:	0028      	movs	r0, r5
 8001a34:	b003      	add	sp, #12
 8001a36:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ADC_STATE_CLR_SET(hadc->State,
 8001a38:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8001a3a:	4849      	ldr	r0, [pc, #292]	@ (8001b60 <HAL_ADCEx_Calibration_Start+0x168>)
 8001a3c:	4002      	ands	r2, r0
 8001a3e:	3006      	adds	r0, #6
 8001a40:	30ff      	adds	r0, #255	@ 0xff
 8001a42:	4302      	orrs	r2, r0
 8001a44:	65a2      	str	r2, [r4, #88]	@ 0x58
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8001a46:	68de      	ldr	r6, [r3, #12]
 8001a48:	4a46      	ldr	r2, [pc, #280]	@ (8001b64 <HAL_ADCEx_Calibration_Start+0x16c>)
 8001a4a:	4016      	ands	r6, r2
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8001a4c:	68da      	ldr	r2, [r3, #12]
 8001a4e:	4846      	ldr	r0, [pc, #280]	@ (8001b68 <HAL_ADCEx_Calibration_Start+0x170>)
 8001a50:	4002      	ands	r2, r0
 8001a52:	60da      	str	r2, [r3, #12]
  uint32_t calibration_factor_accumulated = 0;
 8001a54:	0008      	movs	r0, r1
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8001a56:	e006      	b.n	8001a66 <HAL_ADCEx_Calibration_Start+0x6e>
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8001a58:	22b4      	movs	r2, #180	@ 0xb4
 8001a5a:	589a      	ldr	r2, [r3, r2]
 8001a5c:	237f      	movs	r3, #127	@ 0x7f
 8001a5e:	4013      	ands	r3, r2
      calibration_factor_accumulated += (LL_ADC_GetCalibrationFactor(hadc->Instance) + 1UL);
 8001a60:	3301      	adds	r3, #1
 8001a62:	18c0      	adds	r0, r0, r3
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8001a64:	3101      	adds	r1, #1
 8001a66:	2907      	cmp	r1, #7
 8001a68:	d81d      	bhi.n	8001aa6 <HAL_ADCEx_Calibration_Start+0xae>
      LL_ADC_StartCalibration(hadc->Instance);
 8001a6a:	6827      	ldr	r7, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8001a6c:	68ba      	ldr	r2, [r7, #8]
 8001a6e:	4b3f      	ldr	r3, [pc, #252]	@ (8001b6c <HAL_ADCEx_Calibration_Start+0x174>)
 8001a70:	401a      	ands	r2, r3
 8001a72:	3318      	adds	r3, #24
 8001a74:	4313      	orrs	r3, r2
 8001a76:	60bb      	str	r3, [r7, #8]
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8001a78:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8001a7a:	689a      	ldr	r2, [r3, #8]
 8001a7c:	2a00      	cmp	r2, #0
 8001a7e:	daeb      	bge.n	8001a58 <HAL_ADCEx_Calibration_Start+0x60>
        wait_loop_index++;
 8001a80:	9b01      	ldr	r3, [sp, #4]
 8001a82:	3301      	adds	r3, #1
 8001a84:	9301      	str	r3, [sp, #4]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8001a86:	9a01      	ldr	r2, [sp, #4]
 8001a88:	23ae      	movs	r3, #174	@ 0xae
 8001a8a:	029b      	lsls	r3, r3, #10
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d3f3      	bcc.n	8001a78 <HAL_ADCEx_Calibration_Start+0x80>
          ADC_STATE_CLR_SET(hadc->State,
 8001a90:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001a92:	2212      	movs	r2, #18
 8001a94:	4393      	bics	r3, r2
 8001a96:	3a02      	subs	r2, #2
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	65a3      	str	r3, [r4, #88]	@ 0x58
          __HAL_UNLOCK(hadc);
 8001a9c:	2354      	movs	r3, #84	@ 0x54
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	54e2      	strb	r2, [r4, r3]
          return HAL_ERROR;
 8001aa2:	2501      	movs	r5, #1
 8001aa4:	e7c5      	b.n	8001a32 <HAL_ADCEx_Calibration_Start+0x3a>
    calibration_factor_accumulated += (calibration_index / 2UL);
 8001aa6:	084b      	lsrs	r3, r1, #1
 8001aa8:	1818      	adds	r0, r3, r0
    calibration_factor_accumulated /= calibration_index;
 8001aaa:	f7fe fb41 	bl	8000130 <__udivsi3>
    LL_ADC_Enable(hadc->Instance);
 8001aae:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8001ab0:	6893      	ldr	r3, [r2, #8]
 8001ab2:	492e      	ldr	r1, [pc, #184]	@ (8001b6c <HAL_ADCEx_Calibration_Start+0x174>)
 8001ab4:	400b      	ands	r3, r1
 8001ab6:	2101      	movs	r1, #1
 8001ab8:	430b      	orrs	r3, r1
 8001aba:	6093      	str	r3, [r2, #8]
    if (LL_ADC_GetClock(hadc->Instance) == LL_ADC_CLOCK_ASYNC)
 8001abc:	6822      	ldr	r2, [r4, #0]
  return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_CKMODE));
 8001abe:	6911      	ldr	r1, [r2, #16]
 8001ac0:	2380      	movs	r3, #128	@ 0x80
 8001ac2:	05db      	lsls	r3, r3, #23
 8001ac4:	4299      	cmp	r1, r3
 8001ac6:	d217      	bcs.n	8001af8 <HAL_ADCEx_Calibration_Start+0x100>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_PRESC));
 8001ac8:	4b29      	ldr	r3, [pc, #164]	@ (8001b70 <HAL_ADCEx_Calibration_Start+0x178>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	21f0      	movs	r1, #240	@ 0xf0
 8001ace:	0389      	lsls	r1, r1, #14
 8001ad0:	400b      	ands	r3, r1
      if (adc_clk_async_presc >= LL_ADC_CLOCK_ASYNC_DIV16)
 8001ad2:	21e0      	movs	r1, #224	@ 0xe0
 8001ad4:	0349      	lsls	r1, r1, #13
 8001ad6:	428b      	cmp	r3, r1
 8001ad8:	d30e      	bcc.n	8001af8 <HAL_ADCEx_Calibration_Start+0x100>
        delay_cpu_cycles = (1UL << ((adc_clk_async_presc >> ADC_CCR_PRESC_Pos) - 3UL));
 8001ada:	0c9b      	lsrs	r3, r3, #18
 8001adc:	3b03      	subs	r3, #3
 8001ade:	2101      	movs	r1, #1
 8001ae0:	4099      	lsls	r1, r3
 8001ae2:	9100      	str	r1, [sp, #0]
        delay_cpu_cycles >>= 1UL;
 8001ae4:	9b00      	ldr	r3, [sp, #0]
 8001ae6:	085b      	lsrs	r3, r3, #1
 8001ae8:	9300      	str	r3, [sp, #0]
        while (delay_cpu_cycles != 0UL)
 8001aea:	e002      	b.n	8001af2 <HAL_ADCEx_Calibration_Start+0xfa>
          delay_cpu_cycles--;
 8001aec:	9b00      	ldr	r3, [sp, #0]
 8001aee:	3b01      	subs	r3, #1
 8001af0:	9300      	str	r3, [sp, #0]
        while (delay_cpu_cycles != 0UL)
 8001af2:	9b00      	ldr	r3, [sp, #0]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d1f9      	bne.n	8001aec <HAL_ADCEx_Calibration_Start+0xf4>
  MODIFY_REG(ADCx->CALFACT,
 8001af8:	21b4      	movs	r1, #180	@ 0xb4
 8001afa:	5853      	ldr	r3, [r2, r1]
 8001afc:	277f      	movs	r7, #127	@ 0x7f
 8001afe:	43bb      	bics	r3, r7
 8001b00:	4318      	orrs	r0, r3
 8001b02:	5050      	str	r0, [r2, r1]
    LL_ADC_Disable(hadc->Instance);
 8001b04:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8001b06:	6893      	ldr	r3, [r2, #8]
 8001b08:	4918      	ldr	r1, [pc, #96]	@ (8001b6c <HAL_ADCEx_Calibration_Start+0x174>)
 8001b0a:	400b      	ands	r3, r1
 8001b0c:	2102      	movs	r1, #2
 8001b0e:	430b      	orrs	r3, r1
 8001b10:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8001b12:	f7ff fb9b 	bl	800124c <HAL_GetTick>
 8001b16:	0007      	movs	r7, r0
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001b18:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001b1a:	689a      	ldr	r2, [r3, #8]
 8001b1c:	07d2      	lsls	r2, r2, #31
 8001b1e:	d409      	bmi.n	8001b34 <HAL_ADCEx_Calibration_Start+0x13c>
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8001b20:	68da      	ldr	r2, [r3, #12]
 8001b22:	4332      	orrs	r2, r6
 8001b24:	60da      	str	r2, [r3, #12]
    ADC_STATE_CLR_SET(hadc->State,
 8001b26:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001b28:	2203      	movs	r2, #3
 8001b2a:	4393      	bics	r3, r2
 8001b2c:	3a02      	subs	r2, #2
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	65a3      	str	r3, [r4, #88]	@ 0x58
 8001b32:	e77b      	b.n	8001a2c <HAL_ADCEx_Calibration_Start+0x34>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001b34:	f7ff fb8a 	bl	800124c <HAL_GetTick>
 8001b38:	1bc0      	subs	r0, r0, r7
 8001b3a:	2802      	cmp	r0, #2
 8001b3c:	d9ec      	bls.n	8001b18 <HAL_ADCEx_Calibration_Start+0x120>
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001b3e:	6823      	ldr	r3, [r4, #0]
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	07db      	lsls	r3, r3, #31
 8001b44:	d5e8      	bpl.n	8001b18 <HAL_ADCEx_Calibration_Start+0x120>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b46:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001b48:	2210      	movs	r2, #16
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	65a3      	str	r3, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b4e:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8001b50:	3a0f      	subs	r2, #15
 8001b52:	4313      	orrs	r3, r2
 8001b54:	65e3      	str	r3, [r4, #92]	@ 0x5c
          return HAL_ERROR;
 8001b56:	2501      	movs	r5, #1
 8001b58:	e76b      	b.n	8001a32 <HAL_ADCEx_Calibration_Start+0x3a>
  __HAL_LOCK(hadc);
 8001b5a:	2502      	movs	r5, #2
 8001b5c:	e769      	b.n	8001a32 <HAL_ADCEx_Calibration_Start+0x3a>
 8001b5e:	46c0      	nop			@ (mov r8, r8)
 8001b60:	fffffefd 	.word	0xfffffefd
 8001b64:	00008003 	.word	0x00008003
 8001b68:	ffff7ffc 	.word	0xffff7ffc
 8001b6c:	7fffffe8 	.word	0x7fffffe8
 8001b70:	40012708 	.word	0x40012708

08001b74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b74:	b570      	push	{r4, r5, r6, lr}
  if ((int32_t)(IRQn) >= 0)
 8001b76:	2800      	cmp	r0, #0
 8001b78:	db11      	blt.n	8001b9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b7a:	0883      	lsrs	r3, r0, #2
 8001b7c:	4d13      	ldr	r5, [pc, #76]	@ (8001bcc <__NVIC_SetPriority+0x58>)
 8001b7e:	33c0      	adds	r3, #192	@ 0xc0
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	595c      	ldr	r4, [r3, r5]
 8001b84:	2203      	movs	r2, #3
 8001b86:	4010      	ands	r0, r2
 8001b88:	00c0      	lsls	r0, r0, #3
 8001b8a:	32fc      	adds	r2, #252	@ 0xfc
 8001b8c:	0016      	movs	r6, r2
 8001b8e:	4086      	lsls	r6, r0
 8001b90:	43b4      	bics	r4, r6
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001b92:	0189      	lsls	r1, r1, #6
 8001b94:	400a      	ands	r2, r1
 8001b96:	4082      	lsls	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b98:	4322      	orrs	r2, r4
 8001b9a:	515a      	str	r2, [r3, r5]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001b9c:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b9e:	230f      	movs	r3, #15
 8001ba0:	4003      	ands	r3, r0
 8001ba2:	3b08      	subs	r3, #8
 8001ba4:	089b      	lsrs	r3, r3, #2
 8001ba6:	3306      	adds	r3, #6
 8001ba8:	009b      	lsls	r3, r3, #2
 8001baa:	4a09      	ldr	r2, [pc, #36]	@ (8001bd0 <__NVIC_SetPriority+0x5c>)
 8001bac:	4694      	mov	ip, r2
 8001bae:	4463      	add	r3, ip
 8001bb0:	685c      	ldr	r4, [r3, #4]
 8001bb2:	2203      	movs	r2, #3
 8001bb4:	4010      	ands	r0, r2
 8001bb6:	00c0      	lsls	r0, r0, #3
 8001bb8:	32fc      	adds	r2, #252	@ 0xfc
 8001bba:	0015      	movs	r5, r2
 8001bbc:	4085      	lsls	r5, r0
 8001bbe:	43ac      	bics	r4, r5
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001bc0:	0189      	lsls	r1, r1, #6
 8001bc2:	400a      	ands	r2, r1
 8001bc4:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001bc6:	4322      	orrs	r2, r4
 8001bc8:	605a      	str	r2, [r3, #4]
}
 8001bca:	e7e7      	b.n	8001b9c <__NVIC_SetPriority+0x28>
 8001bcc:	e000e100 	.word	0xe000e100
 8001bd0:	e000ed00 	.word	0xe000ed00

08001bd4 <SysTick_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bd4:	3801      	subs	r0, #1
 8001bd6:	2380      	movs	r3, #128	@ 0x80
 8001bd8:	045b      	lsls	r3, r3, #17
 8001bda:	4298      	cmp	r0, r3
 8001bdc:	d20f      	bcs.n	8001bfe <SysTick_Config+0x2a>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bde:	4a09      	ldr	r2, [pc, #36]	@ (8001c04 <SysTick_Config+0x30>)
 8001be0:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001be2:	4809      	ldr	r0, [pc, #36]	@ (8001c08 <SysTick_Config+0x34>)
 8001be4:	6a03      	ldr	r3, [r0, #32]
 8001be6:	021b      	lsls	r3, r3, #8
 8001be8:	0a1b      	lsrs	r3, r3, #8
 8001bea:	21c0      	movs	r1, #192	@ 0xc0
 8001bec:	0609      	lsls	r1, r1, #24
 8001bee:	430b      	orrs	r3, r1
 8001bf0:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bf6:	3307      	adds	r3, #7
 8001bf8:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bfa:	2000      	movs	r0, #0
}
 8001bfc:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001bfe:	2001      	movs	r0, #1
 8001c00:	e7fc      	b.n	8001bfc <SysTick_Config+0x28>
 8001c02:	46c0      	nop			@ (mov r8, r8)
 8001c04:	e000e010 	.word	0xe000e010
 8001c08:	e000ed00 	.word	0xe000ed00

08001c0c <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c0c:	b510      	push	{r4, lr}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001c0e:	f7ff ffb1 	bl	8001b74 <__NVIC_SetPriority>
}
 8001c12:	bd10      	pop	{r4, pc}

08001c14 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001c14:	2800      	cmp	r0, #0
 8001c16:	db05      	blt.n	8001c24 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c18:	221f      	movs	r2, #31
 8001c1a:	4002      	ands	r2, r0
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	4093      	lsls	r3, r2
 8001c20:	4a01      	ldr	r2, [pc, #4]	@ (8001c28 <HAL_NVIC_EnableIRQ+0x14>)
 8001c22:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001c24:	4770      	bx	lr
 8001c26:	46c0      	nop			@ (mov r8, r8)
 8001c28:	e000e100 	.word	0xe000e100

08001c2c <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c2c:	b510      	push	{r4, lr}
  return SysTick_Config(TicksNumb);
 8001c2e:	f7ff ffd1 	bl	8001bd4 <SysTick_Config>
}
 8001c32:	bd10      	pop	{r4, pc}

08001c34 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c34:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001c36:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 8001c38:	6cc5      	ldr	r5, [r0, #76]	@ 0x4c
 8001c3a:	6065      	str	r5, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001c3c:	6d04      	ldr	r4, [r0, #80]	@ 0x50
 8001c3e:	2c00      	cmp	r4, #0
 8001c40:	d002      	beq.n	8001c48 <DMA_SetConfig+0x14>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001c42:	6d44      	ldr	r4, [r0, #84]	@ 0x54
 8001c44:	6d85      	ldr	r5, [r0, #88]	@ 0x58
 8001c46:	6065      	str	r5, [r4, #4]
  }

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 8001c48:	4f0b      	ldr	r7, [pc, #44]	@ (8001c78 <DMA_SetConfig+0x44>)
 8001c4a:	687c      	ldr	r4, [r7, #4]
 8001c4c:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 8001c4e:	261c      	movs	r6, #28
 8001c50:	402e      	ands	r6, r5
 8001c52:	2501      	movs	r5, #1
 8001c54:	40b5      	lsls	r5, r6
 8001c56:	432c      	orrs	r4, r5
 8001c58:	607c      	str	r4, [r7, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001c5a:	6804      	ldr	r4, [r0, #0]
 8001c5c:	6063      	str	r3, [r4, #4]

  /* Peripheral to Memory */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001c5e:	6883      	ldr	r3, [r0, #8]
 8001c60:	2b10      	cmp	r3, #16
 8001c62:	d004      	beq.n	8001c6e <DMA_SetConfig+0x3a>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8001c64:	6803      	ldr	r3, [r0, #0]
 8001c66:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8001c68:	6803      	ldr	r3, [r0, #0]
 8001c6a:	60da      	str	r2, [r3, #12]
  }
}
 8001c6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->Instance->CPAR = DstAddress;
 8001c6e:	6803      	ldr	r3, [r0, #0]
 8001c70:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8001c72:	6803      	ldr	r3, [r0, #0]
 8001c74:	60d9      	str	r1, [r3, #12]
 8001c76:	e7f9      	b.n	8001c6c <DMA_SetConfig+0x38>
 8001c78:	40020000 	.word	0x40020000

08001c7c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001c7c:	b510      	push	{r4, lr}
 8001c7e:	0004      	movs	r4, r0
  uint32_t channel_number;

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001c80:	6803      	ldr	r3, [r0, #0]
 8001c82:	20ff      	movs	r0, #255	@ 0xff
 8001c84:	4018      	ands	r0, r3
 8001c86:	3808      	subs	r0, #8
 8001c88:	2114      	movs	r1, #20
 8001c8a:	f7fe fa51 	bl	8000130 <__udivsi3>
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
                                                             ((hdma->ChannelIndex >> 2U) * \
 8001c8e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001c90:	089b      	lsrs	r3, r3, #2
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
 8001c92:	4a06      	ldr	r2, [pc, #24]	@ (8001cac <DMA_CalcDMAMUXChannelBaseAndMask+0x30>)
 8001c94:	4694      	mov	ip, r2
 8001c96:	4463      	add	r3, ip
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	6463      	str	r3, [r4, #68]	@ 0x44
                                                              ((uint32_t)DMAMUX1_Channel1 - \
                                                               (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001c9c:	4b04      	ldr	r3, [pc, #16]	@ (8001cb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x34>)
 8001c9e:	64a3      	str	r3, [r4, #72]	@ 0x48
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 8001ca0:	231c      	movs	r3, #28
 8001ca2:	4018      	ands	r0, r3
 8001ca4:	3b1b      	subs	r3, #27
 8001ca6:	4083      	lsls	r3, r0
 8001ca8:	64e3      	str	r3, [r4, #76]	@ 0x4c
}
 8001caa:	bd10      	pop	{r4, pc}
 8001cac:	10008200 	.word	0x10008200
 8001cb0:	40020880 	.word	0x40020880

08001cb4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001cb4:	6842      	ldr	r2, [r0, #4]
 8001cb6:	23ff      	movs	r3, #255	@ 0xff
 8001cb8:	4013      	ands	r3, r2

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + \
 8001cba:	4a06      	ldr	r2, [pc, #24]	@ (8001cd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x20>)
 8001cbc:	189a      	adds	r2, r3, r2
 8001cbe:	0092      	lsls	r2, r2, #2
 8001cc0:	6502      	str	r2, [r0, #80]	@ 0x50
                                                                    ((request - 1U) * 4U)));

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001cc2:	4a05      	ldr	r2, [pc, #20]	@ (8001cd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x24>)
 8001cc4:	6542      	str	r2, [r0, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to 4, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001cc6:	3b01      	subs	r3, #1
 8001cc8:	2203      	movs	r2, #3
 8001cca:	401a      	ands	r2, r3
 8001ccc:	2301      	movs	r3, #1
 8001cce:	4093      	lsls	r3, r2
 8001cd0:	6583      	str	r3, [r0, #88]	@ 0x58
}
 8001cd2:	4770      	bx	lr
 8001cd4:	1000823f 	.word	0x1000823f
 8001cd8:	40020940 	.word	0x40020940

08001cdc <HAL_DMA_Init>:
{
 8001cdc:	b570      	push	{r4, r5, r6, lr}
 8001cde:	1e04      	subs	r4, r0, #0
  if (hdma == NULL)
 8001ce0:	d04d      	beq.n	8001d7e <HAL_DMA_Init+0xa2>
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8001ce2:	6805      	ldr	r5, [r0, #0]
 8001ce4:	4b27      	ldr	r3, [pc, #156]	@ (8001d84 <HAL_DMA_Init+0xa8>)
 8001ce6:	18e8      	adds	r0, r5, r3
 8001ce8:	2114      	movs	r1, #20
 8001cea:	f7fe fa21 	bl	8000130 <__udivsi3>
                                                                                (uint32_t)DMA1_Channel1)) << 2U;
 8001cee:	0080      	lsls	r0, r0, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8001cf0:	6420      	str	r0, [r4, #64]	@ 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8001cf2:	2325      	movs	r3, #37	@ 0x25
 8001cf4:	2202      	movs	r2, #2
 8001cf6:	54e2      	strb	r2, [r4, r3]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001cf8:	682b      	ldr	r3, [r5, #0]
 8001cfa:	4a23      	ldr	r2, [pc, #140]	@ (8001d88 <HAL_DMA_Init+0xac>)
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	602b      	str	r3, [r5, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8001d00:	6821      	ldr	r1, [r4, #0]
 8001d02:	680a      	ldr	r2, [r1, #0]
 8001d04:	68a3      	ldr	r3, [r4, #8]
 8001d06:	68e0      	ldr	r0, [r4, #12]
 8001d08:	4303      	orrs	r3, r0
 8001d0a:	6920      	ldr	r0, [r4, #16]
 8001d0c:	4303      	orrs	r3, r0
 8001d0e:	6960      	ldr	r0, [r4, #20]
 8001d10:	4303      	orrs	r3, r0
 8001d12:	69a0      	ldr	r0, [r4, #24]
 8001d14:	4303      	orrs	r3, r0
 8001d16:	69e0      	ldr	r0, [r4, #28]
 8001d18:	4303      	orrs	r3, r0
 8001d1a:	6a20      	ldr	r0, [r4, #32]
 8001d1c:	4303      	orrs	r3, r0
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001d22:	0020      	movs	r0, r4
 8001d24:	f7ff ffaa 	bl	8001c7c <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001d28:	68a2      	ldr	r2, [r4, #8]
 8001d2a:	2380      	movs	r3, #128	@ 0x80
 8001d2c:	01db      	lsls	r3, r3, #7
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d018      	beq.n	8001d64 <HAL_DMA_Init+0x88>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001d32:	6861      	ldr	r1, [r4, #4]
 8001d34:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8001d36:	23ff      	movs	r3, #255	@ 0xff
 8001d38:	400b      	ands	r3, r1
 8001d3a:	6013      	str	r3, [r2, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001d3c:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8001d3e:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
 8001d40:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request > 0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001d42:	6863      	ldr	r3, [r4, #4]
 8001d44:	3b01      	subs	r3, #1
 8001d46:	2b03      	cmp	r3, #3
 8001d48:	d90f      	bls.n	8001d6a <HAL_DMA_Init+0x8e>
    hdma->DMAmuxRequestGen = 0U;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	6523      	str	r3, [r4, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8001d4e:	6563      	str	r3, [r4, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001d50:	65a3      	str	r3, [r4, #88]	@ 0x58
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d52:	2300      	movs	r3, #0
 8001d54:	63e3      	str	r3, [r4, #60]	@ 0x3c
  hdma->State  = HAL_DMA_STATE_READY;
 8001d56:	2225      	movs	r2, #37	@ 0x25
 8001d58:	2101      	movs	r1, #1
 8001d5a:	54a1      	strb	r1, [r4, r2]
  __HAL_UNLOCK(hdma);
 8001d5c:	3a01      	subs	r2, #1
 8001d5e:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 8001d60:	2000      	movs	r0, #0
}
 8001d62:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001d64:	2300      	movs	r3, #0
 8001d66:	6063      	str	r3, [r4, #4]
 8001d68:	e7e3      	b.n	8001d32 <HAL_DMA_Init+0x56>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001d6a:	0020      	movs	r0, r4
 8001d6c:	f7ff ffa2 	bl	8001cb4 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001d70:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8001d72:	2200      	movs	r2, #0
 8001d74:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001d76:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001d78:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8001d7a:	605a      	str	r2, [r3, #4]
 8001d7c:	e7e9      	b.n	8001d52 <HAL_DMA_Init+0x76>
    return HAL_ERROR;
 8001d7e:	2001      	movs	r0, #1
 8001d80:	e7ef      	b.n	8001d62 <HAL_DMA_Init+0x86>
 8001d82:	46c0      	nop			@ (mov r8, r8)
 8001d84:	bffdfff8 	.word	0xbffdfff8
 8001d88:	ffff800f 	.word	0xffff800f

08001d8c <HAL_DMA_Start_IT>:
{
 8001d8c:	b570      	push	{r4, r5, r6, lr}
 8001d8e:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 8001d90:	2024      	movs	r0, #36	@ 0x24
 8001d92:	5c20      	ldrb	r0, [r4, r0]
 8001d94:	2801      	cmp	r0, #1
 8001d96:	d046      	beq.n	8001e26 <HAL_DMA_Start_IT+0x9a>
 8001d98:	2024      	movs	r0, #36	@ 0x24
 8001d9a:	2501      	movs	r5, #1
 8001d9c:	5425      	strb	r5, [r4, r0]
  if (HAL_DMA_STATE_READY == hdma->State)
 8001d9e:	3001      	adds	r0, #1
 8001da0:	5c20      	ldrb	r0, [r4, r0]
 8001da2:	2801      	cmp	r0, #1
 8001da4:	d007      	beq.n	8001db6 <HAL_DMA_Start_IT+0x2a>
    __HAL_UNLOCK(hdma);
 8001da6:	2324      	movs	r3, #36	@ 0x24
 8001da8:	2200      	movs	r2, #0
 8001daa:	54e2      	strb	r2, [r4, r3]
    status = HAL_BUSY;
 8001dac:	2002      	movs	r0, #2
  __HAL_UNLOCK(hdma);
 8001dae:	2324      	movs	r3, #36	@ 0x24
 8001db0:	2200      	movs	r2, #0
 8001db2:	54e2      	strb	r2, [r4, r3]
}
 8001db4:	bd70      	pop	{r4, r5, r6, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8001db6:	3024      	adds	r0, #36	@ 0x24
 8001db8:	3501      	adds	r5, #1
 8001dba:	5425      	strb	r5, [r4, r0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001dbc:	2000      	movs	r0, #0
 8001dbe:	63e0      	str	r0, [r4, #60]	@ 0x3c
    __HAL_DMA_DISABLE(hdma);
 8001dc0:	6825      	ldr	r5, [r4, #0]
 8001dc2:	6828      	ldr	r0, [r5, #0]
 8001dc4:	2601      	movs	r6, #1
 8001dc6:	43b0      	bics	r0, r6
 8001dc8:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001dca:	0020      	movs	r0, r4
 8001dcc:	f7ff ff32 	bl	8001c34 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 8001dd0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d01c      	beq.n	8001e10 <HAL_DMA_Start_IT+0x84>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001dd6:	6822      	ldr	r2, [r4, #0]
 8001dd8:	6813      	ldr	r3, [r2, #0]
 8001dda:	210e      	movs	r1, #14
 8001ddc:	430b      	orrs	r3, r1
 8001dde:	6013      	str	r3, [r2, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001de0:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8001de2:	6813      	ldr	r3, [r2, #0]
 8001de4:	03db      	lsls	r3, r3, #15
 8001de6:	d504      	bpl.n	8001df2 <HAL_DMA_Start_IT+0x66>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001de8:	6811      	ldr	r1, [r2, #0]
 8001dea:	2380      	movs	r3, #128	@ 0x80
 8001dec:	005b      	lsls	r3, r3, #1
 8001dee:	430b      	orrs	r3, r1
 8001df0:	6013      	str	r3, [r2, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 8001df2:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d004      	beq.n	8001e02 <HAL_DMA_Start_IT+0x76>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001df8:	6819      	ldr	r1, [r3, #0]
 8001dfa:	2280      	movs	r2, #128	@ 0x80
 8001dfc:	0052      	lsls	r2, r2, #1
 8001dfe:	430a      	orrs	r2, r1
 8001e00:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 8001e02:	6822      	ldr	r2, [r4, #0]
 8001e04:	6813      	ldr	r3, [r2, #0]
 8001e06:	2101      	movs	r1, #1
 8001e08:	430b      	orrs	r3, r1
 8001e0a:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e0c:	2000      	movs	r0, #0
 8001e0e:	e7ce      	b.n	8001dae <HAL_DMA_Start_IT+0x22>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001e10:	6822      	ldr	r2, [r4, #0]
 8001e12:	6813      	ldr	r3, [r2, #0]
 8001e14:	2104      	movs	r1, #4
 8001e16:	438b      	bics	r3, r1
 8001e18:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001e1a:	6822      	ldr	r2, [r4, #0]
 8001e1c:	6813      	ldr	r3, [r2, #0]
 8001e1e:	3106      	adds	r1, #6
 8001e20:	430b      	orrs	r3, r1
 8001e22:	6013      	str	r3, [r2, #0]
 8001e24:	e7dc      	b.n	8001de0 <HAL_DMA_Start_IT+0x54>
  __HAL_LOCK(hdma);
 8001e26:	2002      	movs	r0, #2
 8001e28:	e7c4      	b.n	8001db4 <HAL_DMA_Start_IT+0x28>
	...

08001e2c <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001e2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e2e:	46d6      	mov	lr, sl
 8001e30:	464f      	mov	r7, r9
 8001e32:	4646      	mov	r6, r8
 8001e34:	b5c0      	push	{r6, r7, lr}
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8001e36:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001e38:	e03b      	b.n	8001eb2 <HAL_GPIO_Init+0x86>
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        tmp = EXTI->EXTICR[position >> 2U];
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001e3a:	2505      	movs	r5, #5
 8001e3c:	e000      	b.n	8001e40 <HAL_GPIO_Init+0x14>
 8001e3e:	2500      	movs	r5, #0
 8001e40:	40a5      	lsls	r5, r4
 8001e42:	002c      	movs	r4, r5
 8001e44:	433c      	orrs	r4, r7
        EXTI->EXTICR[position >> 2U] = tmp;
 8001e46:	4d63      	ldr	r5, [pc, #396]	@ (8001fd4 <HAL_GPIO_Init+0x1a8>)
 8001e48:	3218      	adds	r2, #24
 8001e4a:	0092      	lsls	r2, r2, #2
 8001e4c:	5154      	str	r4, [r2, r5]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8001e4e:	2280      	movs	r2, #128	@ 0x80
 8001e50:	58af      	ldr	r7, [r5, r2]
        tmp &= ~((uint32_t)iocurrent);
 8001e52:	464a      	mov	r2, r9
 8001e54:	43d2      	mvns	r2, r2
 8001e56:	003d      	movs	r5, r7
 8001e58:	464c      	mov	r4, r9
 8001e5a:	43a5      	bics	r5, r4
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e5c:	684c      	ldr	r4, [r1, #4]
 8001e5e:	03e4      	lsls	r4, r4, #15
 8001e60:	d502      	bpl.n	8001e68 <HAL_GPIO_Init+0x3c>
        {
          tmp |= iocurrent;
 8001e62:	003d      	movs	r5, r7
 8001e64:	464c      	mov	r4, r9
 8001e66:	4325      	orrs	r5, r4
        }
        EXTI->IMR1 = tmp;
 8001e68:	4c5a      	ldr	r4, [pc, #360]	@ (8001fd4 <HAL_GPIO_Init+0x1a8>)
 8001e6a:	2780      	movs	r7, #128	@ 0x80
 8001e6c:	51e5      	str	r5, [r4, r7]

        tmp = EXTI->EMR1;
 8001e6e:	2584      	movs	r5, #132	@ 0x84
 8001e70:	5967      	ldr	r7, [r4, r5]
        tmp &= ~((uint32_t)iocurrent);
 8001e72:	003d      	movs	r5, r7
 8001e74:	4015      	ands	r5, r2
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e76:	684c      	ldr	r4, [r1, #4]
 8001e78:	03a4      	lsls	r4, r4, #14
 8001e7a:	d502      	bpl.n	8001e82 <HAL_GPIO_Init+0x56>
        {
          tmp |= iocurrent;
 8001e7c:	003d      	movs	r5, r7
 8001e7e:	464c      	mov	r4, r9
 8001e80:	4325      	orrs	r5, r4
        }
        EXTI->EMR1 = tmp;
 8001e82:	4c54      	ldr	r4, [pc, #336]	@ (8001fd4 <HAL_GPIO_Init+0x1a8>)
 8001e84:	2784      	movs	r7, #132	@ 0x84
 8001e86:	51e5      	str	r5, [r4, r7]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001e88:	6827      	ldr	r7, [r4, #0]
        tmp &= ~((uint32_t)iocurrent);
 8001e8a:	003d      	movs	r5, r7
 8001e8c:	4015      	ands	r5, r2
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e8e:	684c      	ldr	r4, [r1, #4]
 8001e90:	02e4      	lsls	r4, r4, #11
 8001e92:	d502      	bpl.n	8001e9a <HAL_GPIO_Init+0x6e>
        {
          tmp |= iocurrent;
 8001e94:	003d      	movs	r5, r7
 8001e96:	464c      	mov	r4, r9
 8001e98:	4325      	orrs	r5, r4
        }
        EXTI->RTSR1 = tmp;
 8001e9a:	4c4e      	ldr	r4, [pc, #312]	@ (8001fd4 <HAL_GPIO_Init+0x1a8>)
 8001e9c:	6025      	str	r5, [r4, #0]

        tmp = EXTI->FTSR1;
 8001e9e:	6865      	ldr	r5, [r4, #4]
        tmp &= ~((uint32_t)iocurrent);
 8001ea0:	402a      	ands	r2, r5
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ea2:	684c      	ldr	r4, [r1, #4]
 8001ea4:	02a4      	lsls	r4, r4, #10
 8001ea6:	d501      	bpl.n	8001eac <HAL_GPIO_Init+0x80>
        {
          tmp |= iocurrent;
 8001ea8:	464a      	mov	r2, r9
 8001eaa:	432a      	orrs	r2, r5
        }
        EXTI->FTSR1 = tmp;
 8001eac:	4c49      	ldr	r4, [pc, #292]	@ (8001fd4 <HAL_GPIO_Init+0x1a8>)
 8001eae:	6062      	str	r2, [r4, #4]
      }
    }

    position++;
 8001eb0:	3301      	adds	r3, #1
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001eb2:	680c      	ldr	r4, [r1, #0]
 8001eb4:	0022      	movs	r2, r4
 8001eb6:	40da      	lsrs	r2, r3
 8001eb8:	d100      	bne.n	8001ebc <HAL_GPIO_Init+0x90>
 8001eba:	e086      	b.n	8001fca <HAL_GPIO_Init+0x19e>
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	409a      	lsls	r2, r3
 8001ec0:	0026      	movs	r6, r4
 8001ec2:	4016      	ands	r6, r2
 8001ec4:	46b1      	mov	r9, r6
    if (iocurrent != 0U)
 8001ec6:	4214      	tst	r4, r2
 8001ec8:	d0f2      	beq.n	8001eb0 <HAL_GPIO_Init+0x84>
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001eca:	684c      	ldr	r4, [r1, #4]
 8001ecc:	2c02      	cmp	r4, #2
 8001ece:	d001      	beq.n	8001ed4 <HAL_GPIO_Init+0xa8>
 8001ed0:	2c12      	cmp	r4, #18
 8001ed2:	d118      	bne.n	8001f06 <HAL_GPIO_Init+0xda>
        tmp = GPIOx->AFR[position >> 3U];
 8001ed4:	08dd      	lsrs	r5, r3, #3
 8001ed6:	3508      	adds	r5, #8
 8001ed8:	00ad      	lsls	r5, r5, #2
 8001eda:	582c      	ldr	r4, [r5, r0]
 8001edc:	46a4      	mov	ip, r4
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 8001ede:	2707      	movs	r7, #7
 8001ee0:	401f      	ands	r7, r3
 8001ee2:	00bf      	lsls	r7, r7, #2
 8001ee4:	240f      	movs	r4, #15
 8001ee6:	46a2      	mov	sl, r4
 8001ee8:	0026      	movs	r6, r4
 8001eea:	40be      	lsls	r6, r7
 8001eec:	46b0      	mov	r8, r6
 8001eee:	4666      	mov	r6, ip
 8001ef0:	4644      	mov	r4, r8
 8001ef2:	43a6      	bics	r6, r4
 8001ef4:	46b4      	mov	ip, r6
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001ef6:	690c      	ldr	r4, [r1, #16]
 8001ef8:	4656      	mov	r6, sl
 8001efa:	4026      	ands	r6, r4
 8001efc:	0034      	movs	r4, r6
 8001efe:	40bc      	lsls	r4, r7
 8001f00:	4666      	mov	r6, ip
 8001f02:	4334      	orrs	r4, r6
        GPIOx->AFR[position >> 3U] = tmp;
 8001f04:	502c      	str	r4, [r5, r0]
      tmp = GPIOx->MODER;
 8001f06:	6804      	ldr	r4, [r0, #0]
 8001f08:	46a4      	mov	ip, r4
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8001f0a:	005d      	lsls	r5, r3, #1
 8001f0c:	2403      	movs	r4, #3
 8001f0e:	46a2      	mov	sl, r4
 8001f10:	0027      	movs	r7, r4
 8001f12:	40af      	lsls	r7, r5
 8001f14:	46b8      	mov	r8, r7
 8001f16:	43ff      	mvns	r7, r7
 8001f18:	4666      	mov	r6, ip
 8001f1a:	4644      	mov	r4, r8
 8001f1c:	43a6      	bics	r6, r4
 8001f1e:	46b4      	mov	ip, r6
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8001f20:	684c      	ldr	r4, [r1, #4]
 8001f22:	4656      	mov	r6, sl
 8001f24:	4026      	ands	r6, r4
 8001f26:	0034      	movs	r4, r6
 8001f28:	40ac      	lsls	r4, r5
 8001f2a:	4666      	mov	r6, ip
 8001f2c:	4334      	orrs	r4, r6
      GPIOx->MODER = tmp;
 8001f2e:	6004      	str	r4, [r0, #0]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f30:	684c      	ldr	r4, [r1, #4]
 8001f32:	1e66      	subs	r6, r4, #1
 8001f34:	2e01      	cmp	r6, #1
 8001f36:	d903      	bls.n	8001f40 <HAL_GPIO_Init+0x114>
 8001f38:	2c11      	cmp	r4, #17
 8001f3a:	d001      	beq.n	8001f40 <HAL_GPIO_Init+0x114>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f3c:	2c12      	cmp	r4, #18
 8001f3e:	d112      	bne.n	8001f66 <HAL_GPIO_Init+0x13a>
        tmp = GPIOx->OSPEEDR;
 8001f40:	6884      	ldr	r4, [r0, #8]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001f42:	403c      	ands	r4, r7
 8001f44:	46a4      	mov	ip, r4
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001f46:	68cc      	ldr	r4, [r1, #12]
 8001f48:	40ac      	lsls	r4, r5
 8001f4a:	4666      	mov	r6, ip
 8001f4c:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = tmp;
 8001f4e:	6084      	str	r4, [r0, #8]
        tmp = GPIOx->OTYPER;
 8001f50:	6844      	ldr	r4, [r0, #4]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f52:	4394      	bics	r4, r2
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001f54:	684a      	ldr	r2, [r1, #4]
 8001f56:	0912      	lsrs	r2, r2, #4
 8001f58:	4694      	mov	ip, r2
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	4666      	mov	r6, ip
 8001f5e:	4032      	ands	r2, r6
 8001f60:	409a      	lsls	r2, r3
 8001f62:	4322      	orrs	r2, r4
        GPIOx->OTYPER = tmp;
 8001f64:	6042      	str	r2, [r0, #4]
      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8001f66:	684a      	ldr	r2, [r1, #4]
 8001f68:	2a03      	cmp	r2, #3
 8001f6a:	d005      	beq.n	8001f78 <HAL_GPIO_Init+0x14c>
        tmp = GPIOx->PUPDR;
 8001f6c:	68c4      	ldr	r4, [r0, #12]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8001f6e:	403c      	ands	r4, r7
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8001f70:	688a      	ldr	r2, [r1, #8]
 8001f72:	40aa      	lsls	r2, r5
 8001f74:	4322      	orrs	r2, r4
        GPIOx->PUPDR = tmp;
 8001f76:	60c2      	str	r2, [r0, #12]
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f78:	684a      	ldr	r2, [r1, #4]
 8001f7a:	00d2      	lsls	r2, r2, #3
 8001f7c:	d598      	bpl.n	8001eb0 <HAL_GPIO_Init+0x84>
        tmp = EXTI->EXTICR[position >> 2U];
 8001f7e:	089a      	lsrs	r2, r3, #2
 8001f80:	0014      	movs	r4, r2
 8001f82:	3418      	adds	r4, #24
 8001f84:	00a4      	lsls	r4, r4, #2
 8001f86:	4d13      	ldr	r5, [pc, #76]	@ (8001fd4 <HAL_GPIO_Init+0x1a8>)
 8001f88:	5967      	ldr	r7, [r4, r5]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001f8a:	2403      	movs	r4, #3
 8001f8c:	401c      	ands	r4, r3
 8001f8e:	00e4      	lsls	r4, r4, #3
 8001f90:	250f      	movs	r5, #15
 8001f92:	40a5      	lsls	r5, r4
 8001f94:	43af      	bics	r7, r5
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001f96:	25a0      	movs	r5, #160	@ 0xa0
 8001f98:	05ed      	lsls	r5, r5, #23
 8001f9a:	42a8      	cmp	r0, r5
 8001f9c:	d100      	bne.n	8001fa0 <HAL_GPIO_Init+0x174>
 8001f9e:	e74e      	b.n	8001e3e <HAL_GPIO_Init+0x12>
 8001fa0:	4d0d      	ldr	r5, [pc, #52]	@ (8001fd8 <HAL_GPIO_Init+0x1ac>)
 8001fa2:	42a8      	cmp	r0, r5
 8001fa4:	d00b      	beq.n	8001fbe <HAL_GPIO_Init+0x192>
 8001fa6:	4d0d      	ldr	r5, [pc, #52]	@ (8001fdc <HAL_GPIO_Init+0x1b0>)
 8001fa8:	42a8      	cmp	r0, r5
 8001faa:	d00a      	beq.n	8001fc2 <HAL_GPIO_Init+0x196>
 8001fac:	4d0c      	ldr	r5, [pc, #48]	@ (8001fe0 <HAL_GPIO_Init+0x1b4>)
 8001fae:	42a8      	cmp	r0, r5
 8001fb0:	d009      	beq.n	8001fc6 <HAL_GPIO_Init+0x19a>
 8001fb2:	4d0c      	ldr	r5, [pc, #48]	@ (8001fe4 <HAL_GPIO_Init+0x1b8>)
 8001fb4:	42a8      	cmp	r0, r5
 8001fb6:	d100      	bne.n	8001fba <HAL_GPIO_Init+0x18e>
 8001fb8:	e73f      	b.n	8001e3a <HAL_GPIO_Init+0xe>
 8001fba:	2506      	movs	r5, #6
 8001fbc:	e740      	b.n	8001e40 <HAL_GPIO_Init+0x14>
 8001fbe:	2501      	movs	r5, #1
 8001fc0:	e73e      	b.n	8001e40 <HAL_GPIO_Init+0x14>
 8001fc2:	2502      	movs	r5, #2
 8001fc4:	e73c      	b.n	8001e40 <HAL_GPIO_Init+0x14>
 8001fc6:	2503      	movs	r5, #3
 8001fc8:	e73a      	b.n	8001e40 <HAL_GPIO_Init+0x14>
  }
}
 8001fca:	bce0      	pop	{r5, r6, r7}
 8001fcc:	46ba      	mov	sl, r7
 8001fce:	46b1      	mov	r9, r6
 8001fd0:	46a8      	mov	r8, r5
 8001fd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fd4:	40021800 	.word	0x40021800
 8001fd8:	50000400 	.word	0x50000400
 8001fdc:	50000800 	.word	0x50000800
 8001fe0:	50000c00 	.word	0x50000c00
 8001fe4:	50001400 	.word	0x50001400

08001fe8 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001fe8:	4b14      	ldr	r3, [pc, #80]	@ (800203c <HAL_RCC_GetSysClockFreq+0x54>)
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	2238      	movs	r2, #56	@ 0x38
 8001fee:	421a      	tst	r2, r3
 8001ff0:	d107      	bne.n	8002002 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001ff2:	4b12      	ldr	r3, [pc, #72]	@ (800203c <HAL_RCC_GetSysClockFreq+0x54>)
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	0ad2      	lsrs	r2, r2, #11
 8001ff8:	2307      	movs	r3, #7
 8001ffa:	4013      	ands	r3, r2

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001ffc:	4810      	ldr	r0, [pc, #64]	@ (8002040 <HAL_RCC_GetSysClockFreq+0x58>)
 8001ffe:	40d8      	lsrs	r0, r3
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
}
 8002000:	4770      	bx	lr
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002002:	4b0e      	ldr	r3, [pc, #56]	@ (800203c <HAL_RCC_GetSysClockFreq+0x54>)
 8002004:	689a      	ldr	r2, [r3, #8]
 8002006:	2338      	movs	r3, #56	@ 0x38
 8002008:	4013      	ands	r3, r2
 800200a:	2b08      	cmp	r3, #8
 800200c:	d010      	beq.n	8002030 <HAL_RCC_GetSysClockFreq+0x48>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 800200e:	4b0b      	ldr	r3, [pc, #44]	@ (800203c <HAL_RCC_GetSysClockFreq+0x54>)
 8002010:	689a      	ldr	r2, [r3, #8]
 8002012:	2338      	movs	r3, #56	@ 0x38
 8002014:	4013      	ands	r3, r2
 8002016:	2b20      	cmp	r3, #32
 8002018:	d00c      	beq.n	8002034 <HAL_RCC_GetSysClockFreq+0x4c>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 800201a:	4b08      	ldr	r3, [pc, #32]	@ (800203c <HAL_RCC_GetSysClockFreq+0x54>)
 800201c:	689a      	ldr	r2, [r3, #8]
 800201e:	2338      	movs	r3, #56	@ 0x38
 8002020:	4013      	ands	r3, r2
 8002022:	2b18      	cmp	r3, #24
 8002024:	d001      	beq.n	800202a <HAL_RCC_GetSysClockFreq+0x42>
    sysclockfreq = 0U;
 8002026:	2000      	movs	r0, #0
  return sysclockfreq;
 8002028:	e7ea      	b.n	8002000 <HAL_RCC_GetSysClockFreq+0x18>
    sysclockfreq = LSI_VALUE;
 800202a:	20fa      	movs	r0, #250	@ 0xfa
 800202c:	01c0      	lsls	r0, r0, #7
 800202e:	e7e7      	b.n	8002000 <HAL_RCC_GetSysClockFreq+0x18>
    sysclockfreq = HSE_VALUE;
 8002030:	4804      	ldr	r0, [pc, #16]	@ (8002044 <HAL_RCC_GetSysClockFreq+0x5c>)
 8002032:	e7e5      	b.n	8002000 <HAL_RCC_GetSysClockFreq+0x18>
    sysclockfreq = LSE_VALUE;
 8002034:	2080      	movs	r0, #128	@ 0x80
 8002036:	0200      	lsls	r0, r0, #8
 8002038:	e7e2      	b.n	8002000 <HAL_RCC_GetSysClockFreq+0x18>
 800203a:	46c0      	nop			@ (mov r8, r8)
 800203c:	40021000 	.word	0x40021000
 8002040:	02dc6c00 	.word	0x02dc6c00
 8002044:	007a1200 	.word	0x007a1200

08002048 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002048:	b510      	push	{r4, lr}
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 800204a:	f7ff ffcd 	bl	8001fe8 <HAL_RCC_GetSysClockFreq>
 800204e:	4b07      	ldr	r3, [pc, #28]	@ (800206c <HAL_RCC_GetHCLKFreq+0x24>)
 8002050:	689a      	ldr	r2, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002052:	0a12      	lsrs	r2, r2, #8
 8002054:	230f      	movs	r3, #15
 8002056:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8002058:	4a05      	ldr	r2, [pc, #20]	@ (8002070 <HAL_RCC_GetHCLKFreq+0x28>)
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	589a      	ldr	r2, [r3, r2]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800205e:	231f      	movs	r3, #31
 8002060:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8002062:	40d8      	lsrs	r0, r3
 8002064:	4b03      	ldr	r3, [pc, #12]	@ (8002074 <HAL_RCC_GetHCLKFreq+0x2c>)
 8002066:	6018      	str	r0, [r3, #0]
  return SystemCoreClock;
}
 8002068:	bd10      	pop	{r4, pc}
 800206a:	46c0      	nop			@ (mov r8, r8)
 800206c:	40021000 	.word	0x40021000
 8002070:	080040ac 	.word	0x080040ac
 8002074:	20000004 	.word	0x20000004

08002078 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002078:	b510      	push	{r4, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 800207a:	f7ff ffe5 	bl	8002048 <HAL_RCC_GetHCLKFreq>
 800207e:	4b06      	ldr	r3, [pc, #24]	@ (8002098 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002080:	689a      	ldr	r2, [r3, #8]
 8002082:	0b12      	lsrs	r2, r2, #12
 8002084:	2307      	movs	r3, #7
 8002086:	4013      	ands	r3, r2
 8002088:	4a04      	ldr	r2, [pc, #16]	@ (800209c <HAL_RCC_GetPCLK1Freq+0x24>)
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	589a      	ldr	r2, [r3, r2]
 800208e:	231f      	movs	r3, #31
 8002090:	4013      	ands	r3, r2
 8002092:	40d8      	lsrs	r0, r3
}
 8002094:	bd10      	pop	{r4, pc}
 8002096:	46c0      	nop			@ (mov r8, r8)
 8002098:	40021000 	.word	0x40021000
 800209c:	0800408c 	.word	0x0800408c

080020a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80020a0:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80020a2:	6a05      	ldr	r5, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80020a4:	6a03      	ldr	r3, [r0, #32]
 80020a6:	2201      	movs	r2, #1
 80020a8:	4393      	bics	r3, r2
 80020aa:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80020ac:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80020ae:	6983      	ldr	r3, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80020b0:	4c16      	ldr	r4, [pc, #88]	@ (800210c <TIM_OC1_SetConfig+0x6c>)
 80020b2:	4023      	ands	r3, r4
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80020b4:	680c      	ldr	r4, [r1, #0]
 80020b6:	431c      	orrs	r4, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80020b8:	2302      	movs	r3, #2
 80020ba:	439d      	bics	r5, r3
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80020bc:	688b      	ldr	r3, [r1, #8]
 80020be:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80020c0:	4d13      	ldr	r5, [pc, #76]	@ (8002110 <TIM_OC1_SetConfig+0x70>)
 80020c2:	42a8      	cmp	r0, r5
 80020c4:	d005      	beq.n	80020d2 <TIM_OC1_SetConfig+0x32>
 80020c6:	4d13      	ldr	r5, [pc, #76]	@ (8002114 <TIM_OC1_SetConfig+0x74>)
 80020c8:	42a8      	cmp	r0, r5
 80020ca:	d002      	beq.n	80020d2 <TIM_OC1_SetConfig+0x32>
 80020cc:	4d12      	ldr	r5, [pc, #72]	@ (8002118 <TIM_OC1_SetConfig+0x78>)
 80020ce:	42a8      	cmp	r0, r5
 80020d0:	d106      	bne.n	80020e0 <TIM_OC1_SetConfig+0x40>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80020d2:	2508      	movs	r5, #8
 80020d4:	43ab      	bics	r3, r5
 80020d6:	001d      	movs	r5, r3
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80020d8:	68cb      	ldr	r3, [r1, #12]
 80020da:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80020dc:	2504      	movs	r5, #4
 80020de:	43ab      	bics	r3, r5
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80020e0:	4d0b      	ldr	r5, [pc, #44]	@ (8002110 <TIM_OC1_SetConfig+0x70>)
 80020e2:	42a8      	cmp	r0, r5
 80020e4:	d005      	beq.n	80020f2 <TIM_OC1_SetConfig+0x52>
 80020e6:	4d0b      	ldr	r5, [pc, #44]	@ (8002114 <TIM_OC1_SetConfig+0x74>)
 80020e8:	42a8      	cmp	r0, r5
 80020ea:	d002      	beq.n	80020f2 <TIM_OC1_SetConfig+0x52>
 80020ec:	4d0a      	ldr	r5, [pc, #40]	@ (8002118 <TIM_OC1_SetConfig+0x78>)
 80020ee:	42a8      	cmp	r0, r5
 80020f0:	d105      	bne.n	80020fe <TIM_OC1_SetConfig+0x5e>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80020f2:	4d0a      	ldr	r5, [pc, #40]	@ (800211c <TIM_OC1_SetConfig+0x7c>)
 80020f4:	402a      	ands	r2, r5
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80020f6:	694d      	ldr	r5, [r1, #20]
 80020f8:	4315      	orrs	r5, r2
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80020fa:	698a      	ldr	r2, [r1, #24]
 80020fc:	432a      	orrs	r2, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80020fe:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002100:	6184      	str	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002102:	684a      	ldr	r2, [r1, #4]
 8002104:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002106:	6203      	str	r3, [r0, #32]
}
 8002108:	bd30      	pop	{r4, r5, pc}
 800210a:	46c0      	nop			@ (mov r8, r8)
 800210c:	fffeff8c 	.word	0xfffeff8c
 8002110:	40012c00 	.word	0x40012c00
 8002114:	40014400 	.word	0x40014400
 8002118:	40014800 	.word	0x40014800
 800211c:	fffffcff 	.word	0xfffffcff

08002120 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002120:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002122:	6a04      	ldr	r4, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002124:	6a03      	ldr	r3, [r0, #32]
 8002126:	4a16      	ldr	r2, [pc, #88]	@ (8002180 <TIM_OC3_SetConfig+0x60>)
 8002128:	4013      	ands	r3, r2
 800212a:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800212c:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800212e:	69c3      	ldr	r3, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002130:	4d14      	ldr	r5, [pc, #80]	@ (8002184 <TIM_OC3_SetConfig+0x64>)
 8002132:	402b      	ands	r3, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002134:	680d      	ldr	r5, [r1, #0]
 8002136:	431d      	orrs	r5, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002138:	4b13      	ldr	r3, [pc, #76]	@ (8002188 <TIM_OC3_SetConfig+0x68>)
 800213a:	401c      	ands	r4, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800213c:	688b      	ldr	r3, [r1, #8]
 800213e:	021b      	lsls	r3, r3, #8
 8002140:	4323      	orrs	r3, r4

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002142:	4c12      	ldr	r4, [pc, #72]	@ (800218c <TIM_OC3_SetConfig+0x6c>)
 8002144:	42a0      	cmp	r0, r4
 8002146:	d006      	beq.n	8002156 <TIM_OC3_SetConfig+0x36>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002148:	4c11      	ldr	r4, [pc, #68]	@ (8002190 <TIM_OC3_SetConfig+0x70>)
 800214a:	42a0      	cmp	r0, r4
 800214c:	d00a      	beq.n	8002164 <TIM_OC3_SetConfig+0x44>
 800214e:	4c11      	ldr	r4, [pc, #68]	@ (8002194 <TIM_OC3_SetConfig+0x74>)
 8002150:	42a0      	cmp	r0, r4
 8002152:	d10f      	bne.n	8002174 <TIM_OC3_SetConfig+0x54>
 8002154:	e006      	b.n	8002164 <TIM_OC3_SetConfig+0x44>
    tmpccer &= ~TIM_CCER_CC3NP;
 8002156:	4c10      	ldr	r4, [pc, #64]	@ (8002198 <TIM_OC3_SetConfig+0x78>)
 8002158:	401c      	ands	r4, r3
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800215a:	68cb      	ldr	r3, [r1, #12]
 800215c:	021b      	lsls	r3, r3, #8
 800215e:	4323      	orrs	r3, r4
    tmpccer &= ~TIM_CCER_CC3NE;
 8002160:	4c0e      	ldr	r4, [pc, #56]	@ (800219c <TIM_OC3_SetConfig+0x7c>)
 8002162:	4023      	ands	r3, r4
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002164:	4c0e      	ldr	r4, [pc, #56]	@ (80021a0 <TIM_OC3_SetConfig+0x80>)
 8002166:	4022      	ands	r2, r4
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002168:	694c      	ldr	r4, [r1, #20]
 800216a:	0124      	lsls	r4, r4, #4
 800216c:	4314      	orrs	r4, r2
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800216e:	698a      	ldr	r2, [r1, #24]
 8002170:	0112      	lsls	r2, r2, #4
 8002172:	4322      	orrs	r2, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002174:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002176:	61c5      	str	r5, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002178:	684a      	ldr	r2, [r1, #4]
 800217a:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800217c:	6203      	str	r3, [r0, #32]
}
 800217e:	bd30      	pop	{r4, r5, pc}
 8002180:	fffffeff 	.word	0xfffffeff
 8002184:	fffeff8c 	.word	0xfffeff8c
 8002188:	fffffdff 	.word	0xfffffdff
 800218c:	40012c00 	.word	0x40012c00
 8002190:	40014400 	.word	0x40014400
 8002194:	40014800 	.word	0x40014800
 8002198:	fffff7ff 	.word	0xfffff7ff
 800219c:	fffffbff 	.word	0xfffffbff
 80021a0:	ffffcfff 	.word	0xffffcfff

080021a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80021a4:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80021a6:	6a04      	ldr	r4, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80021a8:	6a03      	ldr	r3, [r0, #32]
 80021aa:	4a11      	ldr	r2, [pc, #68]	@ (80021f0 <TIM_OC4_SetConfig+0x4c>)
 80021ac:	4013      	ands	r3, r2
 80021ae:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80021b0:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80021b2:	69c3      	ldr	r3, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80021b4:	4a0f      	ldr	r2, [pc, #60]	@ (80021f4 <TIM_OC4_SetConfig+0x50>)
 80021b6:	4013      	ands	r3, r2

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80021b8:	680a      	ldr	r2, [r1, #0]
 80021ba:	0212      	lsls	r2, r2, #8
 80021bc:	431a      	orrs	r2, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80021be:	4b0e      	ldr	r3, [pc, #56]	@ (80021f8 <TIM_OC4_SetConfig+0x54>)
 80021c0:	401c      	ands	r4, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80021c2:	688b      	ldr	r3, [r1, #8]
 80021c4:	031b      	lsls	r3, r3, #12
 80021c6:	4323      	orrs	r3, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80021c8:	4c0c      	ldr	r4, [pc, #48]	@ (80021fc <TIM_OC4_SetConfig+0x58>)
 80021ca:	42a0      	cmp	r0, r4
 80021cc:	d005      	beq.n	80021da <TIM_OC4_SetConfig+0x36>
 80021ce:	4c0c      	ldr	r4, [pc, #48]	@ (8002200 <TIM_OC4_SetConfig+0x5c>)
 80021d0:	42a0      	cmp	r0, r4
 80021d2:	d002      	beq.n	80021da <TIM_OC4_SetConfig+0x36>
 80021d4:	4c0b      	ldr	r4, [pc, #44]	@ (8002204 <TIM_OC4_SetConfig+0x60>)
 80021d6:	42a0      	cmp	r0, r4
 80021d8:	d104      	bne.n	80021e4 <TIM_OC4_SetConfig+0x40>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80021da:	4c0b      	ldr	r4, [pc, #44]	@ (8002208 <TIM_OC4_SetConfig+0x64>)
 80021dc:	402c      	ands	r4, r5

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80021de:	694d      	ldr	r5, [r1, #20]
 80021e0:	01ad      	lsls	r5, r5, #6
 80021e2:	4325      	orrs	r5, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80021e4:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80021e6:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80021e8:	684a      	ldr	r2, [r1, #4]
 80021ea:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80021ec:	6203      	str	r3, [r0, #32]
}
 80021ee:	bd30      	pop	{r4, r5, pc}
 80021f0:	ffffefff 	.word	0xffffefff
 80021f4:	feff8cff 	.word	0xfeff8cff
 80021f8:	ffffdfff 	.word	0xffffdfff
 80021fc:	40012c00 	.word	0x40012c00
 8002200:	40014400 	.word	0x40014400
 8002204:	40014800 	.word	0x40014800
 8002208:	ffffbfff 	.word	0xffffbfff

0800220c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800220c:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800220e:	6a04      	ldr	r4, [r0, #32]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002210:	6a03      	ldr	r3, [r0, #32]
 8002212:	4a11      	ldr	r2, [pc, #68]	@ (8002258 <TIM_OC5_SetConfig+0x4c>)
 8002214:	4013      	ands	r3, r2
 8002216:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002218:	6842      	ldr	r2, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800221a:	6d43      	ldr	r3, [r0, #84]	@ 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800221c:	4d0f      	ldr	r5, [pc, #60]	@ (800225c <TIM_OC5_SetConfig+0x50>)
 800221e:	402b      	ands	r3, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002220:	680d      	ldr	r5, [r1, #0]
 8002222:	431d      	orrs	r5, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002224:	4b0e      	ldr	r3, [pc, #56]	@ (8002260 <TIM_OC5_SetConfig+0x54>)
 8002226:	401c      	ands	r4, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002228:	688b      	ldr	r3, [r1, #8]
 800222a:	041b      	lsls	r3, r3, #16
 800222c:	4323      	orrs	r3, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800222e:	4c0d      	ldr	r4, [pc, #52]	@ (8002264 <TIM_OC5_SetConfig+0x58>)
 8002230:	42a0      	cmp	r0, r4
 8002232:	d005      	beq.n	8002240 <TIM_OC5_SetConfig+0x34>
 8002234:	4c0c      	ldr	r4, [pc, #48]	@ (8002268 <TIM_OC5_SetConfig+0x5c>)
 8002236:	42a0      	cmp	r0, r4
 8002238:	d002      	beq.n	8002240 <TIM_OC5_SetConfig+0x34>
 800223a:	4c0c      	ldr	r4, [pc, #48]	@ (800226c <TIM_OC5_SetConfig+0x60>)
 800223c:	42a0      	cmp	r0, r4
 800223e:	d104      	bne.n	800224a <TIM_OC5_SetConfig+0x3e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002240:	4c05      	ldr	r4, [pc, #20]	@ (8002258 <TIM_OC5_SetConfig+0x4c>)
 8002242:	4014      	ands	r4, r2
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002244:	694a      	ldr	r2, [r1, #20]
 8002246:	0212      	lsls	r2, r2, #8
 8002248:	4322      	orrs	r2, r4
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800224a:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800224c:	6545      	str	r5, [r0, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800224e:	684a      	ldr	r2, [r1, #4]
 8002250:	6582      	str	r2, [r0, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002252:	6203      	str	r3, [r0, #32]
}
 8002254:	bd30      	pop	{r4, r5, pc}
 8002256:	46c0      	nop			@ (mov r8, r8)
 8002258:	fffeffff 	.word	0xfffeffff
 800225c:	fffeff8f 	.word	0xfffeff8f
 8002260:	fffdffff 	.word	0xfffdffff
 8002264:	40012c00 	.word	0x40012c00
 8002268:	40014400 	.word	0x40014400
 800226c:	40014800 	.word	0x40014800

08002270 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002270:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002272:	6a04      	ldr	r4, [r0, #32]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002274:	6a03      	ldr	r3, [r0, #32]
 8002276:	4a11      	ldr	r2, [pc, #68]	@ (80022bc <TIM_OC6_SetConfig+0x4c>)
 8002278:	4013      	ands	r3, r2
 800227a:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800227c:	6845      	ldr	r5, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800227e:	6d43      	ldr	r3, [r0, #84]	@ 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002280:	4a0f      	ldr	r2, [pc, #60]	@ (80022c0 <TIM_OC6_SetConfig+0x50>)
 8002282:	4013      	ands	r3, r2
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002284:	680a      	ldr	r2, [r1, #0]
 8002286:	0212      	lsls	r2, r2, #8
 8002288:	431a      	orrs	r2, r3

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800228a:	4b0e      	ldr	r3, [pc, #56]	@ (80022c4 <TIM_OC6_SetConfig+0x54>)
 800228c:	401c      	ands	r4, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800228e:	688b      	ldr	r3, [r1, #8]
 8002290:	051b      	lsls	r3, r3, #20
 8002292:	4323      	orrs	r3, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002294:	4c0c      	ldr	r4, [pc, #48]	@ (80022c8 <TIM_OC6_SetConfig+0x58>)
 8002296:	42a0      	cmp	r0, r4
 8002298:	d005      	beq.n	80022a6 <TIM_OC6_SetConfig+0x36>
 800229a:	4c0c      	ldr	r4, [pc, #48]	@ (80022cc <TIM_OC6_SetConfig+0x5c>)
 800229c:	42a0      	cmp	r0, r4
 800229e:	d002      	beq.n	80022a6 <TIM_OC6_SetConfig+0x36>
 80022a0:	4c0b      	ldr	r4, [pc, #44]	@ (80022d0 <TIM_OC6_SetConfig+0x60>)
 80022a2:	42a0      	cmp	r0, r4
 80022a4:	d104      	bne.n	80022b0 <TIM_OC6_SetConfig+0x40>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80022a6:	4c0b      	ldr	r4, [pc, #44]	@ (80022d4 <TIM_OC6_SetConfig+0x64>)
 80022a8:	402c      	ands	r4, r5
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80022aa:	694d      	ldr	r5, [r1, #20]
 80022ac:	02ad      	lsls	r5, r5, #10
 80022ae:	4325      	orrs	r5, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80022b0:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80022b2:	6542      	str	r2, [r0, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80022b4:	684a      	ldr	r2, [r1, #4]
 80022b6:	65c2      	str	r2, [r0, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80022b8:	6203      	str	r3, [r0, #32]
}
 80022ba:	bd30      	pop	{r4, r5, pc}
 80022bc:	ffefffff 	.word	0xffefffff
 80022c0:	feff8fff 	.word	0xfeff8fff
 80022c4:	ffdfffff 	.word	0xffdfffff
 80022c8:	40012c00 	.word	0x40012c00
 80022cc:	40014400 	.word	0x40014400
 80022d0:	40014800 	.word	0x40014800
 80022d4:	fffbffff 	.word	0xfffbffff

080022d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80022d8:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80022da:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80022dc:	6a04      	ldr	r4, [r0, #32]
 80022de:	2501      	movs	r5, #1
 80022e0:	43ac      	bics	r4, r5
 80022e2:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80022e4:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80022e6:	35ef      	adds	r5, #239	@ 0xef
 80022e8:	43ac      	bics	r4, r5
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80022ea:	0112      	lsls	r2, r2, #4
 80022ec:	4322      	orrs	r2, r4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80022ee:	240a      	movs	r4, #10
 80022f0:	43a3      	bics	r3, r4
  tmpccer |= TIM_ICPolarity;
 80022f2:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80022f4:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80022f6:	6203      	str	r3, [r0, #32]
}
 80022f8:	bd30      	pop	{r4, r5, pc}
	...

080022fc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80022fc:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80022fe:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002300:	6a04      	ldr	r4, [r0, #32]
 8002302:	2510      	movs	r5, #16
 8002304:	43ac      	bics	r4, r5
 8002306:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002308:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800230a:	4d05      	ldr	r5, [pc, #20]	@ (8002320 <TIM_TI2_ConfigInputStage+0x24>)
 800230c:	402c      	ands	r4, r5
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800230e:	0312      	lsls	r2, r2, #12
 8002310:	4322      	orrs	r2, r4

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002312:	24a0      	movs	r4, #160	@ 0xa0
 8002314:	43a3      	bics	r3, r4
  tmpccer |= (TIM_ICPolarity << 4U);
 8002316:	0109      	lsls	r1, r1, #4
 8002318:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800231a:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800231c:	6201      	str	r1, [r0, #32]
}
 800231e:	bd30      	pop	{r4, r5, pc}
 8002320:	ffff0fff 	.word	0xffff0fff

08002324 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002324:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002326:	4a03      	ldr	r2, [pc, #12]	@ (8002334 <TIM_ITRx_SetConfig+0x10>)
 8002328:	4013      	ands	r3, r2
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800232a:	430b      	orrs	r3, r1
 800232c:	2207      	movs	r2, #7
 800232e:	4313      	orrs	r3, r2
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002330:	6083      	str	r3, [r0, #8]
}
 8002332:	4770      	bx	lr
 8002334:	ffcfff8f 	.word	0xffcfff8f

08002338 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8002338:	233d      	movs	r3, #61	@ 0x3d
 800233a:	5cc3      	ldrb	r3, [r0, r3]
 800233c:	2b01      	cmp	r3, #1
 800233e:	d122      	bne.n	8002386 <HAL_TIM_Base_Start_IT+0x4e>
  htim->State = HAL_TIM_STATE_BUSY;
 8002340:	333c      	adds	r3, #60	@ 0x3c
 8002342:	2202      	movs	r2, #2
 8002344:	54c2      	strb	r2, [r0, r3]
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002346:	6802      	ldr	r2, [r0, #0]
 8002348:	68d3      	ldr	r3, [r2, #12]
 800234a:	2101      	movs	r1, #1
 800234c:	430b      	orrs	r3, r1
 800234e:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002350:	6803      	ldr	r3, [r0, #0]
 8002352:	4a10      	ldr	r2, [pc, #64]	@ (8002394 <HAL_TIM_Base_Start_IT+0x5c>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d008      	beq.n	800236a <HAL_TIM_Base_Start_IT+0x32>
 8002358:	4a0f      	ldr	r2, [pc, #60]	@ (8002398 <HAL_TIM_Base_Start_IT+0x60>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d005      	beq.n	800236a <HAL_TIM_Base_Start_IT+0x32>
    __HAL_TIM_ENABLE(htim);
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	2101      	movs	r1, #1
 8002362:	430a      	orrs	r2, r1
 8002364:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002366:	2000      	movs	r0, #0
 8002368:	e00e      	b.n	8002388 <HAL_TIM_Base_Start_IT+0x50>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800236a:	689a      	ldr	r2, [r3, #8]
 800236c:	490b      	ldr	r1, [pc, #44]	@ (800239c <HAL_TIM_Base_Start_IT+0x64>)
 800236e:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002370:	2a06      	cmp	r2, #6
 8002372:	d00a      	beq.n	800238a <HAL_TIM_Base_Start_IT+0x52>
 8002374:	3907      	subs	r1, #7
 8002376:	428a      	cmp	r2, r1
 8002378:	d009      	beq.n	800238e <HAL_TIM_Base_Start_IT+0x56>
      __HAL_TIM_ENABLE(htim);
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	2101      	movs	r1, #1
 800237e:	430a      	orrs	r2, r1
 8002380:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002382:	2000      	movs	r0, #0
 8002384:	e000      	b.n	8002388 <HAL_TIM_Base_Start_IT+0x50>
    return HAL_ERROR;
 8002386:	2001      	movs	r0, #1
}
 8002388:	4770      	bx	lr
  return HAL_OK;
 800238a:	2000      	movs	r0, #0
 800238c:	e7fc      	b.n	8002388 <HAL_TIM_Base_Start_IT+0x50>
 800238e:	2000      	movs	r0, #0
 8002390:	e7fa      	b.n	8002388 <HAL_TIM_Base_Start_IT+0x50>
 8002392:	46c0      	nop			@ (mov r8, r8)
 8002394:	40012c00 	.word	0x40012c00
 8002398:	40000400 	.word	0x40000400
 800239c:	00010007 	.word	0x00010007

080023a0 <HAL_TIM_OC_MspInit>:
}
 80023a0:	4770      	bx	lr

080023a2 <HAL_TIM_OC_DelayElapsedCallback>:
}
 80023a2:	4770      	bx	lr

080023a4 <HAL_TIM_IC_CaptureCallback>:
}
 80023a4:	4770      	bx	lr

080023a6 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 80023a6:	4770      	bx	lr

080023a8 <HAL_TIM_TriggerCallback>:
}
 80023a8:	4770      	bx	lr
	...

080023ac <HAL_TIM_IRQHandler>:
{
 80023ac:	b570      	push	{r4, r5, r6, lr}
 80023ae:	0005      	movs	r5, r0
  uint32_t itsource = htim->Instance->DIER;
 80023b0:	6803      	ldr	r3, [r0, #0]
 80023b2:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 80023b4:	691c      	ldr	r4, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80023b6:	07a2      	lsls	r2, r4, #30
 80023b8:	d50e      	bpl.n	80023d8 <HAL_TIM_IRQHandler+0x2c>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80023ba:	07b2      	lsls	r2, r6, #30
 80023bc:	d50c      	bpl.n	80023d8 <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80023be:	2203      	movs	r2, #3
 80023c0:	4252      	negs	r2, r2
 80023c2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80023c4:	2301      	movs	r3, #1
 80023c6:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80023c8:	6803      	ldr	r3, [r0, #0]
 80023ca:	699b      	ldr	r3, [r3, #24]
 80023cc:	079b      	lsls	r3, r3, #30
 80023ce:	d057      	beq.n	8002480 <HAL_TIM_IRQHandler+0xd4>
          HAL_TIM_IC_CaptureCallback(htim);
 80023d0:	f7ff ffe8 	bl	80023a4 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023d4:	2300      	movs	r3, #0
 80023d6:	772b      	strb	r3, [r5, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80023d8:	0763      	lsls	r3, r4, #29
 80023da:	d512      	bpl.n	8002402 <HAL_TIM_IRQHandler+0x56>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80023dc:	0773      	lsls	r3, r6, #29
 80023de:	d510      	bpl.n	8002402 <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80023e0:	682b      	ldr	r3, [r5, #0]
 80023e2:	2205      	movs	r2, #5
 80023e4:	4252      	negs	r2, r2
 80023e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80023e8:	2302      	movs	r3, #2
 80023ea:	772b      	strb	r3, [r5, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80023ec:	682b      	ldr	r3, [r5, #0]
 80023ee:	699a      	ldr	r2, [r3, #24]
 80023f0:	23c0      	movs	r3, #192	@ 0xc0
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	421a      	tst	r2, r3
 80023f6:	d049      	beq.n	800248c <HAL_TIM_IRQHandler+0xe0>
        HAL_TIM_IC_CaptureCallback(htim);
 80023f8:	0028      	movs	r0, r5
 80023fa:	f7ff ffd3 	bl	80023a4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023fe:	2300      	movs	r3, #0
 8002400:	772b      	strb	r3, [r5, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002402:	0723      	lsls	r3, r4, #28
 8002404:	d510      	bpl.n	8002428 <HAL_TIM_IRQHandler+0x7c>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002406:	0733      	lsls	r3, r6, #28
 8002408:	d50e      	bpl.n	8002428 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800240a:	682b      	ldr	r3, [r5, #0]
 800240c:	2209      	movs	r2, #9
 800240e:	4252      	negs	r2, r2
 8002410:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002412:	2304      	movs	r3, #4
 8002414:	772b      	strb	r3, [r5, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002416:	682b      	ldr	r3, [r5, #0]
 8002418:	69db      	ldr	r3, [r3, #28]
 800241a:	079b      	lsls	r3, r3, #30
 800241c:	d03d      	beq.n	800249a <HAL_TIM_IRQHandler+0xee>
        HAL_TIM_IC_CaptureCallback(htim);
 800241e:	0028      	movs	r0, r5
 8002420:	f7ff ffc0 	bl	80023a4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002424:	2300      	movs	r3, #0
 8002426:	772b      	strb	r3, [r5, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002428:	06e3      	lsls	r3, r4, #27
 800242a:	d512      	bpl.n	8002452 <HAL_TIM_IRQHandler+0xa6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800242c:	06f3      	lsls	r3, r6, #27
 800242e:	d510      	bpl.n	8002452 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002430:	682b      	ldr	r3, [r5, #0]
 8002432:	2211      	movs	r2, #17
 8002434:	4252      	negs	r2, r2
 8002436:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002438:	2308      	movs	r3, #8
 800243a:	772b      	strb	r3, [r5, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800243c:	682b      	ldr	r3, [r5, #0]
 800243e:	69da      	ldr	r2, [r3, #28]
 8002440:	23c0      	movs	r3, #192	@ 0xc0
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	421a      	tst	r2, r3
 8002446:	d02f      	beq.n	80024a8 <HAL_TIM_IRQHandler+0xfc>
        HAL_TIM_IC_CaptureCallback(htim);
 8002448:	0028      	movs	r0, r5
 800244a:	f7ff ffab 	bl	80023a4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800244e:	2300      	movs	r3, #0
 8002450:	772b      	strb	r3, [r5, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002452:	07e3      	lsls	r3, r4, #31
 8002454:	d501      	bpl.n	800245a <HAL_TIM_IRQHandler+0xae>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002456:	07f3      	lsls	r3, r6, #31
 8002458:	d42d      	bmi.n	80024b6 <HAL_TIM_IRQHandler+0x10a>
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800245a:	2382      	movs	r3, #130	@ 0x82
 800245c:	019b      	lsls	r3, r3, #6
 800245e:	421c      	tst	r4, r3
 8002460:	d001      	beq.n	8002466 <HAL_TIM_IRQHandler+0xba>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002462:	0633      	lsls	r3, r6, #24
 8002464:	d42f      	bmi.n	80024c6 <HAL_TIM_IRQHandler+0x11a>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002466:	05e3      	lsls	r3, r4, #23
 8002468:	d501      	bpl.n	800246e <HAL_TIM_IRQHandler+0xc2>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800246a:	0633      	lsls	r3, r6, #24
 800246c:	d432      	bmi.n	80024d4 <HAL_TIM_IRQHandler+0x128>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800246e:	0663      	lsls	r3, r4, #25
 8002470:	d501      	bpl.n	8002476 <HAL_TIM_IRQHandler+0xca>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002472:	0673      	lsls	r3, r6, #25
 8002474:	d435      	bmi.n	80024e2 <HAL_TIM_IRQHandler+0x136>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002476:	06a4      	lsls	r4, r4, #26
 8002478:	d501      	bpl.n	800247e <HAL_TIM_IRQHandler+0xd2>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800247a:	06b6      	lsls	r6, r6, #26
 800247c:	d439      	bmi.n	80024f2 <HAL_TIM_IRQHandler+0x146>
}
 800247e:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002480:	f7ff ff8f 	bl	80023a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002484:	0028      	movs	r0, r5
 8002486:	f7ff ff8e 	bl	80023a6 <HAL_TIM_PWM_PulseFinishedCallback>
 800248a:	e7a3      	b.n	80023d4 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800248c:	0028      	movs	r0, r5
 800248e:	f7ff ff88 	bl	80023a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002492:	0028      	movs	r0, r5
 8002494:	f7ff ff87 	bl	80023a6 <HAL_TIM_PWM_PulseFinishedCallback>
 8002498:	e7b1      	b.n	80023fe <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800249a:	0028      	movs	r0, r5
 800249c:	f7ff ff81 	bl	80023a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024a0:	0028      	movs	r0, r5
 80024a2:	f7ff ff80 	bl	80023a6 <HAL_TIM_PWM_PulseFinishedCallback>
 80024a6:	e7bd      	b.n	8002424 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024a8:	0028      	movs	r0, r5
 80024aa:	f7ff ff7a 	bl	80023a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024ae:	0028      	movs	r0, r5
 80024b0:	f7ff ff79 	bl	80023a6 <HAL_TIM_PWM_PulseFinishedCallback>
 80024b4:	e7cb      	b.n	800244e <HAL_TIM_IRQHandler+0xa2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80024b6:	682b      	ldr	r3, [r5, #0]
 80024b8:	2202      	movs	r2, #2
 80024ba:	4252      	negs	r2, r2
 80024bc:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80024be:	0028      	movs	r0, r5
 80024c0:	f7fe faa8 	bl	8000a14 <HAL_TIM_PeriodElapsedCallback>
 80024c4:	e7c9      	b.n	800245a <HAL_TIM_IRQHandler+0xae>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80024c6:	682b      	ldr	r3, [r5, #0]
 80024c8:	4a0e      	ldr	r2, [pc, #56]	@ (8002504 <HAL_TIM_IRQHandler+0x158>)
 80024ca:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80024cc:	0028      	movs	r0, r5
 80024ce:	f000 fb00 	bl	8002ad2 <HAL_TIMEx_BreakCallback>
 80024d2:	e7c8      	b.n	8002466 <HAL_TIM_IRQHandler+0xba>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80024d4:	682b      	ldr	r3, [r5, #0]
 80024d6:	4a0c      	ldr	r2, [pc, #48]	@ (8002508 <HAL_TIM_IRQHandler+0x15c>)
 80024d8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80024da:	0028      	movs	r0, r5
 80024dc:	f000 fafa 	bl	8002ad4 <HAL_TIMEx_Break2Callback>
 80024e0:	e7c5      	b.n	800246e <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80024e2:	682b      	ldr	r3, [r5, #0]
 80024e4:	2241      	movs	r2, #65	@ 0x41
 80024e6:	4252      	negs	r2, r2
 80024e8:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80024ea:	0028      	movs	r0, r5
 80024ec:	f7ff ff5c 	bl	80023a8 <HAL_TIM_TriggerCallback>
 80024f0:	e7c1      	b.n	8002476 <HAL_TIM_IRQHandler+0xca>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80024f2:	682b      	ldr	r3, [r5, #0]
 80024f4:	2221      	movs	r2, #33	@ 0x21
 80024f6:	4252      	negs	r2, r2
 80024f8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80024fa:	0028      	movs	r0, r5
 80024fc:	f000 fae8 	bl	8002ad0 <HAL_TIMEx_CommutCallback>
}
 8002500:	e7bd      	b.n	800247e <HAL_TIM_IRQHandler+0xd2>
 8002502:	46c0      	nop			@ (mov r8, r8)
 8002504:	ffffdf7f 	.word	0xffffdf7f
 8002508:	fffffeff 	.word	0xfffffeff

0800250c <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 800250c:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800250e:	4a1c      	ldr	r2, [pc, #112]	@ (8002580 <TIM_Base_SetConfig+0x74>)
 8002510:	4290      	cmp	r0, r2
 8002512:	d002      	beq.n	800251a <TIM_Base_SetConfig+0xe>
 8002514:	4a1b      	ldr	r2, [pc, #108]	@ (8002584 <TIM_Base_SetConfig+0x78>)
 8002516:	4290      	cmp	r0, r2
 8002518:	d103      	bne.n	8002522 <TIM_Base_SetConfig+0x16>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800251a:	2270      	movs	r2, #112	@ 0x70
 800251c:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 800251e:	684a      	ldr	r2, [r1, #4]
 8002520:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002522:	4a17      	ldr	r2, [pc, #92]	@ (8002580 <TIM_Base_SetConfig+0x74>)
 8002524:	4290      	cmp	r0, r2
 8002526:	d00b      	beq.n	8002540 <TIM_Base_SetConfig+0x34>
 8002528:	4a16      	ldr	r2, [pc, #88]	@ (8002584 <TIM_Base_SetConfig+0x78>)
 800252a:	4290      	cmp	r0, r2
 800252c:	d008      	beq.n	8002540 <TIM_Base_SetConfig+0x34>
 800252e:	4a16      	ldr	r2, [pc, #88]	@ (8002588 <TIM_Base_SetConfig+0x7c>)
 8002530:	4290      	cmp	r0, r2
 8002532:	d005      	beq.n	8002540 <TIM_Base_SetConfig+0x34>
 8002534:	4a15      	ldr	r2, [pc, #84]	@ (800258c <TIM_Base_SetConfig+0x80>)
 8002536:	4290      	cmp	r0, r2
 8002538:	d002      	beq.n	8002540 <TIM_Base_SetConfig+0x34>
 800253a:	4a15      	ldr	r2, [pc, #84]	@ (8002590 <TIM_Base_SetConfig+0x84>)
 800253c:	4290      	cmp	r0, r2
 800253e:	d103      	bne.n	8002548 <TIM_Base_SetConfig+0x3c>
    tmpcr1 &= ~TIM_CR1_CKD;
 8002540:	4a14      	ldr	r2, [pc, #80]	@ (8002594 <TIM_Base_SetConfig+0x88>)
 8002542:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002544:	68ca      	ldr	r2, [r1, #12]
 8002546:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002548:	2280      	movs	r2, #128	@ 0x80
 800254a:	4393      	bics	r3, r2
 800254c:	694a      	ldr	r2, [r1, #20]
 800254e:	4313      	orrs	r3, r2
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002550:	688a      	ldr	r2, [r1, #8]
 8002552:	62c2      	str	r2, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002554:	680a      	ldr	r2, [r1, #0]
 8002556:	6282      	str	r2, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002558:	4a09      	ldr	r2, [pc, #36]	@ (8002580 <TIM_Base_SetConfig+0x74>)
 800255a:	4290      	cmp	r0, r2
 800255c:	d005      	beq.n	800256a <TIM_Base_SetConfig+0x5e>
 800255e:	4a0b      	ldr	r2, [pc, #44]	@ (800258c <TIM_Base_SetConfig+0x80>)
 8002560:	4290      	cmp	r0, r2
 8002562:	d002      	beq.n	800256a <TIM_Base_SetConfig+0x5e>
 8002564:	4a0a      	ldr	r2, [pc, #40]	@ (8002590 <TIM_Base_SetConfig+0x84>)
 8002566:	4290      	cmp	r0, r2
 8002568:	d101      	bne.n	800256e <TIM_Base_SetConfig+0x62>
    TIMx->RCR = Structure->RepetitionCounter;
 800256a:	690a      	ldr	r2, [r1, #16]
 800256c:	6302      	str	r2, [r0, #48]	@ 0x30
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800256e:	6802      	ldr	r2, [r0, #0]
 8002570:	2104      	movs	r1, #4
 8002572:	430a      	orrs	r2, r1
 8002574:	6002      	str	r2, [r0, #0]
  TIMx->EGR = TIM_EGR_UG;
 8002576:	2201      	movs	r2, #1
 8002578:	6142      	str	r2, [r0, #20]
  TIMx->CR1 = tmpcr1;
 800257a:	6003      	str	r3, [r0, #0]
}
 800257c:	4770      	bx	lr
 800257e:	46c0      	nop			@ (mov r8, r8)
 8002580:	40012c00 	.word	0x40012c00
 8002584:	40000400 	.word	0x40000400
 8002588:	40002000 	.word	0x40002000
 800258c:	40014400 	.word	0x40014400
 8002590:	40014800 	.word	0x40014800
 8002594:	fffffcff 	.word	0xfffffcff

08002598 <HAL_TIM_Base_Init>:
{
 8002598:	b570      	push	{r4, r5, r6, lr}
 800259a:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 800259c:	d02a      	beq.n	80025f4 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 800259e:	233d      	movs	r3, #61	@ 0x3d
 80025a0:	5cc3      	ldrb	r3, [r0, r3]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d020      	beq.n	80025e8 <HAL_TIM_Base_Init+0x50>
  htim->State = HAL_TIM_STATE_BUSY;
 80025a6:	253d      	movs	r5, #61	@ 0x3d
 80025a8:	2302      	movs	r3, #2
 80025aa:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025ac:	0021      	movs	r1, r4
 80025ae:	c901      	ldmia	r1!, {r0}
 80025b0:	f7ff ffac 	bl	800250c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025b4:	2301      	movs	r3, #1
 80025b6:	2248      	movs	r2, #72	@ 0x48
 80025b8:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025ba:	3a0a      	subs	r2, #10
 80025bc:	54a3      	strb	r3, [r4, r2]
 80025be:	3201      	adds	r2, #1
 80025c0:	54a3      	strb	r3, [r4, r2]
 80025c2:	3201      	adds	r2, #1
 80025c4:	54a3      	strb	r3, [r4, r2]
 80025c6:	3201      	adds	r2, #1
 80025c8:	54a3      	strb	r3, [r4, r2]
 80025ca:	3201      	adds	r2, #1
 80025cc:	54a3      	strb	r3, [r4, r2]
 80025ce:	3201      	adds	r2, #1
 80025d0:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025d2:	3201      	adds	r2, #1
 80025d4:	54a3      	strb	r3, [r4, r2]
 80025d6:	3201      	adds	r2, #1
 80025d8:	54a3      	strb	r3, [r4, r2]
 80025da:	3201      	adds	r2, #1
 80025dc:	54a3      	strb	r3, [r4, r2]
 80025de:	3201      	adds	r2, #1
 80025e0:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 80025e2:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 80025e4:	2000      	movs	r0, #0
}
 80025e6:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 80025e8:	333c      	adds	r3, #60	@ 0x3c
 80025ea:	2200      	movs	r2, #0
 80025ec:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 80025ee:	f7fe fcd3 	bl	8000f98 <HAL_TIM_Base_MspInit>
 80025f2:	e7d8      	b.n	80025a6 <HAL_TIM_Base_Init+0xe>
    return HAL_ERROR;
 80025f4:	2001      	movs	r0, #1
 80025f6:	e7f6      	b.n	80025e6 <HAL_TIM_Base_Init+0x4e>

080025f8 <HAL_TIM_OC_Init>:
{
 80025f8:	b570      	push	{r4, r5, r6, lr}
 80025fa:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 80025fc:	d02a      	beq.n	8002654 <HAL_TIM_OC_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 80025fe:	233d      	movs	r3, #61	@ 0x3d
 8002600:	5cc3      	ldrb	r3, [r0, r3]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d020      	beq.n	8002648 <HAL_TIM_OC_Init+0x50>
  htim->State = HAL_TIM_STATE_BUSY;
 8002606:	253d      	movs	r5, #61	@ 0x3d
 8002608:	2302      	movs	r3, #2
 800260a:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800260c:	0021      	movs	r1, r4
 800260e:	c901      	ldmia	r1!, {r0}
 8002610:	f7ff ff7c 	bl	800250c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002614:	2301      	movs	r3, #1
 8002616:	2248      	movs	r2, #72	@ 0x48
 8002618:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800261a:	3a0a      	subs	r2, #10
 800261c:	54a3      	strb	r3, [r4, r2]
 800261e:	3201      	adds	r2, #1
 8002620:	54a3      	strb	r3, [r4, r2]
 8002622:	3201      	adds	r2, #1
 8002624:	54a3      	strb	r3, [r4, r2]
 8002626:	3201      	adds	r2, #1
 8002628:	54a3      	strb	r3, [r4, r2]
 800262a:	3201      	adds	r2, #1
 800262c:	54a3      	strb	r3, [r4, r2]
 800262e:	3201      	adds	r2, #1
 8002630:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002632:	3201      	adds	r2, #1
 8002634:	54a3      	strb	r3, [r4, r2]
 8002636:	3201      	adds	r2, #1
 8002638:	54a3      	strb	r3, [r4, r2]
 800263a:	3201      	adds	r2, #1
 800263c:	54a3      	strb	r3, [r4, r2]
 800263e:	3201      	adds	r2, #1
 8002640:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 8002642:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8002644:	2000      	movs	r0, #0
}
 8002646:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8002648:	333c      	adds	r3, #60	@ 0x3c
 800264a:	2200      	movs	r2, #0
 800264c:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_OC_MspInit(htim);
 800264e:	f7ff fea7 	bl	80023a0 <HAL_TIM_OC_MspInit>
 8002652:	e7d8      	b.n	8002606 <HAL_TIM_OC_Init+0xe>
    return HAL_ERROR;
 8002654:	2001      	movs	r0, #1
 8002656:	e7f6      	b.n	8002646 <HAL_TIM_OC_Init+0x4e>

08002658 <TIM_OC2_SetConfig>:
{
 8002658:	b570      	push	{r4, r5, r6, lr}
  tmpccer = TIMx->CCER;
 800265a:	6a02      	ldr	r2, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800265c:	6a03      	ldr	r3, [r0, #32]
 800265e:	2410      	movs	r4, #16
 8002660:	43a3      	bics	r3, r4
 8002662:	6203      	str	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8002664:	6845      	ldr	r5, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8002666:	6983      	ldr	r3, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002668:	4c14      	ldr	r4, [pc, #80]	@ (80026bc <TIM_OC2_SetConfig+0x64>)
 800266a:	4023      	ands	r3, r4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800266c:	680c      	ldr	r4, [r1, #0]
 800266e:	0224      	lsls	r4, r4, #8
 8002670:	431c      	orrs	r4, r3
  tmpccer &= ~TIM_CCER_CC2P;
 8002672:	2320      	movs	r3, #32
 8002674:	439a      	bics	r2, r3
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002676:	688b      	ldr	r3, [r1, #8]
 8002678:	011b      	lsls	r3, r3, #4
 800267a:	4313      	orrs	r3, r2
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800267c:	4a10      	ldr	r2, [pc, #64]	@ (80026c0 <TIM_OC2_SetConfig+0x68>)
 800267e:	4290      	cmp	r0, r2
 8002680:	d006      	beq.n	8002690 <TIM_OC2_SetConfig+0x38>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002682:	4a10      	ldr	r2, [pc, #64]	@ (80026c4 <TIM_OC2_SetConfig+0x6c>)
 8002684:	4290      	cmp	r0, r2
 8002686:	d00b      	beq.n	80026a0 <TIM_OC2_SetConfig+0x48>
 8002688:	4a0f      	ldr	r2, [pc, #60]	@ (80026c8 <TIM_OC2_SetConfig+0x70>)
 800268a:	4290      	cmp	r0, r2
 800268c:	d110      	bne.n	80026b0 <TIM_OC2_SetConfig+0x58>
 800268e:	e007      	b.n	80026a0 <TIM_OC2_SetConfig+0x48>
    tmpccer &= ~TIM_CCER_CC2NP;
 8002690:	2280      	movs	r2, #128	@ 0x80
 8002692:	4393      	bics	r3, r2
 8002694:	001e      	movs	r6, r3
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002696:	68cb      	ldr	r3, [r1, #12]
 8002698:	011b      	lsls	r3, r3, #4
 800269a:	4333      	orrs	r3, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 800269c:	3a40      	subs	r2, #64	@ 0x40
 800269e:	4393      	bics	r3, r2
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80026a0:	4a0a      	ldr	r2, [pc, #40]	@ (80026cc <TIM_OC2_SetConfig+0x74>)
 80026a2:	4015      	ands	r5, r2
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80026a4:	694a      	ldr	r2, [r1, #20]
 80026a6:	0092      	lsls	r2, r2, #2
 80026a8:	432a      	orrs	r2, r5
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80026aa:	698d      	ldr	r5, [r1, #24]
 80026ac:	00ad      	lsls	r5, r5, #2
 80026ae:	4315      	orrs	r5, r2
  TIMx->CR2 = tmpcr2;
 80026b0:	6045      	str	r5, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80026b2:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80026b4:	684a      	ldr	r2, [r1, #4]
 80026b6:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 80026b8:	6203      	str	r3, [r0, #32]
}
 80026ba:	bd70      	pop	{r4, r5, r6, pc}
 80026bc:	feff8cff 	.word	0xfeff8cff
 80026c0:	40012c00 	.word	0x40012c00
 80026c4:	40014400 	.word	0x40014400
 80026c8:	40014800 	.word	0x40014800
 80026cc:	fffff3ff 	.word	0xfffff3ff

080026d0 <HAL_TIM_OC_ConfigChannel>:
{
 80026d0:	b510      	push	{r4, lr}
 80026d2:	0004      	movs	r4, r0
  __HAL_LOCK(htim);
 80026d4:	233c      	movs	r3, #60	@ 0x3c
 80026d6:	5cc3      	ldrb	r3, [r0, r3]
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d02b      	beq.n	8002734 <HAL_TIM_OC_ConfigChannel+0x64>
 80026dc:	233c      	movs	r3, #60	@ 0x3c
 80026de:	2001      	movs	r0, #1
 80026e0:	54e0      	strb	r0, [r4, r3]
  switch (Channel)
 80026e2:	2a14      	cmp	r2, #20
 80026e4:	d821      	bhi.n	800272a <HAL_TIM_OC_ConfigChannel+0x5a>
 80026e6:	0092      	lsls	r2, r2, #2
 80026e8:	4b13      	ldr	r3, [pc, #76]	@ (8002738 <HAL_TIM_OC_ConfigChannel+0x68>)
 80026ea:	589b      	ldr	r3, [r3, r2]
 80026ec:	469f      	mov	pc, r3
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80026ee:	6820      	ldr	r0, [r4, #0]
 80026f0:	f7ff fcd6 	bl	80020a0 <TIM_OC1_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80026f4:	2000      	movs	r0, #0
      break;
 80026f6:	e019      	b.n	800272c <HAL_TIM_OC_ConfigChannel+0x5c>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80026f8:	6820      	ldr	r0, [r4, #0]
 80026fa:	f7ff ffad 	bl	8002658 <TIM_OC2_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80026fe:	2000      	movs	r0, #0
      break;
 8002700:	e014      	b.n	800272c <HAL_TIM_OC_ConfigChannel+0x5c>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002702:	6820      	ldr	r0, [r4, #0]
 8002704:	f7ff fd0c 	bl	8002120 <TIM_OC3_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8002708:	2000      	movs	r0, #0
      break;
 800270a:	e00f      	b.n	800272c <HAL_TIM_OC_ConfigChannel+0x5c>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800270c:	6820      	ldr	r0, [r4, #0]
 800270e:	f7ff fd49 	bl	80021a4 <TIM_OC4_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8002712:	2000      	movs	r0, #0
      break;
 8002714:	e00a      	b.n	800272c <HAL_TIM_OC_ConfigChannel+0x5c>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002716:	6820      	ldr	r0, [r4, #0]
 8002718:	f7ff fd78 	bl	800220c <TIM_OC5_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800271c:	2000      	movs	r0, #0
      break;
 800271e:	e005      	b.n	800272c <HAL_TIM_OC_ConfigChannel+0x5c>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002720:	6820      	ldr	r0, [r4, #0]
 8002722:	f7ff fda5 	bl	8002270 <TIM_OC6_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8002726:	2000      	movs	r0, #0
      break;
 8002728:	e000      	b.n	800272c <HAL_TIM_OC_ConfigChannel+0x5c>
  switch (Channel)
 800272a:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 800272c:	233c      	movs	r3, #60	@ 0x3c
 800272e:	2200      	movs	r2, #0
 8002730:	54e2      	strb	r2, [r4, r3]
}
 8002732:	bd10      	pop	{r4, pc}
  __HAL_LOCK(htim);
 8002734:	2002      	movs	r0, #2
 8002736:	e7fc      	b.n	8002732 <HAL_TIM_OC_ConfigChannel+0x62>
 8002738:	080040ec 	.word	0x080040ec

0800273c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800273c:	b530      	push	{r4, r5, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800273e:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002740:	4d03      	ldr	r5, [pc, #12]	@ (8002750 <TIM_ETR_SetConfig+0x14>)
 8002742:	402c      	ands	r4, r5

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002744:	021b      	lsls	r3, r3, #8
 8002746:	4313      	orrs	r3, r2
 8002748:	430b      	orrs	r3, r1
 800274a:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800274c:	6083      	str	r3, [r0, #8]
}
 800274e:	bd30      	pop	{r4, r5, pc}
 8002750:	ffff00ff 	.word	0xffff00ff

08002754 <HAL_TIM_ConfigClockSource>:
{
 8002754:	b510      	push	{r4, lr}
 8002756:	0004      	movs	r4, r0
 8002758:	000b      	movs	r3, r1
  __HAL_LOCK(htim);
 800275a:	223c      	movs	r2, #60	@ 0x3c
 800275c:	5c82      	ldrb	r2, [r0, r2]
 800275e:	2a01      	cmp	r2, #1
 8002760:	d100      	bne.n	8002764 <HAL_TIM_ConfigClockSource+0x10>
 8002762:	e077      	b.n	8002854 <HAL_TIM_ConfigClockSource+0x100>
 8002764:	223c      	movs	r2, #60	@ 0x3c
 8002766:	2101      	movs	r1, #1
 8002768:	5481      	strb	r1, [r0, r2]
  htim->State = HAL_TIM_STATE_BUSY;
 800276a:	3201      	adds	r2, #1
 800276c:	3101      	adds	r1, #1
 800276e:	5481      	strb	r1, [r0, r2]
  tmpsmcr = htim->Instance->SMCR;
 8002770:	6801      	ldr	r1, [r0, #0]
 8002772:	688a      	ldr	r2, [r1, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002774:	4838      	ldr	r0, [pc, #224]	@ (8002858 <HAL_TIM_ConfigClockSource+0x104>)
 8002776:	4002      	ands	r2, r0
  htim->Instance->SMCR = tmpsmcr;
 8002778:	608a      	str	r2, [r1, #8]
  switch (sClockSourceConfig->ClockSource)
 800277a:	6819      	ldr	r1, [r3, #0]
 800277c:	2960      	cmp	r1, #96	@ 0x60
 800277e:	d04f      	beq.n	8002820 <HAL_TIM_ConfigClockSource+0xcc>
 8002780:	d823      	bhi.n	80027ca <HAL_TIM_ConfigClockSource+0x76>
 8002782:	2940      	cmp	r1, #64	@ 0x40
 8002784:	d057      	beq.n	8002836 <HAL_TIM_ConfigClockSource+0xe2>
 8002786:	d811      	bhi.n	80027ac <HAL_TIM_ConfigClockSource+0x58>
 8002788:	2920      	cmp	r1, #32
 800278a:	d004      	beq.n	8002796 <HAL_TIM_ConfigClockSource+0x42>
 800278c:	d80a      	bhi.n	80027a4 <HAL_TIM_ConfigClockSource+0x50>
 800278e:	2900      	cmp	r1, #0
 8002790:	d001      	beq.n	8002796 <HAL_TIM_ConfigClockSource+0x42>
 8002792:	2910      	cmp	r1, #16
 8002794:	d104      	bne.n	80027a0 <HAL_TIM_ConfigClockSource+0x4c>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002796:	6820      	ldr	r0, [r4, #0]
 8002798:	f7ff fdc4 	bl	8002324 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800279c:	2000      	movs	r0, #0
      break;
 800279e:	e02a      	b.n	80027f6 <HAL_TIM_ConfigClockSource+0xa2>
      status = HAL_ERROR;
 80027a0:	2001      	movs	r0, #1
 80027a2:	e028      	b.n	80027f6 <HAL_TIM_ConfigClockSource+0xa2>
  switch (sClockSourceConfig->ClockSource)
 80027a4:	2930      	cmp	r1, #48	@ 0x30
 80027a6:	d0f6      	beq.n	8002796 <HAL_TIM_ConfigClockSource+0x42>
      status = HAL_ERROR;
 80027a8:	2001      	movs	r0, #1
 80027aa:	e024      	b.n	80027f6 <HAL_TIM_ConfigClockSource+0xa2>
  switch (sClockSourceConfig->ClockSource)
 80027ac:	2950      	cmp	r1, #80	@ 0x50
 80027ae:	d10a      	bne.n	80027c6 <HAL_TIM_ConfigClockSource+0x72>
                               sClockSourceConfig->ClockPolarity,
 80027b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80027b2:	68da      	ldr	r2, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80027b4:	6820      	ldr	r0, [r4, #0]
 80027b6:	f7ff fd8f 	bl	80022d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80027ba:	6820      	ldr	r0, [r4, #0]
 80027bc:	2150      	movs	r1, #80	@ 0x50
 80027be:	f7ff fdb1 	bl	8002324 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80027c2:	2000      	movs	r0, #0
      break;
 80027c4:	e017      	b.n	80027f6 <HAL_TIM_ConfigClockSource+0xa2>
      status = HAL_ERROR;
 80027c6:	2001      	movs	r0, #1
 80027c8:	e015      	b.n	80027f6 <HAL_TIM_ConfigClockSource+0xa2>
  switch (sClockSourceConfig->ClockSource)
 80027ca:	2280      	movs	r2, #128	@ 0x80
 80027cc:	0152      	lsls	r2, r2, #5
 80027ce:	4291      	cmp	r1, r2
 80027d0:	d03c      	beq.n	800284c <HAL_TIM_ConfigClockSource+0xf8>
 80027d2:	2280      	movs	r2, #128	@ 0x80
 80027d4:	0192      	lsls	r2, r2, #6
 80027d6:	4291      	cmp	r1, r2
 80027d8:	d014      	beq.n	8002804 <HAL_TIM_ConfigClockSource+0xb0>
 80027da:	2970      	cmp	r1, #112	@ 0x70
 80027dc:	d138      	bne.n	8002850 <HAL_TIM_ConfigClockSource+0xfc>
                        sClockSourceConfig->ClockPrescaler,
 80027de:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80027e0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80027e2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80027e4:	6820      	ldr	r0, [r4, #0]
 80027e6:	f7ff ffa9 	bl	800273c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80027ea:	6822      	ldr	r2, [r4, #0]
 80027ec:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80027ee:	2177      	movs	r1, #119	@ 0x77
 80027f0:	430b      	orrs	r3, r1
      htim->Instance->SMCR = tmpsmcr;
 80027f2:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80027f4:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80027f6:	233d      	movs	r3, #61	@ 0x3d
 80027f8:	2201      	movs	r2, #1
 80027fa:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(htim);
 80027fc:	3b01      	subs	r3, #1
 80027fe:	2200      	movs	r2, #0
 8002800:	54e2      	strb	r2, [r4, r3]
}
 8002802:	bd10      	pop	{r4, pc}
                        sClockSourceConfig->ClockPrescaler,
 8002804:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002806:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002808:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800280a:	6820      	ldr	r0, [r4, #0]
 800280c:	f7ff ff96 	bl	800273c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002810:	6822      	ldr	r2, [r4, #0]
 8002812:	6891      	ldr	r1, [r2, #8]
 8002814:	2380      	movs	r3, #128	@ 0x80
 8002816:	01db      	lsls	r3, r3, #7
 8002818:	430b      	orrs	r3, r1
 800281a:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800281c:	2000      	movs	r0, #0
      break;
 800281e:	e7ea      	b.n	80027f6 <HAL_TIM_ConfigClockSource+0xa2>
                               sClockSourceConfig->ClockPolarity,
 8002820:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002822:	68da      	ldr	r2, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002824:	6820      	ldr	r0, [r4, #0]
 8002826:	f7ff fd69 	bl	80022fc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800282a:	6820      	ldr	r0, [r4, #0]
 800282c:	2160      	movs	r1, #96	@ 0x60
 800282e:	f7ff fd79 	bl	8002324 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8002832:	2000      	movs	r0, #0
      break;
 8002834:	e7df      	b.n	80027f6 <HAL_TIM_ConfigClockSource+0xa2>
                               sClockSourceConfig->ClockPolarity,
 8002836:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002838:	68da      	ldr	r2, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800283a:	6820      	ldr	r0, [r4, #0]
 800283c:	f7ff fd4c 	bl	80022d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002840:	6820      	ldr	r0, [r4, #0]
 8002842:	2140      	movs	r1, #64	@ 0x40
 8002844:	f7ff fd6e 	bl	8002324 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8002848:	2000      	movs	r0, #0
      break;
 800284a:	e7d4      	b.n	80027f6 <HAL_TIM_ConfigClockSource+0xa2>
  switch (sClockSourceConfig->ClockSource)
 800284c:	2000      	movs	r0, #0
 800284e:	e7d2      	b.n	80027f6 <HAL_TIM_ConfigClockSource+0xa2>
      status = HAL_ERROR;
 8002850:	2001      	movs	r0, #1
 8002852:	e7d0      	b.n	80027f6 <HAL_TIM_ConfigClockSource+0xa2>
  __HAL_LOCK(htim);
 8002854:	2002      	movs	r0, #2
 8002856:	e7d4      	b.n	8002802 <HAL_TIM_ConfigClockSource+0xae>
 8002858:	ffce0088 	.word	0xffce0088

0800285c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800285c:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800285e:	231f      	movs	r3, #31
 8002860:	4019      	ands	r1, r3
 8002862:	2401      	movs	r4, #1
 8002864:	408c      	lsls	r4, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002866:	6a03      	ldr	r3, [r0, #32]
 8002868:	43a3      	bics	r3, r4
 800286a:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800286c:	6a03      	ldr	r3, [r0, #32]
 800286e:	408a      	lsls	r2, r1
 8002870:	4313      	orrs	r3, r2
 8002872:	6203      	str	r3, [r0, #32]
}
 8002874:	bd10      	pop	{r4, pc}
	...

08002878 <HAL_TIM_PWM_Start>:
{
 8002878:	b510      	push	{r4, lr}
 800287a:	0004      	movs	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800287c:	2910      	cmp	r1, #16
 800287e:	d82d      	bhi.n	80028dc <HAL_TIM_PWM_Start+0x64>
 8002880:	008b      	lsls	r3, r1, #2
 8002882:	4a3f      	ldr	r2, [pc, #252]	@ (8002980 <HAL_TIM_PWM_Start+0x108>)
 8002884:	58d3      	ldr	r3, [r2, r3]
 8002886:	469f      	mov	pc, r3
 8002888:	233e      	movs	r3, #62	@ 0x3e
 800288a:	5cc3      	ldrb	r3, [r0, r3]
 800288c:	3b01      	subs	r3, #1
 800288e:	1e5a      	subs	r2, r3, #1
 8002890:	4193      	sbcs	r3, r2
 8002892:	b2db      	uxtb	r3, r3
 8002894:	2b00      	cmp	r3, #0
 8002896:	d16d      	bne.n	8002974 <HAL_TIM_PWM_Start+0xfc>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002898:	2910      	cmp	r1, #16
 800289a:	d859      	bhi.n	8002950 <HAL_TIM_PWM_Start+0xd8>
 800289c:	008b      	lsls	r3, r1, #2
 800289e:	4a39      	ldr	r2, [pc, #228]	@ (8002984 <HAL_TIM_PWM_Start+0x10c>)
 80028a0:	58d3      	ldr	r3, [r2, r3]
 80028a2:	469f      	mov	pc, r3
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80028a4:	233f      	movs	r3, #63	@ 0x3f
 80028a6:	5cc3      	ldrb	r3, [r0, r3]
 80028a8:	3b01      	subs	r3, #1
 80028aa:	1e5a      	subs	r2, r3, #1
 80028ac:	4193      	sbcs	r3, r2
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	e7f0      	b.n	8002894 <HAL_TIM_PWM_Start+0x1c>
 80028b2:	2340      	movs	r3, #64	@ 0x40
 80028b4:	5cc3      	ldrb	r3, [r0, r3]
 80028b6:	3b01      	subs	r3, #1
 80028b8:	1e5a      	subs	r2, r3, #1
 80028ba:	4193      	sbcs	r3, r2
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	e7e9      	b.n	8002894 <HAL_TIM_PWM_Start+0x1c>
 80028c0:	2341      	movs	r3, #65	@ 0x41
 80028c2:	5cc3      	ldrb	r3, [r0, r3]
 80028c4:	3b01      	subs	r3, #1
 80028c6:	1e5a      	subs	r2, r3, #1
 80028c8:	4193      	sbcs	r3, r2
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	e7e2      	b.n	8002894 <HAL_TIM_PWM_Start+0x1c>
 80028ce:	2342      	movs	r3, #66	@ 0x42
 80028d0:	5cc3      	ldrb	r3, [r0, r3]
 80028d2:	3b01      	subs	r3, #1
 80028d4:	1e5a      	subs	r2, r3, #1
 80028d6:	4193      	sbcs	r3, r2
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	e7db      	b.n	8002894 <HAL_TIM_PWM_Start+0x1c>
 80028dc:	2343      	movs	r3, #67	@ 0x43
 80028de:	5ce3      	ldrb	r3, [r4, r3]
 80028e0:	3b01      	subs	r3, #1
 80028e2:	1e5a      	subs	r2, r3, #1
 80028e4:	4193      	sbcs	r3, r2
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	e7d4      	b.n	8002894 <HAL_TIM_PWM_Start+0x1c>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80028ea:	233e      	movs	r3, #62	@ 0x3e
 80028ec:	2202      	movs	r2, #2
 80028ee:	54e2      	strb	r2, [r4, r3]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80028f0:	6820      	ldr	r0, [r4, #0]
 80028f2:	2201      	movs	r2, #1
 80028f4:	f7ff ffb2 	bl	800285c <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80028f8:	6823      	ldr	r3, [r4, #0]
 80028fa:	4a23      	ldr	r2, [pc, #140]	@ (8002988 <HAL_TIM_PWM_Start+0x110>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d005      	beq.n	800290c <HAL_TIM_PWM_Start+0x94>
 8002900:	4a22      	ldr	r2, [pc, #136]	@ (800298c <HAL_TIM_PWM_Start+0x114>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d002      	beq.n	800290c <HAL_TIM_PWM_Start+0x94>
 8002906:	4a22      	ldr	r2, [pc, #136]	@ (8002990 <HAL_TIM_PWM_Start+0x118>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d104      	bne.n	8002916 <HAL_TIM_PWM_Start+0x9e>
    __HAL_TIM_MOE_ENABLE(htim);
 800290c:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800290e:	2280      	movs	r2, #128	@ 0x80
 8002910:	0212      	lsls	r2, r2, #8
 8002912:	430a      	orrs	r2, r1
 8002914:	645a      	str	r2, [r3, #68]	@ 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002916:	6823      	ldr	r3, [r4, #0]
 8002918:	4a1b      	ldr	r2, [pc, #108]	@ (8002988 <HAL_TIM_PWM_Start+0x110>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d01c      	beq.n	8002958 <HAL_TIM_PWM_Start+0xe0>
 800291e:	4a1d      	ldr	r2, [pc, #116]	@ (8002994 <HAL_TIM_PWM_Start+0x11c>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d019      	beq.n	8002958 <HAL_TIM_PWM_Start+0xe0>
    __HAL_TIM_ENABLE(htim);
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	2101      	movs	r1, #1
 8002928:	430a      	orrs	r2, r1
 800292a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800292c:	2000      	movs	r0, #0
 800292e:	e022      	b.n	8002976 <HAL_TIM_PWM_Start+0xfe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002930:	233f      	movs	r3, #63	@ 0x3f
 8002932:	2202      	movs	r2, #2
 8002934:	54e2      	strb	r2, [r4, r3]
 8002936:	e7db      	b.n	80028f0 <HAL_TIM_PWM_Start+0x78>
 8002938:	2340      	movs	r3, #64	@ 0x40
 800293a:	2202      	movs	r2, #2
 800293c:	54e2      	strb	r2, [r4, r3]
 800293e:	e7d7      	b.n	80028f0 <HAL_TIM_PWM_Start+0x78>
 8002940:	2341      	movs	r3, #65	@ 0x41
 8002942:	2202      	movs	r2, #2
 8002944:	54e2      	strb	r2, [r4, r3]
 8002946:	e7d3      	b.n	80028f0 <HAL_TIM_PWM_Start+0x78>
 8002948:	2342      	movs	r3, #66	@ 0x42
 800294a:	2202      	movs	r2, #2
 800294c:	54e2      	strb	r2, [r4, r3]
 800294e:	e7cf      	b.n	80028f0 <HAL_TIM_PWM_Start+0x78>
 8002950:	2343      	movs	r3, #67	@ 0x43
 8002952:	2202      	movs	r2, #2
 8002954:	54e2      	strb	r2, [r4, r3]
 8002956:	e7cb      	b.n	80028f0 <HAL_TIM_PWM_Start+0x78>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002958:	689a      	ldr	r2, [r3, #8]
 800295a:	490f      	ldr	r1, [pc, #60]	@ (8002998 <HAL_TIM_PWM_Start+0x120>)
 800295c:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800295e:	2a06      	cmp	r2, #6
 8002960:	d00a      	beq.n	8002978 <HAL_TIM_PWM_Start+0x100>
 8002962:	3907      	subs	r1, #7
 8002964:	428a      	cmp	r2, r1
 8002966:	d009      	beq.n	800297c <HAL_TIM_PWM_Start+0x104>
      __HAL_TIM_ENABLE(htim);
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	2101      	movs	r1, #1
 800296c:	430a      	orrs	r2, r1
 800296e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002970:	2000      	movs	r0, #0
 8002972:	e000      	b.n	8002976 <HAL_TIM_PWM_Start+0xfe>
    return HAL_ERROR;
 8002974:	2001      	movs	r0, #1
}
 8002976:	bd10      	pop	{r4, pc}
  return HAL_OK;
 8002978:	2000      	movs	r0, #0
 800297a:	e7fc      	b.n	8002976 <HAL_TIM_PWM_Start+0xfe>
 800297c:	2000      	movs	r0, #0
 800297e:	e7fa      	b.n	8002976 <HAL_TIM_PWM_Start+0xfe>
 8002980:	08004140 	.word	0x08004140
 8002984:	08004184 	.word	0x08004184
 8002988:	40012c00 	.word	0x40012c00
 800298c:	40014400 	.word	0x40014400
 8002990:	40014800 	.word	0x40014800
 8002994:	40000400 	.word	0x40000400
 8002998:	00010007 	.word	0x00010007

0800299c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800299c:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800299e:	233c      	movs	r3, #60	@ 0x3c
 80029a0:	5cc3      	ldrb	r3, [r0, r3]
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d029      	beq.n	80029fa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 80029a6:	233c      	movs	r3, #60	@ 0x3c
 80029a8:	2201      	movs	r2, #1
 80029aa:	54c2      	strb	r2, [r0, r3]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029ac:	3301      	adds	r3, #1
 80029ae:	3201      	adds	r2, #1
 80029b0:	54c2      	strb	r2, [r0, r3]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80029b2:	6802      	ldr	r2, [r0, #0]
 80029b4:	6853      	ldr	r3, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80029b6:	6895      	ldr	r5, [r2, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80029b8:	4c11      	ldr	r4, [pc, #68]	@ (8002a00 <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 80029ba:	42a2      	cmp	r2, r4
 80029bc:	d018      	beq.n	80029f0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80029be:	2470      	movs	r4, #112	@ 0x70
 80029c0:	43a3      	bics	r3, r4
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80029c2:	680c      	ldr	r4, [r1, #0]
 80029c4:	4323      	orrs	r3, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80029c6:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029c8:	6803      	ldr	r3, [r0, #0]
 80029ca:	4a0d      	ldr	r2, [pc, #52]	@ (8002a00 <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d002      	beq.n	80029d6 <HAL_TIMEx_MasterConfigSynchronization+0x3a>
 80029d0:	4a0c      	ldr	r2, [pc, #48]	@ (8002a04 <HAL_TIMEx_MasterConfigSynchronization+0x68>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d104      	bne.n	80029e0 <HAL_TIMEx_MasterConfigSynchronization+0x44>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80029d6:	2280      	movs	r2, #128	@ 0x80
 80029d8:	4395      	bics	r5, r2
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80029da:	688a      	ldr	r2, [r1, #8]
 80029dc:	432a      	orrs	r2, r5

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80029de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80029e0:	233d      	movs	r3, #61	@ 0x3d
 80029e2:	2201      	movs	r2, #1
 80029e4:	54c2      	strb	r2, [r0, r3]

  __HAL_UNLOCK(htim);
 80029e6:	3b01      	subs	r3, #1
 80029e8:	2200      	movs	r2, #0
 80029ea:	54c2      	strb	r2, [r0, r3]

  return HAL_OK;
 80029ec:	2000      	movs	r0, #0
}
 80029ee:	bd30      	pop	{r4, r5, pc}
    tmpcr2 &= ~TIM_CR2_MMS2;
 80029f0:	4c05      	ldr	r4, [pc, #20]	@ (8002a08 <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
 80029f2:	4023      	ands	r3, r4
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80029f4:	684c      	ldr	r4, [r1, #4]
 80029f6:	4323      	orrs	r3, r4
 80029f8:	e7e1      	b.n	80029be <HAL_TIMEx_MasterConfigSynchronization+0x22>
  __HAL_LOCK(htim);
 80029fa:	2002      	movs	r0, #2
 80029fc:	e7f7      	b.n	80029ee <HAL_TIMEx_MasterConfigSynchronization+0x52>
 80029fe:	46c0      	nop			@ (mov r8, r8)
 8002a00:	40012c00 	.word	0x40012c00
 8002a04:	40000400 	.word	0x40000400
 8002a08:	ff0fffff 	.word	0xff0fffff

08002a0c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002a0c:	b510      	push	{r4, lr}
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a0e:	233c      	movs	r3, #60	@ 0x3c
 8002a10:	5cc3      	ldrb	r3, [r0, r3]
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d040      	beq.n	8002a98 <HAL_TIMEx_ConfigBreakDeadTime+0x8c>
 8002a16:	233c      	movs	r3, #60	@ 0x3c
 8002a18:	2201      	movs	r2, #1
 8002a1a:	54c2      	strb	r2, [r0, r3]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002a1c:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002a1e:	4a1f      	ldr	r2, [pc, #124]	@ (8002a9c <HAL_TIMEx_ConfigBreakDeadTime+0x90>)
 8002a20:	4013      	ands	r3, r2
 8002a22:	688a      	ldr	r2, [r1, #8]
 8002a24:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002a26:	4a1e      	ldr	r2, [pc, #120]	@ (8002aa0 <HAL_TIMEx_ConfigBreakDeadTime+0x94>)
 8002a28:	4013      	ands	r3, r2
 8002a2a:	684a      	ldr	r2, [r1, #4]
 8002a2c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002a2e:	4a1d      	ldr	r2, [pc, #116]	@ (8002aa4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>)
 8002a30:	4013      	ands	r3, r2
 8002a32:	680a      	ldr	r2, [r1, #0]
 8002a34:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002a36:	4a1c      	ldr	r2, [pc, #112]	@ (8002aa8 <HAL_TIMEx_ConfigBreakDeadTime+0x9c>)
 8002a38:	4013      	ands	r3, r2
 8002a3a:	690a      	ldr	r2, [r1, #16]
 8002a3c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002a3e:	4a1b      	ldr	r2, [pc, #108]	@ (8002aac <HAL_TIMEx_ConfigBreakDeadTime+0xa0>)
 8002a40:	4013      	ands	r3, r2
 8002a42:	694a      	ldr	r2, [r1, #20]
 8002a44:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002a46:	4a1a      	ldr	r2, [pc, #104]	@ (8002ab0 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8002a48:	4013      	ands	r3, r2
 8002a4a:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8002a4c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8002a4e:	4a19      	ldr	r2, [pc, #100]	@ (8002ab4 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8002a50:	4013      	ands	r3, r2
 8002a52:	698a      	ldr	r2, [r1, #24]
 8002a54:	0412      	lsls	r2, r2, #16
 8002a56:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8002a58:	4a17      	ldr	r2, [pc, #92]	@ (8002ab8 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	69ca      	ldr	r2, [r1, #28]
 8002a5e:	4313      	orrs	r3, r2

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8002a60:	6802      	ldr	r2, [r0, #0]
 8002a62:	4c16      	ldr	r4, [pc, #88]	@ (8002abc <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8002a64:	42a2      	cmp	r2, r4
 8002a66:	d005      	beq.n	8002a74 <HAL_TIMEx_ConfigBreakDeadTime+0x68>
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002a68:	6453      	str	r3, [r2, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8002a6a:	233c      	movs	r3, #60	@ 0x3c
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	54c2      	strb	r2, [r0, r3]

  return HAL_OK;
 8002a70:	2000      	movs	r0, #0
}
 8002a72:	bd10      	pop	{r4, pc}
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8002a74:	4c12      	ldr	r4, [pc, #72]	@ (8002ac0 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8002a76:	4023      	ands	r3, r4
 8002a78:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 8002a7a:	0524      	lsls	r4, r4, #20
 8002a7c:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8002a7e:	4c11      	ldr	r4, [pc, #68]	@ (8002ac4 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8002a80:	4023      	ands	r3, r4
 8002a82:	6a0c      	ldr	r4, [r1, #32]
 8002a84:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8002a86:	4c10      	ldr	r4, [pc, #64]	@ (8002ac8 <HAL_TIMEx_ConfigBreakDeadTime+0xbc>)
 8002a88:	4023      	ands	r3, r4
 8002a8a:	6a4c      	ldr	r4, [r1, #36]	@ 0x24
 8002a8c:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8002a8e:	4c0f      	ldr	r4, [pc, #60]	@ (8002acc <HAL_TIMEx_ConfigBreakDeadTime+0xc0>)
 8002a90:	4023      	ands	r3, r4
 8002a92:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
 8002a94:	430b      	orrs	r3, r1
 8002a96:	e7e7      	b.n	8002a68 <HAL_TIMEx_ConfigBreakDeadTime+0x5c>
  __HAL_LOCK(htim);
 8002a98:	2002      	movs	r0, #2
 8002a9a:	e7ea      	b.n	8002a72 <HAL_TIMEx_ConfigBreakDeadTime+0x66>
 8002a9c:	fffffcff 	.word	0xfffffcff
 8002aa0:	fffffbff 	.word	0xfffffbff
 8002aa4:	fffff7ff 	.word	0xfffff7ff
 8002aa8:	ffffefff 	.word	0xffffefff
 8002aac:	ffffdfff 	.word	0xffffdfff
 8002ab0:	ffffbfff 	.word	0xffffbfff
 8002ab4:	fff0ffff 	.word	0xfff0ffff
 8002ab8:	efffffff 	.word	0xefffffff
 8002abc:	40012c00 	.word	0x40012c00
 8002ac0:	ff0fffff 	.word	0xff0fffff
 8002ac4:	feffffff 	.word	0xfeffffff
 8002ac8:	fdffffff 	.word	0xfdffffff
 8002acc:	dfffffff 	.word	0xdfffffff

08002ad0 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ad0:	4770      	bx	lr

08002ad2 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ad2:	4770      	bx	lr

08002ad4 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002ad4:	4770      	bx	lr
	...

08002ad8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002ad8:	b530      	push	{r4, r5, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002ada:	f3ef 8410 	mrs	r4, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ade:	2201      	movs	r2, #1
 8002ae0:	f382 8810 	msr	PRIMASK, r2
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8002ae4:	6801      	ldr	r1, [r0, #0]
 8002ae6:	680b      	ldr	r3, [r1, #0]
 8002ae8:	25c0      	movs	r5, #192	@ 0xc0
 8002aea:	43ab      	bics	r3, r5
 8002aec:	600b      	str	r3, [r1, #0]
 8002aee:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002af2:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002af6:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8002afa:	6802      	ldr	r2, [r0, #0]
 8002afc:	6893      	ldr	r3, [r2, #8]
 8002afe:	4c04      	ldr	r4, [pc, #16]	@ (8002b10 <UART_EndTxTransfer+0x38>)
 8002b00:	4023      	ands	r3, r4
 8002b02:	6093      	str	r3, [r2, #8]
 8002b04:	f381 8810 	msr	PRIMASK, r1

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002b08:	2388      	movs	r3, #136	@ 0x88
 8002b0a:	2220      	movs	r2, #32
 8002b0c:	50c2      	str	r2, [r0, r3]
}
 8002b0e:	bd30      	pop	{r4, r5, pc}
 8002b10:	ff7fffff 	.word	0xff7fffff

08002b14 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002b14:	b530      	push	{r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002b16:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002b20:	6801      	ldr	r1, [r0, #0]
 8002b22:	680b      	ldr	r3, [r1, #0]
 8002b24:	4d12      	ldr	r5, [pc, #72]	@ (8002b70 <UART_EndRxTransfer+0x5c>)
 8002b26:	402b      	ands	r3, r5
 8002b28:	600b      	str	r3, [r1, #0]
 8002b2a:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002b2e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b32:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002b36:	6802      	ldr	r2, [r0, #0]
 8002b38:	6893      	ldr	r3, [r2, #8]
 8002b3a:	4c0e      	ldr	r4, [pc, #56]	@ (8002b74 <UART_EndRxTransfer+0x60>)
 8002b3c:	4023      	ands	r3, r4
 8002b3e:	6093      	str	r3, [r2, #8]
 8002b40:	f381 8810 	msr	PRIMASK, r1

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b44:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d006      	beq.n	8002b58 <UART_EndRxTransfer+0x44>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002b4a:	238c      	movs	r3, #140	@ 0x8c
 8002b4c:	2220      	movs	r2, #32
 8002b4e:	50c2      	str	r2, [r0, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b50:	2300      	movs	r3, #0
 8002b52:	66c3      	str	r3, [r0, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002b54:	6743      	str	r3, [r0, #116]	@ 0x74
}
 8002b56:	bd30      	pop	{r4, r5, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002b58:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b5c:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b60:	6802      	ldr	r2, [r0, #0]
 8002b62:	6813      	ldr	r3, [r2, #0]
 8002b64:	2410      	movs	r4, #16
 8002b66:	43a3      	bics	r3, r4
 8002b68:	6013      	str	r3, [r2, #0]
 8002b6a:	f381 8810 	msr	PRIMASK, r1
}
 8002b6e:	e7ec      	b.n	8002b4a <UART_EndRxTransfer+0x36>
 8002b70:	fffffedf 	.word	0xfffffedf
 8002b74:	effffffe 	.word	0xeffffffe

08002b78 <HAL_UART_RxCpltCallback>:
}
 8002b78:	4770      	bx	lr

08002b7a <HAL_UART_RxHalfCpltCallback>:
}
 8002b7a:	4770      	bx	lr

08002b7c <HAL_UART_ErrorCallback>:
}
 8002b7c:	4770      	bx	lr

08002b7e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002b7e:	b570      	push	{r4, r5, r6, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002b80:	6a84      	ldr	r4, [r0, #40]	@ 0x28

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8002b82:	2388      	movs	r3, #136	@ 0x88
 8002b84:	58e2      	ldr	r2, [r4, r3]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8002b86:	3304      	adds	r3, #4
 8002b88:	58e5      	ldr	r5, [r4, r3]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8002b8a:	6823      	ldr	r3, [r4, #0]
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	061b      	lsls	r3, r3, #24
 8002b90:	d501      	bpl.n	8002b96 <UART_DMAError+0x18>
 8002b92:	2a21      	cmp	r2, #33	@ 0x21
 8002b94:	d00e      	beq.n	8002bb4 <UART_DMAError+0x36>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8002b96:	6823      	ldr	r3, [r4, #0]
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	065b      	lsls	r3, r3, #25
 8002b9c:	d501      	bpl.n	8002ba2 <UART_DMAError+0x24>
 8002b9e:	2d22      	cmp	r5, #34	@ 0x22
 8002ba0:	d00f      	beq.n	8002bc2 <UART_DMAError+0x44>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002ba2:	2290      	movs	r2, #144	@ 0x90
 8002ba4:	58a3      	ldr	r3, [r4, r2]
 8002ba6:	2110      	movs	r1, #16
 8002ba8:	430b      	orrs	r3, r1
 8002baa:	50a3      	str	r3, [r4, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002bac:	0020      	movs	r0, r4
 8002bae:	f7ff ffe5 	bl	8002b7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002bb2:	bd70      	pop	{r4, r5, r6, pc}
    huart->TxXferCount = 0U;
 8002bb4:	2356      	movs	r3, #86	@ 0x56
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	52e2      	strh	r2, [r4, r3]
    UART_EndTxTransfer(huart);
 8002bba:	0020      	movs	r0, r4
 8002bbc:	f7ff ff8c 	bl	8002ad8 <UART_EndTxTransfer>
 8002bc0:	e7e9      	b.n	8002b96 <UART_DMAError+0x18>
    huart->RxXferCount = 0U;
 8002bc2:	235e      	movs	r3, #94	@ 0x5e
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	52e2      	strh	r2, [r4, r3]
    UART_EndRxTransfer(huart);
 8002bc8:	0020      	movs	r0, r4
 8002bca:	f7ff ffa3 	bl	8002b14 <UART_EndRxTransfer>
 8002bce:	e7e8      	b.n	8002ba2 <UART_DMAError+0x24>

08002bd0 <HAL_UARTEx_RxEventCallback>:
}
 8002bd0:	4770      	bx	lr

08002bd2 <UART_DMARxHalfCplt>:
{
 8002bd2:	b510      	push	{r4, lr}
 8002bd4:	0003      	movs	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002bd6:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8002bd8:	2201      	movs	r2, #1
 8002bda:	6702      	str	r2, [r0, #112]	@ 0x70
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002bdc:	6ec2      	ldr	r2, [r0, #108]	@ 0x6c
 8002bde:	2a01      	cmp	r2, #1
 8002be0:	d111      	bne.n	8002c06 <UART_DMARxHalfCplt+0x34>
    huart->RxXferCount = huart->RxXferSize / 2U;
 8002be2:	325b      	adds	r2, #91	@ 0x5b
 8002be4:	5a81      	ldrh	r1, [r0, r2]
 8002be6:	084c      	lsrs	r4, r1, #1
 8002be8:	3202      	adds	r2, #2
 8002bea:	5284      	strh	r4, [r0, r2]
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	b29b      	uxth	r3, r3
    if (nb_remaining_rx_data <= huart->RxXferSize)
 8002bf2:	4299      	cmp	r1, r3
 8002bf4:	d300      	bcc.n	8002bf8 <UART_DMARxHalfCplt+0x26>
      huart->RxXferCount = nb_remaining_rx_data;
 8002bf6:	5283      	strh	r3, [r0, r2]
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002bf8:	235e      	movs	r3, #94	@ 0x5e
 8002bfa:	5ac3      	ldrh	r3, [r0, r3]
 8002bfc:	1ac9      	subs	r1, r1, r3
 8002bfe:	b289      	uxth	r1, r1
 8002c00:	f7ff ffe6 	bl	8002bd0 <HAL_UARTEx_RxEventCallback>
}
 8002c04:	bd10      	pop	{r4, pc}
    HAL_UART_RxHalfCpltCallback(huart);
 8002c06:	f7ff ffb8 	bl	8002b7a <HAL_UART_RxHalfCpltCallback>
}
 8002c0a:	e7fb      	b.n	8002c04 <UART_DMARxHalfCplt+0x32>

08002c0c <UART_DMAReceiveCplt>:
{
 8002c0c:	b570      	push	{r4, r5, r6, lr}
 8002c0e:	0003      	movs	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002c10:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	6812      	ldr	r2, [r2, #0]
 8002c16:	0692      	lsls	r2, r2, #26
 8002c18:	d429      	bmi.n	8002c6e <UART_DMAReceiveCplt+0x62>
    huart->RxXferCount = 0U;
 8002c1a:	225e      	movs	r2, #94	@ 0x5e
 8002c1c:	2100      	movs	r1, #0
 8002c1e:	5281      	strh	r1, [r0, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002c20:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c24:	3a5d      	subs	r2, #93	@ 0x5d
 8002c26:	f382 8810 	msr	PRIMASK, r2
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c2a:	6804      	ldr	r4, [r0, #0]
 8002c2c:	6821      	ldr	r1, [r4, #0]
 8002c2e:	4e23      	ldr	r6, [pc, #140]	@ (8002cbc <UART_DMAReceiveCplt+0xb0>)
 8002c30:	4031      	ands	r1, r6
 8002c32:	6021      	str	r1, [r4, #0]
 8002c34:	f385 8810 	msr	PRIMASK, r5
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002c38:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c3c:	f382 8810 	msr	PRIMASK, r2
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c40:	6804      	ldr	r4, [r0, #0]
 8002c42:	68a1      	ldr	r1, [r4, #8]
 8002c44:	4391      	bics	r1, r2
 8002c46:	60a1      	str	r1, [r4, #8]
 8002c48:	f385 8810 	msr	PRIMASK, r5
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002c4c:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c50:	f382 8810 	msr	PRIMASK, r2
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c54:	6801      	ldr	r1, [r0, #0]
 8002c56:	688a      	ldr	r2, [r1, #8]
 8002c58:	2540      	movs	r5, #64	@ 0x40
 8002c5a:	43aa      	bics	r2, r5
 8002c5c:	608a      	str	r2, [r1, #8]
 8002c5e:	f384 8810 	msr	PRIMASK, r4
    huart->RxState = HAL_UART_STATE_READY;
 8002c62:	228c      	movs	r2, #140	@ 0x8c
 8002c64:	2120      	movs	r1, #32
 8002c66:	5081      	str	r1, [r0, r2]
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c68:	6ec2      	ldr	r2, [r0, #108]	@ 0x6c
 8002c6a:	2a01      	cmp	r2, #1
 8002c6c:	d017      	beq.n	8002c9e <UART_DMAReceiveCplt+0x92>
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002c6e:	2200      	movs	r2, #0
 8002c70:	6702      	str	r2, [r0, #112]	@ 0x70
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c72:	6ec2      	ldr	r2, [r0, #108]	@ 0x6c
 8002c74:	2a01      	cmp	r2, #1
 8002c76:	d11e      	bne.n	8002cb6 <UART_DMAReceiveCplt+0xaa>
    huart->RxXferCount = 0;
 8002c78:	325d      	adds	r2, #93	@ 0x5d
 8002c7a:	2100      	movs	r1, #0
 8002c7c:	5281      	strh	r1, [r0, r2]
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	b29b      	uxth	r3, r3
    if (nb_remaining_rx_data < huart->RxXferSize)
 8002c84:	3a02      	subs	r2, #2
 8002c86:	5a81      	ldrh	r1, [r0, r2]
 8002c88:	4299      	cmp	r1, r3
 8002c8a:	d901      	bls.n	8002c90 <UART_DMAReceiveCplt+0x84>
      huart->RxXferCount = nb_remaining_rx_data;
 8002c8c:	3202      	adds	r2, #2
 8002c8e:	5283      	strh	r3, [r0, r2]
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002c90:	235e      	movs	r3, #94	@ 0x5e
 8002c92:	5ac3      	ldrh	r3, [r0, r3]
 8002c94:	1ac9      	subs	r1, r1, r3
 8002c96:	b289      	uxth	r1, r1
 8002c98:	f7ff ff9a 	bl	8002bd0 <HAL_UARTEx_RxEventCallback>
}
 8002c9c:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002c9e:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ca2:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ca6:	6801      	ldr	r1, [r0, #0]
 8002ca8:	680a      	ldr	r2, [r1, #0]
 8002caa:	3d30      	subs	r5, #48	@ 0x30
 8002cac:	43aa      	bics	r2, r5
 8002cae:	600a      	str	r2, [r1, #0]
 8002cb0:	f384 8810 	msr	PRIMASK, r4
}
 8002cb4:	e7db      	b.n	8002c6e <UART_DMAReceiveCplt+0x62>
    HAL_UART_RxCpltCallback(huart);
 8002cb6:	f7ff ff5f 	bl	8002b78 <HAL_UART_RxCpltCallback>
}
 8002cba:	e7ef      	b.n	8002c9c <UART_DMAReceiveCplt+0x90>
 8002cbc:	fffffeff 	.word	0xfffffeff

08002cc0 <UART_SetConfig>:
{
 8002cc0:	b510      	push	{r4, lr}
 8002cc2:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002cc4:	6883      	ldr	r3, [r0, #8]
 8002cc6:	6902      	ldr	r2, [r0, #16]
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	6942      	ldr	r2, [r0, #20]
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	69c2      	ldr	r2, [r0, #28]
 8002cd0:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002cd2:	6801      	ldr	r1, [r0, #0]
 8002cd4:	680a      	ldr	r2, [r1, #0]
 8002cd6:	4862      	ldr	r0, [pc, #392]	@ (8002e60 <UART_SetConfig+0x1a0>)
 8002cd8:	4002      	ands	r2, r0
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002cde:	6822      	ldr	r2, [r4, #0]
 8002ce0:	6853      	ldr	r3, [r2, #4]
 8002ce2:	4960      	ldr	r1, [pc, #384]	@ (8002e64 <UART_SetConfig+0x1a4>)
 8002ce4:	400b      	ands	r3, r1
 8002ce6:	68e1      	ldr	r1, [r4, #12]
 8002ce8:	430b      	orrs	r3, r1
 8002cea:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002cec:	69a3      	ldr	r3, [r4, #24]
  tmpreg |= huart->Init.OneBitSampling;
 8002cee:	6a22      	ldr	r2, [r4, #32]
 8002cf0:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002cf2:	6821      	ldr	r1, [r4, #0]
 8002cf4:	688b      	ldr	r3, [r1, #8]
 8002cf6:	485c      	ldr	r0, [pc, #368]	@ (8002e68 <UART_SetConfig+0x1a8>)
 8002cf8:	4003      	ands	r3, r0
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	608b      	str	r3, [r1, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002cfe:	6822      	ldr	r2, [r4, #0]
 8002d00:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8002d02:	210f      	movs	r1, #15
 8002d04:	438b      	bics	r3, r1
 8002d06:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8002d08:	430b      	orrs	r3, r1
 8002d0a:	62d3      	str	r3, [r2, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002d0c:	6823      	ldr	r3, [r4, #0]
 8002d0e:	4a57      	ldr	r2, [pc, #348]	@ (8002e6c <UART_SetConfig+0x1ac>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d030      	beq.n	8002d76 <UART_SetConfig+0xb6>
 8002d14:	4a56      	ldr	r2, [pc, #344]	@ (8002e70 <UART_SetConfig+0x1b0>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d03e      	beq.n	8002d98 <UART_SetConfig+0xd8>
 8002d1a:	2310      	movs	r3, #16
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d1c:	69e0      	ldr	r0, [r4, #28]
 8002d1e:	2280      	movs	r2, #128	@ 0x80
 8002d20:	0212      	lsls	r2, r2, #8
 8002d22:	4290      	cmp	r0, r2
 8002d24:	d042      	beq.n	8002dac <UART_SetConfig+0xec>
    switch (clocksource)
 8002d26:	2b04      	cmp	r3, #4
 8002d28:	d100      	bne.n	8002d2c <UART_SetConfig+0x6c>
 8002d2a:	e089      	b.n	8002e40 <UART_SetConfig+0x180>
 8002d2c:	d87b      	bhi.n	8002e26 <UART_SetConfig+0x166>
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d100      	bne.n	8002d34 <UART_SetConfig+0x74>
 8002d32:	e07f      	b.n	8002e34 <UART_SetConfig+0x174>
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	d174      	bne.n	8002e22 <UART_SetConfig+0x162>
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8002d38:	4b4e      	ldr	r3, [pc, #312]	@ (8002e74 <UART_SetConfig+0x1b4>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	095b      	lsrs	r3, r3, #5
 8002d3e:	2107      	movs	r1, #7
 8002d40:	4019      	ands	r1, r3
 8002d42:	3101      	adds	r1, #1
 8002d44:	484c      	ldr	r0, [pc, #304]	@ (8002e78 <UART_SetConfig+0x1b8>)
 8002d46:	f7fd f9f3 	bl	8000130 <__udivsi3>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002d4a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8002d4c:	4b4b      	ldr	r3, [pc, #300]	@ (8002e7c <UART_SetConfig+0x1bc>)
 8002d4e:	0052      	lsls	r2, r2, #1
 8002d50:	5ad1      	ldrh	r1, [r2, r3]
 8002d52:	f7fd f9ed 	bl	8000130 <__udivsi3>
 8002d56:	6861      	ldr	r1, [r4, #4]
 8002d58:	084b      	lsrs	r3, r1, #1
 8002d5a:	18c0      	adds	r0, r0, r3
 8002d5c:	f7fd f9e8 	bl	8000130 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d60:	0002      	movs	r2, r0
 8002d62:	3a10      	subs	r2, #16
 8002d64:	4b46      	ldr	r3, [pc, #280]	@ (8002e80 <UART_SetConfig+0x1c0>)
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d86f      	bhi.n	8002e4a <UART_SetConfig+0x18a>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002d6a:	6823      	ldr	r3, [r4, #0]
 8002d6c:	0400      	lsls	r0, r0, #16
 8002d6e:	0c00      	lsrs	r0, r0, #16
 8002d70:	60d8      	str	r0, [r3, #12]
 8002d72:	2000      	movs	r0, #0
 8002d74:	e06a      	b.n	8002e4c <UART_SetConfig+0x18c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002d76:	4b3f      	ldr	r3, [pc, #252]	@ (8002e74 <UART_SetConfig+0x1b4>)
 8002d78:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d00c      	beq.n	8002d9c <UART_SetConfig+0xdc>
 8002d82:	d805      	bhi.n	8002d90 <UART_SetConfig+0xd0>
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d00b      	beq.n	8002da0 <UART_SetConfig+0xe0>
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d10b      	bne.n	8002da4 <UART_SetConfig+0xe4>
 8002d8c:	3303      	adds	r3, #3
 8002d8e:	e7c5      	b.n	8002d1c <UART_SetConfig+0x5c>
 8002d90:	2b03      	cmp	r3, #3
 8002d92:	d109      	bne.n	8002da8 <UART_SetConfig+0xe8>
 8002d94:	3305      	adds	r3, #5
 8002d96:	e7c1      	b.n	8002d1c <UART_SetConfig+0x5c>
 8002d98:	2300      	movs	r3, #0
 8002d9a:	e7bf      	b.n	8002d1c <UART_SetConfig+0x5c>
 8002d9c:	2302      	movs	r3, #2
 8002d9e:	e7bd      	b.n	8002d1c <UART_SetConfig+0x5c>
 8002da0:	2300      	movs	r3, #0
 8002da2:	e7bb      	b.n	8002d1c <UART_SetConfig+0x5c>
 8002da4:	2310      	movs	r3, #16
 8002da6:	e7b9      	b.n	8002d1c <UART_SetConfig+0x5c>
 8002da8:	2310      	movs	r3, #16
 8002daa:	e7b7      	b.n	8002d1c <UART_SetConfig+0x5c>
    switch (clocksource)
 8002dac:	2b04      	cmp	r3, #4
 8002dae:	d035      	beq.n	8002e1c <UART_SetConfig+0x15c>
 8002db0:	d82a      	bhi.n	8002e08 <UART_SetConfig+0x148>
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d02c      	beq.n	8002e10 <UART_SetConfig+0x150>
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	d124      	bne.n	8002e04 <UART_SetConfig+0x144>
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8002dba:	4b2e      	ldr	r3, [pc, #184]	@ (8002e74 <UART_SetConfig+0x1b4>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	095b      	lsrs	r3, r3, #5
 8002dc0:	2107      	movs	r1, #7
 8002dc2:	4019      	ands	r1, r3
 8002dc4:	3101      	adds	r1, #1
 8002dc6:	482c      	ldr	r0, [pc, #176]	@ (8002e78 <UART_SetConfig+0x1b8>)
 8002dc8:	f7fd f9b2 	bl	8000130 <__udivsi3>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002dcc:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8002dce:	4b2b      	ldr	r3, [pc, #172]	@ (8002e7c <UART_SetConfig+0x1bc>)
 8002dd0:	0052      	lsls	r2, r2, #1
 8002dd2:	5ad1      	ldrh	r1, [r2, r3]
 8002dd4:	f7fd f9ac 	bl	8000130 <__udivsi3>
 8002dd8:	0040      	lsls	r0, r0, #1
 8002dda:	6861      	ldr	r1, [r4, #4]
 8002ddc:	084b      	lsrs	r3, r1, #1
 8002dde:	18c0      	adds	r0, r0, r3
 8002de0:	f7fd f9a6 	bl	8000130 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002de4:	0002      	movs	r2, r0
 8002de6:	3a10      	subs	r2, #16
 8002de8:	4b25      	ldr	r3, [pc, #148]	@ (8002e80 <UART_SetConfig+0x1c0>)
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d82b      	bhi.n	8002e46 <UART_SetConfig+0x186>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002dee:	b282      	uxth	r2, r0
 8002df0:	230f      	movs	r3, #15
 8002df2:	439a      	bics	r2, r3
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002df4:	0840      	lsrs	r0, r0, #1
 8002df6:	3b08      	subs	r3, #8
 8002df8:	4003      	ands	r3, r0
 8002dfa:	4313      	orrs	r3, r2
        huart->Instance->BRR = brrtemp;
 8002dfc:	6822      	ldr	r2, [r4, #0]
 8002dfe:	60d3      	str	r3, [r2, #12]
 8002e00:	2000      	movs	r0, #0
 8002e02:	e023      	b.n	8002e4c <UART_SetConfig+0x18c>
    switch (clocksource)
 8002e04:	2001      	movs	r0, #1
 8002e06:	e021      	b.n	8002e4c <UART_SetConfig+0x18c>
 8002e08:	2b08      	cmp	r3, #8
 8002e0a:	d0df      	beq.n	8002dcc <UART_SetConfig+0x10c>
 8002e0c:	2001      	movs	r0, #1
 8002e0e:	e01d      	b.n	8002e4c <UART_SetConfig+0x18c>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e10:	f7ff f932 	bl	8002078 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8002e14:	2800      	cmp	r0, #0
 8002e16:	d1d9      	bne.n	8002dcc <UART_SetConfig+0x10c>
 8002e18:	2000      	movs	r0, #0
 8002e1a:	e017      	b.n	8002e4c <UART_SetConfig+0x18c>
        pclk = HAL_RCC_GetSysClockFreq();
 8002e1c:	f7ff f8e4 	bl	8001fe8 <HAL_RCC_GetSysClockFreq>
        break;
 8002e20:	e7f8      	b.n	8002e14 <UART_SetConfig+0x154>
    switch (clocksource)
 8002e22:	2001      	movs	r0, #1
 8002e24:	e012      	b.n	8002e4c <UART_SetConfig+0x18c>
 8002e26:	2b08      	cmp	r3, #8
 8002e28:	d102      	bne.n	8002e30 <UART_SetConfig+0x170>
 8002e2a:	2080      	movs	r0, #128	@ 0x80
 8002e2c:	0200      	lsls	r0, r0, #8
 8002e2e:	e78c      	b.n	8002d4a <UART_SetConfig+0x8a>
 8002e30:	2001      	movs	r0, #1
 8002e32:	e00b      	b.n	8002e4c <UART_SetConfig+0x18c>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e34:	f7ff f920 	bl	8002078 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8002e38:	2800      	cmp	r0, #0
 8002e3a:	d186      	bne.n	8002d4a <UART_SetConfig+0x8a>
 8002e3c:	2000      	movs	r0, #0
 8002e3e:	e005      	b.n	8002e4c <UART_SetConfig+0x18c>
        pclk = HAL_RCC_GetSysClockFreq();
 8002e40:	f7ff f8d2 	bl	8001fe8 <HAL_RCC_GetSysClockFreq>
        break;
 8002e44:	e7f8      	b.n	8002e38 <UART_SetConfig+0x178>
        ret = HAL_ERROR;
 8002e46:	2001      	movs	r0, #1
 8002e48:	e000      	b.n	8002e4c <UART_SetConfig+0x18c>
        ret = HAL_ERROR;
 8002e4a:	2001      	movs	r0, #1
  huart->NbTxDataToProcess = 1;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	226a      	movs	r2, #106	@ 0x6a
 8002e50:	52a3      	strh	r3, [r4, r2]
  huart->NbRxDataToProcess = 1;
 8002e52:	3a02      	subs	r2, #2
 8002e54:	52a3      	strh	r3, [r4, r2]
  huart->RxISR = NULL;
 8002e56:	2300      	movs	r3, #0
 8002e58:	6763      	str	r3, [r4, #116]	@ 0x74
  huart->TxISR = NULL;
 8002e5a:	67a3      	str	r3, [r4, #120]	@ 0x78
}
 8002e5c:	bd10      	pop	{r4, pc}
 8002e5e:	46c0      	nop			@ (mov r8, r8)
 8002e60:	cfff69f3 	.word	0xcfff69f3
 8002e64:	ffffcfff 	.word	0xffffcfff
 8002e68:	11fff4ff 	.word	0x11fff4ff
 8002e6c:	40013800 	.word	0x40013800
 8002e70:	40004400 	.word	0x40004400
 8002e74:	40021000 	.word	0x40021000
 8002e78:	02dc6c00 	.word	0x02dc6c00
 8002e7c:	080041c8 	.word	0x080041c8
 8002e80:	0000ffef 	.word	0x0000ffef

08002e84 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002e84:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8002e86:	071b      	lsls	r3, r3, #28
 8002e88:	d506      	bpl.n	8002e98 <UART_AdvFeatureConfig+0x14>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002e8a:	6802      	ldr	r2, [r0, #0]
 8002e8c:	6853      	ldr	r3, [r2, #4]
 8002e8e:	492c      	ldr	r1, [pc, #176]	@ (8002f40 <UART_AdvFeatureConfig+0xbc>)
 8002e90:	400b      	ands	r3, r1
 8002e92:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 8002e94:	430b      	orrs	r3, r1
 8002e96:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002e98:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8002e9a:	07db      	lsls	r3, r3, #31
 8002e9c:	d506      	bpl.n	8002eac <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002e9e:	6802      	ldr	r2, [r0, #0]
 8002ea0:	6853      	ldr	r3, [r2, #4]
 8002ea2:	4928      	ldr	r1, [pc, #160]	@ (8002f44 <UART_AdvFeatureConfig+0xc0>)
 8002ea4:	400b      	ands	r3, r1
 8002ea6:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8002ea8:	430b      	orrs	r3, r1
 8002eaa:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002eac:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8002eae:	079b      	lsls	r3, r3, #30
 8002eb0:	d506      	bpl.n	8002ec0 <UART_AdvFeatureConfig+0x3c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002eb2:	6802      	ldr	r2, [r0, #0]
 8002eb4:	6853      	ldr	r3, [r2, #4]
 8002eb6:	4924      	ldr	r1, [pc, #144]	@ (8002f48 <UART_AdvFeatureConfig+0xc4>)
 8002eb8:	400b      	ands	r3, r1
 8002eba:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 8002ebc:	430b      	orrs	r3, r1
 8002ebe:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002ec0:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8002ec2:	075b      	lsls	r3, r3, #29
 8002ec4:	d506      	bpl.n	8002ed4 <UART_AdvFeatureConfig+0x50>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002ec6:	6802      	ldr	r2, [r0, #0]
 8002ec8:	6853      	ldr	r3, [r2, #4]
 8002eca:	4920      	ldr	r1, [pc, #128]	@ (8002f4c <UART_AdvFeatureConfig+0xc8>)
 8002ecc:	400b      	ands	r3, r1
 8002ece:	6b41      	ldr	r1, [r0, #52]	@ 0x34
 8002ed0:	430b      	orrs	r3, r1
 8002ed2:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002ed4:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8002ed6:	06db      	lsls	r3, r3, #27
 8002ed8:	d506      	bpl.n	8002ee8 <UART_AdvFeatureConfig+0x64>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002eda:	6802      	ldr	r2, [r0, #0]
 8002edc:	6893      	ldr	r3, [r2, #8]
 8002ede:	491c      	ldr	r1, [pc, #112]	@ (8002f50 <UART_AdvFeatureConfig+0xcc>)
 8002ee0:	400b      	ands	r3, r1
 8002ee2:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 8002ee4:	430b      	orrs	r3, r1
 8002ee6:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002ee8:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8002eea:	069b      	lsls	r3, r3, #26
 8002eec:	d506      	bpl.n	8002efc <UART_AdvFeatureConfig+0x78>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002eee:	6802      	ldr	r2, [r0, #0]
 8002ef0:	6893      	ldr	r3, [r2, #8]
 8002ef2:	4918      	ldr	r1, [pc, #96]	@ (8002f54 <UART_AdvFeatureConfig+0xd0>)
 8002ef4:	400b      	ands	r3, r1
 8002ef6:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8002ef8:	430b      	orrs	r3, r1
 8002efa:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002efc:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8002efe:	065b      	lsls	r3, r3, #25
 8002f00:	d50b      	bpl.n	8002f1a <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002f02:	6802      	ldr	r2, [r0, #0]
 8002f04:	6853      	ldr	r3, [r2, #4]
 8002f06:	4914      	ldr	r1, [pc, #80]	@ (8002f58 <UART_AdvFeatureConfig+0xd4>)
 8002f08:	400b      	ands	r3, r1
 8002f0a:	6c41      	ldr	r1, [r0, #68]	@ 0x44
 8002f0c:	430b      	orrs	r3, r1
 8002f0e:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002f10:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8002f12:	2380      	movs	r3, #128	@ 0x80
 8002f14:	035b      	lsls	r3, r3, #13
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d00a      	beq.n	8002f30 <UART_AdvFeatureConfig+0xac>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002f1a:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8002f1c:	061b      	lsls	r3, r3, #24
 8002f1e:	d506      	bpl.n	8002f2e <UART_AdvFeatureConfig+0xaa>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002f20:	6802      	ldr	r2, [r0, #0]
 8002f22:	6853      	ldr	r3, [r2, #4]
 8002f24:	490d      	ldr	r1, [pc, #52]	@ (8002f5c <UART_AdvFeatureConfig+0xd8>)
 8002f26:	400b      	ands	r3, r1
 8002f28:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8002f2a:	430b      	orrs	r3, r1
 8002f2c:	6053      	str	r3, [r2, #4]
}
 8002f2e:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002f30:	6802      	ldr	r2, [r0, #0]
 8002f32:	6853      	ldr	r3, [r2, #4]
 8002f34:	490a      	ldr	r1, [pc, #40]	@ (8002f60 <UART_AdvFeatureConfig+0xdc>)
 8002f36:	400b      	ands	r3, r1
 8002f38:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8002f3a:	430b      	orrs	r3, r1
 8002f3c:	6053      	str	r3, [r2, #4]
 8002f3e:	e7ec      	b.n	8002f1a <UART_AdvFeatureConfig+0x96>
 8002f40:	ffff7fff 	.word	0xffff7fff
 8002f44:	fffdffff 	.word	0xfffdffff
 8002f48:	fffeffff 	.word	0xfffeffff
 8002f4c:	fffbffff 	.word	0xfffbffff
 8002f50:	ffffefff 	.word	0xffffefff
 8002f54:	ffffdfff 	.word	0xffffdfff
 8002f58:	ffefffff 	.word	0xffefffff
 8002f5c:	fff7ffff 	.word	0xfff7ffff
 8002f60:	ff9fffff 	.word	0xff9fffff

08002f64 <UART_WaitOnFlagUntilTimeout>:
{
 8002f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f66:	46ce      	mov	lr, r9
 8002f68:	4647      	mov	r7, r8
 8002f6a:	b580      	push	{r7, lr}
 8002f6c:	0006      	movs	r6, r0
 8002f6e:	000d      	movs	r5, r1
 8002f70:	0017      	movs	r7, r2
 8002f72:	4699      	mov	r9, r3
 8002f74:	9b08      	ldr	r3, [sp, #32]
 8002f76:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f78:	6833      	ldr	r3, [r6, #0]
 8002f7a:	69dc      	ldr	r4, [r3, #28]
 8002f7c:	402c      	ands	r4, r5
 8002f7e:	1b64      	subs	r4, r4, r5
 8002f80:	4263      	negs	r3, r4
 8002f82:	415c      	adcs	r4, r3
 8002f84:	42bc      	cmp	r4, r7
 8002f86:	d133      	bne.n	8002ff0 <UART_WaitOnFlagUntilTimeout+0x8c>
    if (Timeout != HAL_MAX_DELAY)
 8002f88:	4643      	mov	r3, r8
 8002f8a:	3301      	adds	r3, #1
 8002f8c:	d0f4      	beq.n	8002f78 <UART_WaitOnFlagUntilTimeout+0x14>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f8e:	f7fe f95d 	bl	800124c <HAL_GetTick>
 8002f92:	464b      	mov	r3, r9
 8002f94:	1ac0      	subs	r0, r0, r3
 8002f96:	4540      	cmp	r0, r8
 8002f98:	d82f      	bhi.n	8002ffa <UART_WaitOnFlagUntilTimeout+0x96>
 8002f9a:	4643      	mov	r3, r8
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d02e      	beq.n	8002ffe <UART_WaitOnFlagUntilTimeout+0x9a>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002fa0:	6832      	ldr	r2, [r6, #0]
 8002fa2:	6813      	ldr	r3, [r2, #0]
 8002fa4:	075b      	lsls	r3, r3, #29
 8002fa6:	d5e7      	bpl.n	8002f78 <UART_WaitOnFlagUntilTimeout+0x14>
 8002fa8:	2d80      	cmp	r5, #128	@ 0x80
 8002faa:	d0e5      	beq.n	8002f78 <UART_WaitOnFlagUntilTimeout+0x14>
 8002fac:	2d40      	cmp	r5, #64	@ 0x40
 8002fae:	d0e3      	beq.n	8002f78 <UART_WaitOnFlagUntilTimeout+0x14>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002fb0:	69d3      	ldr	r3, [r2, #28]
 8002fb2:	071b      	lsls	r3, r3, #28
 8002fb4:	d410      	bmi.n	8002fd8 <UART_WaitOnFlagUntilTimeout+0x74>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002fb6:	69d3      	ldr	r3, [r2, #28]
 8002fb8:	051b      	lsls	r3, r3, #20
 8002fba:	d5dd      	bpl.n	8002f78 <UART_WaitOnFlagUntilTimeout+0x14>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002fbc:	2380      	movs	r3, #128	@ 0x80
 8002fbe:	011b      	lsls	r3, r3, #4
 8002fc0:	6213      	str	r3, [r2, #32]
          UART_EndRxTransfer(huart);
 8002fc2:	0030      	movs	r0, r6
 8002fc4:	f7ff fda6 	bl	8002b14 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002fc8:	2390      	movs	r3, #144	@ 0x90
 8002fca:	2220      	movs	r2, #32
 8002fcc:	50f2      	str	r2, [r6, r3]
          __HAL_UNLOCK(huart);
 8002fce:	3b0c      	subs	r3, #12
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	54f2      	strb	r2, [r6, r3]
          return HAL_TIMEOUT;
 8002fd4:	2003      	movs	r0, #3
 8002fd6:	e00c      	b.n	8002ff2 <UART_WaitOnFlagUntilTimeout+0x8e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002fd8:	2408      	movs	r4, #8
 8002fda:	6214      	str	r4, [r2, #32]
          UART_EndRxTransfer(huart);
 8002fdc:	0030      	movs	r0, r6
 8002fde:	f7ff fd99 	bl	8002b14 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002fe2:	2390      	movs	r3, #144	@ 0x90
 8002fe4:	50f4      	str	r4, [r6, r3]
          __HAL_UNLOCK(huart);
 8002fe6:	3b0c      	subs	r3, #12
 8002fe8:	2200      	movs	r2, #0
 8002fea:	54f2      	strb	r2, [r6, r3]
          return HAL_ERROR;
 8002fec:	2001      	movs	r0, #1
 8002fee:	e000      	b.n	8002ff2 <UART_WaitOnFlagUntilTimeout+0x8e>
  return HAL_OK;
 8002ff0:	2000      	movs	r0, #0
}
 8002ff2:	bcc0      	pop	{r6, r7}
 8002ff4:	46b9      	mov	r9, r7
 8002ff6:	46b0      	mov	r8, r6
 8002ff8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8002ffa:	2003      	movs	r0, #3
 8002ffc:	e7f9      	b.n	8002ff2 <UART_WaitOnFlagUntilTimeout+0x8e>
 8002ffe:	2003      	movs	r0, #3
 8003000:	e7f7      	b.n	8002ff2 <UART_WaitOnFlagUntilTimeout+0x8e>

08003002 <HAL_UART_Transmit>:
{
 8003002:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003004:	46c6      	mov	lr, r8
 8003006:	b500      	push	{lr}
 8003008:	b082      	sub	sp, #8
 800300a:	0004      	movs	r4, r0
 800300c:	000d      	movs	r5, r1
 800300e:	4690      	mov	r8, r2
 8003010:	001e      	movs	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8003012:	2388      	movs	r3, #136	@ 0x88
 8003014:	58c3      	ldr	r3, [r0, r3]
 8003016:	2b20      	cmp	r3, #32
 8003018:	d166      	bne.n	80030e8 <HAL_UART_Transmit+0xe6>
    if ((pData == NULL) || (Size == 0U))
 800301a:	2900      	cmp	r1, #0
 800301c:	d069      	beq.n	80030f2 <HAL_UART_Transmit+0xf0>
 800301e:	2a00      	cmp	r2, #0
 8003020:	d069      	beq.n	80030f6 <HAL_UART_Transmit+0xf4>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003022:	6882      	ldr	r2, [r0, #8]
 8003024:	2380      	movs	r3, #128	@ 0x80
 8003026:	015b      	lsls	r3, r3, #5
 8003028:	429a      	cmp	r2, r3
 800302a:	d104      	bne.n	8003036 <HAL_UART_Transmit+0x34>
 800302c:	6903      	ldr	r3, [r0, #16]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d101      	bne.n	8003036 <HAL_UART_Transmit+0x34>
      if ((((uint32_t)pData) & 1U) != 0U)
 8003032:	07cb      	lsls	r3, r1, #31
 8003034:	d461      	bmi.n	80030fa <HAL_UART_Transmit+0xf8>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003036:	2390      	movs	r3, #144	@ 0x90
 8003038:	2200      	movs	r2, #0
 800303a:	50e2      	str	r2, [r4, r3]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800303c:	3b08      	subs	r3, #8
 800303e:	3221      	adds	r2, #33	@ 0x21
 8003040:	50e2      	str	r2, [r4, r3]
    tickstart = HAL_GetTick();
 8003042:	f7fe f903 	bl	800124c <HAL_GetTick>
 8003046:	0007      	movs	r7, r0
    huart->TxXferSize  = Size;
 8003048:	2354      	movs	r3, #84	@ 0x54
 800304a:	4642      	mov	r2, r8
 800304c:	52e2      	strh	r2, [r4, r3]
    huart->TxXferCount = Size;
 800304e:	3302      	adds	r3, #2
 8003050:	52e2      	strh	r2, [r4, r3]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003052:	68a2      	ldr	r2, [r4, #8]
 8003054:	2380      	movs	r3, #128	@ 0x80
 8003056:	015b      	lsls	r3, r3, #5
 8003058:	429a      	cmp	r2, r3
 800305a:	d002      	beq.n	8003062 <HAL_UART_Transmit+0x60>
      pdata16bits = NULL;
 800305c:	2300      	movs	r3, #0
 800305e:	4698      	mov	r8, r3
 8003060:	e018      	b.n	8003094 <HAL_UART_Transmit+0x92>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003062:	6923      	ldr	r3, [r4, #16]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d02a      	beq.n	80030be <HAL_UART_Transmit+0xbc>
      pdata16bits = NULL;
 8003068:	2300      	movs	r3, #0
 800306a:	4698      	mov	r8, r3
 800306c:	e012      	b.n	8003094 <HAL_UART_Transmit+0x92>
        huart->gState = HAL_UART_STATE_READY;
 800306e:	2388      	movs	r3, #136	@ 0x88
 8003070:	2220      	movs	r2, #32
 8003072:	50e2      	str	r2, [r4, r3]
        return HAL_TIMEOUT;
 8003074:	2003      	movs	r0, #3
 8003076:	e038      	b.n	80030ea <HAL_UART_Transmit+0xe8>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003078:	4643      	mov	r3, r8
 800307a:	881b      	ldrh	r3, [r3, #0]
 800307c:	6822      	ldr	r2, [r4, #0]
 800307e:	05db      	lsls	r3, r3, #23
 8003080:	0ddb      	lsrs	r3, r3, #23
 8003082:	6293      	str	r3, [r2, #40]	@ 0x28
        pdata16bits++;
 8003084:	2302      	movs	r3, #2
 8003086:	469c      	mov	ip, r3
 8003088:	44e0      	add	r8, ip
      huart->TxXferCount--;
 800308a:	2356      	movs	r3, #86	@ 0x56
 800308c:	5ae2      	ldrh	r2, [r4, r3]
 800308e:	3a01      	subs	r2, #1
 8003090:	b292      	uxth	r2, r2
 8003092:	52e2      	strh	r2, [r4, r3]
    while (huart->TxXferCount > 0U)
 8003094:	2356      	movs	r3, #86	@ 0x56
 8003096:	5ae3      	ldrh	r3, [r4, r3]
 8003098:	b29b      	uxth	r3, r3
 800309a:	2b00      	cmp	r3, #0
 800309c:	d012      	beq.n	80030c4 <HAL_UART_Transmit+0xc2>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800309e:	9600      	str	r6, [sp, #0]
 80030a0:	003b      	movs	r3, r7
 80030a2:	2200      	movs	r2, #0
 80030a4:	2180      	movs	r1, #128	@ 0x80
 80030a6:	0020      	movs	r0, r4
 80030a8:	f7ff ff5c 	bl	8002f64 <UART_WaitOnFlagUntilTimeout>
 80030ac:	2800      	cmp	r0, #0
 80030ae:	d1de      	bne.n	800306e <HAL_UART_Transmit+0x6c>
      if (pdata8bits == NULL)
 80030b0:	2d00      	cmp	r5, #0
 80030b2:	d0e1      	beq.n	8003078 <HAL_UART_Transmit+0x76>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80030b4:	782a      	ldrb	r2, [r5, #0]
 80030b6:	6823      	ldr	r3, [r4, #0]
 80030b8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80030ba:	3501      	adds	r5, #1
 80030bc:	e7e5      	b.n	800308a <HAL_UART_Transmit+0x88>
      pdata16bits = (const uint16_t *) pData;
 80030be:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 80030c0:	2500      	movs	r5, #0
 80030c2:	e7e7      	b.n	8003094 <HAL_UART_Transmit+0x92>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80030c4:	9600      	str	r6, [sp, #0]
 80030c6:	003b      	movs	r3, r7
 80030c8:	2200      	movs	r2, #0
 80030ca:	2140      	movs	r1, #64	@ 0x40
 80030cc:	0020      	movs	r0, r4
 80030ce:	f7ff ff49 	bl	8002f64 <UART_WaitOnFlagUntilTimeout>
 80030d2:	2800      	cmp	r0, #0
 80030d4:	d103      	bne.n	80030de <HAL_UART_Transmit+0xdc>
    huart->gState = HAL_UART_STATE_READY;
 80030d6:	2388      	movs	r3, #136	@ 0x88
 80030d8:	2220      	movs	r2, #32
 80030da:	50e2      	str	r2, [r4, r3]
    return HAL_OK;
 80030dc:	e005      	b.n	80030ea <HAL_UART_Transmit+0xe8>
      huart->gState = HAL_UART_STATE_READY;
 80030de:	2388      	movs	r3, #136	@ 0x88
 80030e0:	2220      	movs	r2, #32
 80030e2:	50e2      	str	r2, [r4, r3]
      return HAL_TIMEOUT;
 80030e4:	2003      	movs	r0, #3
 80030e6:	e000      	b.n	80030ea <HAL_UART_Transmit+0xe8>
    return HAL_BUSY;
 80030e8:	2002      	movs	r0, #2
}
 80030ea:	b002      	add	sp, #8
 80030ec:	bc80      	pop	{r7}
 80030ee:	46b8      	mov	r8, r7
 80030f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return  HAL_ERROR;
 80030f2:	2001      	movs	r0, #1
 80030f4:	e7f9      	b.n	80030ea <HAL_UART_Transmit+0xe8>
 80030f6:	2001      	movs	r0, #1
 80030f8:	e7f7      	b.n	80030ea <HAL_UART_Transmit+0xe8>
        return  HAL_ERROR;
 80030fa:	2001      	movs	r0, #1
 80030fc:	e7f5      	b.n	80030ea <HAL_UART_Transmit+0xe8>
	...

08003100 <UART_CheckIdleState>:
{
 8003100:	b530      	push	{r4, r5, lr}
 8003102:	b083      	sub	sp, #12
 8003104:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003106:	2390      	movs	r3, #144	@ 0x90
 8003108:	2200      	movs	r2, #0
 800310a:	50c2      	str	r2, [r0, r3]
  tickstart = HAL_GetTick();
 800310c:	f7fe f89e 	bl	800124c <HAL_GetTick>
 8003110:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003112:	6823      	ldr	r3, [r4, #0]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	071b      	lsls	r3, r3, #28
 8003118:	d410      	bmi.n	800313c <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800311a:	6823      	ldr	r3, [r4, #0]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	075b      	lsls	r3, r3, #29
 8003120:	d42b      	bmi.n	800317a <UART_CheckIdleState+0x7a>
  huart->gState = HAL_UART_STATE_READY;
 8003122:	2320      	movs	r3, #32
 8003124:	2288      	movs	r2, #136	@ 0x88
 8003126:	50a3      	str	r3, [r4, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003128:	3204      	adds	r2, #4
 800312a:	50a3      	str	r3, [r4, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800312c:	2300      	movs	r3, #0
 800312e:	66e3      	str	r3, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003130:	6723      	str	r3, [r4, #112]	@ 0x70
  __HAL_UNLOCK(huart);
 8003132:	3a08      	subs	r2, #8
 8003134:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 8003136:	2000      	movs	r0, #0
}
 8003138:	b003      	add	sp, #12
 800313a:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800313c:	2180      	movs	r1, #128	@ 0x80
 800313e:	4b23      	ldr	r3, [pc, #140]	@ (80031cc <UART_CheckIdleState+0xcc>)
 8003140:	9300      	str	r3, [sp, #0]
 8003142:	0003      	movs	r3, r0
 8003144:	2200      	movs	r2, #0
 8003146:	0389      	lsls	r1, r1, #14
 8003148:	0020      	movs	r0, r4
 800314a:	f7ff ff0b 	bl	8002f64 <UART_WaitOnFlagUntilTimeout>
 800314e:	2800      	cmp	r0, #0
 8003150:	d0e3      	beq.n	800311a <UART_CheckIdleState+0x1a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003152:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003156:	2301      	movs	r3, #1
 8003158:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800315c:	6822      	ldr	r2, [r4, #0]
 800315e:	6813      	ldr	r3, [r2, #0]
 8003160:	2080      	movs	r0, #128	@ 0x80
 8003162:	4383      	bics	r3, r0
 8003164:	6013      	str	r3, [r2, #0]
 8003166:	f381 8810 	msr	PRIMASK, r1
      huart->gState = HAL_UART_STATE_READY;
 800316a:	2388      	movs	r3, #136	@ 0x88
 800316c:	2220      	movs	r2, #32
 800316e:	50e2      	str	r2, [r4, r3]
      __HAL_UNLOCK(huart);
 8003170:	3b04      	subs	r3, #4
 8003172:	2200      	movs	r2, #0
 8003174:	54e2      	strb	r2, [r4, r3]
      return HAL_TIMEOUT;
 8003176:	387d      	subs	r0, #125	@ 0x7d
 8003178:	e7de      	b.n	8003138 <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800317a:	2180      	movs	r1, #128	@ 0x80
 800317c:	4b13      	ldr	r3, [pc, #76]	@ (80031cc <UART_CheckIdleState+0xcc>)
 800317e:	9300      	str	r3, [sp, #0]
 8003180:	002b      	movs	r3, r5
 8003182:	2200      	movs	r2, #0
 8003184:	03c9      	lsls	r1, r1, #15
 8003186:	0020      	movs	r0, r4
 8003188:	f7ff feec 	bl	8002f64 <UART_WaitOnFlagUntilTimeout>
 800318c:	2800      	cmp	r0, #0
 800318e:	d0c8      	beq.n	8003122 <UART_CheckIdleState+0x22>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003190:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003194:	2201      	movs	r2, #1
 8003196:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800319a:	6821      	ldr	r1, [r4, #0]
 800319c:	680b      	ldr	r3, [r1, #0]
 800319e:	4d0c      	ldr	r5, [pc, #48]	@ (80031d0 <UART_CheckIdleState+0xd0>)
 80031a0:	402b      	ands	r3, r5
 80031a2:	600b      	str	r3, [r1, #0]
 80031a4:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80031a8:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031ac:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031b0:	6821      	ldr	r1, [r4, #0]
 80031b2:	688b      	ldr	r3, [r1, #8]
 80031b4:	4393      	bics	r3, r2
 80031b6:	608b      	str	r3, [r1, #8]
 80031b8:	f380 8810 	msr	PRIMASK, r0
      huart->RxState = HAL_UART_STATE_READY;
 80031bc:	238c      	movs	r3, #140	@ 0x8c
 80031be:	321f      	adds	r2, #31
 80031c0:	50e2      	str	r2, [r4, r3]
      __HAL_UNLOCK(huart);
 80031c2:	3b08      	subs	r3, #8
 80031c4:	2200      	movs	r2, #0
 80031c6:	54e2      	strb	r2, [r4, r3]
      return HAL_TIMEOUT;
 80031c8:	2003      	movs	r0, #3
 80031ca:	e7b5      	b.n	8003138 <UART_CheckIdleState+0x38>
 80031cc:	01ffffff 	.word	0x01ffffff
 80031d0:	fffffedf 	.word	0xfffffedf

080031d4 <HAL_UART_Init>:
{
 80031d4:	b510      	push	{r4, lr}
 80031d6:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 80031d8:	d030      	beq.n	800323c <HAL_UART_Init+0x68>
  if (huart->gState == HAL_UART_STATE_RESET)
 80031da:	2388      	movs	r3, #136	@ 0x88
 80031dc:	58c3      	ldr	r3, [r0, r3]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d022      	beq.n	8003228 <HAL_UART_Init+0x54>
  huart->gState = HAL_UART_STATE_BUSY;
 80031e2:	2388      	movs	r3, #136	@ 0x88
 80031e4:	2224      	movs	r2, #36	@ 0x24
 80031e6:	50e2      	str	r2, [r4, r3]
  __HAL_UART_DISABLE(huart);
 80031e8:	6822      	ldr	r2, [r4, #0]
 80031ea:	6813      	ldr	r3, [r2, #0]
 80031ec:	2101      	movs	r1, #1
 80031ee:	438b      	bics	r3, r1
 80031f0:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80031f2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d11d      	bne.n	8003234 <HAL_UART_Init+0x60>
  if (UART_SetConfig(huart) == HAL_ERROR)
 80031f8:	0020      	movs	r0, r4
 80031fa:	f7ff fd61 	bl	8002cc0 <UART_SetConfig>
 80031fe:	2801      	cmp	r0, #1
 8003200:	d011      	beq.n	8003226 <HAL_UART_Init+0x52>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003202:	6822      	ldr	r2, [r4, #0]
 8003204:	6853      	ldr	r3, [r2, #4]
 8003206:	490e      	ldr	r1, [pc, #56]	@ (8003240 <HAL_UART_Init+0x6c>)
 8003208:	400b      	ands	r3, r1
 800320a:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800320c:	6822      	ldr	r2, [r4, #0]
 800320e:	6893      	ldr	r3, [r2, #8]
 8003210:	212a      	movs	r1, #42	@ 0x2a
 8003212:	438b      	bics	r3, r1
 8003214:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8003216:	6822      	ldr	r2, [r4, #0]
 8003218:	6813      	ldr	r3, [r2, #0]
 800321a:	3929      	subs	r1, #41	@ 0x29
 800321c:	430b      	orrs	r3, r1
 800321e:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8003220:	0020      	movs	r0, r4
 8003222:	f7ff ff6d 	bl	8003100 <UART_CheckIdleState>
}
 8003226:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8003228:	3384      	adds	r3, #132	@ 0x84
 800322a:	2200      	movs	r2, #0
 800322c:	54c2      	strb	r2, [r0, r3]
    HAL_UART_MspInit(huart);
 800322e:	f7fd ff0b 	bl	8001048 <HAL_UART_MspInit>
 8003232:	e7d6      	b.n	80031e2 <HAL_UART_Init+0xe>
    UART_AdvFeatureConfig(huart);
 8003234:	0020      	movs	r0, r4
 8003236:	f7ff fe25 	bl	8002e84 <UART_AdvFeatureConfig>
 800323a:	e7dd      	b.n	80031f8 <HAL_UART_Init+0x24>
    return HAL_ERROR;
 800323c:	2001      	movs	r0, #1
 800323e:	e7f2      	b.n	8003226 <HAL_UART_Init+0x52>
 8003240:	ffffb7ff 	.word	0xffffb7ff

08003244 <UART_Start_Receive_DMA>:
{
 8003244:	b510      	push	{r4, lr}
 8003246:	0004      	movs	r4, r0
 8003248:	0013      	movs	r3, r2
  huart->pRxBuffPtr = pData;
 800324a:	6581      	str	r1, [r0, #88]	@ 0x58
  huart->RxXferSize = Size;
 800324c:	225c      	movs	r2, #92	@ 0x5c
 800324e:	5283      	strh	r3, [r0, r2]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003250:	3234      	adds	r2, #52	@ 0x34
 8003252:	2100      	movs	r1, #0
 8003254:	5081      	str	r1, [r0, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003256:	3a04      	subs	r2, #4
 8003258:	3122      	adds	r1, #34	@ 0x22
 800325a:	5081      	str	r1, [r0, r2]
  if (huart->hdmarx != NULL)
 800325c:	3a0c      	subs	r2, #12
 800325e:	5882      	ldr	r2, [r0, r2]
 8003260:	2a00      	cmp	r2, #0
 8003262:	d013      	beq.n	800328c <UART_Start_Receive_DMA+0x48>
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003264:	4921      	ldr	r1, [pc, #132]	@ (80032ec <UART_Start_Receive_DMA+0xa8>)
 8003266:	62d1      	str	r1, [r2, #44]	@ 0x2c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003268:	2080      	movs	r0, #128	@ 0x80
 800326a:	5822      	ldr	r2, [r4, r0]
 800326c:	4920      	ldr	r1, [pc, #128]	@ (80032f0 <UART_Start_Receive_DMA+0xac>)
 800326e:	6311      	str	r1, [r2, #48]	@ 0x30
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003270:	5822      	ldr	r2, [r4, r0]
 8003272:	4920      	ldr	r1, [pc, #128]	@ (80032f4 <UART_Start_Receive_DMA+0xb0>)
 8003274:	6351      	str	r1, [r2, #52]	@ 0x34
    huart->hdmarx->XferAbortCallback = NULL;
 8003276:	5822      	ldr	r2, [r4, r0]
 8003278:	2100      	movs	r1, #0
 800327a:	6391      	str	r1, [r2, #56]	@ 0x38
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800327c:	6821      	ldr	r1, [r4, #0]
 800327e:	3124      	adds	r1, #36	@ 0x24
 8003280:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8003282:	5820      	ldr	r0, [r4, r0]
 8003284:	f7fe fd82 	bl	8001d8c <HAL_DMA_Start_IT>
 8003288:	2800      	cmp	r0, #0
 800328a:	d126      	bne.n	80032da <UART_Start_Receive_DMA+0x96>
  if (huart->Init.Parity != UART_PARITY_NONE)
 800328c:	6923      	ldr	r3, [r4, #16]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d00b      	beq.n	80032aa <UART_Start_Receive_DMA+0x66>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003292:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003296:	2301      	movs	r3, #1
 8003298:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800329c:	6822      	ldr	r2, [r4, #0]
 800329e:	6810      	ldr	r0, [r2, #0]
 80032a0:	33ff      	adds	r3, #255	@ 0xff
 80032a2:	4303      	orrs	r3, r0
 80032a4:	6013      	str	r3, [r2, #0]
 80032a6:	f381 8810 	msr	PRIMASK, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80032aa:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032ae:	2301      	movs	r3, #1
 80032b0:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032b4:	6821      	ldr	r1, [r4, #0]
 80032b6:	688a      	ldr	r2, [r1, #8]
 80032b8:	431a      	orrs	r2, r3
 80032ba:	608a      	str	r2, [r1, #8]
 80032bc:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80032c0:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032c4:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032c8:	6822      	ldr	r2, [r4, #0]
 80032ca:	6893      	ldr	r3, [r2, #8]
 80032cc:	2040      	movs	r0, #64	@ 0x40
 80032ce:	4303      	orrs	r3, r0
 80032d0:	6093      	str	r3, [r2, #8]
 80032d2:	f381 8810 	msr	PRIMASK, r1
  return HAL_OK;
 80032d6:	2000      	movs	r0, #0
}
 80032d8:	bd10      	pop	{r4, pc}
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80032da:	2390      	movs	r3, #144	@ 0x90
 80032dc:	2210      	movs	r2, #16
 80032de:	50e2      	str	r2, [r4, r3]
      huart->RxState = HAL_UART_STATE_READY;
 80032e0:	3b04      	subs	r3, #4
 80032e2:	3210      	adds	r2, #16
 80032e4:	50e2      	str	r2, [r4, r3]
      return HAL_ERROR;
 80032e6:	2001      	movs	r0, #1
 80032e8:	e7f6      	b.n	80032d8 <UART_Start_Receive_DMA+0x94>
 80032ea:	46c0      	nop			@ (mov r8, r8)
 80032ec:	08002c0d 	.word	0x08002c0d
 80032f0:	08002bd3 	.word	0x08002bd3
 80032f4:	08002b7f 	.word	0x08002b7f

080032f8 <HAL_UART_Receive_DMA>:
{
 80032f8:	b570      	push	{r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 80032fa:	238c      	movs	r3, #140	@ 0x8c
 80032fc:	58c3      	ldr	r3, [r0, r3]
 80032fe:	2b20      	cmp	r3, #32
 8003300:	d123      	bne.n	800334a <HAL_UART_Receive_DMA+0x52>
    if ((pData == NULL) || (Size == 0U))
 8003302:	2900      	cmp	r1, #0
 8003304:	d023      	beq.n	800334e <HAL_UART_Receive_DMA+0x56>
 8003306:	2a00      	cmp	r2, #0
 8003308:	d023      	beq.n	8003352 <HAL_UART_Receive_DMA+0x5a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800330a:	6884      	ldr	r4, [r0, #8]
 800330c:	2380      	movs	r3, #128	@ 0x80
 800330e:	015b      	lsls	r3, r3, #5
 8003310:	429c      	cmp	r4, r3
 8003312:	d104      	bne.n	800331e <HAL_UART_Receive_DMA+0x26>
 8003314:	6903      	ldr	r3, [r0, #16]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d101      	bne.n	800331e <HAL_UART_Receive_DMA+0x26>
      if ((((uint32_t)pData) & 1U) != 0U)
 800331a:	07cb      	lsls	r3, r1, #31
 800331c:	d41b      	bmi.n	8003356 <HAL_UART_Receive_DMA+0x5e>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800331e:	2300      	movs	r3, #0
 8003320:	66c3      	str	r3, [r0, #108]	@ 0x6c
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003322:	6803      	ldr	r3, [r0, #0]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	021b      	lsls	r3, r3, #8
 8003328:	d50c      	bpl.n	8003344 <HAL_UART_Receive_DMA+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800332a:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800332e:	2301      	movs	r3, #1
 8003330:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003334:	6804      	ldr	r4, [r0, #0]
 8003336:	6825      	ldr	r5, [r4, #0]
 8003338:	2380      	movs	r3, #128	@ 0x80
 800333a:	04db      	lsls	r3, r3, #19
 800333c:	432b      	orrs	r3, r5
 800333e:	6023      	str	r3, [r4, #0]
 8003340:	f38c 8810 	msr	PRIMASK, ip
    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003344:	f7ff ff7e 	bl	8003244 <UART_Start_Receive_DMA>
 8003348:	e000      	b.n	800334c <HAL_UART_Receive_DMA+0x54>
    return HAL_BUSY;
 800334a:	2002      	movs	r0, #2
}
 800334c:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800334e:	2001      	movs	r0, #1
 8003350:	e7fc      	b.n	800334c <HAL_UART_Receive_DMA+0x54>
 8003352:	2001      	movs	r0, #1
 8003354:	e7fa      	b.n	800334c <HAL_UART_Receive_DMA+0x54>
        return  HAL_ERROR;
 8003356:	2001      	movs	r0, #1
 8003358:	e7f8      	b.n	800334c <HAL_UART_Receive_DMA+0x54>
	...

0800335c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800335c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800335e:	0004      	movs	r4, r0
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003360:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 8003362:	2b00      	cmp	r3, #0
 8003364:	d105      	bne.n	8003372 <UARTEx_SetNbDataToProcess+0x16>
  {
    huart->NbTxDataToProcess = 1U;
 8003366:	3301      	adds	r3, #1
 8003368:	226a      	movs	r2, #106	@ 0x6a
 800336a:	5283      	strh	r3, [r0, r2]
    huart->NbRxDataToProcess = 1U;
 800336c:	3a02      	subs	r2, #2
 800336e:	5283      	strh	r3, [r0, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003370:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003372:	6802      	ldr	r2, [r0, #0]
 8003374:	6895      	ldr	r5, [r2, #8]
 8003376:	0e6d      	lsrs	r5, r5, #25
 8003378:	2307      	movs	r3, #7
 800337a:	401d      	ands	r5, r3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800337c:	6892      	ldr	r2, [r2, #8]
 800337e:	0f52      	lsrs	r2, r2, #29
 8003380:	4013      	ands	r3, r2
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003382:	4f08      	ldr	r7, [pc, #32]	@ (80033a4 <UARTEx_SetNbDataToProcess+0x48>)
 8003384:	5cf8      	ldrb	r0, [r7, r3]
 8003386:	00c0      	lsls	r0, r0, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003388:	4e07      	ldr	r6, [pc, #28]	@ (80033a8 <UARTEx_SetNbDataToProcess+0x4c>)
 800338a:	5cf1      	ldrb	r1, [r6, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800338c:	f7fc ff5a 	bl	8000244 <__divsi3>
 8003390:	236a      	movs	r3, #106	@ 0x6a
 8003392:	52e0      	strh	r0, [r4, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003394:	5d78      	ldrb	r0, [r7, r5]
 8003396:	00c0      	lsls	r0, r0, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003398:	5d71      	ldrb	r1, [r6, r5]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800339a:	f7fc ff53 	bl	8000244 <__divsi3>
 800339e:	2368      	movs	r3, #104	@ 0x68
 80033a0:	52e0      	strh	r0, [r4, r3]
}
 80033a2:	e7e5      	b.n	8003370 <UARTEx_SetNbDataToProcess+0x14>
 80033a4:	080041e8 	.word	0x080041e8
 80033a8:	080041e0 	.word	0x080041e0

080033ac <HAL_UARTEx_DisableFifoMode>:
{
 80033ac:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 80033ae:	2384      	movs	r3, #132	@ 0x84
 80033b0:	5cc3      	ldrb	r3, [r0, r3]
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d015      	beq.n	80033e2 <HAL_UARTEx_DisableFifoMode+0x36>
 80033b6:	2484      	movs	r4, #132	@ 0x84
 80033b8:	2601      	movs	r6, #1
 80033ba:	5506      	strb	r6, [r0, r4]
  huart->gState = HAL_UART_STATE_BUSY;
 80033bc:	2588      	movs	r5, #136	@ 0x88
 80033be:	2324      	movs	r3, #36	@ 0x24
 80033c0:	5143      	str	r3, [r0, r5]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80033c2:	6802      	ldr	r2, [r0, #0]
 80033c4:	6813      	ldr	r3, [r2, #0]
  __HAL_UART_DISABLE(huart);
 80033c6:	6811      	ldr	r1, [r2, #0]
 80033c8:	43b1      	bics	r1, r6
 80033ca:	6011      	str	r1, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80033cc:	4a06      	ldr	r2, [pc, #24]	@ (80033e8 <HAL_UARTEx_DisableFifoMode+0x3c>)
 80033ce:	4013      	ands	r3, r2
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80033d0:	2200      	movs	r2, #0
 80033d2:	6642      	str	r2, [r0, #100]	@ 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80033d4:	6801      	ldr	r1, [r0, #0]
 80033d6:	600b      	str	r3, [r1, #0]
  huart->gState = HAL_UART_STATE_READY;
 80033d8:	2320      	movs	r3, #32
 80033da:	5143      	str	r3, [r0, r5]
  __HAL_UNLOCK(huart);
 80033dc:	5502      	strb	r2, [r0, r4]
  return HAL_OK;
 80033de:	2000      	movs	r0, #0
}
 80033e0:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(huart);
 80033e2:	2002      	movs	r0, #2
 80033e4:	e7fc      	b.n	80033e0 <HAL_UARTEx_DisableFifoMode+0x34>
 80033e6:	46c0      	nop			@ (mov r8, r8)
 80033e8:	dfffffff 	.word	0xdfffffff

080033ec <HAL_UARTEx_SetTxFifoThreshold>:
{
 80033ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033ee:	0004      	movs	r4, r0
 80033f0:	000a      	movs	r2, r1
  __HAL_LOCK(huart);
 80033f2:	2384      	movs	r3, #132	@ 0x84
 80033f4:	5cc3      	ldrb	r3, [r0, r3]
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d01b      	beq.n	8003432 <HAL_UARTEx_SetTxFifoThreshold+0x46>
 80033fa:	2584      	movs	r5, #132	@ 0x84
 80033fc:	2001      	movs	r0, #1
 80033fe:	5560      	strb	r0, [r4, r5]
  huart->gState = HAL_UART_STATE_BUSY;
 8003400:	2688      	movs	r6, #136	@ 0x88
 8003402:	2324      	movs	r3, #36	@ 0x24
 8003404:	51a3      	str	r3, [r4, r6]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003406:	6823      	ldr	r3, [r4, #0]
 8003408:	681f      	ldr	r7, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800340a:	6819      	ldr	r1, [r3, #0]
 800340c:	4381      	bics	r1, r0
 800340e:	6019      	str	r1, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003410:	6820      	ldr	r0, [r4, #0]
 8003412:	6883      	ldr	r3, [r0, #8]
 8003414:	00db      	lsls	r3, r3, #3
 8003416:	08d9      	lsrs	r1, r3, #3
 8003418:	4311      	orrs	r1, r2
 800341a:	6081      	str	r1, [r0, #8]
  UARTEx_SetNbDataToProcess(huart);
 800341c:	0020      	movs	r0, r4
 800341e:	f7ff ff9d 	bl	800335c <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003422:	6823      	ldr	r3, [r4, #0]
 8003424:	601f      	str	r7, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8003426:	2320      	movs	r3, #32
 8003428:	51a3      	str	r3, [r4, r6]
  __HAL_UNLOCK(huart);
 800342a:	2300      	movs	r3, #0
 800342c:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 800342e:	2000      	movs	r0, #0
}
 8003430:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(huart);
 8003432:	2002      	movs	r0, #2
 8003434:	e7fc      	b.n	8003430 <HAL_UARTEx_SetTxFifoThreshold+0x44>
	...

08003438 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8003438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800343a:	0004      	movs	r4, r0
 800343c:	000b      	movs	r3, r1
  __HAL_LOCK(huart);
 800343e:	2284      	movs	r2, #132	@ 0x84
 8003440:	5c82      	ldrb	r2, [r0, r2]
 8003442:	2a01      	cmp	r2, #1
 8003444:	d01b      	beq.n	800347e <HAL_UARTEx_SetRxFifoThreshold+0x46>
 8003446:	2584      	movs	r5, #132	@ 0x84
 8003448:	2001      	movs	r0, #1
 800344a:	5560      	strb	r0, [r4, r5]
  huart->gState = HAL_UART_STATE_BUSY;
 800344c:	2688      	movs	r6, #136	@ 0x88
 800344e:	2224      	movs	r2, #36	@ 0x24
 8003450:	51a2      	str	r2, [r4, r6]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003452:	6822      	ldr	r2, [r4, #0]
 8003454:	6817      	ldr	r7, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8003456:	6811      	ldr	r1, [r2, #0]
 8003458:	4381      	bics	r1, r0
 800345a:	6011      	str	r1, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800345c:	6822      	ldr	r2, [r4, #0]
 800345e:	6891      	ldr	r1, [r2, #8]
 8003460:	4808      	ldr	r0, [pc, #32]	@ (8003484 <HAL_UARTEx_SetRxFifoThreshold+0x4c>)
 8003462:	4001      	ands	r1, r0
 8003464:	4319      	orrs	r1, r3
 8003466:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8003468:	0020      	movs	r0, r4
 800346a:	f7ff ff77 	bl	800335c <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800346e:	6823      	ldr	r3, [r4, #0]
 8003470:	601f      	str	r7, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8003472:	2320      	movs	r3, #32
 8003474:	51a3      	str	r3, [r4, r6]
  __HAL_UNLOCK(huart);
 8003476:	2300      	movs	r3, #0
 8003478:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 800347a:	2000      	movs	r0, #0
}
 800347c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(huart);
 800347e:	2002      	movs	r0, #2
 8003480:	e7fc      	b.n	800347c <HAL_UARTEx_SetRxFifoThreshold+0x44>
 8003482:	46c0      	nop			@ (mov r8, r8)
 8003484:	f1ffffff 	.word	0xf1ffffff

08003488 <LL_SetSystemCoreClock>:
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8003488:	4b01      	ldr	r3, [pc, #4]	@ (8003490 <LL_SetSystemCoreClock+0x8>)
 800348a:	6018      	str	r0, [r3, #0]
}
 800348c:	4770      	bx	lr
 800348e:	46c0      	nop			@ (mov r8, r8)
 8003490:	20000004 	.word	0x20000004

08003494 <_strtoul_l.isra.0>:
 8003494:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003496:	001e      	movs	r6, r3
 8003498:	4b3e      	ldr	r3, [pc, #248]	@ (8003594 <_strtoul_l.isra.0+0x100>)
 800349a:	0017      	movs	r7, r2
 800349c:	000c      	movs	r4, r1
 800349e:	469c      	mov	ip, r3
 80034a0:	2208      	movs	r2, #8
 80034a2:	b085      	sub	sp, #20
 80034a4:	9003      	str	r0, [sp, #12]
 80034a6:	9100      	str	r1, [sp, #0]
 80034a8:	0023      	movs	r3, r4
 80034aa:	4661      	mov	r1, ip
 80034ac:	781d      	ldrb	r5, [r3, #0]
 80034ae:	3401      	adds	r4, #1
 80034b0:	5d48      	ldrb	r0, [r1, r5]
 80034b2:	0001      	movs	r1, r0
 80034b4:	4011      	ands	r1, r2
 80034b6:	4210      	tst	r0, r2
 80034b8:	d1f6      	bne.n	80034a8 <_strtoul_l.isra.0+0x14>
 80034ba:	2d2d      	cmp	r5, #45	@ 0x2d
 80034bc:	d112      	bne.n	80034e4 <_strtoul_l.isra.0+0x50>
 80034be:	7825      	ldrb	r5, [r4, #0]
 80034c0:	1c9c      	adds	r4, r3, #2
 80034c2:	2301      	movs	r3, #1
 80034c4:	9302      	str	r3, [sp, #8]
 80034c6:	2210      	movs	r2, #16
 80034c8:	0033      	movs	r3, r6
 80034ca:	4393      	bics	r3, r2
 80034cc:	d116      	bne.n	80034fc <_strtoul_l.isra.0+0x68>
 80034ce:	2d30      	cmp	r5, #48	@ 0x30
 80034d0:	d10e      	bne.n	80034f0 <_strtoul_l.isra.0+0x5c>
 80034d2:	2120      	movs	r1, #32
 80034d4:	7823      	ldrb	r3, [r4, #0]
 80034d6:	438b      	bics	r3, r1
 80034d8:	2b58      	cmp	r3, #88	@ 0x58
 80034da:	d109      	bne.n	80034f0 <_strtoul_l.isra.0+0x5c>
 80034dc:	7865      	ldrb	r5, [r4, #1]
 80034de:	3402      	adds	r4, #2
 80034e0:	2610      	movs	r6, #16
 80034e2:	e00b      	b.n	80034fc <_strtoul_l.isra.0+0x68>
 80034e4:	9102      	str	r1, [sp, #8]
 80034e6:	2d2b      	cmp	r5, #43	@ 0x2b
 80034e8:	d1ed      	bne.n	80034c6 <_strtoul_l.isra.0+0x32>
 80034ea:	7825      	ldrb	r5, [r4, #0]
 80034ec:	1c9c      	adds	r4, r3, #2
 80034ee:	e7ea      	b.n	80034c6 <_strtoul_l.isra.0+0x32>
 80034f0:	2e00      	cmp	r6, #0
 80034f2:	d1f5      	bne.n	80034e0 <_strtoul_l.isra.0+0x4c>
 80034f4:	360a      	adds	r6, #10
 80034f6:	2d30      	cmp	r5, #48	@ 0x30
 80034f8:	d100      	bne.n	80034fc <_strtoul_l.isra.0+0x68>
 80034fa:	3e02      	subs	r6, #2
 80034fc:	2001      	movs	r0, #1
 80034fe:	0031      	movs	r1, r6
 8003500:	4240      	negs	r0, r0
 8003502:	f7fc fe15 	bl	8000130 <__udivsi3>
 8003506:	9001      	str	r0, [sp, #4]
 8003508:	2001      	movs	r0, #1
 800350a:	0031      	movs	r1, r6
 800350c:	4240      	negs	r0, r0
 800350e:	f7fc fe95 	bl	800023c <__aeabi_uidivmod>
 8003512:	2300      	movs	r3, #0
 8003514:	2201      	movs	r2, #1
 8003516:	0018      	movs	r0, r3
 8003518:	4694      	mov	ip, r2
 800351a:	002a      	movs	r2, r5
 800351c:	3a30      	subs	r2, #48	@ 0x30
 800351e:	2a09      	cmp	r2, #9
 8003520:	d812      	bhi.n	8003548 <_strtoul_l.isra.0+0xb4>
 8003522:	0015      	movs	r5, r2
 8003524:	42ae      	cmp	r6, r5
 8003526:	dd1e      	ble.n	8003566 <_strtoul_l.isra.0+0xd2>
 8003528:	1c5a      	adds	r2, r3, #1
 800352a:	d00a      	beq.n	8003542 <_strtoul_l.isra.0+0xae>
 800352c:	2301      	movs	r3, #1
 800352e:	9a01      	ldr	r2, [sp, #4]
 8003530:	425b      	negs	r3, r3
 8003532:	4282      	cmp	r2, r0
 8003534:	d305      	bcc.n	8003542 <_strtoul_l.isra.0+0xae>
 8003536:	d101      	bne.n	800353c <_strtoul_l.isra.0+0xa8>
 8003538:	42a9      	cmp	r1, r5
 800353a:	db11      	blt.n	8003560 <_strtoul_l.isra.0+0xcc>
 800353c:	4663      	mov	r3, ip
 800353e:	4370      	muls	r0, r6
 8003540:	1828      	adds	r0, r5, r0
 8003542:	7825      	ldrb	r5, [r4, #0]
 8003544:	3401      	adds	r4, #1
 8003546:	e7e8      	b.n	800351a <_strtoul_l.isra.0+0x86>
 8003548:	002a      	movs	r2, r5
 800354a:	3a41      	subs	r2, #65	@ 0x41
 800354c:	2a19      	cmp	r2, #25
 800354e:	d801      	bhi.n	8003554 <_strtoul_l.isra.0+0xc0>
 8003550:	3d37      	subs	r5, #55	@ 0x37
 8003552:	e7e7      	b.n	8003524 <_strtoul_l.isra.0+0x90>
 8003554:	002a      	movs	r2, r5
 8003556:	3a61      	subs	r2, #97	@ 0x61
 8003558:	2a19      	cmp	r2, #25
 800355a:	d804      	bhi.n	8003566 <_strtoul_l.isra.0+0xd2>
 800355c:	3d57      	subs	r5, #87	@ 0x57
 800355e:	e7e1      	b.n	8003524 <_strtoul_l.isra.0+0x90>
 8003560:	2301      	movs	r3, #1
 8003562:	425b      	negs	r3, r3
 8003564:	e7ed      	b.n	8003542 <_strtoul_l.isra.0+0xae>
 8003566:	1c5a      	adds	r2, r3, #1
 8003568:	d107      	bne.n	800357a <_strtoul_l.isra.0+0xe6>
 800356a:	2222      	movs	r2, #34	@ 0x22
 800356c:	9903      	ldr	r1, [sp, #12]
 800356e:	0018      	movs	r0, r3
 8003570:	600a      	str	r2, [r1, #0]
 8003572:	2f00      	cmp	r7, #0
 8003574:	d109      	bne.n	800358a <_strtoul_l.isra.0+0xf6>
 8003576:	b005      	add	sp, #20
 8003578:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800357a:	9a02      	ldr	r2, [sp, #8]
 800357c:	2a00      	cmp	r2, #0
 800357e:	d000      	beq.n	8003582 <_strtoul_l.isra.0+0xee>
 8003580:	4240      	negs	r0, r0
 8003582:	2f00      	cmp	r7, #0
 8003584:	d0f7      	beq.n	8003576 <_strtoul_l.isra.0+0xe2>
 8003586:	2b00      	cmp	r3, #0
 8003588:	d001      	beq.n	800358e <_strtoul_l.isra.0+0xfa>
 800358a:	1e63      	subs	r3, r4, #1
 800358c:	9300      	str	r3, [sp, #0]
 800358e:	9b00      	ldr	r3, [sp, #0]
 8003590:	603b      	str	r3, [r7, #0]
 8003592:	e7f0      	b.n	8003576 <_strtoul_l.isra.0+0xe2>
 8003594:	080041f1 	.word	0x080041f1

08003598 <strtoul>:
 8003598:	b510      	push	{r4, lr}
 800359a:	4c04      	ldr	r4, [pc, #16]	@ (80035ac <strtoul+0x14>)
 800359c:	0013      	movs	r3, r2
 800359e:	000a      	movs	r2, r1
 80035a0:	0001      	movs	r1, r0
 80035a2:	6820      	ldr	r0, [r4, #0]
 80035a4:	f7ff ff76 	bl	8003494 <_strtoul_l.isra.0>
 80035a8:	bd10      	pop	{r4, pc}
 80035aa:	46c0      	nop			@ (mov r8, r8)
 80035ac:	20000010 	.word	0x20000010

080035b0 <_vsniprintf_r>:
 80035b0:	b530      	push	{r4, r5, lr}
 80035b2:	0005      	movs	r5, r0
 80035b4:	0014      	movs	r4, r2
 80035b6:	0008      	movs	r0, r1
 80035b8:	001a      	movs	r2, r3
 80035ba:	b09b      	sub	sp, #108	@ 0x6c
 80035bc:	2c00      	cmp	r4, #0
 80035be:	da05      	bge.n	80035cc <_vsniprintf_r+0x1c>
 80035c0:	238b      	movs	r3, #139	@ 0x8b
 80035c2:	2001      	movs	r0, #1
 80035c4:	602b      	str	r3, [r5, #0]
 80035c6:	4240      	negs	r0, r0
 80035c8:	b01b      	add	sp, #108	@ 0x6c
 80035ca:	bd30      	pop	{r4, r5, pc}
 80035cc:	2382      	movs	r3, #130	@ 0x82
 80035ce:	4669      	mov	r1, sp
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	818b      	strh	r3, [r1, #12]
 80035d4:	2100      	movs	r1, #0
 80035d6:	9000      	str	r0, [sp, #0]
 80035d8:	9119      	str	r1, [sp, #100]	@ 0x64
 80035da:	9004      	str	r0, [sp, #16]
 80035dc:	428c      	cmp	r4, r1
 80035de:	d000      	beq.n	80035e2 <_vsniprintf_r+0x32>
 80035e0:	1e61      	subs	r1, r4, #1
 80035e2:	2301      	movs	r3, #1
 80035e4:	9102      	str	r1, [sp, #8]
 80035e6:	9105      	str	r1, [sp, #20]
 80035e8:	4669      	mov	r1, sp
 80035ea:	425b      	negs	r3, r3
 80035ec:	81cb      	strh	r3, [r1, #14]
 80035ee:	0028      	movs	r0, r5
 80035f0:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80035f2:	f000 f9ed 	bl	80039d0 <_svfiprintf_r>
 80035f6:	1c43      	adds	r3, r0, #1
 80035f8:	da01      	bge.n	80035fe <_vsniprintf_r+0x4e>
 80035fa:	238b      	movs	r3, #139	@ 0x8b
 80035fc:	602b      	str	r3, [r5, #0]
 80035fe:	2c00      	cmp	r4, #0
 8003600:	d0e2      	beq.n	80035c8 <_vsniprintf_r+0x18>
 8003602:	2200      	movs	r2, #0
 8003604:	9b00      	ldr	r3, [sp, #0]
 8003606:	701a      	strb	r2, [r3, #0]
 8003608:	e7de      	b.n	80035c8 <_vsniprintf_r+0x18>
	...

0800360c <vsniprintf>:
 800360c:	b513      	push	{r0, r1, r4, lr}
 800360e:	4c04      	ldr	r4, [pc, #16]	@ (8003620 <vsniprintf+0x14>)
 8003610:	9300      	str	r3, [sp, #0]
 8003612:	0013      	movs	r3, r2
 8003614:	000a      	movs	r2, r1
 8003616:	0001      	movs	r1, r0
 8003618:	6820      	ldr	r0, [r4, #0]
 800361a:	f7ff ffc9 	bl	80035b0 <_vsniprintf_r>
 800361e:	bd16      	pop	{r1, r2, r4, pc}
 8003620:	20000010 	.word	0x20000010

08003624 <memset>:
 8003624:	0003      	movs	r3, r0
 8003626:	1882      	adds	r2, r0, r2
 8003628:	4293      	cmp	r3, r2
 800362a:	d100      	bne.n	800362e <memset+0xa>
 800362c:	4770      	bx	lr
 800362e:	7019      	strb	r1, [r3, #0]
 8003630:	3301      	adds	r3, #1
 8003632:	e7f9      	b.n	8003628 <memset+0x4>

08003634 <strncpy>:
 8003634:	0003      	movs	r3, r0
 8003636:	b530      	push	{r4, r5, lr}
 8003638:	001d      	movs	r5, r3
 800363a:	2a00      	cmp	r2, #0
 800363c:	d006      	beq.n	800364c <strncpy+0x18>
 800363e:	780c      	ldrb	r4, [r1, #0]
 8003640:	3a01      	subs	r2, #1
 8003642:	3301      	adds	r3, #1
 8003644:	702c      	strb	r4, [r5, #0]
 8003646:	3101      	adds	r1, #1
 8003648:	2c00      	cmp	r4, #0
 800364a:	d1f5      	bne.n	8003638 <strncpy+0x4>
 800364c:	2100      	movs	r1, #0
 800364e:	189a      	adds	r2, r3, r2
 8003650:	4293      	cmp	r3, r2
 8003652:	d100      	bne.n	8003656 <strncpy+0x22>
 8003654:	bd30      	pop	{r4, r5, pc}
 8003656:	7019      	strb	r1, [r3, #0]
 8003658:	3301      	adds	r3, #1
 800365a:	e7f9      	b.n	8003650 <strncpy+0x1c>

0800365c <__strtok_r>:
 800365c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800365e:	1e04      	subs	r4, r0, #0
 8003660:	d102      	bne.n	8003668 <__strtok_r+0xc>
 8003662:	6814      	ldr	r4, [r2, #0]
 8003664:	2c00      	cmp	r4, #0
 8003666:	d009      	beq.n	800367c <__strtok_r+0x20>
 8003668:	0020      	movs	r0, r4
 800366a:	000e      	movs	r6, r1
 800366c:	7805      	ldrb	r5, [r0, #0]
 800366e:	3401      	adds	r4, #1
 8003670:	7837      	ldrb	r7, [r6, #0]
 8003672:	2f00      	cmp	r7, #0
 8003674:	d104      	bne.n	8003680 <__strtok_r+0x24>
 8003676:	2d00      	cmp	r5, #0
 8003678:	d10d      	bne.n	8003696 <__strtok_r+0x3a>
 800367a:	6015      	str	r5, [r2, #0]
 800367c:	2000      	movs	r0, #0
 800367e:	e006      	b.n	800368e <__strtok_r+0x32>
 8003680:	3601      	adds	r6, #1
 8003682:	42bd      	cmp	r5, r7
 8003684:	d1f4      	bne.n	8003670 <__strtok_r+0x14>
 8003686:	2b00      	cmp	r3, #0
 8003688:	d1ee      	bne.n	8003668 <__strtok_r+0xc>
 800368a:	6014      	str	r4, [r2, #0]
 800368c:	7003      	strb	r3, [r0, #0]
 800368e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003690:	3301      	adds	r3, #1
 8003692:	2d00      	cmp	r5, #0
 8003694:	d103      	bne.n	800369e <__strtok_r+0x42>
 8003696:	0026      	movs	r6, r4
 8003698:	000b      	movs	r3, r1
 800369a:	7837      	ldrb	r7, [r6, #0]
 800369c:	3401      	adds	r4, #1
 800369e:	781d      	ldrb	r5, [r3, #0]
 80036a0:	42af      	cmp	r7, r5
 80036a2:	d1f5      	bne.n	8003690 <__strtok_r+0x34>
 80036a4:	2300      	movs	r3, #0
 80036a6:	0019      	movs	r1, r3
 80036a8:	429f      	cmp	r7, r3
 80036aa:	d001      	beq.n	80036b0 <__strtok_r+0x54>
 80036ac:	0023      	movs	r3, r4
 80036ae:	7031      	strb	r1, [r6, #0]
 80036b0:	6013      	str	r3, [r2, #0]
 80036b2:	e7ec      	b.n	800368e <__strtok_r+0x32>

080036b4 <strtok_r>:
 80036b4:	b510      	push	{r4, lr}
 80036b6:	2301      	movs	r3, #1
 80036b8:	f7ff ffd0 	bl	800365c <__strtok_r>
 80036bc:	bd10      	pop	{r4, pc}
	...

080036c0 <__errno>:
 80036c0:	4b01      	ldr	r3, [pc, #4]	@ (80036c8 <__errno+0x8>)
 80036c2:	6818      	ldr	r0, [r3, #0]
 80036c4:	4770      	bx	lr
 80036c6:	46c0      	nop			@ (mov r8, r8)
 80036c8:	20000010 	.word	0x20000010

080036cc <__libc_init_array>:
 80036cc:	b570      	push	{r4, r5, r6, lr}
 80036ce:	2600      	movs	r6, #0
 80036d0:	4c0c      	ldr	r4, [pc, #48]	@ (8003704 <__libc_init_array+0x38>)
 80036d2:	4d0d      	ldr	r5, [pc, #52]	@ (8003708 <__libc_init_array+0x3c>)
 80036d4:	1b64      	subs	r4, r4, r5
 80036d6:	10a4      	asrs	r4, r4, #2
 80036d8:	42a6      	cmp	r6, r4
 80036da:	d109      	bne.n	80036f0 <__libc_init_array+0x24>
 80036dc:	2600      	movs	r6, #0
 80036de:	f000 fc61 	bl	8003fa4 <_init>
 80036e2:	4c0a      	ldr	r4, [pc, #40]	@ (800370c <__libc_init_array+0x40>)
 80036e4:	4d0a      	ldr	r5, [pc, #40]	@ (8003710 <__libc_init_array+0x44>)
 80036e6:	1b64      	subs	r4, r4, r5
 80036e8:	10a4      	asrs	r4, r4, #2
 80036ea:	42a6      	cmp	r6, r4
 80036ec:	d105      	bne.n	80036fa <__libc_init_array+0x2e>
 80036ee:	bd70      	pop	{r4, r5, r6, pc}
 80036f0:	00b3      	lsls	r3, r6, #2
 80036f2:	58eb      	ldr	r3, [r5, r3]
 80036f4:	4798      	blx	r3
 80036f6:	3601      	adds	r6, #1
 80036f8:	e7ee      	b.n	80036d8 <__libc_init_array+0xc>
 80036fa:	00b3      	lsls	r3, r6, #2
 80036fc:	58eb      	ldr	r3, [r5, r3]
 80036fe:	4798      	blx	r3
 8003700:	3601      	adds	r6, #1
 8003702:	e7f2      	b.n	80036ea <__libc_init_array+0x1e>
 8003704:	08004324 	.word	0x08004324
 8003708:	08004324 	.word	0x08004324
 800370c:	08004328 	.word	0x08004328
 8003710:	08004324 	.word	0x08004324

08003714 <__retarget_lock_acquire_recursive>:
 8003714:	4770      	bx	lr

08003716 <__retarget_lock_release_recursive>:
 8003716:	4770      	bx	lr

08003718 <_free_r>:
 8003718:	b570      	push	{r4, r5, r6, lr}
 800371a:	0005      	movs	r5, r0
 800371c:	1e0c      	subs	r4, r1, #0
 800371e:	d010      	beq.n	8003742 <_free_r+0x2a>
 8003720:	3c04      	subs	r4, #4
 8003722:	6823      	ldr	r3, [r4, #0]
 8003724:	2b00      	cmp	r3, #0
 8003726:	da00      	bge.n	800372a <_free_r+0x12>
 8003728:	18e4      	adds	r4, r4, r3
 800372a:	0028      	movs	r0, r5
 800372c:	f000 f8e0 	bl	80038f0 <__malloc_lock>
 8003730:	4a1d      	ldr	r2, [pc, #116]	@ (80037a8 <_free_r+0x90>)
 8003732:	6813      	ldr	r3, [r2, #0]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d105      	bne.n	8003744 <_free_r+0x2c>
 8003738:	6063      	str	r3, [r4, #4]
 800373a:	6014      	str	r4, [r2, #0]
 800373c:	0028      	movs	r0, r5
 800373e:	f000 f8df 	bl	8003900 <__malloc_unlock>
 8003742:	bd70      	pop	{r4, r5, r6, pc}
 8003744:	42a3      	cmp	r3, r4
 8003746:	d908      	bls.n	800375a <_free_r+0x42>
 8003748:	6820      	ldr	r0, [r4, #0]
 800374a:	1821      	adds	r1, r4, r0
 800374c:	428b      	cmp	r3, r1
 800374e:	d1f3      	bne.n	8003738 <_free_r+0x20>
 8003750:	6819      	ldr	r1, [r3, #0]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	1809      	adds	r1, r1, r0
 8003756:	6021      	str	r1, [r4, #0]
 8003758:	e7ee      	b.n	8003738 <_free_r+0x20>
 800375a:	001a      	movs	r2, r3
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d001      	beq.n	8003766 <_free_r+0x4e>
 8003762:	42a3      	cmp	r3, r4
 8003764:	d9f9      	bls.n	800375a <_free_r+0x42>
 8003766:	6811      	ldr	r1, [r2, #0]
 8003768:	1850      	adds	r0, r2, r1
 800376a:	42a0      	cmp	r0, r4
 800376c:	d10b      	bne.n	8003786 <_free_r+0x6e>
 800376e:	6820      	ldr	r0, [r4, #0]
 8003770:	1809      	adds	r1, r1, r0
 8003772:	1850      	adds	r0, r2, r1
 8003774:	6011      	str	r1, [r2, #0]
 8003776:	4283      	cmp	r3, r0
 8003778:	d1e0      	bne.n	800373c <_free_r+0x24>
 800377a:	6818      	ldr	r0, [r3, #0]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	1841      	adds	r1, r0, r1
 8003780:	6011      	str	r1, [r2, #0]
 8003782:	6053      	str	r3, [r2, #4]
 8003784:	e7da      	b.n	800373c <_free_r+0x24>
 8003786:	42a0      	cmp	r0, r4
 8003788:	d902      	bls.n	8003790 <_free_r+0x78>
 800378a:	230c      	movs	r3, #12
 800378c:	602b      	str	r3, [r5, #0]
 800378e:	e7d5      	b.n	800373c <_free_r+0x24>
 8003790:	6820      	ldr	r0, [r4, #0]
 8003792:	1821      	adds	r1, r4, r0
 8003794:	428b      	cmp	r3, r1
 8003796:	d103      	bne.n	80037a0 <_free_r+0x88>
 8003798:	6819      	ldr	r1, [r3, #0]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	1809      	adds	r1, r1, r0
 800379e:	6021      	str	r1, [r4, #0]
 80037a0:	6063      	str	r3, [r4, #4]
 80037a2:	6054      	str	r4, [r2, #4]
 80037a4:	e7ca      	b.n	800373c <_free_r+0x24>
 80037a6:	46c0      	nop			@ (mov r8, r8)
 80037a8:	200006cc 	.word	0x200006cc

080037ac <sbrk_aligned>:
 80037ac:	b570      	push	{r4, r5, r6, lr}
 80037ae:	4e0f      	ldr	r6, [pc, #60]	@ (80037ec <sbrk_aligned+0x40>)
 80037b0:	000d      	movs	r5, r1
 80037b2:	6831      	ldr	r1, [r6, #0]
 80037b4:	0004      	movs	r4, r0
 80037b6:	2900      	cmp	r1, #0
 80037b8:	d102      	bne.n	80037c0 <sbrk_aligned+0x14>
 80037ba:	f000 fb95 	bl	8003ee8 <_sbrk_r>
 80037be:	6030      	str	r0, [r6, #0]
 80037c0:	0029      	movs	r1, r5
 80037c2:	0020      	movs	r0, r4
 80037c4:	f000 fb90 	bl	8003ee8 <_sbrk_r>
 80037c8:	1c43      	adds	r3, r0, #1
 80037ca:	d103      	bne.n	80037d4 <sbrk_aligned+0x28>
 80037cc:	2501      	movs	r5, #1
 80037ce:	426d      	negs	r5, r5
 80037d0:	0028      	movs	r0, r5
 80037d2:	bd70      	pop	{r4, r5, r6, pc}
 80037d4:	2303      	movs	r3, #3
 80037d6:	1cc5      	adds	r5, r0, #3
 80037d8:	439d      	bics	r5, r3
 80037da:	42a8      	cmp	r0, r5
 80037dc:	d0f8      	beq.n	80037d0 <sbrk_aligned+0x24>
 80037de:	1a29      	subs	r1, r5, r0
 80037e0:	0020      	movs	r0, r4
 80037e2:	f000 fb81 	bl	8003ee8 <_sbrk_r>
 80037e6:	3001      	adds	r0, #1
 80037e8:	d1f2      	bne.n	80037d0 <sbrk_aligned+0x24>
 80037ea:	e7ef      	b.n	80037cc <sbrk_aligned+0x20>
 80037ec:	200006c8 	.word	0x200006c8

080037f0 <_malloc_r>:
 80037f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80037f2:	2203      	movs	r2, #3
 80037f4:	1ccb      	adds	r3, r1, #3
 80037f6:	4393      	bics	r3, r2
 80037f8:	3308      	adds	r3, #8
 80037fa:	0005      	movs	r5, r0
 80037fc:	001f      	movs	r7, r3
 80037fe:	2b0c      	cmp	r3, #12
 8003800:	d234      	bcs.n	800386c <_malloc_r+0x7c>
 8003802:	270c      	movs	r7, #12
 8003804:	42b9      	cmp	r1, r7
 8003806:	d833      	bhi.n	8003870 <_malloc_r+0x80>
 8003808:	0028      	movs	r0, r5
 800380a:	f000 f871 	bl	80038f0 <__malloc_lock>
 800380e:	4e37      	ldr	r6, [pc, #220]	@ (80038ec <_malloc_r+0xfc>)
 8003810:	6833      	ldr	r3, [r6, #0]
 8003812:	001c      	movs	r4, r3
 8003814:	2c00      	cmp	r4, #0
 8003816:	d12f      	bne.n	8003878 <_malloc_r+0x88>
 8003818:	0039      	movs	r1, r7
 800381a:	0028      	movs	r0, r5
 800381c:	f7ff ffc6 	bl	80037ac <sbrk_aligned>
 8003820:	0004      	movs	r4, r0
 8003822:	1c43      	adds	r3, r0, #1
 8003824:	d15f      	bne.n	80038e6 <_malloc_r+0xf6>
 8003826:	6834      	ldr	r4, [r6, #0]
 8003828:	9400      	str	r4, [sp, #0]
 800382a:	9b00      	ldr	r3, [sp, #0]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d14a      	bne.n	80038c6 <_malloc_r+0xd6>
 8003830:	2c00      	cmp	r4, #0
 8003832:	d052      	beq.n	80038da <_malloc_r+0xea>
 8003834:	6823      	ldr	r3, [r4, #0]
 8003836:	0028      	movs	r0, r5
 8003838:	18e3      	adds	r3, r4, r3
 800383a:	9900      	ldr	r1, [sp, #0]
 800383c:	9301      	str	r3, [sp, #4]
 800383e:	f000 fb53 	bl	8003ee8 <_sbrk_r>
 8003842:	9b01      	ldr	r3, [sp, #4]
 8003844:	4283      	cmp	r3, r0
 8003846:	d148      	bne.n	80038da <_malloc_r+0xea>
 8003848:	6823      	ldr	r3, [r4, #0]
 800384a:	0028      	movs	r0, r5
 800384c:	1aff      	subs	r7, r7, r3
 800384e:	0039      	movs	r1, r7
 8003850:	f7ff ffac 	bl	80037ac <sbrk_aligned>
 8003854:	3001      	adds	r0, #1
 8003856:	d040      	beq.n	80038da <_malloc_r+0xea>
 8003858:	6823      	ldr	r3, [r4, #0]
 800385a:	19db      	adds	r3, r3, r7
 800385c:	6023      	str	r3, [r4, #0]
 800385e:	6833      	ldr	r3, [r6, #0]
 8003860:	685a      	ldr	r2, [r3, #4]
 8003862:	2a00      	cmp	r2, #0
 8003864:	d133      	bne.n	80038ce <_malloc_r+0xde>
 8003866:	9b00      	ldr	r3, [sp, #0]
 8003868:	6033      	str	r3, [r6, #0]
 800386a:	e019      	b.n	80038a0 <_malloc_r+0xb0>
 800386c:	2b00      	cmp	r3, #0
 800386e:	dac9      	bge.n	8003804 <_malloc_r+0x14>
 8003870:	230c      	movs	r3, #12
 8003872:	602b      	str	r3, [r5, #0]
 8003874:	2000      	movs	r0, #0
 8003876:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003878:	6821      	ldr	r1, [r4, #0]
 800387a:	1bc9      	subs	r1, r1, r7
 800387c:	d420      	bmi.n	80038c0 <_malloc_r+0xd0>
 800387e:	290b      	cmp	r1, #11
 8003880:	d90a      	bls.n	8003898 <_malloc_r+0xa8>
 8003882:	19e2      	adds	r2, r4, r7
 8003884:	6027      	str	r7, [r4, #0]
 8003886:	42a3      	cmp	r3, r4
 8003888:	d104      	bne.n	8003894 <_malloc_r+0xa4>
 800388a:	6032      	str	r2, [r6, #0]
 800388c:	6863      	ldr	r3, [r4, #4]
 800388e:	6011      	str	r1, [r2, #0]
 8003890:	6053      	str	r3, [r2, #4]
 8003892:	e005      	b.n	80038a0 <_malloc_r+0xb0>
 8003894:	605a      	str	r2, [r3, #4]
 8003896:	e7f9      	b.n	800388c <_malloc_r+0x9c>
 8003898:	6862      	ldr	r2, [r4, #4]
 800389a:	42a3      	cmp	r3, r4
 800389c:	d10e      	bne.n	80038bc <_malloc_r+0xcc>
 800389e:	6032      	str	r2, [r6, #0]
 80038a0:	0028      	movs	r0, r5
 80038a2:	f000 f82d 	bl	8003900 <__malloc_unlock>
 80038a6:	0020      	movs	r0, r4
 80038a8:	2207      	movs	r2, #7
 80038aa:	300b      	adds	r0, #11
 80038ac:	1d23      	adds	r3, r4, #4
 80038ae:	4390      	bics	r0, r2
 80038b0:	1ac2      	subs	r2, r0, r3
 80038b2:	4298      	cmp	r0, r3
 80038b4:	d0df      	beq.n	8003876 <_malloc_r+0x86>
 80038b6:	1a1b      	subs	r3, r3, r0
 80038b8:	50a3      	str	r3, [r4, r2]
 80038ba:	e7dc      	b.n	8003876 <_malloc_r+0x86>
 80038bc:	605a      	str	r2, [r3, #4]
 80038be:	e7ef      	b.n	80038a0 <_malloc_r+0xb0>
 80038c0:	0023      	movs	r3, r4
 80038c2:	6864      	ldr	r4, [r4, #4]
 80038c4:	e7a6      	b.n	8003814 <_malloc_r+0x24>
 80038c6:	9c00      	ldr	r4, [sp, #0]
 80038c8:	6863      	ldr	r3, [r4, #4]
 80038ca:	9300      	str	r3, [sp, #0]
 80038cc:	e7ad      	b.n	800382a <_malloc_r+0x3a>
 80038ce:	001a      	movs	r2, r3
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	42a3      	cmp	r3, r4
 80038d4:	d1fb      	bne.n	80038ce <_malloc_r+0xde>
 80038d6:	2300      	movs	r3, #0
 80038d8:	e7da      	b.n	8003890 <_malloc_r+0xa0>
 80038da:	230c      	movs	r3, #12
 80038dc:	0028      	movs	r0, r5
 80038de:	602b      	str	r3, [r5, #0]
 80038e0:	f000 f80e 	bl	8003900 <__malloc_unlock>
 80038e4:	e7c6      	b.n	8003874 <_malloc_r+0x84>
 80038e6:	6007      	str	r7, [r0, #0]
 80038e8:	e7da      	b.n	80038a0 <_malloc_r+0xb0>
 80038ea:	46c0      	nop			@ (mov r8, r8)
 80038ec:	200006cc 	.word	0x200006cc

080038f0 <__malloc_lock>:
 80038f0:	b510      	push	{r4, lr}
 80038f2:	4802      	ldr	r0, [pc, #8]	@ (80038fc <__malloc_lock+0xc>)
 80038f4:	f7ff ff0e 	bl	8003714 <__retarget_lock_acquire_recursive>
 80038f8:	bd10      	pop	{r4, pc}
 80038fa:	46c0      	nop			@ (mov r8, r8)
 80038fc:	200006c4 	.word	0x200006c4

08003900 <__malloc_unlock>:
 8003900:	b510      	push	{r4, lr}
 8003902:	4802      	ldr	r0, [pc, #8]	@ (800390c <__malloc_unlock+0xc>)
 8003904:	f7ff ff07 	bl	8003716 <__retarget_lock_release_recursive>
 8003908:	bd10      	pop	{r4, pc}
 800390a:	46c0      	nop			@ (mov r8, r8)
 800390c:	200006c4 	.word	0x200006c4

08003910 <__ssputs_r>:
 8003910:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003912:	688e      	ldr	r6, [r1, #8]
 8003914:	b085      	sub	sp, #20
 8003916:	001f      	movs	r7, r3
 8003918:	000c      	movs	r4, r1
 800391a:	680b      	ldr	r3, [r1, #0]
 800391c:	9002      	str	r0, [sp, #8]
 800391e:	9203      	str	r2, [sp, #12]
 8003920:	42be      	cmp	r6, r7
 8003922:	d830      	bhi.n	8003986 <__ssputs_r+0x76>
 8003924:	210c      	movs	r1, #12
 8003926:	5e62      	ldrsh	r2, [r4, r1]
 8003928:	2190      	movs	r1, #144	@ 0x90
 800392a:	00c9      	lsls	r1, r1, #3
 800392c:	420a      	tst	r2, r1
 800392e:	d028      	beq.n	8003982 <__ssputs_r+0x72>
 8003930:	2003      	movs	r0, #3
 8003932:	6921      	ldr	r1, [r4, #16]
 8003934:	1a5b      	subs	r3, r3, r1
 8003936:	9301      	str	r3, [sp, #4]
 8003938:	6963      	ldr	r3, [r4, #20]
 800393a:	4343      	muls	r3, r0
 800393c:	9801      	ldr	r0, [sp, #4]
 800393e:	0fdd      	lsrs	r5, r3, #31
 8003940:	18ed      	adds	r5, r5, r3
 8003942:	1c7b      	adds	r3, r7, #1
 8003944:	181b      	adds	r3, r3, r0
 8003946:	106d      	asrs	r5, r5, #1
 8003948:	42ab      	cmp	r3, r5
 800394a:	d900      	bls.n	800394e <__ssputs_r+0x3e>
 800394c:	001d      	movs	r5, r3
 800394e:	0552      	lsls	r2, r2, #21
 8003950:	d528      	bpl.n	80039a4 <__ssputs_r+0x94>
 8003952:	0029      	movs	r1, r5
 8003954:	9802      	ldr	r0, [sp, #8]
 8003956:	f7ff ff4b 	bl	80037f0 <_malloc_r>
 800395a:	1e06      	subs	r6, r0, #0
 800395c:	d02c      	beq.n	80039b8 <__ssputs_r+0xa8>
 800395e:	9a01      	ldr	r2, [sp, #4]
 8003960:	6921      	ldr	r1, [r4, #16]
 8003962:	f000 fade 	bl	8003f22 <memcpy>
 8003966:	89a2      	ldrh	r2, [r4, #12]
 8003968:	4b18      	ldr	r3, [pc, #96]	@ (80039cc <__ssputs_r+0xbc>)
 800396a:	401a      	ands	r2, r3
 800396c:	2380      	movs	r3, #128	@ 0x80
 800396e:	4313      	orrs	r3, r2
 8003970:	81a3      	strh	r3, [r4, #12]
 8003972:	9b01      	ldr	r3, [sp, #4]
 8003974:	6126      	str	r6, [r4, #16]
 8003976:	18f6      	adds	r6, r6, r3
 8003978:	6026      	str	r6, [r4, #0]
 800397a:	003e      	movs	r6, r7
 800397c:	6165      	str	r5, [r4, #20]
 800397e:	1aed      	subs	r5, r5, r3
 8003980:	60a5      	str	r5, [r4, #8]
 8003982:	42be      	cmp	r6, r7
 8003984:	d900      	bls.n	8003988 <__ssputs_r+0x78>
 8003986:	003e      	movs	r6, r7
 8003988:	0032      	movs	r2, r6
 800398a:	9903      	ldr	r1, [sp, #12]
 800398c:	6820      	ldr	r0, [r4, #0]
 800398e:	f000 fa99 	bl	8003ec4 <memmove>
 8003992:	2000      	movs	r0, #0
 8003994:	68a3      	ldr	r3, [r4, #8]
 8003996:	1b9b      	subs	r3, r3, r6
 8003998:	60a3      	str	r3, [r4, #8]
 800399a:	6823      	ldr	r3, [r4, #0]
 800399c:	199b      	adds	r3, r3, r6
 800399e:	6023      	str	r3, [r4, #0]
 80039a0:	b005      	add	sp, #20
 80039a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039a4:	002a      	movs	r2, r5
 80039a6:	9802      	ldr	r0, [sp, #8]
 80039a8:	f000 fac4 	bl	8003f34 <_realloc_r>
 80039ac:	1e06      	subs	r6, r0, #0
 80039ae:	d1e0      	bne.n	8003972 <__ssputs_r+0x62>
 80039b0:	6921      	ldr	r1, [r4, #16]
 80039b2:	9802      	ldr	r0, [sp, #8]
 80039b4:	f7ff feb0 	bl	8003718 <_free_r>
 80039b8:	230c      	movs	r3, #12
 80039ba:	2001      	movs	r0, #1
 80039bc:	9a02      	ldr	r2, [sp, #8]
 80039be:	4240      	negs	r0, r0
 80039c0:	6013      	str	r3, [r2, #0]
 80039c2:	89a2      	ldrh	r2, [r4, #12]
 80039c4:	3334      	adds	r3, #52	@ 0x34
 80039c6:	4313      	orrs	r3, r2
 80039c8:	81a3      	strh	r3, [r4, #12]
 80039ca:	e7e9      	b.n	80039a0 <__ssputs_r+0x90>
 80039cc:	fffffb7f 	.word	0xfffffb7f

080039d0 <_svfiprintf_r>:
 80039d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039d2:	b0a1      	sub	sp, #132	@ 0x84
 80039d4:	9003      	str	r0, [sp, #12]
 80039d6:	001d      	movs	r5, r3
 80039d8:	898b      	ldrh	r3, [r1, #12]
 80039da:	000f      	movs	r7, r1
 80039dc:	0016      	movs	r6, r2
 80039de:	061b      	lsls	r3, r3, #24
 80039e0:	d511      	bpl.n	8003a06 <_svfiprintf_r+0x36>
 80039e2:	690b      	ldr	r3, [r1, #16]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d10e      	bne.n	8003a06 <_svfiprintf_r+0x36>
 80039e8:	2140      	movs	r1, #64	@ 0x40
 80039ea:	f7ff ff01 	bl	80037f0 <_malloc_r>
 80039ee:	6038      	str	r0, [r7, #0]
 80039f0:	6138      	str	r0, [r7, #16]
 80039f2:	2800      	cmp	r0, #0
 80039f4:	d105      	bne.n	8003a02 <_svfiprintf_r+0x32>
 80039f6:	230c      	movs	r3, #12
 80039f8:	9a03      	ldr	r2, [sp, #12]
 80039fa:	6013      	str	r3, [r2, #0]
 80039fc:	2001      	movs	r0, #1
 80039fe:	4240      	negs	r0, r0
 8003a00:	e0cf      	b.n	8003ba2 <_svfiprintf_r+0x1d2>
 8003a02:	2340      	movs	r3, #64	@ 0x40
 8003a04:	617b      	str	r3, [r7, #20]
 8003a06:	2300      	movs	r3, #0
 8003a08:	ac08      	add	r4, sp, #32
 8003a0a:	6163      	str	r3, [r4, #20]
 8003a0c:	3320      	adds	r3, #32
 8003a0e:	7663      	strb	r3, [r4, #25]
 8003a10:	3310      	adds	r3, #16
 8003a12:	76a3      	strb	r3, [r4, #26]
 8003a14:	9507      	str	r5, [sp, #28]
 8003a16:	0035      	movs	r5, r6
 8003a18:	782b      	ldrb	r3, [r5, #0]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d001      	beq.n	8003a22 <_svfiprintf_r+0x52>
 8003a1e:	2b25      	cmp	r3, #37	@ 0x25
 8003a20:	d148      	bne.n	8003ab4 <_svfiprintf_r+0xe4>
 8003a22:	1bab      	subs	r3, r5, r6
 8003a24:	9305      	str	r3, [sp, #20]
 8003a26:	42b5      	cmp	r5, r6
 8003a28:	d00b      	beq.n	8003a42 <_svfiprintf_r+0x72>
 8003a2a:	0032      	movs	r2, r6
 8003a2c:	0039      	movs	r1, r7
 8003a2e:	9803      	ldr	r0, [sp, #12]
 8003a30:	f7ff ff6e 	bl	8003910 <__ssputs_r>
 8003a34:	3001      	adds	r0, #1
 8003a36:	d100      	bne.n	8003a3a <_svfiprintf_r+0x6a>
 8003a38:	e0ae      	b.n	8003b98 <_svfiprintf_r+0x1c8>
 8003a3a:	6963      	ldr	r3, [r4, #20]
 8003a3c:	9a05      	ldr	r2, [sp, #20]
 8003a3e:	189b      	adds	r3, r3, r2
 8003a40:	6163      	str	r3, [r4, #20]
 8003a42:	782b      	ldrb	r3, [r5, #0]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d100      	bne.n	8003a4a <_svfiprintf_r+0x7a>
 8003a48:	e0a6      	b.n	8003b98 <_svfiprintf_r+0x1c8>
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	4252      	negs	r2, r2
 8003a50:	6062      	str	r2, [r4, #4]
 8003a52:	a904      	add	r1, sp, #16
 8003a54:	3254      	adds	r2, #84	@ 0x54
 8003a56:	1852      	adds	r2, r2, r1
 8003a58:	1c6e      	adds	r6, r5, #1
 8003a5a:	6023      	str	r3, [r4, #0]
 8003a5c:	60e3      	str	r3, [r4, #12]
 8003a5e:	60a3      	str	r3, [r4, #8]
 8003a60:	7013      	strb	r3, [r2, #0]
 8003a62:	65a3      	str	r3, [r4, #88]	@ 0x58
 8003a64:	4b54      	ldr	r3, [pc, #336]	@ (8003bb8 <_svfiprintf_r+0x1e8>)
 8003a66:	2205      	movs	r2, #5
 8003a68:	0018      	movs	r0, r3
 8003a6a:	7831      	ldrb	r1, [r6, #0]
 8003a6c:	9305      	str	r3, [sp, #20]
 8003a6e:	f000 fa4d 	bl	8003f0c <memchr>
 8003a72:	1c75      	adds	r5, r6, #1
 8003a74:	2800      	cmp	r0, #0
 8003a76:	d11f      	bne.n	8003ab8 <_svfiprintf_r+0xe8>
 8003a78:	6822      	ldr	r2, [r4, #0]
 8003a7a:	06d3      	lsls	r3, r2, #27
 8003a7c:	d504      	bpl.n	8003a88 <_svfiprintf_r+0xb8>
 8003a7e:	2353      	movs	r3, #83	@ 0x53
 8003a80:	a904      	add	r1, sp, #16
 8003a82:	185b      	adds	r3, r3, r1
 8003a84:	2120      	movs	r1, #32
 8003a86:	7019      	strb	r1, [r3, #0]
 8003a88:	0713      	lsls	r3, r2, #28
 8003a8a:	d504      	bpl.n	8003a96 <_svfiprintf_r+0xc6>
 8003a8c:	2353      	movs	r3, #83	@ 0x53
 8003a8e:	a904      	add	r1, sp, #16
 8003a90:	185b      	adds	r3, r3, r1
 8003a92:	212b      	movs	r1, #43	@ 0x2b
 8003a94:	7019      	strb	r1, [r3, #0]
 8003a96:	7833      	ldrb	r3, [r6, #0]
 8003a98:	2b2a      	cmp	r3, #42	@ 0x2a
 8003a9a:	d016      	beq.n	8003aca <_svfiprintf_r+0xfa>
 8003a9c:	0035      	movs	r5, r6
 8003a9e:	2100      	movs	r1, #0
 8003aa0:	200a      	movs	r0, #10
 8003aa2:	68e3      	ldr	r3, [r4, #12]
 8003aa4:	782a      	ldrb	r2, [r5, #0]
 8003aa6:	1c6e      	adds	r6, r5, #1
 8003aa8:	3a30      	subs	r2, #48	@ 0x30
 8003aaa:	2a09      	cmp	r2, #9
 8003aac:	d950      	bls.n	8003b50 <_svfiprintf_r+0x180>
 8003aae:	2900      	cmp	r1, #0
 8003ab0:	d111      	bne.n	8003ad6 <_svfiprintf_r+0x106>
 8003ab2:	e017      	b.n	8003ae4 <_svfiprintf_r+0x114>
 8003ab4:	3501      	adds	r5, #1
 8003ab6:	e7af      	b.n	8003a18 <_svfiprintf_r+0x48>
 8003ab8:	9b05      	ldr	r3, [sp, #20]
 8003aba:	6822      	ldr	r2, [r4, #0]
 8003abc:	1ac0      	subs	r0, r0, r3
 8003abe:	2301      	movs	r3, #1
 8003ac0:	4083      	lsls	r3, r0
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	002e      	movs	r6, r5
 8003ac6:	6023      	str	r3, [r4, #0]
 8003ac8:	e7cc      	b.n	8003a64 <_svfiprintf_r+0x94>
 8003aca:	9b07      	ldr	r3, [sp, #28]
 8003acc:	1d19      	adds	r1, r3, #4
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	9107      	str	r1, [sp, #28]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	db01      	blt.n	8003ada <_svfiprintf_r+0x10a>
 8003ad6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003ad8:	e004      	b.n	8003ae4 <_svfiprintf_r+0x114>
 8003ada:	425b      	negs	r3, r3
 8003adc:	60e3      	str	r3, [r4, #12]
 8003ade:	2302      	movs	r3, #2
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	6023      	str	r3, [r4, #0]
 8003ae4:	782b      	ldrb	r3, [r5, #0]
 8003ae6:	2b2e      	cmp	r3, #46	@ 0x2e
 8003ae8:	d10c      	bne.n	8003b04 <_svfiprintf_r+0x134>
 8003aea:	786b      	ldrb	r3, [r5, #1]
 8003aec:	2b2a      	cmp	r3, #42	@ 0x2a
 8003aee:	d134      	bne.n	8003b5a <_svfiprintf_r+0x18a>
 8003af0:	9b07      	ldr	r3, [sp, #28]
 8003af2:	3502      	adds	r5, #2
 8003af4:	1d1a      	adds	r2, r3, #4
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	9207      	str	r2, [sp, #28]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	da01      	bge.n	8003b02 <_svfiprintf_r+0x132>
 8003afe:	2301      	movs	r3, #1
 8003b00:	425b      	negs	r3, r3
 8003b02:	9309      	str	r3, [sp, #36]	@ 0x24
 8003b04:	4e2d      	ldr	r6, [pc, #180]	@ (8003bbc <_svfiprintf_r+0x1ec>)
 8003b06:	2203      	movs	r2, #3
 8003b08:	0030      	movs	r0, r6
 8003b0a:	7829      	ldrb	r1, [r5, #0]
 8003b0c:	f000 f9fe 	bl	8003f0c <memchr>
 8003b10:	2800      	cmp	r0, #0
 8003b12:	d006      	beq.n	8003b22 <_svfiprintf_r+0x152>
 8003b14:	2340      	movs	r3, #64	@ 0x40
 8003b16:	1b80      	subs	r0, r0, r6
 8003b18:	4083      	lsls	r3, r0
 8003b1a:	6822      	ldr	r2, [r4, #0]
 8003b1c:	3501      	adds	r5, #1
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	6023      	str	r3, [r4, #0]
 8003b22:	7829      	ldrb	r1, [r5, #0]
 8003b24:	2206      	movs	r2, #6
 8003b26:	4826      	ldr	r0, [pc, #152]	@ (8003bc0 <_svfiprintf_r+0x1f0>)
 8003b28:	1c6e      	adds	r6, r5, #1
 8003b2a:	7621      	strb	r1, [r4, #24]
 8003b2c:	f000 f9ee 	bl	8003f0c <memchr>
 8003b30:	2800      	cmp	r0, #0
 8003b32:	d038      	beq.n	8003ba6 <_svfiprintf_r+0x1d6>
 8003b34:	4b23      	ldr	r3, [pc, #140]	@ (8003bc4 <_svfiprintf_r+0x1f4>)
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d122      	bne.n	8003b80 <_svfiprintf_r+0x1b0>
 8003b3a:	2207      	movs	r2, #7
 8003b3c:	9b07      	ldr	r3, [sp, #28]
 8003b3e:	3307      	adds	r3, #7
 8003b40:	4393      	bics	r3, r2
 8003b42:	3308      	adds	r3, #8
 8003b44:	9307      	str	r3, [sp, #28]
 8003b46:	6963      	ldr	r3, [r4, #20]
 8003b48:	9a04      	ldr	r2, [sp, #16]
 8003b4a:	189b      	adds	r3, r3, r2
 8003b4c:	6163      	str	r3, [r4, #20]
 8003b4e:	e762      	b.n	8003a16 <_svfiprintf_r+0x46>
 8003b50:	4343      	muls	r3, r0
 8003b52:	0035      	movs	r5, r6
 8003b54:	2101      	movs	r1, #1
 8003b56:	189b      	adds	r3, r3, r2
 8003b58:	e7a4      	b.n	8003aa4 <_svfiprintf_r+0xd4>
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	200a      	movs	r0, #10
 8003b5e:	0019      	movs	r1, r3
 8003b60:	3501      	adds	r5, #1
 8003b62:	6063      	str	r3, [r4, #4]
 8003b64:	782a      	ldrb	r2, [r5, #0]
 8003b66:	1c6e      	adds	r6, r5, #1
 8003b68:	3a30      	subs	r2, #48	@ 0x30
 8003b6a:	2a09      	cmp	r2, #9
 8003b6c:	d903      	bls.n	8003b76 <_svfiprintf_r+0x1a6>
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d0c8      	beq.n	8003b04 <_svfiprintf_r+0x134>
 8003b72:	9109      	str	r1, [sp, #36]	@ 0x24
 8003b74:	e7c6      	b.n	8003b04 <_svfiprintf_r+0x134>
 8003b76:	4341      	muls	r1, r0
 8003b78:	0035      	movs	r5, r6
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	1889      	adds	r1, r1, r2
 8003b7e:	e7f1      	b.n	8003b64 <_svfiprintf_r+0x194>
 8003b80:	aa07      	add	r2, sp, #28
 8003b82:	9200      	str	r2, [sp, #0]
 8003b84:	0021      	movs	r1, r4
 8003b86:	003a      	movs	r2, r7
 8003b88:	4b0f      	ldr	r3, [pc, #60]	@ (8003bc8 <_svfiprintf_r+0x1f8>)
 8003b8a:	9803      	ldr	r0, [sp, #12]
 8003b8c:	e000      	b.n	8003b90 <_svfiprintf_r+0x1c0>
 8003b8e:	bf00      	nop
 8003b90:	9004      	str	r0, [sp, #16]
 8003b92:	9b04      	ldr	r3, [sp, #16]
 8003b94:	3301      	adds	r3, #1
 8003b96:	d1d6      	bne.n	8003b46 <_svfiprintf_r+0x176>
 8003b98:	89bb      	ldrh	r3, [r7, #12]
 8003b9a:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8003b9c:	065b      	lsls	r3, r3, #25
 8003b9e:	d500      	bpl.n	8003ba2 <_svfiprintf_r+0x1d2>
 8003ba0:	e72c      	b.n	80039fc <_svfiprintf_r+0x2c>
 8003ba2:	b021      	add	sp, #132	@ 0x84
 8003ba4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ba6:	aa07      	add	r2, sp, #28
 8003ba8:	9200      	str	r2, [sp, #0]
 8003baa:	0021      	movs	r1, r4
 8003bac:	003a      	movs	r2, r7
 8003bae:	4b06      	ldr	r3, [pc, #24]	@ (8003bc8 <_svfiprintf_r+0x1f8>)
 8003bb0:	9803      	ldr	r0, [sp, #12]
 8003bb2:	f000 f87b 	bl	8003cac <_printf_i>
 8003bb6:	e7eb      	b.n	8003b90 <_svfiprintf_r+0x1c0>
 8003bb8:	080042f1 	.word	0x080042f1
 8003bbc:	080042f7 	.word	0x080042f7
 8003bc0:	080042fb 	.word	0x080042fb
 8003bc4:	00000000 	.word	0x00000000
 8003bc8:	08003911 	.word	0x08003911

08003bcc <_printf_common>:
 8003bcc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003bce:	0016      	movs	r6, r2
 8003bd0:	9301      	str	r3, [sp, #4]
 8003bd2:	688a      	ldr	r2, [r1, #8]
 8003bd4:	690b      	ldr	r3, [r1, #16]
 8003bd6:	000c      	movs	r4, r1
 8003bd8:	9000      	str	r0, [sp, #0]
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	da00      	bge.n	8003be0 <_printf_common+0x14>
 8003bde:	0013      	movs	r3, r2
 8003be0:	0022      	movs	r2, r4
 8003be2:	6033      	str	r3, [r6, #0]
 8003be4:	3243      	adds	r2, #67	@ 0x43
 8003be6:	7812      	ldrb	r2, [r2, #0]
 8003be8:	2a00      	cmp	r2, #0
 8003bea:	d001      	beq.n	8003bf0 <_printf_common+0x24>
 8003bec:	3301      	adds	r3, #1
 8003bee:	6033      	str	r3, [r6, #0]
 8003bf0:	6823      	ldr	r3, [r4, #0]
 8003bf2:	069b      	lsls	r3, r3, #26
 8003bf4:	d502      	bpl.n	8003bfc <_printf_common+0x30>
 8003bf6:	6833      	ldr	r3, [r6, #0]
 8003bf8:	3302      	adds	r3, #2
 8003bfa:	6033      	str	r3, [r6, #0]
 8003bfc:	6822      	ldr	r2, [r4, #0]
 8003bfe:	2306      	movs	r3, #6
 8003c00:	0015      	movs	r5, r2
 8003c02:	401d      	ands	r5, r3
 8003c04:	421a      	tst	r2, r3
 8003c06:	d027      	beq.n	8003c58 <_printf_common+0x8c>
 8003c08:	0023      	movs	r3, r4
 8003c0a:	3343      	adds	r3, #67	@ 0x43
 8003c0c:	781b      	ldrb	r3, [r3, #0]
 8003c0e:	1e5a      	subs	r2, r3, #1
 8003c10:	4193      	sbcs	r3, r2
 8003c12:	6822      	ldr	r2, [r4, #0]
 8003c14:	0692      	lsls	r2, r2, #26
 8003c16:	d430      	bmi.n	8003c7a <_printf_common+0xae>
 8003c18:	0022      	movs	r2, r4
 8003c1a:	9901      	ldr	r1, [sp, #4]
 8003c1c:	9800      	ldr	r0, [sp, #0]
 8003c1e:	9d08      	ldr	r5, [sp, #32]
 8003c20:	3243      	adds	r2, #67	@ 0x43
 8003c22:	47a8      	blx	r5
 8003c24:	3001      	adds	r0, #1
 8003c26:	d025      	beq.n	8003c74 <_printf_common+0xa8>
 8003c28:	2206      	movs	r2, #6
 8003c2a:	6823      	ldr	r3, [r4, #0]
 8003c2c:	2500      	movs	r5, #0
 8003c2e:	4013      	ands	r3, r2
 8003c30:	2b04      	cmp	r3, #4
 8003c32:	d105      	bne.n	8003c40 <_printf_common+0x74>
 8003c34:	6833      	ldr	r3, [r6, #0]
 8003c36:	68e5      	ldr	r5, [r4, #12]
 8003c38:	1aed      	subs	r5, r5, r3
 8003c3a:	43eb      	mvns	r3, r5
 8003c3c:	17db      	asrs	r3, r3, #31
 8003c3e:	401d      	ands	r5, r3
 8003c40:	68a3      	ldr	r3, [r4, #8]
 8003c42:	6922      	ldr	r2, [r4, #16]
 8003c44:	4293      	cmp	r3, r2
 8003c46:	dd01      	ble.n	8003c4c <_printf_common+0x80>
 8003c48:	1a9b      	subs	r3, r3, r2
 8003c4a:	18ed      	adds	r5, r5, r3
 8003c4c:	2600      	movs	r6, #0
 8003c4e:	42b5      	cmp	r5, r6
 8003c50:	d120      	bne.n	8003c94 <_printf_common+0xc8>
 8003c52:	2000      	movs	r0, #0
 8003c54:	e010      	b.n	8003c78 <_printf_common+0xac>
 8003c56:	3501      	adds	r5, #1
 8003c58:	68e3      	ldr	r3, [r4, #12]
 8003c5a:	6832      	ldr	r2, [r6, #0]
 8003c5c:	1a9b      	subs	r3, r3, r2
 8003c5e:	42ab      	cmp	r3, r5
 8003c60:	ddd2      	ble.n	8003c08 <_printf_common+0x3c>
 8003c62:	0022      	movs	r2, r4
 8003c64:	2301      	movs	r3, #1
 8003c66:	9901      	ldr	r1, [sp, #4]
 8003c68:	9800      	ldr	r0, [sp, #0]
 8003c6a:	9f08      	ldr	r7, [sp, #32]
 8003c6c:	3219      	adds	r2, #25
 8003c6e:	47b8      	blx	r7
 8003c70:	3001      	adds	r0, #1
 8003c72:	d1f0      	bne.n	8003c56 <_printf_common+0x8a>
 8003c74:	2001      	movs	r0, #1
 8003c76:	4240      	negs	r0, r0
 8003c78:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003c7a:	2030      	movs	r0, #48	@ 0x30
 8003c7c:	18e1      	adds	r1, r4, r3
 8003c7e:	3143      	adds	r1, #67	@ 0x43
 8003c80:	7008      	strb	r0, [r1, #0]
 8003c82:	0021      	movs	r1, r4
 8003c84:	1c5a      	adds	r2, r3, #1
 8003c86:	3145      	adds	r1, #69	@ 0x45
 8003c88:	7809      	ldrb	r1, [r1, #0]
 8003c8a:	18a2      	adds	r2, r4, r2
 8003c8c:	3243      	adds	r2, #67	@ 0x43
 8003c8e:	3302      	adds	r3, #2
 8003c90:	7011      	strb	r1, [r2, #0]
 8003c92:	e7c1      	b.n	8003c18 <_printf_common+0x4c>
 8003c94:	0022      	movs	r2, r4
 8003c96:	2301      	movs	r3, #1
 8003c98:	9901      	ldr	r1, [sp, #4]
 8003c9a:	9800      	ldr	r0, [sp, #0]
 8003c9c:	9f08      	ldr	r7, [sp, #32]
 8003c9e:	321a      	adds	r2, #26
 8003ca0:	47b8      	blx	r7
 8003ca2:	3001      	adds	r0, #1
 8003ca4:	d0e6      	beq.n	8003c74 <_printf_common+0xa8>
 8003ca6:	3601      	adds	r6, #1
 8003ca8:	e7d1      	b.n	8003c4e <_printf_common+0x82>
	...

08003cac <_printf_i>:
 8003cac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cae:	b08b      	sub	sp, #44	@ 0x2c
 8003cb0:	9206      	str	r2, [sp, #24]
 8003cb2:	000a      	movs	r2, r1
 8003cb4:	3243      	adds	r2, #67	@ 0x43
 8003cb6:	9307      	str	r3, [sp, #28]
 8003cb8:	9005      	str	r0, [sp, #20]
 8003cba:	9203      	str	r2, [sp, #12]
 8003cbc:	7e0a      	ldrb	r2, [r1, #24]
 8003cbe:	000c      	movs	r4, r1
 8003cc0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8003cc2:	2a78      	cmp	r2, #120	@ 0x78
 8003cc4:	d809      	bhi.n	8003cda <_printf_i+0x2e>
 8003cc6:	2a62      	cmp	r2, #98	@ 0x62
 8003cc8:	d80b      	bhi.n	8003ce2 <_printf_i+0x36>
 8003cca:	2a00      	cmp	r2, #0
 8003ccc:	d100      	bne.n	8003cd0 <_printf_i+0x24>
 8003cce:	e0ba      	b.n	8003e46 <_printf_i+0x19a>
 8003cd0:	497a      	ldr	r1, [pc, #488]	@ (8003ebc <_printf_i+0x210>)
 8003cd2:	9104      	str	r1, [sp, #16]
 8003cd4:	2a58      	cmp	r2, #88	@ 0x58
 8003cd6:	d100      	bne.n	8003cda <_printf_i+0x2e>
 8003cd8:	e08e      	b.n	8003df8 <_printf_i+0x14c>
 8003cda:	0025      	movs	r5, r4
 8003cdc:	3542      	adds	r5, #66	@ 0x42
 8003cde:	702a      	strb	r2, [r5, #0]
 8003ce0:	e022      	b.n	8003d28 <_printf_i+0x7c>
 8003ce2:	0010      	movs	r0, r2
 8003ce4:	3863      	subs	r0, #99	@ 0x63
 8003ce6:	2815      	cmp	r0, #21
 8003ce8:	d8f7      	bhi.n	8003cda <_printf_i+0x2e>
 8003cea:	f7fc fa17 	bl	800011c <__gnu_thumb1_case_shi>
 8003cee:	0016      	.short	0x0016
 8003cf0:	fff6001f 	.word	0xfff6001f
 8003cf4:	fff6fff6 	.word	0xfff6fff6
 8003cf8:	001ffff6 	.word	0x001ffff6
 8003cfc:	fff6fff6 	.word	0xfff6fff6
 8003d00:	fff6fff6 	.word	0xfff6fff6
 8003d04:	0036009f 	.word	0x0036009f
 8003d08:	fff6007e 	.word	0xfff6007e
 8003d0c:	00b0fff6 	.word	0x00b0fff6
 8003d10:	0036fff6 	.word	0x0036fff6
 8003d14:	fff6fff6 	.word	0xfff6fff6
 8003d18:	0082      	.short	0x0082
 8003d1a:	0025      	movs	r5, r4
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	3542      	adds	r5, #66	@ 0x42
 8003d20:	1d11      	adds	r1, r2, #4
 8003d22:	6019      	str	r1, [r3, #0]
 8003d24:	6813      	ldr	r3, [r2, #0]
 8003d26:	702b      	strb	r3, [r5, #0]
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e09e      	b.n	8003e6a <_printf_i+0x1be>
 8003d2c:	6818      	ldr	r0, [r3, #0]
 8003d2e:	6809      	ldr	r1, [r1, #0]
 8003d30:	1d02      	adds	r2, r0, #4
 8003d32:	060d      	lsls	r5, r1, #24
 8003d34:	d50b      	bpl.n	8003d4e <_printf_i+0xa2>
 8003d36:	6806      	ldr	r6, [r0, #0]
 8003d38:	601a      	str	r2, [r3, #0]
 8003d3a:	2e00      	cmp	r6, #0
 8003d3c:	da03      	bge.n	8003d46 <_printf_i+0x9a>
 8003d3e:	232d      	movs	r3, #45	@ 0x2d
 8003d40:	9a03      	ldr	r2, [sp, #12]
 8003d42:	4276      	negs	r6, r6
 8003d44:	7013      	strb	r3, [r2, #0]
 8003d46:	4b5d      	ldr	r3, [pc, #372]	@ (8003ebc <_printf_i+0x210>)
 8003d48:	270a      	movs	r7, #10
 8003d4a:	9304      	str	r3, [sp, #16]
 8003d4c:	e018      	b.n	8003d80 <_printf_i+0xd4>
 8003d4e:	6806      	ldr	r6, [r0, #0]
 8003d50:	601a      	str	r2, [r3, #0]
 8003d52:	0649      	lsls	r1, r1, #25
 8003d54:	d5f1      	bpl.n	8003d3a <_printf_i+0x8e>
 8003d56:	b236      	sxth	r6, r6
 8003d58:	e7ef      	b.n	8003d3a <_printf_i+0x8e>
 8003d5a:	6808      	ldr	r0, [r1, #0]
 8003d5c:	6819      	ldr	r1, [r3, #0]
 8003d5e:	c940      	ldmia	r1!, {r6}
 8003d60:	0605      	lsls	r5, r0, #24
 8003d62:	d402      	bmi.n	8003d6a <_printf_i+0xbe>
 8003d64:	0640      	lsls	r0, r0, #25
 8003d66:	d500      	bpl.n	8003d6a <_printf_i+0xbe>
 8003d68:	b2b6      	uxth	r6, r6
 8003d6a:	6019      	str	r1, [r3, #0]
 8003d6c:	4b53      	ldr	r3, [pc, #332]	@ (8003ebc <_printf_i+0x210>)
 8003d6e:	270a      	movs	r7, #10
 8003d70:	9304      	str	r3, [sp, #16]
 8003d72:	2a6f      	cmp	r2, #111	@ 0x6f
 8003d74:	d100      	bne.n	8003d78 <_printf_i+0xcc>
 8003d76:	3f02      	subs	r7, #2
 8003d78:	0023      	movs	r3, r4
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	3343      	adds	r3, #67	@ 0x43
 8003d7e:	701a      	strb	r2, [r3, #0]
 8003d80:	6863      	ldr	r3, [r4, #4]
 8003d82:	60a3      	str	r3, [r4, #8]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	db06      	blt.n	8003d96 <_printf_i+0xea>
 8003d88:	2104      	movs	r1, #4
 8003d8a:	6822      	ldr	r2, [r4, #0]
 8003d8c:	9d03      	ldr	r5, [sp, #12]
 8003d8e:	438a      	bics	r2, r1
 8003d90:	6022      	str	r2, [r4, #0]
 8003d92:	4333      	orrs	r3, r6
 8003d94:	d00c      	beq.n	8003db0 <_printf_i+0x104>
 8003d96:	9d03      	ldr	r5, [sp, #12]
 8003d98:	0030      	movs	r0, r6
 8003d9a:	0039      	movs	r1, r7
 8003d9c:	f7fc fa4e 	bl	800023c <__aeabi_uidivmod>
 8003da0:	9b04      	ldr	r3, [sp, #16]
 8003da2:	3d01      	subs	r5, #1
 8003da4:	5c5b      	ldrb	r3, [r3, r1]
 8003da6:	702b      	strb	r3, [r5, #0]
 8003da8:	0033      	movs	r3, r6
 8003daa:	0006      	movs	r6, r0
 8003dac:	429f      	cmp	r7, r3
 8003dae:	d9f3      	bls.n	8003d98 <_printf_i+0xec>
 8003db0:	2f08      	cmp	r7, #8
 8003db2:	d109      	bne.n	8003dc8 <_printf_i+0x11c>
 8003db4:	6823      	ldr	r3, [r4, #0]
 8003db6:	07db      	lsls	r3, r3, #31
 8003db8:	d506      	bpl.n	8003dc8 <_printf_i+0x11c>
 8003dba:	6862      	ldr	r2, [r4, #4]
 8003dbc:	6923      	ldr	r3, [r4, #16]
 8003dbe:	429a      	cmp	r2, r3
 8003dc0:	dc02      	bgt.n	8003dc8 <_printf_i+0x11c>
 8003dc2:	2330      	movs	r3, #48	@ 0x30
 8003dc4:	3d01      	subs	r5, #1
 8003dc6:	702b      	strb	r3, [r5, #0]
 8003dc8:	9b03      	ldr	r3, [sp, #12]
 8003dca:	1b5b      	subs	r3, r3, r5
 8003dcc:	6123      	str	r3, [r4, #16]
 8003dce:	9b07      	ldr	r3, [sp, #28]
 8003dd0:	0021      	movs	r1, r4
 8003dd2:	9300      	str	r3, [sp, #0]
 8003dd4:	9805      	ldr	r0, [sp, #20]
 8003dd6:	9b06      	ldr	r3, [sp, #24]
 8003dd8:	aa09      	add	r2, sp, #36	@ 0x24
 8003dda:	f7ff fef7 	bl	8003bcc <_printf_common>
 8003dde:	3001      	adds	r0, #1
 8003de0:	d148      	bne.n	8003e74 <_printf_i+0x1c8>
 8003de2:	2001      	movs	r0, #1
 8003de4:	4240      	negs	r0, r0
 8003de6:	b00b      	add	sp, #44	@ 0x2c
 8003de8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003dea:	2220      	movs	r2, #32
 8003dec:	6809      	ldr	r1, [r1, #0]
 8003dee:	430a      	orrs	r2, r1
 8003df0:	6022      	str	r2, [r4, #0]
 8003df2:	2278      	movs	r2, #120	@ 0x78
 8003df4:	4932      	ldr	r1, [pc, #200]	@ (8003ec0 <_printf_i+0x214>)
 8003df6:	9104      	str	r1, [sp, #16]
 8003df8:	0021      	movs	r1, r4
 8003dfa:	3145      	adds	r1, #69	@ 0x45
 8003dfc:	700a      	strb	r2, [r1, #0]
 8003dfe:	6819      	ldr	r1, [r3, #0]
 8003e00:	6822      	ldr	r2, [r4, #0]
 8003e02:	c940      	ldmia	r1!, {r6}
 8003e04:	0610      	lsls	r0, r2, #24
 8003e06:	d402      	bmi.n	8003e0e <_printf_i+0x162>
 8003e08:	0650      	lsls	r0, r2, #25
 8003e0a:	d500      	bpl.n	8003e0e <_printf_i+0x162>
 8003e0c:	b2b6      	uxth	r6, r6
 8003e0e:	6019      	str	r1, [r3, #0]
 8003e10:	07d3      	lsls	r3, r2, #31
 8003e12:	d502      	bpl.n	8003e1a <_printf_i+0x16e>
 8003e14:	2320      	movs	r3, #32
 8003e16:	4313      	orrs	r3, r2
 8003e18:	6023      	str	r3, [r4, #0]
 8003e1a:	2e00      	cmp	r6, #0
 8003e1c:	d001      	beq.n	8003e22 <_printf_i+0x176>
 8003e1e:	2710      	movs	r7, #16
 8003e20:	e7aa      	b.n	8003d78 <_printf_i+0xcc>
 8003e22:	2220      	movs	r2, #32
 8003e24:	6823      	ldr	r3, [r4, #0]
 8003e26:	4393      	bics	r3, r2
 8003e28:	6023      	str	r3, [r4, #0]
 8003e2a:	e7f8      	b.n	8003e1e <_printf_i+0x172>
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	680d      	ldr	r5, [r1, #0]
 8003e30:	1d10      	adds	r0, r2, #4
 8003e32:	6949      	ldr	r1, [r1, #20]
 8003e34:	6018      	str	r0, [r3, #0]
 8003e36:	6813      	ldr	r3, [r2, #0]
 8003e38:	062e      	lsls	r6, r5, #24
 8003e3a:	d501      	bpl.n	8003e40 <_printf_i+0x194>
 8003e3c:	6019      	str	r1, [r3, #0]
 8003e3e:	e002      	b.n	8003e46 <_printf_i+0x19a>
 8003e40:	066d      	lsls	r5, r5, #25
 8003e42:	d5fb      	bpl.n	8003e3c <_printf_i+0x190>
 8003e44:	8019      	strh	r1, [r3, #0]
 8003e46:	2300      	movs	r3, #0
 8003e48:	9d03      	ldr	r5, [sp, #12]
 8003e4a:	6123      	str	r3, [r4, #16]
 8003e4c:	e7bf      	b.n	8003dce <_printf_i+0x122>
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	1d11      	adds	r1, r2, #4
 8003e52:	6019      	str	r1, [r3, #0]
 8003e54:	6815      	ldr	r5, [r2, #0]
 8003e56:	2100      	movs	r1, #0
 8003e58:	0028      	movs	r0, r5
 8003e5a:	6862      	ldr	r2, [r4, #4]
 8003e5c:	f000 f856 	bl	8003f0c <memchr>
 8003e60:	2800      	cmp	r0, #0
 8003e62:	d001      	beq.n	8003e68 <_printf_i+0x1bc>
 8003e64:	1b40      	subs	r0, r0, r5
 8003e66:	6060      	str	r0, [r4, #4]
 8003e68:	6863      	ldr	r3, [r4, #4]
 8003e6a:	6123      	str	r3, [r4, #16]
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	9a03      	ldr	r2, [sp, #12]
 8003e70:	7013      	strb	r3, [r2, #0]
 8003e72:	e7ac      	b.n	8003dce <_printf_i+0x122>
 8003e74:	002a      	movs	r2, r5
 8003e76:	6923      	ldr	r3, [r4, #16]
 8003e78:	9906      	ldr	r1, [sp, #24]
 8003e7a:	9805      	ldr	r0, [sp, #20]
 8003e7c:	9d07      	ldr	r5, [sp, #28]
 8003e7e:	47a8      	blx	r5
 8003e80:	3001      	adds	r0, #1
 8003e82:	d0ae      	beq.n	8003de2 <_printf_i+0x136>
 8003e84:	6823      	ldr	r3, [r4, #0]
 8003e86:	079b      	lsls	r3, r3, #30
 8003e88:	d415      	bmi.n	8003eb6 <_printf_i+0x20a>
 8003e8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003e8c:	68e0      	ldr	r0, [r4, #12]
 8003e8e:	4298      	cmp	r0, r3
 8003e90:	daa9      	bge.n	8003de6 <_printf_i+0x13a>
 8003e92:	0018      	movs	r0, r3
 8003e94:	e7a7      	b.n	8003de6 <_printf_i+0x13a>
 8003e96:	0022      	movs	r2, r4
 8003e98:	2301      	movs	r3, #1
 8003e9a:	9906      	ldr	r1, [sp, #24]
 8003e9c:	9805      	ldr	r0, [sp, #20]
 8003e9e:	9e07      	ldr	r6, [sp, #28]
 8003ea0:	3219      	adds	r2, #25
 8003ea2:	47b0      	blx	r6
 8003ea4:	3001      	adds	r0, #1
 8003ea6:	d09c      	beq.n	8003de2 <_printf_i+0x136>
 8003ea8:	3501      	adds	r5, #1
 8003eaa:	68e3      	ldr	r3, [r4, #12]
 8003eac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003eae:	1a9b      	subs	r3, r3, r2
 8003eb0:	42ab      	cmp	r3, r5
 8003eb2:	dcf0      	bgt.n	8003e96 <_printf_i+0x1ea>
 8003eb4:	e7e9      	b.n	8003e8a <_printf_i+0x1de>
 8003eb6:	2500      	movs	r5, #0
 8003eb8:	e7f7      	b.n	8003eaa <_printf_i+0x1fe>
 8003eba:	46c0      	nop			@ (mov r8, r8)
 8003ebc:	08004302 	.word	0x08004302
 8003ec0:	08004313 	.word	0x08004313

08003ec4 <memmove>:
 8003ec4:	b510      	push	{r4, lr}
 8003ec6:	4288      	cmp	r0, r1
 8003ec8:	d902      	bls.n	8003ed0 <memmove+0xc>
 8003eca:	188b      	adds	r3, r1, r2
 8003ecc:	4298      	cmp	r0, r3
 8003ece:	d308      	bcc.n	8003ee2 <memmove+0x1e>
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d007      	beq.n	8003ee6 <memmove+0x22>
 8003ed6:	5ccc      	ldrb	r4, [r1, r3]
 8003ed8:	54c4      	strb	r4, [r0, r3]
 8003eda:	3301      	adds	r3, #1
 8003edc:	e7f9      	b.n	8003ed2 <memmove+0xe>
 8003ede:	5c8b      	ldrb	r3, [r1, r2]
 8003ee0:	5483      	strb	r3, [r0, r2]
 8003ee2:	3a01      	subs	r2, #1
 8003ee4:	d2fb      	bcs.n	8003ede <memmove+0x1a>
 8003ee6:	bd10      	pop	{r4, pc}

08003ee8 <_sbrk_r>:
 8003ee8:	2300      	movs	r3, #0
 8003eea:	b570      	push	{r4, r5, r6, lr}
 8003eec:	4d06      	ldr	r5, [pc, #24]	@ (8003f08 <_sbrk_r+0x20>)
 8003eee:	0004      	movs	r4, r0
 8003ef0:	0008      	movs	r0, r1
 8003ef2:	602b      	str	r3, [r5, #0]
 8003ef4:	f7fd f908 	bl	8001108 <_sbrk>
 8003ef8:	1c43      	adds	r3, r0, #1
 8003efa:	d103      	bne.n	8003f04 <_sbrk_r+0x1c>
 8003efc:	682b      	ldr	r3, [r5, #0]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d000      	beq.n	8003f04 <_sbrk_r+0x1c>
 8003f02:	6023      	str	r3, [r4, #0]
 8003f04:	bd70      	pop	{r4, r5, r6, pc}
 8003f06:	46c0      	nop			@ (mov r8, r8)
 8003f08:	200006c0 	.word	0x200006c0

08003f0c <memchr>:
 8003f0c:	b2c9      	uxtb	r1, r1
 8003f0e:	1882      	adds	r2, r0, r2
 8003f10:	4290      	cmp	r0, r2
 8003f12:	d101      	bne.n	8003f18 <memchr+0xc>
 8003f14:	2000      	movs	r0, #0
 8003f16:	4770      	bx	lr
 8003f18:	7803      	ldrb	r3, [r0, #0]
 8003f1a:	428b      	cmp	r3, r1
 8003f1c:	d0fb      	beq.n	8003f16 <memchr+0xa>
 8003f1e:	3001      	adds	r0, #1
 8003f20:	e7f6      	b.n	8003f10 <memchr+0x4>

08003f22 <memcpy>:
 8003f22:	2300      	movs	r3, #0
 8003f24:	b510      	push	{r4, lr}
 8003f26:	429a      	cmp	r2, r3
 8003f28:	d100      	bne.n	8003f2c <memcpy+0xa>
 8003f2a:	bd10      	pop	{r4, pc}
 8003f2c:	5ccc      	ldrb	r4, [r1, r3]
 8003f2e:	54c4      	strb	r4, [r0, r3]
 8003f30:	3301      	adds	r3, #1
 8003f32:	e7f8      	b.n	8003f26 <memcpy+0x4>

08003f34 <_realloc_r>:
 8003f34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003f36:	0006      	movs	r6, r0
 8003f38:	000c      	movs	r4, r1
 8003f3a:	0015      	movs	r5, r2
 8003f3c:	2900      	cmp	r1, #0
 8003f3e:	d105      	bne.n	8003f4c <_realloc_r+0x18>
 8003f40:	0011      	movs	r1, r2
 8003f42:	f7ff fc55 	bl	80037f0 <_malloc_r>
 8003f46:	0004      	movs	r4, r0
 8003f48:	0020      	movs	r0, r4
 8003f4a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003f4c:	2a00      	cmp	r2, #0
 8003f4e:	d103      	bne.n	8003f58 <_realloc_r+0x24>
 8003f50:	f7ff fbe2 	bl	8003718 <_free_r>
 8003f54:	002c      	movs	r4, r5
 8003f56:	e7f7      	b.n	8003f48 <_realloc_r+0x14>
 8003f58:	f000 f81c 	bl	8003f94 <_malloc_usable_size_r>
 8003f5c:	0007      	movs	r7, r0
 8003f5e:	4285      	cmp	r5, r0
 8003f60:	d802      	bhi.n	8003f68 <_realloc_r+0x34>
 8003f62:	0843      	lsrs	r3, r0, #1
 8003f64:	42ab      	cmp	r3, r5
 8003f66:	d3ef      	bcc.n	8003f48 <_realloc_r+0x14>
 8003f68:	0029      	movs	r1, r5
 8003f6a:	0030      	movs	r0, r6
 8003f6c:	f7ff fc40 	bl	80037f0 <_malloc_r>
 8003f70:	9001      	str	r0, [sp, #4]
 8003f72:	2800      	cmp	r0, #0
 8003f74:	d101      	bne.n	8003f7a <_realloc_r+0x46>
 8003f76:	9c01      	ldr	r4, [sp, #4]
 8003f78:	e7e6      	b.n	8003f48 <_realloc_r+0x14>
 8003f7a:	002a      	movs	r2, r5
 8003f7c:	42bd      	cmp	r5, r7
 8003f7e:	d900      	bls.n	8003f82 <_realloc_r+0x4e>
 8003f80:	003a      	movs	r2, r7
 8003f82:	0021      	movs	r1, r4
 8003f84:	9801      	ldr	r0, [sp, #4]
 8003f86:	f7ff ffcc 	bl	8003f22 <memcpy>
 8003f8a:	0021      	movs	r1, r4
 8003f8c:	0030      	movs	r0, r6
 8003f8e:	f7ff fbc3 	bl	8003718 <_free_r>
 8003f92:	e7f0      	b.n	8003f76 <_realloc_r+0x42>

08003f94 <_malloc_usable_size_r>:
 8003f94:	1f0b      	subs	r3, r1, #4
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	1f18      	subs	r0, r3, #4
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	da01      	bge.n	8003fa2 <_malloc_usable_size_r+0xe>
 8003f9e:	580b      	ldr	r3, [r1, r0]
 8003fa0:	18c0      	adds	r0, r0, r3
 8003fa2:	4770      	bx	lr

08003fa4 <_init>:
 8003fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fa6:	46c0      	nop			@ (mov r8, r8)
 8003fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003faa:	bc08      	pop	{r3}
 8003fac:	469e      	mov	lr, r3
 8003fae:	4770      	bx	lr

08003fb0 <_fini>:
 8003fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fb2:	46c0      	nop			@ (mov r8, r8)
 8003fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fb6:	bc08      	pop	{r3}
 8003fb8:	469e      	mov	lr, r3
 8003fba:	4770      	bx	lr
